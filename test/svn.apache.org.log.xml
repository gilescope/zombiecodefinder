<?xml version="1.0" encoding="UTF-8"?>
<log>
<logentry
   revision="1731300">
<author>kotkov</author>
<date>2016-02-19T22:11:11.398612Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/utf-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/log_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/cl-log.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/log-cmd.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_utf_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/utf8proc.c</path>
</paths>
<msg>Make svn log --search case-insensitive.

Use utf8proc to do the normalization and locale-independent case folding
(UTF8PROC_CASEFOLD) for both the search pattern and the input strings.

Related discussion is in http://svn.haxx.se/dev/archive-2013-04/0374.shtml
(Subject: "log --search test failures on trunk and 1.8.x").

* subversion/include/private/svn_utf_private.h
  (svn_utf__normalize): Add new boolean argument to perform case folding.

* subversion/libsvn_subr/utf8proc.c
  (normalize_cstring): Add new boolean argument to perform case folding.
   In case it is non-zero, set the flags to UTF8PROC_CASEFOLD when
   doing the Unicode decomposition.
  (svn_utf__normalize): Pass new argument to normalize_cstring().
  (svn_utf__is_normalized): Adjust call to normalize_cstring().

* subversion/libsvn_repos/dump.c
  (extract_mergeinfo_paths, verify_mergeinfo_normalization,
   check_name_collision): Update callers of svn_utf__normalize().

* subversion/svn/cl-log.h
  (): Include svn_string_private for svn_membuf_t.
  (svn_cl__log_receiver_baton): Add an svn_membuf_t for the case folding
   and normalization purposes.

* subversion/svn/log-cmd.c
  (): Include svn_utf_private.h.
  (match): New helper that normalizes, folds case of the input, and matches
   it against the specified pattern.
  (match_search_pattern): Now accepts an svn_membuf_t.  Call the new helper
   function to perform the pattern matching.
  (svn_cl__log_entry_receiver, svn_cl__log_entry_receiver_xml): Pass the
   svn_membuf_t from the baton when calling match_search_pattern().
  (svn_cl__log): Initialize the svn_membuf_t in the log receiver baton.

* subversion/svn/svn.c
  (): Include svn_utf_private.h.
  (sub_main): Normalize and fold case of --search and --search-and arguments.

* subversion/tests/cmdline/log_tests.py
  (log_search): Adjust expectations, since --search is now case-insensitive.

* subversion/tests/libsvn_subr/utf-test.c
  (test_utf_normalize): New test for svn_utf__normalize().
  (test_funcs): Add new test.
</msg>
</logentry>
<logentry
   revision="1731274">
<author>stsp</author>
<date>2016-02-19T17:09:33.305386Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Add a unique conflict option ID for accepting the current state of the
working copy when resolving a tree conflict. Previously, this resolution
was mapped to 'merged text'.

* subversion/include/svn_client.h
  (svn_client_conflict_option_accept_current_wc_state): New option ID.

* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict, svn_client_conflict_tree_get_resolution_options): Use
   the new option ID.
  (svn_client_conflict_tree_resolve_by_id): Provide a backwards compat hack
   just in case an API user needs it.
</msg>
</logentry>
<logentry
   revision="1731270">
<author>stsp</author>
<date>2016-02-19T16:19:36.548857Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_raise_moved_away): Remove unused variable.
</msg>
</logentry>
<logentry
   revision="1731267">
<author>stsp</author>
<date>2016-02-19T16:12:30.847717Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Stop calling svn_wc__resolve_conflicts() to resolve
   otherwise unhandled tree conflicts. Use svn_wc__del_tree_conflict() instead.
   With this change, all tree conflicts are resolved independently of the legacy
   conflict resolver implementation. Text and property conflicts still use it
   but for now there is no reason to change that.
</msg>
</logentry>
<logentry
   revision="1731255">
<author>stsp</author>
<date>2016-02-19T15:23:22.190543Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Error out if no resolution strategy matched and
   the chosen resolution is something other than accepting the current
   working copy state.
</msg>
</logentry>
<logentry
   revision="1731250">
<author>stsp</author>
<date>2016-02-19T14:36:42.171993Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Really perform updates of moved-away nodes with the new conflict resolver.

* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Check for the right option_id. The resolver already
   uses svn_client_conflict_option_update_move_destination internally, instead
   of svn_client_conflict_option_working_text_where_conflicted.
   With this change, updates of moved-away nodes take the new code path.

* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_moved_away_node): We must mark the conflict
   resolved manually because svn_wc__db_update_moved_away_conflict_victim()
   does not mark the conflict resolved for us.
</msg>
</logentry>
<logentry
   revision="1731237">
<author>stsp</author>
<date>2016-02-19T12:42:54.210788Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Revert r1731226. The extra check added in that revision is not necessary
because the called function already performs the same check.
</msg>
</logentry>
<logentry
   revision="1731236">
<author>stsp</author>
<date>2016-02-19T12:40:42.055285Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_wc_private.h</path>
</paths>
<msg>Fix test fallout caused by recent conflict resolver changes.

* subversion/include/private/svn_wc_private.h
  (svn_wc__conflict_tree_update_break_moved_away): Add 'moved-away' to the
   list of valid local changes for this function.

* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_break_moved_away): Allow 'moved-away'.
</msg>
</logentry>
<logentry
   revision="1731232">
<author>stsp</author>
<date>2016-02-19T12:00:25.005359Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Follow-up to r1731231:

* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Fix condition which checks if a local move vs
   incoming edit conflict is resolved to the current working copy state.
</msg>
</logentry>
<logentry
   revision="1731231">
<author>stsp</author>
<date>2016-02-19T11:56:28.968041Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): If a local move vs incoming edit conflict is
   resolved to the current working copy state, then break the move.
   Matches old conflict resolver behaviour.
</msg>
</logentry>
<logentry
   revision="1731226">
<author>stsp</author>
<date>2016-02-19T11:47:20.378941Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>[ Reverted in r1731237. ]

* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Only break moves if incoming change is 'replace'
   rather than 'delete'. Matches the behaviour of old resolver more closely.
</msg>
</logentry>
<logentry
   revision="1731220">
<author>stsp</author>
<date>2016-02-19T10:53:32.822230Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_wc_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Provide another private libsvn_wc API function for resolving a tree conflict.

This function resolves a 'local moved-away vs. incoming edit' conflict
upon update/switch. Use this new API from libsvn_client's new conflict
resolver instead of calling the generic svn_wc__resolve_conflicts()
function for this conflict.

* subversion/include/private/svn_wc_private.h
  (svn_wc__conflict_tree_update_moved_away_node): Declare and document.

* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Call svn_wc__conflict_tree_update_moved_away_node()
   if appropriate for the tree conflict and its resolution option.
   Break single if-statement into several if-else-if for readability.

* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_moved_away_node): Implement, based on existing
   code from resolve_tree_conflict_on_node().
</msg>
</logentry>
<logentry
   revision="1731163">
<author>stefan2</author>
<date>2016-02-18T22:33:19.314900Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_repos.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Complete the work on the svn_repos_get_logs4 to svn_repos_get_logs5
migration by publishing the new API.

We don't deprecate the old one until the callers have been updated
and the FS implementations have been finalized so we have the full
picture.

* subversion/include/svn_repos.h
  (svn_repos_path_change_t,
   svn_repos_path_change_receiver_t,
   svn_repos_log_entry_t,
   svn_repos_log_entry_receiver_t,
   svn_repos_get_logs5): Publish and document the new API.  Names and
                         signatures are taken from the former "__"
                         definitions in log.c.

* subversion/libsvn_repos/log.c
  (svn_repos__path_change_t,
   svn_repos__path_change_receiver_t,
   svn_repos__log_entry_t,
   svn_repos__log_entry_receiver_t): Remove here.
  (log_callbacks_t,
   fill_log_entry,
   interesting_merge_baton_t,
   send_log,
   handle_merged_revisions): Update type references.
  (svn_repos__get_logs5): Renamed to ...
  (svn_repos_get_logs5): ... this and updated signature.
  (log4_path_change_receiver,
   log4_entry_receiver): Update type references.
  (svn_repos_get_logs4): Update caller.</msg>
</logentry>
<logentry
   revision="1731162">
<author>stefan2</author>
<date>2016-02-18T22:14:03.390451Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>* subversion/libsvn_repos/log.c
  (detect_changed): Replace obsolete comment. No functional change.</msg>
</logentry>
<logentry
   revision="1731160">
<author>stefan2</author>
<date>2016-02-18T22:11:36.995447Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Change some confusing pool usage.

Found by: rhuijben

* subversion/libsvn_repos/log.c
  (fs_mergeinfo_changed): Tighten the memory pool usage. The SCRATCH_POOL
                          would actually live longer than we need it to.</msg>
</logentry>
<logentry
   revision="1731159">
<author>stefan2</author>
<date>2016-02-18T22:07:57.114498Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Repos-layer APIs never return incomplete log info.

* subversion/libsvn_repos/log.c
  (detect_changed): The copy-from information is always known after
                    we looked it up.
</msg>
</logentry>
<logentry
   revision="1730945">
<author>stsp</author>
<date>2016-02-17T21:06:37.866876Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_break_moved_away,
   svn_wc__conflict_tree_update_raise_moved_away): Fix indentation.
</msg>
</logentry>
<logentry
   revision="1730944">
<author>stsp</author>
<date>2016-02-17T21:05:14.935667Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_raise_moved_away): Ensure that conflict action
   has the expected value.
</msg>
</logentry>
<logentry
   revision="1730943">
<author>stsp</author>
<date>2016-02-17T21:03:44.982242Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Initialize 'incoming_change' variable.
</msg>
</logentry>
<logentry
   revision="1730856">
<author>kotkov</author>
<date>2016-02-17T15:19:47.691966Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/repos.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_authz_svn/INSTALL</path>
</paths>
<msg>Provide a (hopefully) better documentation for the AuthzSVNGroupsFile
directive and for the groups-db option in svnserve.conf.

* subversion/libsvn_repos/repos.c
  (create_conf): Explain the purpose of the groups-db option.

* subversion/mod_authz_svn/INSTALL
  (II.1, Example 8): Add necessary details to this example with the
   AuthzSVNGroupsFile directive.
  (II.2): Split into two subsections with the format details and examples
   for both access files and files with the group definitions.
</msg>
</logentry>
<logentry
   revision="1730716">
<author>stsp</author>
<date>2016-02-16T17:05:25.078506Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_wc_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/resolve-cmd.c</path>
</paths>
<msg>Introduce svn_wc__conflict_tree_update_raise_moved_away(), a private
libsvn_wc API function for use by libsvn_client's conflict resolver.

This API may raise an error if other tree conflicts need to be resolved before
the tree conflict specified by the caller. Make the new conflict resolver
handle this case. (This behaviour is now exposed to the public API rather than
hidden in libsvn_wc as was the case with the legacy conflict resolver.)

* subversion/include/private/svn_wc_private.h
  (svn_wc__conflict_tree_update_raise_moved_away): Declare.

* subversion/include/svn_client.h
  (svn_client_conflict_tree_resolve): Document new error behavior in case a
   conflict cannot be resolved yet.

* subversion/libsvn_client/resolved.c
  (conflict_option_resolve_func_t): Document new error behavior in case a
   conflict cannot be resolved yet.
  (resolve_tree_conflict): Use svn_wc__conflict_tree_update_raise_moved_away()
   if applicable.

* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_raise_moved_away): Implement.

* subversion/svn/resolve-cmd.c
  (handle_tree_conflict_resolution_failure): New helper function. Copied from
   legacy libsvn_wc conflict resolver code.
  (conflict_status_walker): Handle tree conflicts which cannot be resolved
   right away by retrying them later after resolving other conflicts first.
</msg>
</logentry>
<logentry
   revision="1730708">
<author>stsp</author>
<date>2016-02-16T16:06:09.067417Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Return SVN_ERR_CLIENT_CONFLICT_OPTION_NOT_APPLICABLE where applicable, instead
of returning the very generic SVN_ERR_WC_CONFLICT_RESOLVER_FAILURE error code.

* subversion/include/svn_client.h
  (svn_client_conflict_tree_resolve_by_id,
   svn_client_conflict_prop_resolve_by_id,
   svn_client_conflict_text_resolve_by_id): Document error case.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_tree_resolve_by_id,
   svn_client_conflict_prop_resolve_by_id,
   svn_client_conflict_text_resolve_by_id): Return better error code.
</msg>
</logentry>
<logentry
   revision="1730695">
<author>stsp</author>
<date>2016-02-16T14:46:18.107752Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/svn_error_codes.h</path>
</paths>
<msg>Declare a new error code for use by the conflict resolver in libsvn_client.

* subversion/include/svn_error_codes.h
  (SVN_ERR_CLIENT_CONFLICT_OPTION_NOT_APPLICABLE): Declare.
</msg>
</logentry>
<logentry
   revision="1730689">
<author>stsp</author>
<date>2016-02-16T13:43:10.997059Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/wc_db.h</path>
</paths>
<msg>* subversion/libsvn_wc/wc_db.h
  (svn_wc__db_op_raise_moved_away: Fix typo in comment.
</msg>
</logentry>
<logentry
   revision="1730688">
<author>stsp</author>
<date>2016-02-16T13:42:06.540367Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (resolve_tree_conflict_on_node): Fix comment for clarity.
</msg>
</logentry>
<logentry
   revision="1730677">
<author>stsp</author>
<date>2016-02-16T12:42:53.819170Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (resolve_tree_conflict_on_node): Update comment which referred to a function
   that doesn't exist.
</msg>
</logentry>
<logentry
   revision="1730670">
<author>philip</author>
<date>2016-02-16T12:11:16.706163Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h
  (enum svn_client_conflict_option_id_t): Remove comma after last element.
</msg>
</logentry>
<logentry
   revision="1730617">
<author>stefan2</author>
<date>2016-02-15T21:47:00.318732Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
Switch the last svn_fs_paths_changed2 call to svn_fs_paths_changed3.

* subversion/libsvn_repos/log.c
  (fs_mergeinfo_changed): No longer fetch the whole changes list.  However,
                          we need to iterate twice for best total performance
                          and we need to minimize FS iterator lifetimes.
</msg>
</logentry>
<logentry
   revision="1730615">
<author>stefan2</author>
<date>2016-02-15T21:20:44.890221Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
Finally switch the main log processing to the new FS iterator API.

This finalizes the API work by introducing a repos-layer-specific
path_change_t.

* subversion/libsvn_repos/log.c
  (svn_repos__path_change_t): New repos-layer-specific path_change_t.
                              Keep it identical to the FS one, if feasible.
  (svn_repos__path_change_receiver_t): Update signature to use the new type.
  (detect_changed): Switch to the iterator-based changes API.  No longer
                    need to convert data here.
  (interesting_merge): Update callback.
  (path_change_kind_to_char): New utility function.
  (log4_path_change_receiver): Update callback. Convert to old data type.
</msg>
</logentry>
<logentry
   revision="1730609">
<author>stefan2</author>
<date>2016-02-15T20:39:01.799292Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
Introduce a repos-layer-specific log_entry type because we won't fill all
fields in svn_log_entry_t anymore.

* subversion/libsvn_repos/log.c
  (svn_repos__log_entry_t): Define the new struct type.
  (svn_repos__log_entry_receiver_t): The per-revision callback using the new
                                     struct is also repos-layer-specific.
  (log_callbacks_t): Update callback type.
  (fill_log_entry,
   send_log,
   handle_merged_revisions): Use the new repos-layer specific struct now.
                             It no longer needs to be allocated dynamically.
  (svn_repos__get_logs5): Update signature to use the new callback type.
  (log4_entry_receiver): Translate between new and old log_entry type.</msg>
</logentry>
<logentry
   revision="1730603">
<author>stefan2</author>
<date>2016-02-15T20:05:20.366136Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
No longer fill the changed paths hash in the log5 code but only in the
log4 compatibility wrapper.

* subversion/libsvn_repos/log.c
  (detect_changed): We no longer collect the CHANGED paths here.  That makes
                    the pool a mere SCRATCH_POOL.
  (fill_log_entry): No longer set the CHANGED_PATHS lists in the LOG_ENTRY.
  (log_entry_receiver_baton_t,
   log4_path_change_receiver,
   log4_entry_receiver): Provide full log5-compatible callbacks that gather
                         the info and forward it to log4-type callbacks.
  (svn_repos_get_logs4): Use the new compatibility shim callbacks.</msg>
</logentry>
<logentry
   revision="1730587">
<author>stsp</author>
<date>2016-02-15T18:12:46.145770Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_wc_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Provide a new private libsvn_wc API function for resolving a tree conflict.

This function resolves a 'local delete/replace vs. incoming &lt;any&gt;' conflict
upon update/switch to the current (i.e. post-update) working copy state.
Use this new API from libsvn_client's new conflict resolver instead of
calling the generic svn_wc__resolve_conflicts() function for this conflict.

This is the first special-case tree conflict resolver function in libsvn_wc.
Hopefully, many more will follow.

* subversion/include/private/svn_wc_private.h
  (svn_wc__conflict_tree_update_break_moved_away): Declare and document.

* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Call svn_wc__conflict_tree_update_break_moved_away()
   if appropriate for the tree conflict and its resolution option.

* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_break_moved_away): Implement, based on existing
   code from resolve_tree_conflict_on_node().
</msg>
</logentry>
<logentry
   revision="1730546">
<author>stsp</author>
<date>2016-02-15T15:04:10.836400Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/private/svn_wc_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Provide new private libsvn_wc APIs for resolving text and property conflicts.
Use these new APIs from libsvn_client's new conflict resolver instead of
calling the generic svn_wc__resolve_conflicts() function.

This avoids going on a status walk for just one path at depth empty.
The new functions added here provide sufficient functionality for the new
conflict resolver: Marking a text/prop conflict resolved based on a choice
made by the user, and sending a notification to the client.

For now, tree conflicts are still resolved with svn_wc__resolve_conflicts().
The plan is to add several new libsvn_wc APIs for resolving tree conflicts.
These APIs will not be driven by a simple conflict choice argument. Rather,
each API will implement a very specific resolution strategy for a particular
kind of tree conflict.
Eventually, libsvn_client will stop using svn_wc__resolve_conflicts() for
anything but backwards compatibility.

* subversion/include/private/svn_wc_private.h
  (svn_wc__conflict_text_mark_resolved,
   svn_wc__conflict_prop_mark_resolved): Declare.

* subversion/libsvn_client/resolved.c
  (resolve_text_conflict): Call svn_wc__conflict_text_mark_resolved().
  (resolve_prop_conflict): Call svn_wc__conflict_prop_mark_resolved().
  (resolve_tree_conflict): Inline the body of resolve_conflict() here.
  (resolve_conflict): Remove.

* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_text_mark_resolved,
   svn_wc__conflict_prop_mark_resolved): Implement.
</msg>
</logentry>
<logentry
   revision="1730496">
<author>stsp</author>
<date>2016-02-15T11:04:04.571002Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_wc.h</path>
</paths>
<msg>* subversion/include/svn_wc.h
  (svn_wc_resolved_conflict5): Deprecate this function.
</msg>
</logentry>
<logentry
   revision="1730495">
<author>stsp</author>
<date>2016-02-15T11:00:09.919555Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h
  (svn_client_resolve): Deprecate this function.
</msg>
</logentry>
<logentry
   revision="1730491">
<author>stsp</author>
<date>2016-02-15T10:40:25.104610Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/hotcopy.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/hotcopy.c
  (hotcopy_body_baton): Fix typo in comment.
</msg>
</logentry>
<logentry
   revision="1730421">
<author>stefan2</author>
<date>2016-02-14T22:32:21.421147Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Follow-up to r1730388:
Empty revisions shall report "full revprop access" instead of "no access".

* subversion/libsvn_repos/log.c
  (svn_repos_check_revision_access): Re-instantiate special casing for
                                     empty revisions.</msg>
</logentry>
<logentry
   revision="1730416">
<author>stefan2</author>
<date>2016-02-14T22:01:07.495921Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
Remove the last instance of the discover_changed_paths flag.

* subversion/libsvn_repos/log.c
  (fill_log_entry): We can now drop the parameter here because ...
  (send_log): ... this one will always set a callback when it needs the data.
</msg>
</logentry>
<logentry
   revision="1730415">
<author>stefan2</author>
<date>2016-02-14T21:56:10.448745Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
Use the new callback to eliminate a changed paths hash scan.

* subversion/libsvn_repos/log.c
  (svn_repos__path_change_receiver_t): We need the path info as well.
  (detect_changed): Update and fix caller.
  (interesting_merge_baton_t,
   interesting_merge): New callback implementation. Factored out from ...
  (send_log): ... here. 
  (log4_path_change_receiver): Update signature.</msg>
</logentry>
<logentry
   revision="1730405">
<author>stefan2</author>
<date>2016-02-14T21:02:33.062238Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
The discover_changed_paths is now redundant with path_change_receiver being
not NULL.

Remove that flag along the callstack.  However, we can't do it completely
and will have two follow-up commits that fix this as well.

* subversion/libsvn_repos/log.c
  (send_log,
   do_logs, 
   handle_merged_revisions,
   svn_repos__get_logs5): Remove the DISCOVER_CHANGED_PATHS parameter.
  (svn_repos_get_logs4): Update caller.</msg>
</logentry>
<logentry
   revision="1730398">
<author>stefan2</author>
<date>2016-02-14T20:44:50.467495Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
Add a per-changed-path callback.

At the moment, it is entirely redundant and does not use the final data
types, yet.

* subversion/libsvn_repos/log.c
  (svn_repos__path_change_receiver_t): Declare the new callback type.
  (log_callbacks_t): Add elements for the new callback.
  (detect_changed): Invoke the new callback.
  (svn_repos__get_logs5): Add new callback to signature and pass it along.
  (log4_path_change_receiver): Dummy implementation of the new callback.
  (svn_repos_get_logs4): Update caller.</msg>
</logentry>
<logentry
   revision="1730397">
<author>stefan2</author>
<date>2016-02-14T20:32:16.014324Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Push the log_callback_t usage further down the call stack.  We will soon
need to pass another callback down to detect_changed.

* subversion/libsvn_repos/log.c
  (detect_changed,
   fill_log_entry): Replace the authz callback parameters with a single
                    callback structure.
  (send_log): Update caller.</msg>
</logentry>
<logentry
   revision="1730394">
<author>stefan2</author>
<date>2016-02-14T20:19:52.237636Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration.

Remove the support for "prefetched" change lists as it was only ever
effective when running 'log -g' where it prevented fetching the hash
a second time.  With the new log API, this is much less of a performance
issue, plus we have the option of an early out by not even reading all
entries once we found an "interesting" one.

* subversion/libsvn_repos/log.c
  (detect_changed,
   fs_mergeinfo_changed): Drop the PREFETCHED_CHANGES parameter and simply
                          always fetch the changes.
  (get_combined_mergeinfo_changes,
   fill_log_entry,
   send_log): Remove the PREFETCHED_CHANGES pass-through parameter.
  (do_logs): Remove CHANGES re-use logic.
  (svn_repos__get_logs5): Update caller.</msg>
</logentry>
<logentry
   revision="1730391">
<author>stefan2</author>
<date>2016-02-14T19:45:20.617167Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue preparations for updating the repos layer log API.

We introduce a utility struct that combines all callbacks we use.
This will reduce the code churn when we add Yet Another Callback.

* subversion/libsvn_repos/log.c
  (log_callbacks_t): Declare the new internal struct.
  (send_log,
   do_logs,
   handle_merged_revisions,
   do_logs): Replace individual callback funtions &amp; batons in the
             signatures with a single callback struct instance. 
  (svn_repos__get_logs5): Intialize the callback struct.</msg>
</logentry>
<logentry
   revision="1730389">
<author>stefan2</author>
<date>2016-02-14T19:25:12.421202Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Begin work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration.

As a first step, we introduce what will become svn_repos_get_logs5 as
a static function and implement svn_repos_get_logs4 as a wrapper.

* subversion/libsvn_repos/log.c
  (svn_repos__get_logs5): New function with the same basic code as
                          svn_repos_get_logs4 had but the POOL is now
                          a SCRATCH_POOL.
  (svn_repos_get_logs4): This is now a mere wrapper around the prior.</msg>
</logentry>
<logentry
   revision="1730388">
<author>stefan2</author>
<date>2016-02-14T19:12:30.368354Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>* subversion/libsvn_repos/log.c
  (svn_repos_check_revision_access): Switch to using the new
                                     svn_fs_paths_changed3 API.</msg>
</logentry>
<logentry
   revision="1730387">
<author>stefan2</author>
<date>2016-02-14T19:10:29.456481Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>* subversion/libsvn_repos/log.c
  (svn_repos_check_revision_access): This SUBPOOL is actually a ITERPOOL.</msg>
</logentry>
<logentry
   revision="1730381">
<author>stefan2</author>
<date>2016-02-14T19:03:39.083695Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
</paths>
<msg>* subversion/libsvn_repos/rev_hunt.c
  (get_merged_mergeinfo): Switch to using the new svn_fs_paths_changed3 API.
                          Note that there is no early out anymore; we scan
                          all changes directly instead of fetching them first.</msg>
</logentry>
<logentry
   revision="1730373">
<author>stefan2</author>
<date>2016-02-14T18:56:30.421100Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/replay.c</path>
</paths>
<msg>Switch the repos layer's replay functions to new svn_fs_paths_changed3 API.

To do this, we also need a dup function for svn_fs_path_change3_t.

* subversion/include/svn_fs.h
  (svn_fs_path_change3_dup): Declare the new API function.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_path_change3_dup): Implement it.

* subversion/libsvn_repos/replay.c
  (add_subdir,
   fill_copyfrom,
   path_driver_cb_func): All changes now use the new struct type.
  (get_relevant_changes): Switch to the new API. Be sure to copy the temp
                          data before placing it into the output containers.
  (add_subdir_ev2,
   replay_node): All changes now use the new struct type.</msg>
</logentry>
<logentry
   revision="1730372">
<author>stefan2</author>
<date>2016-02-14T18:48:03.023071Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/replay.c</path>
</paths>
<msg>Some refactoring in the repos layer to eliminate duplicate code.

* subversion/libsvn_repos/replay.c
  (get_relevant_changes): New function, factored out from ...
  (svn_repos_replay2,
   svn_repos__replay_ev2): ... these two.</msg>
</logentry>
<logentry
   revision="1730370">
<author>stefan2</author>
<date>2016-02-14T18:33:31.075784Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/merge.c</path>
</paths>
<msg>* subversion/mod_dav_svn/merge.c
  (do_resources): Switch the the new svn_fs_paths_changed3 API.</msg>
</logentry>
<logentry
   revision="1730368">
<author>stefan2</author>
<date>2016-02-14T18:29:05.504612Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/merge.c</path>
</paths>
<msg>Tighten the pool usage in mod_dav_svn's commit response.

* subversion/mod_dav_svn/merge.c
  (do_resources): Rename the SUBPOOL to ITERPOOL.
                  Introduce SUBPOOL for everything else allocated here
                  and release it immediately at the end.</msg>
</logentry>
<logentry
   revision="1730365">
<author>stefan2</author>
<date>2016-02-14T18:17:39.748604Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
</paths>
<msg>In FSX, natively implement the new svn_fs_paths_changed3 API.

This still uses unbound memory but already eliminates the need for
additional copies and conversions.

* subversion/libsvn_fs_x/tree.c
  (x_txn_changes_iterator_get,
   txn_changes_iterator_vtable): Implement the iterator for in-txn changes.
  (fs_revision_changes_iterator_data_t,
   x_revision_changes_iterator_get,
   rev_changes_iterator_vtable): Implement the iterator for in-rev changes.
  (x_report_changes): Implement the vtable entry for svn_fs_paths_changed3.
  (root_vtable): Enable the new API implementation and temporarily disable
                 the old one.  This enforces FSX tests to use the new API
                 entirely.</msg>
</logentry>
<logentry
   revision="1730364">
<author>stefan2</author>
<date>2016-02-14T18:11:11.387676Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/COMMITTERS</path>
</paths>
<msg>* COMMITTERS: Use the right TLD with my email address.</msg>
</logentry>
<logentry
   revision="1730363">
<author>stefan2</author>
<date>2016-02-14T17:51:49.290360Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
</paths>
<msg>* subversion/libsvn_fs_x/fs.h
  (svn_fs_x__dirent_t):  Our internal data type matches the API type.
</msg>
</logentry>
<logentry
   revision="1730362">
<author>stefan2</author>
<date>2016-02-14T17:47:55.105800Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
</paths>
<msg>Switch the new svn_fs_paths_changed3 from a using callback to returning
an iterator object.

Suggested by: ivan

* subversion/include/svn_fs.h
  (svn_fs_path_change_iterator_t): Declare the new iterator object.
  (svn_fs_path_change_get): The only method our new iterator has.  To keep
                            it copy-free, we provide very limited lifetime
                            guarantees.  That's o.k. for such a low-level
                            API.
  (svn_fs_path_change_receiver_t): Drop callback type.
  (svn_fs_path_change3_create): Switch from callback to iterator.

* subversion/libsvn_fs/fs-loader.h
  (root_vtable_t): Update to match the changed API.
  (changes_iterator_vtable_t): V-table type for the new iterator object.
  (svn_fs_path_change_iterator_t): Define the generic iterator object.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_path_change_get): Implement new iterator API.
  (add_changed_path_baton_t,
   add_changed_path): Drop old emulation utilities.
  (svn_fs_paths_changed2): Update the emulation to the iterator-based API.
  (fsap_iterator_data_t,
   changes_iterator_get,
   iterator_vtable): Implement the new iterator for old API data.
  (svn_fs_paths_changed3): Update implementation.</msg>
</logentry>
<logentry
   revision="1730360">
<author>stefan2</author>
<date>2016-02-14T17:20:20.293622Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/COMMITTERS</path>
</paths>
<msg>* COMMITTERS: Update my email address.</msg>
</logentry>
<logentry
   revision="1729937">
<author>jamessan</author>
<date>2016-02-12T03:43:27.333394Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport.pl</path>
</paths>
<msg>* tools/dist/backport.pl
  (): Followup to r1729935, remove comment about isprint use
</msg>
</logentry>
<logentry
   revision="1729935">
<author>jamessan</author>
<date>2016-02-12T03:27:18.301916Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dist/backport.pl</path>
</paths>
<msg>* tools/dist/backport.pl:
  (): Remove isspace and isprint from POSIX import
  (prompt): Replace use of isspace and isprint with pattern matches.  These
    functions have been deprecated since Perl 5.20 and may be removed in 5.24.
</msg>
</logentry>
<logentry
   revision="1729679">
<author>philip</author>
<date>2016-02-10T18:03:29.310084Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
</paths>
<msg>* subversion/svn/svn.c
* subversion/svnadmin/svnadmin.c
* subversion/svnbench/svnbench.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (): Remove another unsed header file.
</msg>
</logentry>
<logentry
   revision="1729678">
<author>philip</author>
<date>2016-02-10T17:58:24.841325Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
</paths>
<msg>* subversion/svn/svn.c
* subversion/svnadmin/svnadmin.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (): Remove now unsed header files.
</msg>
</logentry>
<logentry
   revision="1729677">
<author>philip</author>
<date>2016-02-10T17:57:53.914463Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
</paths>
<msg>* subversion/svnbench/svnbench.c
  (): Remove now unsed header files.
  (sub_main): Remove some signal code that is now in the library.
</msg>
</logentry>
<logentry
   revision="1729673">
<author>philip</author>
<date>2016-02-10T17:25:55.081251Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cmdline.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_cmdline_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
</paths>
<msg>Move a bit more of the signal handling code from the programs to the library.

* subversion/include/private/svn_cmdline_private.h
  (svn_cmdline__get_cancellation_signal): Remove.
  (svn_cmdline__cancellation_exit): New.

* subversion/libsvn_subr/cmdline.c
  (svn_cmdline__get_cancellation_signal): Remove.
  (svn_cmdline__cancellation_exit): New.

* subversion/svn/svn.c
* subversion/svnadmin/svnadmin.c
* subversion/svnbench/svnbench.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (main): Call new function.
</msg>
</logentry>
<logentry
   revision="1729519">
<author>jamessan</author>
<date>2016-02-10T03:22:36.400539Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/client-side/svn-graph.pl</path>
</paths>
<msg>* tools/client-side/svn-graph.pl
  (): Remove use of SVN::Ra + SVN::Client's auth baton in favor of just
      SVN::Client.  Move temporary SVN::Client instance ...
  (write_graph_descriptor): ... here in an explicit variable.
</msg>
</logentry>
<logentry
   revision="1729484">
<author>philip</author>
<date>2016-02-09T22:14:43.907361Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/tools/buildbot/slaves/svn-sparc-solaris/mount-tmpfs.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/tools/buildbot/slaves/svn-sparc-solaris/serf.patch</path>
<path
   text-mods="true"
   kind="file"
   action="A"
   prop-mods="false">/subversion/trunk/tools/buildbot/slaves/svn-sparc-solaris/twisted.patch</path>
<path
   text-mods="true"
   kind="file"
   action="A"
   prop-mods="false">/subversion/trunk/tools/buildbot/slaves/svn-sparc-solaris/rebuild-svn-bits.sh</path>
</paths>
<msg>I don't know how long the Solaris buildbot will survive.  These
files record how I built things.

* tools/buildbot/slaves/svn-sparc-solaris/rebuild-svn-bits.sh: New.
* tools/buildbot/slaves/svn-sparc-solaris/mount-tmpfs.c: New.
* tools/buildbot/slaves/svn-sparc-solaris/serf.patch: New.
* tools/buildbot/slaves/svn-sparc-solaris/twisted.patch: New.
</msg>
</logentry>
<logentry
   revision="1729463">
<author>philip</author>
<date>2016-02-09T21:43:03.617899Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cmdline.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/cl.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnbench/cl.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_cmdline_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
</paths>
<msg>Move signal handling and cancellation code to libsvn_subr to avoid
duplication in multiple programs.

* subversion/include/private/svn_cmdline_private.h
  (svn_cmdline__setup_cancellation_handler,
   svn_cmdline__disable_cancellation_handler,
   svn_cmdline__get_cancellation_signal): New.

* subversion/libsvn_subr/cmdline.c
  (signal_handler, check_cancel,
   svn_cmdline__setup_cancellation_handler,
   svn_cmdline__disable_cancellation_handler,
   svn_cmdline__get_cancellation_signal): New, code from svn.c and svnadmin.c.

* subversion/svn/cl.h
  (svn_cl__check_cancel): Change type to pointer.

* subversion/svn/svn.c
  (svn_cl__check_cancel): Change type to pointer.
  (signal_handler): Remove.
  (sub_main, main): Call new functions.

* subversion/svnadmin/svnadmin.c
  (check_cancel): Change type to pointer.
  (signal_handler, setup_cancellation_signalsl): Remove.
  (repos_notify_handler, subcommand_recover, subcommand_upgrade,
   sub_main, main): Call new functions.

* subversion/svnbench/cl.h
  (svn_cl__check_cancel): Change type to pointer.

* subversion/svnbench/svnbench.c
  (svn_cl__check_cancel): Change type to pointer.
  (signal_handler): Remove.
  (sub_main, main): Call new functions.

* subversion/svnfsfs/svnfsfs.h
  (check_cancel): Change type to pointer.

* subversion/svnfsfs/svnfsfs.c
  (check_cancel): Change type to pointer.
  (signal_handler, setup_cancellation_signals): Remove.
  (sub_main, main): Call new functions.

* subversion/svnlook/svnlook.c
  (check_cancel): Change type to pointer.
  (signal_handler): Remove.
  (sub_main, main): Call new functions.

* subversion/svnrdump/svnrdump.c
  (check_cancel): Change type to pointer.
  (signal_handler): Remove.
  (sub_main, main): Call new functions.

* subversion/svnsync/svnsync.c
  (check_cancel): Change type to pointer.
  (signal_handler): Remove.
  (sub_main, main): Call new functions.
</msg>
</logentry>
<logentry
   revision="1729441">
<author>philip</author>
<date>2016-02-09T19:34:55.198893Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnsync/svnsync.c</path>
</paths>
<msg>* subversion/svn/svn.c
* subversion/svnadmin/svnadmin.c
* subversion/svnbench/svnbench.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (signal_map): Fix typo in WIN32 code.
</msg>
</logentry>
<logentry
   revision="1729422">
<author>philip</author>
<date>2016-02-09T17:36:49.191858Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
</paths>
<msg>* subversion/svn/svn.c
* subversion/svnbench/svnbench.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (signal_handler, setup_cancellation,
   sub_main, main): Followup to r1727916, handle race if second signal
   arrives, don't assume int fits in sig_atomic_t.

Found by: danielsh
</msg>
</logentry>
<logentry
   revision="1729307">
<author>danielsh</author>
<date>2016-02-09T03:19:43.394069Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/COMMITTERS</path>
</paths>
<msg>* COMMITTERS: Remove 'bouncing' annotation from nebiac's entry, since
    I received no bounce of my email to him.</msg>
</logentry>
<logentry
   revision="1729060">
<author>jamessan</author>
<date>2016-02-08T00:39:43.327535Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/svn-graph.pl</path>
</paths>
<msg>* tools/client-side/svn-graph.pl
  (): Use direct method invocation to construct SVN::Client
  (parse_commandline): Canonicalize the given repo URI
  (write_graph_descriptor): Use the canonical form of the relpath for the root
    of the repo.
</msg>
</logentry>
<logentry
   revision="1728585">
<author>jamessan</author>
<date>2016-02-05T01:46:18.271309Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
</paths>
<msg>* subversion/libsvn_fs/fs-loader.c:
  (SVN_FS_ENUMLATE_PATHS_CHANGED,
   SVN_FS_ENUMLATE_REPORT_CHANGES): Fix spelling of EMULATE.  No functional change.
</msg>
</logentry>
<logentry
   revision="1728464">
<author>philip</author>
<date>2016-02-04T13:04:47.834433Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_main.c</path>
</paths>
<msg>* subversion/tests/svn_test_main.c
  (do_test_num): Introduce a local variable and set another variable later
   to avoid potential setjmp/longjmp clobbers.
</msg>
</logentry>
<logentry
   revision="1728463">
<author>philip</author>
<date>2016-02-04T13:02:39.556196Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_main.c</path>
</paths>
<msg>Revert r1728324 in preparation for fix that works.

* subversion/tests/svn_test_main.c
  (call_setjmp, do_test_num): Revert.
</msg>
</logentry>
<logentry
   revision="1728387">
<author>philip</author>
<date>2016-02-03T22:45:52.898074Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/gpg_agent.c</path>
</paths>
<msg>Fix issue 4611, gpg-agent and passwords with a percent character.

* subversion/libsvn_subr/gpg_agent.c
  (is_hex, hex_to_int, unescape_assuan): New.
  (password_get_gpg_agent): Unescape the password.
</msg>
</logentry>
<logentry
   revision="1728348">
<author>philip</author>
<date>2016-02-03T18:25:18.434234Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>* subversion/libsvn_ra_svn/marshal.c
  (changed_path_flags): Move the storage-class specifier 'const' to the
   beginning of the declaration. Other locations are obsolescent [6.11.5]
</msg>
</logentry>
<logentry
   revision="1728343">
<author>philip</author>
<date>2016-02-03T16:59:54.404635Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/x509info.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_x509.h</path>
</paths>
<msg>* subversion/include/svn_x509.h
* subversion/libsvn_subr/x509info.c
  (svn_x509_certinfo_get_valid_to): Remove spurious const from
   integer return type.
</msg>
</logentry>
<logentry
   revision="1728324">
<author>philip</author>
<date>2016-02-03T14:27:01.122739Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_main.c</path>
</paths>
<msg>* subversion/tests/svn_test_main.c
  (call_setjmp): New, to fix some potential setjmp/longjmp clobbers.
  (do_test_num): Call new function, tweak comment to explain why
   a parameter is modified.
</msg>
</logentry>
<logentry
   revision="1728308">
<author>philip</author>
<date>2016-02-03T13:39:48.755331Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/deprecated.c</path>
</paths>
<msg>* subversion/libsvn_wc/deprecated.c
  (svn_wc_get_diff_editor6): Pass on ignore_ancestry rather than
   use_git_diff_format.
</msg>
</logentry>
<logentry
   revision="1728244">
<author>gstein</author>
<date>2016-02-03T01:34:44.433897Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/contrib/server-side/svncutter/README</path>
<path
   action="D"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/contrib/server-side/svncutter/svncutter</path>
</paths>
<msg>Deprecate svn cutter, per ESR's email to dev@subversion. Point to his
new "reposurgeon" project site.

See: Message-Id: &lt;20160202234208.B098313A0E4A@snark.thyrsus.com&gt;
</msg>
</logentry>
<logentry
   revision="1727993">
<author>stefan2</author>
<date>2016-02-01T19:57:35.853678Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_fs_util.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_util/fs-util.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_fs_private.h</path>
</paths>
<msg>Follow-up to r1727838: (Hopefully) fix the cyclic library dependecy between
lib_fs and lib_fs_util that broke the Windows build.

Reported by: rhuijben

* subversion/include/private/svn_fs_util.h
  (svn_fs__get_deleted_node): Move declaration from here ...

* subversion/include/private/svn_fs_private.h
  (svn_fs__get_deleted_node): ... to here. Use Doxygen comments like in the
                              rest of that file.

* subversion/libsvn_fs_util/fs-util.c
  (svn_fs__get_deleted_node): Move implementation from here ...

* subversion/libsvn_fs/fs-loader.c
  (svn_fs__get_deleted_node): ... to here.</msg>
</logentry>
<logentry
   revision="1727916">
<author>philip</author>
<date>2016-02-01T11:06:16.862374Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
</paths>
<msg>Followup to r1727621, properly resend the signal for all caught signals.

* subversion/svn/svn.c
* subversion/svnadmin/svnadmin.c
* subversion/svnbench/svnbench.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (signal_handler): Store signal number.
  (main): Resend signal when signal is caught.
</msg>
</logentry>
<logentry
   revision="1727838">
<author>stefan2</author>
<date>2016-01-31T16:18:26.344967Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_util/fs-util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_fs_util.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Add the ability to emulate the old svn_fs_paths_changed2 through
svn_fs_paths_changed3.  So, we've got a two-way emulation now and
we enable both for now such that all callers of the old API will
be redirected: old API -&gt; new API -&gt; old API vtable entry.

As a bonus, the emulated svn_fs_paths_changed2 now correctly reports
the IDs for in-revision nodes in FSFS.  It also fails earlier on
corrupted change lists.  Both is only true for "emulated" mode.

* subversion/include/private/svn_fs_util.h
  (svn_fs__get_deleted_node): Declare a new private utility API needed
                              to handle ID creation edge cases.

* subversion/libsvn_fs_util/fs-util.c
  (svn_fs__prop_lists_equal): Implement.

* subversion/libsvn_fs/fs-loader.c
  (SVN_FS_EMULATE_PATHS_CHANGED): Declare new control macro as we did
                                  already for the new API.
  (add_changed_path_baton_t,
   add_changed_path): Callback implementation to emulate the old API
                      based on the new one.
  (svn_fs_paths_changed2): Emulate when necessary or forced to do so.

* subversion/tests/cmdline/svnadmin_tests.py
  (verify_invalid_path_changes): The correct ID construction in emulated
                                 mode creates fewer repetitions of the
                                 same error during verification.  Update
                                 test expectations accordingly.
</msg>
</logentry>
<logentry
   revision="1727824">
<author>stefan2</author>
<date>2016-01-31T14:41:46.196920Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
</paths>
<msg>Provide a fallback implementation for svn_fs_paths_changed3.

* subversion/libsvn_fs/fs-loader.c
  (SVN_FS_EMULATE_REPORT_CHANGES): Add this macro to optionally enforce
                                   API emulation.
  (svn_fs_paths_changed3): Emulate the new API using old one either when
                           enforced by macro or as a fallback for FS that
                           don't provide the new API.
</msg>
</logentry>
<logentry
   revision="1727822">
<author>stefan2</author>
<date>2016-01-31T14:29:19.861822Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_fs_util.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_base/tree.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_util/fs-util.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
</paths>
<msg>Define a callback-based FS API to report changed paths.

The old API is not going to be deprecated until the majority of users have
been migrated.  Also, there is no backend that implements the new API, so
this will simply segfault when being called.  The next patch will fix this
by adding a fallback implementation for it.

* subversion/include/svn_fs.h
  (svn_fs_path_change3_t): Declare the new path change data type.  Lose
                           the unusable noderev ID and add the path, so
                           this struct is now self-sufficient.
  (svn_fs_path_change3_create): Declare a suitable constructor to help
                                future binary compatibility.
  (svn_fs_path_change_receiver_t,
   svn_fs_paths_changed3): The actual new API &amp; callback function type. 

* subversion/include/private/svn_fs_util.h
  (svn_fs__path_change_create_internal2): Declare a suitable private API
                                          to instantiate the new data
                                          struct - similar to the old one.

* subversion/libsvn_fs_util/fs-util.c
  (svn_fs__path_change_create_internal2): Implement the new internal API
                                          similar to the old one.

* subversion/libsvn_fs/fs-loader.h
  (root_vtable_t): Add entry for the new API.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_paths_changed3): Implement as simple vtable call.  This will
                           actually segfault for now b/c nobody provides
                           the function.
  (svn_fs_path_change3_create): Implement like svn_fs_path_change2_create.

* subversion/libsvn_fs_base/tree.c
* subversion/libsvn_fs_fs/tree.c
* subversion/libsvn_fs_x/tree.c
  (root_vtable): None of these backends actually implement the new API.</msg>
</logentry>
<logentry
   revision="1727791">
<author>stsp</author>
<date>2016-01-31T10:47:44.258165Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_text_get_resolution_options,
  (svn_client_conflict_prop_get_resolution_options): Forgot to localize
   descriptions while copying conflict options from static arrays.

Found by: rhuijben
</msg>
</logentry>
<logentry
   revision="1727790">
<author>stefan2</author>
<date>2016-01-31T10:28:30.464254Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/merge.c</path>
</paths>
<msg>Reduce memory consumption of DAV merge responses (commits).

* subversion/mod_dav_svn/merge.c
  (do_resources): Since the paths in the changes list provided by the FS
                  are already unique, we only need to track thoes that
                  might clash with ones we add ourselves.</msg>
</logentry>
<logentry
   revision="1727789">
<author>stefan2</author>
<date>2016-01-31T10:27:17.959400Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>Revert r1727785 (committed the wrong file).</msg>
</logentry>
<logentry
   revision="1727785">
<author>stefan2</author>
<date>2016-01-31T09:29:39.293427Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>[Reverted in r1727789]

Reduce memory consumption of DAV merge responses (commits).

* subversion/mod_dav_svn/merge.c
  (do_resources): Since the paths in the changes list provided by the FS
                  are already unique, we only need to track thoes that
                  might clash with ones we add ourselves. </msg>
</logentry>
<logentry
   revision="1727737">
<author>stsp</author>
<date>2016-01-30T17:35:33.063565Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c: Stop including svn_wc_private.h.
</msg>
</logentry>
<logentry
   revision="1727733">
<author>stsp</author>
<date>2016-01-30T17:11:30.054194Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_prop_get_resolution_options): Ensure that options
   returned from here live in writable memory so that option-&gt;type_data 
   can be written to. Should fix access violation on Windows.

Found by: svn-windows-local buildbot
</msg>
</logentry>
<logentry
   revision="1727728">
<author>stsp</author>
<date>2016-01-30T16:47:17.371174Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (prop_conflict_option): Fix the callback for 'base' property conflict option.
</msg>
</logentry>
<logentry
   revision="1727725">
<author>stsp</author>
<date>2016-01-30T16:42:48.071664Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (mark_conflict_resolved): Use the new client conflict API to mark
   conflicts as resolved, instead of calling into libsvn_wc.
</msg>
</logentry>
<logentry
   revision="1727724">
<author>stsp</author>
<date>2016-01-30T16:41:37.547413Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (prop_conflicts): Allow 'base', 'mine-conflict', and 'theirs-conflict'
   for property conflicts because libsvn_wc supports this.
   At present, libsvn_wc treats 'mine-conflict' and 'theirs-conflict'
   just like 'mine-full' and 'theirs-full'. For backwards compat we should
   keep accepting them, and perhaps we'll decide to make 'mine-conflict'
   and 'theirs-conflict' do something different in the future.
</msg>
</logentry>
<logentry
   revision="1727722">
<author>stsp</author>
<date>2016-01-30T16:28:56.948989Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_tree_resolve_by_id): Add a hack that makes the
   '--accept mine-conflict' option work for 2 specific tree conflicts.
   In Subversion 1.9 these conflicts could be resolved to 'mine-conflict'
   and we should keep allowing this for backwards compatibility, even if
   the conflict prompt doesn't offer this option anymore.
</msg>
</logentry>
<logentry
   revision="1727721">
<author>stsp</author>
<date>2016-01-30T16:26:48.757204Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_tree_get_resolution_options): Always add an option
   which allows the user to accept the current working copy state. This option
   was not added if automated resolution is possible, but it needs to be
   always available so that '--accept working' can function.
</msg>
</logentry>
<logentry
   revision="1727720">
<author>stsp</author>
<date>2016-01-30T16:23:04.917199Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (text_conflict_options): Add svn_client_conflict_option_base_text to the
   list of valid text conflict options. Missed by accident.
</msg>
</logentry>
<logentry
   revision="1727719">
<author>stsp</author>
<date>2016-01-30T16:20:46.370399Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (resolve_conflict): Plug an error leak.
</msg>
</logentry>
<logentry
   revision="1727718">
<author>stefan2</author>
<date>2016-01-30T15:44:52.348606Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/changes.c</path>
</paths>
<msg>Remove unused path change types from FSX containers.

* subversion/libsvn_fs_x/changes.c
  (CHANGE_KIND_MASK): Update as we use one bit less now.
  (CHANGE_KIND_RESET,
   CHANGE_KIND_MOVE,
   CHANGE_KIND_MOVEREPLACE): Remove these unused change kinds.
</msg>
</logentry>
<logentry
   revision="1727717">
<author>stefan2</author>
<date>2016-01-30T15:41:57.405312Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/changes.c</path>
</paths>
<msg>Add support for the mergeinfo_mod flag to FSX changed paths list containers.
This had been omitted by accident.

* subversion/libsvn_fs_x/changes.c
  (CHANGE_MERGEINFO_MOD): Define bit we use to represent the flag.
  (append_change): Store the new flag.
  (svn_fs_x__changes_get_list): Return the new flag.
</msg>
</logentry>
<logentry
   revision="1727716">
<author>stefan2</author>
<date>2016-01-30T15:33:35.979748Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>Cleanse FSX changed paths lists code from the renmants of noderev_id.

* subversion/libsvn_fs_x/fs.h
  (svn_fs_x__change_t): Remove noderev ID element entirely.

* subversion/libsvn_fs_x/transaction.h
  (svn_fs_x__add_change): ID parameter is no longer used.

* subversion/libsvn_fs_x/transaction.c
  (svn_fs_x__add_change): Update.

* subversion/libsvn_fs_x/tree.c
  (add_change): Update caller.
  (x_change_node_prop,
   x_make_dir,
   x_delete_node,
   copy_helper, 
   x_make_file,
   apply_textdelta,
   apply_text): Update respective next caller level.</msg>
</logentry>
<logentry
   revision="1727711">
<author>stefan2</author>
<date>2016-01-30T15:23:09.544169Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/changes.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/low_level.c</path>
</paths>
<msg>In FSX, remove all code that reads and writes noderev IDs in changed
path lists.

* subversion/libsvn_fs_x/changes.c
  (CHANGE_TXN_NODE): No longer needed.
  (binary_change_t): Remove noderev ID element.
  (append_change,
   svn_fs_x__changes_get_list,
   svn_fs_x__write_changes_container,
   svn_fs_x__read_changes_container,
   svn_fs_x__changes_get_list_func): Remove all noderev ID access for
                                     containered changed paths lists.

* subversion/libsvn_fs_x/low_level.c
  (read_change,
   write_change_entry): No longer read and write noderev IDs when
                        reading / writing non-packed changes lists.

* subversion/libsvn_fs_x/transaction.c
  (fold_change): The noderev ID is now meaningless here.
  (svn_fs_x__add_change): Don't store the noderev ID anymore.
  (write_final_rev): No longer update the noderev in changed paths lists.
  (sanitize_changed_path_info): No longer neccessary.
  (commit_body): Update caller.</msg>
</logentry>
<logentry
   revision="1727709">
<author>stefan2</author>
<date>2016-01-30T15:05:18.005027Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
</paths>
<msg>In FSX, begin getting rid of the redundant noderev IDs within changed
paths lists.

This change dynamically determines the ID for the changed_paths API
implementation, effectively rendering the stored IDs unnecessary.

* subversion/libsvn_fs_x/tree.c
  (construct_fs_id): New function to construct the ID object dynamically.
  (construct_fs_path_change): Update to call the new utility instead of
                              using the info provided in CHANGE.  Add a
                              few pass-through parameters.
  (x_paths_changed): Update the next level caller.
</msg>
</logentry>
<logentry
   revision="1727707">
<author>stefan2</author>
<date>2016-01-30T14:50:44.992679Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/id.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/id.c
  (locale_independent_strtol): Clarify comment. No functional change.
</msg>
</logentry>
<logentry
   revision="1727704">
<author>stsp</author>
<date>2016-01-30T14:38:16.697517Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (mark_conflict_resolved): Move this function further up in the file to avoid
   a forward declaration.
</msg>
</logentry>
<logentry
   revision="1727703">
<author>stsp</author>
<date>2016-01-30T14:36:46.661895Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (conflict_get_internal): Initialize text and tree conflict resolution options
   to 'unspecified' rather than 'undefined'.

* subversion/include/svn_client.h
  (svn_client_conflict_text_get_resolution,
  (svn_client_conflict_tree_get_resolution): Update docstring accordingly.
</msg>
</logentry>
<logentry
   revision="1727702">
<author>stsp</author>
<date>2016-01-30T14:32:28.903400Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>*subversion/libsvn_client/resolved.c
 (svn_client_conflict_prop_get_resolution): Return 'unspecified' rather than
  'undefined' for property conflicts which haven't been resolved yet.

*subversion/include/svn_client.h
 (svn_client_conflict_prop_get_resolution): Update docstring accordingly.
</msg>
</logentry>
<logentry
   revision="1727699">
<author>stsp</author>
<date>2016-01-30T14:20:36.674169Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Create distinct conflict option IDs for our current tree conflict resolution
options (there are only 2 options which actually resolve a tree conflict).

The new options are only used in libsvn_client and 'svn' for now. The
current libsvn_wc interfaces still force us to map conflict option IDs to
svn_wc_conflict_choice_t. As a side effect, --accept mine-conflict still
works with these tree conflicts, but that may change later (we'll need a
different system than a single --accept option to resolve arbitrary tree
conflicts in a non-interactive way).

* subversion/include/svn_client.h
  (svn_client_conflict_option_update_move_destination,
   svn_client_conflict_option_update_any_moved_away_children): Declare.
  (svn_client_conflict_option_id_to_wc_conflict_choice): Declare. This is a
   temorary interface which maps option ID to legacy conflict choice.

* subversion/libsvn_client/resolved.c
  (conflict_option_id_to_wc_conflict_choice): Rename to ...
  (svn_client_conflict_option_id_to_wc_conflict_choice): ... this and expose as
   a temporary public API function. Map the new option IDs to the legacy
   conflict choice 'mine-conflict' so libsvn_wc will still resolve these
   conflicts correctly.
  (resolve_conflict): Update caller.
  (svn_client_conflict_tree_get_resolution_options): Assign the new option IDs
   to their respective tree conflict options.

* subversion/svn/conflict-callbacks.c
  (builtin_resolver_options): Add new options IDs. Use code "u" for them,
   a mnemonic for "update", instead of "mc" ("mine-conflict").
  (conflict_option_id_to_wc_conflict_choice): Remove. This was a copy of
   the same function in libsvn_client.
  (mark_conflict_resolved): Use the new
   svn_client_conflict_option_id_to_wc_conflict_choice() interface.
</msg>
</logentry>
<logentry
   revision="1727621">
<author>philip</author>
<date>2016-01-29T18:55:22.163265Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnsync/svnsync.c</path>
</paths>
<msg>* subversion/svn/svn.c
* subversion/svnadmin/svnadmin.c
* subversion/svnbench/svnbench.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (main): Exit via SIGINT when SIGINT is caught.
</msg>
</logentry>
<logentry
   revision="1727618">
<author>stsp</author>
<date>2016-01-29T17:18:05.678371Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>In the interactive conflict resolver, use the option id 'unspecified' to
indicate the user hasn't made a choice yet, rather than 'undefined' which
is otherwise used to mark 'svn' client-specific conflict options as such.

Also, ensure the variable containing the user's answer is always initialized
before prompting.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict, handle_prop_conflicts): Use the
   svn_client_conflict_option_unspecified option instead of
   svn_client_conflict_option_undefined to mark the state where
   the user hasn't made a choice yet.
  (handle_one_prop_conflict, handle_tree_conflict): Same, and make sure to
   initialize option_id.
</msg>
</logentry>
<logentry
   revision="1727617">
<author>stsp</author>
<date>2016-01-29T17:05:53.107828Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Split handling of --accept option and interactive prompting into 2 functions.

No functional change.

* subversion/svn/conflict-callbacks.c
  (resolve_conflict_by_accept_option): New, based on the code from
    resolve_conflict_interactively() but returns an a conflict option ID
    via an output parameter. This allows the caller to tell whether the
    --accept option is resolved the conflict.
  (resolve_conflict_interactively): Stop handling the --accept option in here
   and remove related parameters.
  (svn_cl__resolve_conflict): Update caller.
</msg>
</logentry>
<logentry
   revision="1727616">
<author>stsp</author>
<date>2016-01-29T16:53:04.319202Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Stop passing a pointer to the --accept option value to interactive conflict
handlers, now that the 'quit' command at the conflict prompt command works
without this hack.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict, handle_one_prop_conflict, handle_prop_conflicts,
   handle_tree_conflict): Remove accept_which output parameter. 
  (resolve_conflict_interactively): Update caller.
</msg>
</logentry>
<logentry
   revision="1727615">
<author>stsp</author>
<date>2016-01-29T16:47:52.660408Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/resolve-cmd.c</path>
</paths>
<msg>Make the 'quit' command at the conflict prompt actually quit right away.

This command worked by side-effect of postponing all remaining conflicts
but didn't actually stop the conflict walk.
The QUIT flag passed around in the code was never actually read, just written.

* subversion/svn/resolve-cmd.c
  (conflict_status_walker): Check the conflict resolver QUIT flag and cancel
   the status walk if it is set.
  (walk_conflicts): Check for SVN_ERR_CANCELLED in combination with QUIT and
   don't treat this as an error. Don't write messages about being unable
   to resolve conflicts if the user canceled by hitting Ctrl-C, just exit.
</msg>
</logentry>
<logentry
   revision="1727609">
<author>stsp</author>
<date>2016-01-29T16:14:52.900062Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (svn_cl__interactive_conflict_baton_t): Remove. Has been unused for a while.
</msg>
</logentry>
<logentry
   revision="1727596">
<author>stsp</author>
<date>2016-01-29T14:56:32.666646Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Follow-up to r1727593, which broke some tests:

Fix errors in handling the --accept option and postponed conflicts.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict, handle_prop_conflicts, handle_tree_conflict): Do not
   call mark_conflict_resolved() if the conflict should be postponed.
  (resolve_conflict_interactively): Same, and also do not start interactive
   resolution if the --accept option postponed the conflict.
</msg>
</logentry>
<logentry
   revision="1727593">
<author>stsp</author>
<date>2016-01-29T14:33:38.075125Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Refactor code in 'svn resolve' such that a call to the function
svn_client_conflict_prop_get_propname() can be removed.

This function should not exist because an svn_client_conflict_t object
represents all conflicts on a given node, including multiple property
conflicts. So a function returning just one property name makes no sense.
The function was added while transitioning away from the legacy conflict API.
We cannot remove it yet becuase a call in 'svn info' remains.

This change requires the property conflict handler to loop over multiple
properties and resolve them one by one. The previous logic assumed the
text/prop/tree conflict handlers will return one answer from the user
which indicates how the conflict should be resolved. Change them all to
mark the conflict resolved internally, and make other related tweaks.

* subversion/include/svn_client.h
  (svn_client_conflict_prop_get_propvals): Add 'propname' parameter.
   This function must know which property it is being asked about.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_prop_get_propvals): Return conflicted property values 
   for the specific property named by the caller.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict): Remove option_id output parameter and the ineffective
   save_merged parameter. The functionalty of save_merged is not supported by
   the new conflict API and there are no plans to add it.
   Resolve the text conflict here rather than relying on the caller to do so.
   Add new arguments necessary for calling mark_conflict_resolved().
  (handle_prop_conflict): Rename to ...
  (handle_one_prop_conflict): ... this. Add a 'propname' argument which
  identifies the property to be handled.
  (handle_prop_conflicts): New helper function. Tries to resolve multiple
   property conflicts on a node.
  (handle_text_conflict): Remove option_id output parameter.
   Resolve the tree conflict here rather than relying on the caller to do so.
   Add new arguments necessary for calling mark_conflict_resolved().
  (conflict_func_interactive): Rename to ...
  (resolve_conflict_interactively): ... this. Handle property conflicts using
   the new libsvn_client conflict API rather than its backwards compat shims.
   Remove the option_id, save_merged, and merged_propval output parameters.
   The latter two were ineffective and option_id is being replaced by a
   boolean output parameter which indicates whether the conflict was resolved.
   Resolve conflicts according to the --accept option if applicable.
   Update calls to handle_text_conflict() and friends with new parameter lists.
  (svn_cl__resolve_conflict): Rely on resolve_conflict_interactively() to
   mark conflicts as resolved.
   Don't check prop_conflicts against NULL. Check for an empty array instead.
   The conflict API returns an empty array if there are no property conflicts.
</msg>
</logentry>
<logentry
   revision="1727583">
<author>stsp</author>
<date>2016-01-29T13:40:23.244207Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Fix support for multiple property conflicts on a node in the new resolver.

An implementation bug in the new libsvn_client conflict code prevented
the client from resolving more than one property conflict per call to
svn_client_conflict_get_conflicted(). But this API is supposed to return
a list of all outstanding property conflicts, not just one of them.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_t): Replace legacy_prop_conflict with
  'legacy_prop_conflict_propname. The new field serves as in index
  into the prop_conflicts hash which stores several property conflicts.
  (add_legacy_desc_to_conflict): Add legacy property conflict to the
   prop_conflicts hash.
  (conflict_get_internal): Don't special-case property conflicts and let
   add_legacy_desc_to_conflict() deal with property conflicts internally.
  (resolve_prop_conflict): Update legacy_prop_conflict_propname after resolving
   a property conflict.
  (get_conflict_desc2_t): Return the legacy conflict corresponding to
   legacy_prop_conflict_propname.
  (svn_client_conflict_get_conflicted): Always return the entire list of
   names of conflicted properties, instead of returning just one name.
</msg>
</logentry>
<logentry
   revision="1727547">
<author>stsp</author>
<date>2016-01-29T11:43:57.752756Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Put the code 'svn' uses to mark a conflict resolved into a subroutine.

No functional change. This just prepares 'svn' for making more use of the
new svn_client_conflict APIs.

* subversion/svn/conflict-callbacks.c
  (mark_conflict_resolved): New helper, factored out verbatim from...
  (svn_cl__resolve_conflict): ... here.
</msg>
</logentry>
<logentry
   revision="1727525">
<author>philip</author>
<date>2016-01-29T10:51:34.159188Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/which-error.py</path>
</paths>
<msg>* tools/dev/which-error.py
  (print_error): Followup to r1727512, include the code.
</msg>
</logentry>
<logentry
   revision="1727512">
<author>danielsh</author>
<date>2016-01-29T10:15:23.151699Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/which-error.py</path>
</paths>
<msg>* tools/dev/which-error.py
  (print_error): Handle serf-generated error codes.  (Currently, the only way
     to distinguish serf-generated error codes from svn-generated ones is to
     inspect the numeric value of the svn_error_t::apr_err member.)</msg>
</logentry>
<logentry
   revision="1727408">
<author>stsp</author>
<date>2016-01-28T17:12:21.369945Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (svn_cl__resolve_conflict): Fix type of props_conflicted pointer variable.

Found by: svn-windows-local buildbot
</msg>
</logentry>
<logentry
   revision="1727406">
<author>stsp</author>
<date>2016-01-28T16:58:32.636280Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Start using svn_client_conflict_get_conflicted() in 'svn'.

This covers the easy cases. Property conflicts still need some work.

* subversion/svn/conflict-callbacks.c
  (conflict_func_interactive): Use svn_client_conflict_get_conflicted()
   instead of svn_client_conflict_get_kind().
  (svn_cl__resolve_conflict): Likewise.
</msg>
</logentry>
<logentry
   revision="1727405">
<author>stsp</author>
<date>2016-01-28T16:54:38.667853Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_get_conflicted): Satisfy docstring's requirement and
   return an empty array if there are no conflicted properties.
</msg>
</logentry>
<logentry
   revision="1727378">
<author>stsp</author>
<date>2016-01-28T15:06:05.174839Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (text_conflict_options): Shorten option descriptions a bit.
</msg>
</logentry>
<logentry
   revision="1727370">
<author>stsp</author>
<date>2016-01-28T14:53:39.915112Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_tree_get_resolution_options): Fix the default
   resolution option for tree conflicts so we don't run into the infamous
   "tree conflicts may only be resolved to working" error when the default
   option ("resolve") is used.
</msg>
</logentry>
<logentry
   revision="1727369">
<author>stsp</author>
<date>2016-01-28T14:37:50.567293Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Make the conflict prompt use conflict resolution options from libsvn_client.

The conflict prompt is now composed of options offered by libsvn_client
and options which are specific to 'svn'. The svn client retains knowledge
about the set of options libsvn_client may offer, so that these options can
be mapped to conflict prompt codes ("p", "mf", etc.) and --accept arguments.
The 'svn' client code now refers to libsvn_client options as 'built-in'
options, and refers to its own options which allow users to edit files,
display diffs, and so on, as 'extra' options.

The internal conflict prompt logic is retained. Its input is now dynamically
generated rather than taken straight from a set of static tables. This allows
for future expansion as libsvn_client grows more resolution options.

Conflict prompt help screen formatting will look slightly different now
since I dropped empty lines shown in the help screen to group options
visually. This can be fine-tuned later.

* subversion/svn/conflict-callbacks.c
  (MAX_ARRAY_LEN): Remove, not needed anymore.
  (resolver_option_t): Enhance docstring.
  (text_conflict_options, binary_conflict_options, prop_conflict_options,
   tree_conflict_options, tree_conflict_options_update_moved_away,
   tree_conflict_options_update_edit_deleted_dir): These conflict option
   tables are entirely replaced by...
  (builtin_resolver_options, extra_resolver_options,
   extra_resolver_options_text, extra_resolver_options_prop,
   extra_resolver_options_tree): ... these new tables.
  (find_option_by_id): New helper.
  (help_string): Remove the 'default_options' argument again. We don't need
   this temporary hack anymore since the OPTIONS argument to this function
   is now dynamically generated and contains the correct descriptions.
  (prompt_string): Likewise, drop 'default_options'.
  (build_text_conflict_options, build_prop_conflict_options,
   build_tree_conflict_options): New helper functions which build an array
   of resolver_option_t objects from built-in and extra conflict options.
  (handle_tree_conflict, handle_prop_conflict,
   handle_tree_conflict): Use above new helpers and feed the resolver option
   array to prompt_user() and help_string(). Rename some variables for clarity.
</msg>
</logentry>
<logentry
   revision="1727329">
<author>stsp</author>
<date>2016-01-28T12:53:40.007011Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_tree_get_resolution_options): Localize strings which
   aren't part of static arrays with _().

Found by: rhuijben
</msg>
</logentry>
<logentry
   revision="1727276">
<author>stsp</author>
<date>2016-01-28T08:41:14.677272Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Make libsvn_client describe all currently available tree conflict options.

* subversion/libsvn_client/resolved.c
  (tree_conflict_options): Remove this static table of options, now unused.
  (svn_client_conflict_tree_get_resolution_options): Build an array of options
   and include the special options for update-move-away and edit-deleted-dir
   cases if appropriate. The result corresponds to what 'svn' already offers.

* subversion/svn/conflict-callbacks.c
  (tree_conflict_options_update_moved_away,
   tree_conflict_options_update_edit_deleted_dir): Set long option descriptions
   to NULL so descriptions provided by libsvn_client are used instead.
</msg>
</logentry>
<logentry
   revision="1727260">
<author>stsp</author>
<date>2016-01-28T08:09:37.301273Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (binary_conflict_options): Fix indentation.
  (tree_conflict_options_update_moved_away,
   tree_conflict_options_update_edit_deleted_dir): Split inline --accept
   option values off conflict descriptions, as done elsewhere in r1725982.
</msg>
</logentry>
<logentry
   revision="1727140">
<author>philip</author>
<date>2016-01-27T17:39:49.422754Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnsync_tests.py</path>
</paths>
<msg>* subversion/svnsync/svnsync.c
  (do_synchronize): Tweak up-to-date test.

* subversion/tests/cmdline/svnsync_tests.py
  (up_to_date_sync): Remove XFAIL.
</msg>
</logentry>
<logentry
   revision="1727115">
<author>philip</author>
<date>2016-01-27T16:24:35.767715Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnsync_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnsync_tests.py (up_to_date_sync): Tweak test.
</msg>
</logentry>
<logentry
   revision="1727113">
<author>stsp</author>
<date>2016-01-27T16:18:37.574943Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>Add new APIs which provide descriptions of conflicts, and use them in 'svn'.

No functional change.

* subversion/include/svn_client.h
  (svn_client_conflict_prop_get_description,
   svn_client_conflict_tree_get_description): Declare.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_prop_get_description,
   svn_client_conflict_tree_get_description): Implement. For now, return the
   same results as svn_cl__get_human_readable_prop_conflict_description() and
   svn_cl__get_human_readable_tree_conflict_description(). In the future these
   functions may return enhanced descriptions based on additional information
   which is not yet available.
  (map_conflict_action, map_conflict_reason, local_reason_str,
   incoming_action_str, operation_str): New helpers, from svn/cl-conflicts.c.

* subversion/svn/conflict-callbacks.c
  (handle_prop_conflict, handle_tree_conflict): Use new APIs.
</msg>
</logentry>
<logentry
   revision="1727103">
<author>philip</author>
<date>2016-01-27T15:58:27.008881Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnsync_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnsync_tests.py
  (up_to_date_sync): New XFAIL test, sync of up-to-date repository asserts.
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1727040">
<author>philip</author>
<date>2016-01-27T13:23:08.057038Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs.h</path>
</paths>
<msg>* subversion/libsvn_fs_fs/fs.h
  (struct node_revision_t): Followup to r1727028, update comment.
</msg>
</logentry>
<logentry
   revision="1727028">
<author>stefan2</author>
<date>2016-01-27T13:02:24.736014Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/dag.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>In FSFS, remove unnecessary and misleading checks for NODE.PREDECESSOR_COUNT
of -1.  These seem to have been carried over from BDB.

History digging found that even SVN 1.1 FSFS would not check for -1 when
bumping the counter in a transactions.  So, it never has been something to
worry about in FSFS.

Suggested by: philip

* subversion/libsvn_fs_fs/dag.c
  (svn_fs_fs__dag_clone_child,
   svn_fs_fs__dag_copy,
   svn_fs_fs__dag_update_ancestry): Predecessor_count can never be -1
                                    for non-corrupted data.

* subversion/libsvn_fs_fs/transaction.c
  (validate_root_noderev): Same.
</msg>
</logentry>
<logentry
   revision="1727007">
<author>stefan2</author>
<date>2016-01-27T11:49:34.340970Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/pack.c
  (sort_reps_range): Fix typos in commentary. No functional change.</msg>
</logentry>
<logentry
   revision="1727006">
<author>stefan2</author>
<date>2016-01-27T11:45:39.015203Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/pack.c
  (sort_reps_range): Make the logic more robust against interger
                     overflows and extend the commentary.</msg>
</logentry>
<logentry
   revision="1727000">
<author>stsp</author>
<date>2016-01-27T11:26:28.153459Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/tools/dev/svnmover</path>
</paths>
<msg>*  tools/dev/svnmover: Add 'svnmover' to svn:ignore.
</msg>
</logentry>
<logentry
   revision="1726996">
<author>stefan2</author>
<date>2016-01-27T11:15:19.529015Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Fix an inefficiency in membuffer cache key handling on /trunk.
The prefix pool has been effectively unused.

* subversion/libsvn_subr/cache-membuffer.c
  (prefix_pool_get_internal):  Fix the overflow detection.  We want to
                               _accept_ entries until overflow.</msg>
</logentry>
<logentry
   revision="1726995">
<author>stefan2</author>
<date>2016-01-27T11:12:36.493741Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>Fix an interger overflow in the FSFS packing code on /trunk.
Older releases are not affected.

Found by: philip

* subversion/libsvn_fs_fs/pack.c
  (roundness): The return value for 0 could be anything but 0 is
               apparently the more consistent and robust choice.
               There is effectively no change in the caller logic
               because having no predecessors still makes those
               nodes a "likely head".  No longer being a "likely
               target" due to a high roundness value is then
               inconsequential.
</msg>
</logentry>
<logentry
   revision="1726897">
<author>philip</author>
<date>2016-01-26T20:47:10.201188Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/pack.c
  (sort_reps_range): Typo in comment, no functional change.
</msg>
</logentry>
<logentry
   revision="1726454">
<author>philip</author>
<date>2016-01-23T22:42:12.188300Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/request_body.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/request_body.c
  (struct svn_ra_serf__request_body_t): Avoid redefining typedef to fix
   a clang compiler warning.
</msg>
</logentry>
<logentry
   revision="1726376">
<author>stefan2</author>
<date>2016-01-23T11:03:27.835963Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
</paths>
<msg>Follow-up on r1726004:
Make sure to always set the OOD info in FSX.

* subversion/libsvn_fs_x/temp_serializer.c
  (svn_fs_x__extract_dir_entry): This function has an early-out code path,
                                 so we must set the OOD field earlier.</msg>
</logentry>
<logentry
   revision="1726375">
<author>stefan2</author>
<date>2016-01-23T10:58:28.873693Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
</paths>
<msg>Fix a random segfault in log-related code on FSX.

* subversion/libsvn_fs_x/temp_serializer.c
  (svn_fs_x__serialize_changes): Wrong level of indirection.</msg>
</logentry>
<logentry
   revision="1726116">
<author>stefan2</author>
<date>2016-01-21T22:02:01.695230Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/cached_data.c
  (read_dir_entries): Give some context if FSFS directory hashes could
                      not be parsed.</msg>
</logentry>
<logentry
   revision="1726115">
<author>stefan2</author>
<date>2016-01-21T22:00:25.074282Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/verify.c</path>
</paths>
<msg>Fix breakage introduced during the FSFS-&gt;FSX port in r1726036.

* subversion/libsvn_fs_x/verify.c
  (expect_buffer_nul): Revert to old code.</msg>
</logentry>
<logentry
   revision="1726099">
<author>stefan2</author>
<date>2016-01-21T21:09:50.569209Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
</paths>
<msg>Follow-up to r1726004:
Never toggle the meaning of a flag last minute ...

* subversion/libsvn_fs_fs/temp_serializer.c
  (svn_fs_fs__extract_dir_entry): Fix OOD condition.

* subversion/libsvn_fs_x/temp_serializer.c
  (svn_fs_x__extract_dir_entry): Same.</msg>
</logentry>
<logentry
   revision="1726053">
<author>stefan2</author>
<date>2016-01-21T18:34:16.485742Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
</paths>
<msg>* subversion/libsvn_fs_x/temp_serializer.c
  (serialize_dir): Give a better estimate for the size of serialized dir in
                   FSX.  Don't forget that this is still only the initial
                   buffer size and will be auto-resized if necessary.</msg>
</logentry>
<logentry
   revision="1726037">
<author>stefan2</author>
<date>2016-01-21T17:36:34.883990Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>Sync FSX with FSFS:  Block revisions 1709388, 1710368, 1710370, 1711507,
1717864, 1719413, 1720015 and 1723834 from being merged from FSFS to FSX.
These changes do not apply to FSX.
</msg>
</logentry>
<logentry
   revision="1726036">
<author>stefan2</author>
<date>2016-01-21T17:34:33.567910Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/rev_file.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/util.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/verify.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/index.c</path>
</paths>
<msg>Sync FSX with FSFS: Merge all recent I/O-API-related changes (revisions
1719269 and 1719336) from FSFS to FSX.  Resolve the usual text conflicts.</msg>
</logentry>
<logentry
   revision="1726025">
<author>stefan2</author>
<date>2016-01-21T17:14:24.762488Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
</paths>
<msg>Sync FSX with FSFS: Merge all recent style and warnings fixes (revisions
1719730 and 1723839) from FSFS to FSX.  Resolve the usual text conflicts.
</msg>
</logentry>
<logentry
   revision="1726024">
<author>stefan2</author>
<date>2016-01-21T17:05:51.970586Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/caching.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.h</path>
</paths>
<msg>Sync FSX with FSFS: Merge all recent caching-related changes (revisions
1721285, 1723715, 1723720, 1725179, 1725180 and 1726004) from FSFS to FSX.
Resolve the usual text conflicts.
</msg>
</logentry>
<logentry
   revision="1726004">
<author>stefan2</author>
<date>2016-01-21T16:27:04.398562Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Fix the OOD check for cached FSFS in-txn directories when looking for a
specific entry.

The problem is that even outdated directory data is reported as "found"
by the lookup code.  The callback that will check for out-of-dateness
needs to report back that the data found could not be used.

This was found during testing the parallel-put freature and is part of
the new multi-connection editing support we added in trunk for 1.10. 

* subversion/libsvn_fs_fs/temp_serializer.h
  (extract_dir_entry_baton_t): Add an OOD indicator field to be filled
                               by the callback.

* subversion/libsvn_fs_fs/temp_serializer.c
  (svn_fs_fs__extract_dir_entry): Set that new field.

* subversion/libsvn_fs_fs/cached_data.c
  (svn_fs_fs__rep_contents_dir_entry): Treat OOD data the same as uncached.</msg>
</logentry>
<logentry
   revision="1725996">
<author>stsp</author>
<date>2016-01-21T15:52:56.446420Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Start using conflict descriptions provided by libsvn_client in 'svn'.

This changes the long descriptions displayed by the '(h) help' command
at the conflict prompt. I'm very open to suggestions about what these
strings should say.

* subversion/svn/conflict-callbacks.c
  (text_conflict_options, binary_conflict_options, prop_conflict_options,
   tree_conflict_options): Replace custom descriptions with NULL where
  libsvn_client already provides a description.
 (help_string): Add a 'default_options' argument which contains the
  options provided by libsvn_client. Search these options for a description
  if no custom description is known.
  This function must now return an svn_error_t * to allow it to call the
  svn_client_conflict_option_describe() function.
 (prompt_user): Add a 'default_options' argument as well, for help_string().
 (handle_text_conflict, handle_prop_conflict, handle_tree_conflict): Obtain
  default conflict options from libsvn_client and pass them to prompt_user().
  Drop 'const' from conflict argument for now. Perhaps we can fix the
  libsvn_client API not to require a mutable conflict object but I've
  left this for later.
 (conflict_func_interactive): Drop 'const' from conflict argument for now.
</msg>
</logentry>
<logentry
   revision="1725989">
<author>stsp</author>
<date>2016-01-21T15:44:23.877774Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (binary_conflict_options, prop_conflict_options): Add the
   svn_client_conflict_option_merged_text option here, too
   The 'svn' client currently maps this option to 'mark resolved'.
</msg>
</logentry>
<logentry
   revision="1725982">
<author>stsp</author>
<date>2016-01-21T15:20:28.063281Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Split --accept arguments out of the resolver's long option help strings.

This change doesn't affect what is displayed by the "(h) help" option
at the conflict prompt. I'm moving the previously hard-coded square-bracket
parts of help strings (such as "  [theirs-conflict]") into a struct field
of their own.

This makes accept options independent of the actual long help string used
to describe an option, and hence prepares the 'svn' client for using long
help strings provided by libsvn_client instead of custom ones.

As a bonus, this makes life slightly easier for translators, and allows
us to reuse existing macros for the ---accept strings.

* subversion/svn/conflict-callbacks.c
  (resolver_option_t): Add accept_arg field.
  (text_conflict_options, prop_conflict_options, binary_conflict_options,
   tree_conflict_options): Set the accept_arg field where necessary.
  (help_string): Use an alternative format string if an accept_arg is available.
</msg>
</logentry>
<logentry
   revision="1725957">
<author>kotkov</author>
<date>2016-01-21T14:18:43.321942Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/merge-cmd.c</path>
</paths>
<msg>Allocate the baton for 'svn merge --accept' conflict callback in the pool,
instead of using a pointer to stack.

* subversion/svn/merge-cmd.c
  (svn_cl__merge): Allocate struct conflict_func_merge_cmd_baton in the
   pool.  Otherwise, the ctx-&gt;conflict_baton2 pointer becomes dangling
   when the stack variable falls out of scope.
</msg>
</logentry>
<logentry
   revision="1725953">
<author>stsp</author>
<date>2016-01-21T14:07:48.041383Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (text_conflict_options): Tweak conflict option descriptions to better
   describe what they imply. I'm open to suggestions for better wording.
   Also, add svn_client_conflict_option_merged_text since the 'svn' client
   will need this option.
</msg>
</logentry>
<logentry
   revision="1725948">
<author>stsp</author>
<date>2016-01-21T13:51:26.121714Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Improve the behaviour of 'svn patch' when a reject file cannot be created.

* subversion/libsvn_client/patch.c
  (write_out_rejected_hunks): Add 'root_abspath' argument. If the reject
   file cannot be created because an intermediate directory is missing,
   try to create the reject file in the working copy root instead.
   Previously, this was a fatal error condition and aborted patching.
   This problem can happen when trying to apply a patch to the wrong directory.
  (apply_patches): Pass root_abspath to write_out_rejected_hunks().
</msg>
</logentry>
<logentry
   revision="1725944">
<author>stsp</author>
<date>2016-01-21T13:31:48.012352Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (text_conflict_options, binary_conflict_options, prop_conflict_options,
   tree_conflict_options): Tweak the default description of the 'postpone'
   conflict option to better describe what this option implies.
</msg>
</logentry>
<logentry
   revision="1725943">
<author>stsp</author>
<date>2016-01-21T13:28:27.842683Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h
  (svn_client_conflict_option_id_t): Mark the options which correspond to
   the old "theirs-full" and "mine-full" options with comments. This will
   hopefully avoid ambiguity: The old 'mine-full' is called 'working_text'
   which is somewhat ambiguous. Perhaps I should look for a better name.
</msg>
</logentry>
<logentry
   revision="1725182">
<author>stefan2</author>
<date>2016-01-18T08:11:21.791756Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
</paths>
<msg>FSX is able to cache larger directories because it uses a tighter
data structure.

* subversion/libsvn_fs_x/temp_serializer.c
  (serialize_dir): No longer greatly over-estimate the data size.</msg>
</logentry>
<logentry
   revision="1725180">
<author>stefan2</author>
<date>2016-01-18T08:07:30.000373Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Reduce peak memory footprint for very large directories in FSFS.

* subversion/libsvn_fs_fs/cached_data.c
  (svn_fs_fs__rep_contents_dir,
   svn_fs_fs__rep_contents_dir_entry): Don't serialize directories that
                                       won't fit into the cache.</msg>
</logentry>
<logentry
   revision="1725179">
<author>stefan2</author>
<date>2016-01-18T08:03:36.567187Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/caching.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.h</path>
</paths>
<msg>Reduce memory footprint of cached directories in FSFS revisions.

For efficient modification within a transaction, we over-provide cache
memory.  So, we can add entries in constant time instead of running a
complete de-serialization / modification / serialization cycle.  This
space overhead is not useful for immutable, committed data.  Therefore,
make it txn-only.  The serialization format etc. does not change.

* subversion/libsvn_fs_fs/temp_serializer.h
  (svn_fs_fs__serialize_txndir_entries): Declare specific serializer
                                         for in-txn directories.

* subversion/libsvn_fs_fs/temp_serializer.c
  (return_serialized_dir_context): Make over-provisioning optional.
  (svn_fs_fs__serialize_dir_entries): Don't over-provide anymore.
  (svn_fs_fs__serialize_txndir_entries): Implement using over-provision.
  (svn_fs_fs__replace_dir_entry): Always over-provide b/c this is in-txn
                                  data.

* subversion/libsvn_fs_fs/caching.c
  (svn_fs_fs__initialize_txn_caches): Use the specific dir serializers.</msg>
</logentry>
<logentry
   revision="1724864">
<author>stsp</author>
<date>2016-01-15T17:50:52.958194Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/svn.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/notify.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/merge-cmd.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svn/resolve-cmd.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/switch-cmd.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/cl.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/update-cmd.c</path>
</paths>
<msg>Remove the svn_cl__conflict_func_interactive() callback.

The command line client will now start the conflict resolver by itself if
an update, merge, or switch operation flags conflicts in the working copy.
Before this commit it was relying on the libraries to do so. This finally
gives full control over conflict resolution to the client and paves the
way for future enhancements of the conflict resolver.

Only one use case of the libsvn_wc conflict callback remains. This is
required for supporting 'svn merge --accept' during merges which perform
multiple editor drives. A better solution would be changing the
svn_client_merge API to allow the client to get away without the conflict
callback. I've left this for future work.

* subversion/svn/cl.h
  (svn_cl__conflict_stats_get_paths): Declare this new function which is
   involved in keeping existing conflict resolution behaviour intact.
   The client already records newly conflicted paths as part of conflict
   accounting. We use this list of paths to run the conflict resolver on
   the newly conflicted paths only, rather than running it over the entire
   working copy as 'svn resolve' would do.
  (svn_cl__get_conflict_func_interactive_baton,
   svn_cl__conflict_func_interactive): Remove declaration. Now unused.
  (svn_cl__walk_conflicts): Declare this new function which makes the
   working copy walker logic of 'svn resolve' available to subcommands
   which now need it as well.
   
* subversion/svn/conflict-callbacks.c
  (svn_cl__get_conflict_func_interactive_baton,
   svn_cl__conflict_func_interactive): Remove.

* subversion/svn/merge-cmd.c
  (conflict_func_merge_cmd_baton, conflict_func_merge_cmd): Add this
   temporary implementation of svn_wc_conflict_resolver_func2_t to
   avoid breaking 'svn merge --accept'. Note that we cannot support the
   'edit' and 'launch' accept options anymore, so these now map to 'postpone'.
   This is a small CLI interface change relative to 1.9.
  (svn_cl__merge): Install the above conflict callback if necessary.
   Invoke the interactive conflict resolver if necessary.

* subversion/svn/notify.c
  (svn_cl__conflict_stats_get_paths): Implement.

* subversion/svn/resolve-cmd.c
  (svn_cl__walk_conflicts): Implement. Partly split out of svn_cl__resolve().

* subversion/svn/svn.c
  (sub_main): Do not install a libsvn_wc conflict callback by default.

* subversion/svn/switch-cmd.c
  (svn_cl__switch): Invoke the interactive conflict resolver if necessary.

* subversion/svn/update-cmd.c
  (svn_cl__update): Invoke the interactive conflict resolver if necessary.
</msg>
</logentry>
<logentry
   revision="1724855">
<author>stsp</author>
<date>2016-01-15T16:48:27.791174Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (svn_wc_create_conflict_result): Initialise 'merged_value' (new in 1.9).
</msg>
</logentry>
<logentry
   revision="1724809">
<author>kotkov</author>
<date>2016-01-15T14:05:24.635331Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/pool.c</path>
</paths>
<msg>Following up on r1724784, mark the STATUS_NO_MEMORY exception as
non-continuable [1].

We treat out-of-memory conditions as unrecoverable, and using a continuable
exception could lead to third-party API users accidentally swallowing these
exceptions and resuming execution in their structured exception handlers.

[1] https://msdn.microsoft.com/en-us/library/windows/desktop/ms680552

* subversion/libsvn_subr/pool.c
  (abort_on_pool_failure): Set flags to EXCEPTION_NONCONTINUABLE.
</msg>
</logentry>
<logentry
   revision="1724790">
<author>ivan</author>
<date>2016-01-15T12:57:20.225168Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
</paths>
<msg>mod_dav_svn: Do not set Last-Modified response header for GET responses.

This saves a bit of unnecessary work on the server-side, since:
- This header is not used by Subversion clients
- We allow caching GET responses for up-to 1 week without re-validation
- Browsers and proxies support ETag and use it for re-validation instead of
  the Last-Modified header

See the discussion in thread "Last-Modified HTTP header in GET responses" [1]

[1] https://www.mail-archive.com/dev@subversion.apache.org/msg34354.html

* subversion/mod_dav_svn/repos.c
  (get_last_modified): Remove.
  (set_headers): Do set Last-Modifed response header.
</msg>
</logentry>
<logentry
   revision="1724784">
<author>kotkov</author>
<date>2016-01-15T12:11:43.487707Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/win32_crashrpt.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/pool.c</path>
</paths>
<msg>Provide a way to distinguish the out-of-memory error from abort() on Windows.

There are multiple reasons why an abort() could be called in our code.  Make
crashing due to out-of-memory conditions use a specific exception code, so
that we would be able to distinguish it from, e.g., crashing due to a failed
SVN_ERR_ASSERT().

* subversion/libsvn_subr/pool.c
  (abort_on_pool_failure): Raise STATUS_NO_MEMORY on Windows.

* subversion/libsvn_subr/win32_crashrpt.c
  (exception_string): Unroll the part of the stringifying macro.  Handle
   STATUS_NO_MEMORY in this helper for our unhandled exception filter.
</msg>
</logentry>
<logentry
   revision="1724455">
<author>kotkov</author>
<date>2016-01-13T16:27:10.456863Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_ra_serf/commit.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/request_body.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/ra_serf.h</path>
</paths>
<msg>In ra_serf, keep small svndiffs in memory during commit, instead of always
spilling them to temporary files.

This avoids a certain part of the disk I/O — for instance, importing around
2000 files on a A-Tier Azure VM becomes slightly faster:

  47.945 s → 41.547 s

What's probably more important, we don't create/open/close/delete files
per every change in the commit.  On Windows this can be heavy with a virus
scanner working in background.  If that's the case, the performance penalty
of this work for the same 2000 files is much more visible:

  107.644 s → 53.901 s

* subversion/libsvn_ra_serf/ra_serf.h
  (svn_ra_serf__request_body_cleanup): Declare.

* subversion/libsvn_ra_serf/request_body.c
  (svn_ra_serf__request_body_cleanup): New function.  Explicitly closes
   the handle to a temporary file in case it's being used.

* subversion/libsvn_ra_serf/commit.c
  (struct file_context_t.stream): Adjust the comment.
  (struct file_context_t.svndiff): Now is a svn_ra_serf__request_body_t.
  (create_put_body): Remove, since we'll ask svn_ra_serf__request_body_t
   for the delegate.
  (delayed_commit_stream_open): Remove, since svn_ra_serf__request_body_t
   knows how to avoid creating temporary files unless they're needed.
   Therefore, we no longer need a lazyopen stream.
  (apply_textdelta): Create a svn_ra_serf__request_body_t, ask it for the
   writable stream.  Disown the stream when calling svn_txdelta_to_svndiff3()
   so that we could close it explicitly in close_file(), instead of relying
   on the stream to be closed due to encountering the final (null) delta
   window.
  (close_file): If we had a stream of changes, close the stream and ask
   svn_ra_serf__request_body_t for a request body delegate.  Explicitly
   cleanup the request body after the PUT request.
</msg>
</logentry>
<logentry
   revision="1724449">
<author>kotkov</author>
<date>2016-01-13T16:22:02.812559Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/update.c</path>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/request_body.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/ra_serf.h</path>
</paths>
<msg>In ra_serf, factor out the request body collecting code used by update
reporter (that keeps request bodies below certain size in memory) for
reuse.

This lays the groundwork required to keep small svndiffs in memory during
commit, instead of always spilling them to temporary files.  Can't use a
spillbuf for that, since a svn_ra_serf__request_body_delegate_t can be
called more than once in case a request needs to be resent (authentication
challenge or hitting a KeepAlive limit), and spillbuf is designed the way
that reading from it drains the contents.

* subversion/libsvn_ra_serf/ra_serf.h
  (SVN_RA_SERF__REQUEST_BODY_IN_MEM_SIZE): New constant, equal
   to the removed MAX_BODY_IN_RAM in update.c.
  (typedef struct svn_ra_serf__request_body_t): New typedef.
  (svn_ra_serf__request_body_create,
   svn_ra_serf__request_body_get_stream,
   svn_ra_serf__request_body_get_delegate): Declare these new functions.

* subversion/libsvn_ra_serf/request_body.c
  New file with svn_ra_serf__request_body_t implementation factored out
  from ...

* subversion/libsvn_ra_serf/update.c
  (struct body_create_baton_t, body_allocate_all, serf_free_no_error,
   body_write_fn, body_done_fn, create_update_report_body): ...this struct
   and corresponding functions.
  (MAX_BODY_IN_RAM): Remove this constant.
  (struct report_context_t.body_template): Adjust the comment.
  (struct report_context_t.body): Now is a svn_ra_serf__request_body_t.
  (finish_report): Ask svn_ra_serf__request_body_t for a request body
   delegate.
  (make_update_reporter): Create a svn_ra_serf__request_body_t, ask it for
   the writable stream.
</msg>
</logentry>
<logentry
   revision="1724448">
<author>rhuijben</author>
<date>2016-01-13T16:19:50.366401Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/update_editor.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/authz_tests.py</path>
</paths>
<msg>Resolve a regression in our auth handling on update, which it appears I
introduced somewhere during the WC-NG work for Subversion 1.7.

Before this patch directories that are hidden by a change in authz settings
cause a skip caused by unversioned working copy message. After this patch
the nodes are properly removed from the working copy, introducing tree
conflicts if there are local changes.

* subversion/libsvn_wc/update_editor.c
  (absent_node): Properly hide newly server excluded nodes.

* subversion/tests/cmdline/authz_tests.py
  (remove_access_after_commit): New test
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1724103">
<author>kotkov</author>
<date>2016-01-11T18:08:53.366256Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/mod_dav_svn_tests.py</path>
</paths>
<msg>Add regression tests for mod_dav_svn's PROPFIND responses.

* subversion/tests/cmdline/mod_dav_svn_tests.py
  (imports): Import os.
  (compare_xml_elem, verify_xml_response): New helper routines used to
   compare XML responses.
  (simple_propfind, propfind_multiple_props, propfind_404,
   propfind_allprop, propfind_propname): New tests.
  (test_list): Execute new tests.
</msg>
</logentry>
<logentry
   revision="1723946">
<author>philip</author>
<date>2016-01-10T18:35:21.052642Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/path.c</path>
</paths>
<msg>* subversion/libsvn_subr/path.c
  (get_path_ancestor_length): Fix anomolous indentation detected by
   GCC -Wmisleading-indentation.
</msg>
</logentry>
<logentry
   revision="1723886">
<author>ivan</author>
<date>2016-01-09T22:23:56.003758Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/delta.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/repos.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
</paths>
<msg>Inline private function used in one place and just calls existing FS API
function.

* subversion/libsvn_repos/delta.c
* subversion/libsvn_repos/repos.h
  (svn_repos__compare_files): Remove.

* subversion/libsvn_repos/reporter.c
  (delta_files): Just use svn_fs_contents_different().
</msg>
</logentry>
<logentry
   revision="1723883">
<author>ivan</author>
<date>2016-01-09T21:55:22.891166Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
</paths>
<msg>* subversion/libsvn_repos/reporter.c
  (delta_files): Tighten scope of local variable. No functional changes.
</msg>
</logentry>
<logentry
   revision="1723882">
<author>ivan</author>
<date>2016-01-09T21:50:33.900690Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Follow-up to r1723865: Relax check in newly added test to copy with known
problem in ra_serf.

* subversion/tests/libsvn_ra/ra-test.c
  (get_dir_test): Do not check DIRENT-&gt;SIZE due known problem in ra_serf. This
   test for different bug.
</msg>
</logentry>
<logentry
   revision="1723865">
<author>ivan</author>
<date>2016-01-09T17:42:38.556885Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnserve/serve.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_local/ra_plugin.c</path>
</paths>
<msg>Fix bug when svn_ra_get_dir2() will fail if invoked with SVN_DIRENT_SIZE, but
without SVN_DIRENT_KIND. There is no user visible bug, since Subversion
command line client always ask for SVN_DIRENT_KIND.

* subversion/libsvn_ra_local/ra_plugin.c
  (svn_ra_local__get_dir): Do not access possibly uninitialized local variable.

* subversion/svnserve/serve.c
  (get_dir): Do not access possibly uninitialized local variable.

* subversion/tests/libsvn_ra/ra-test.c
  (get_dir_test): Extend test to test svn_ra_get_dir2(SVN_DIRENT_SIZE).
</msg>
</logentry>
<logentry
   revision="1723839">
<author>ivan</author>
<date>2016-01-09T09:22:48.403850Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
</paths>
<msg>Follow-up to r1723834: Inline one line static function.

* subversion/libsvn_fs_fs/tree.c
  (node_kind): Inline to ...
  (svn_fs_fs__check_path): ... here. Use standard error handling.
</msg>
</logentry>
<logentry
   revision="1723834">
<author>ivan</author>
<date>2016-01-09T08:39:05.776677Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
</paths>
<msg>Simplify svn_fs_check_path() implementation for FSFS.

* tree.c
  (node_kind): Obtain dag_node_t instance directly via get_dag_node() instead
   of svn_fs_fs__node_id() + svn_fs_fs__dag_get_node(). 
</msg>
</logentry>
<logentry
   revision="1723720">
<author>kotkov</author>
<date>2016-01-08T12:38:42.904459Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/caching.c</path>
</paths>
<msg>Make mod_dav_svn actually use the FSFS transaction directory cache during
series of PUT requests.

Prior to this changeset, we were adding a uuid to the cache prefix,
and that prevented mod_dav_svn from reusing the cache between two PUT
requests, i.e., after reopening the filesystem / getting the transaction
root.  We only need to insert the uuid for older filesystem formats that
don't track the global transaction ID via db/txn-current file.

* subversion/libsvn_fs_fs/caching.c
  (svn_fs_fs__initialize_txn_caches): Don't use a uuid in the cache prefix
   for newer filesystem formats.
</msg>
</logentry>
<logentry
   revision="1723715">
<author>ivan</author>
<date>2016-01-08T12:28:35.243550Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/caching.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/mod_dav_svn/mod_dav_svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-fuzzy-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/dav_svn.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnserve/svnserve.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
</paths>
<msg>Add runtime configuration option to enable FSFS node properties caching
without enabling full-texts caching.

* subversion/include/svn_fs.h
  (SVN_FS_CONFIG_FSFS_CACHE_NODEPROPS): New.

* subversion/libsvn_fs_fs/caching.c
  (read_config): Parse SVN_FS_CONFIG_FSFS_CACHE_NODEPROPS FS config flag.
  (svn_fs_fs__initialize_caches): Enable node properties caching if needed.

* subversion/mod_dav_svn/dav_svn.h
  (dav_svn__get_nodeprop_cache_flag): New.

* subversion/mod_dav_svn/mod_dav_svn.c
  (dir_conf_t): Add NODEPROP_CACHE member.
  (merge_dir_config): Merge NODEPROP_CACHE setting.
  (SVNCacheNodeProps_cmd): New.
  (dav_svn__get_nodeprop_cache_flag): New.
  (cmds): Add SVNCacheNodeProps directive.

* subversion/mod_dav_svn/repos.c
  (get_resource): Pass node properties caching setting to svn_repos_open3().

* subversion/svnadmin/svnadmin.c
  (open_repos): Enable node properties caching to match Subversion 1.9.0
   behavior.

* subversion/svnserve/svnserve.c
  (SVNSERVE_OPT_CACHE_NODEPROPS): New.
  (svnserve__options): Add '--cache-nodeprops' command line parameter.
  (sub_main): Handle '--cache-nodeprops' command line parameter.

* subversion/tests/libsvn_fs_fs/fs-fs-fuzzy-test.c
  (fuzzing_1_byte_1_rev): Enable node properties caching to match
   Subversion 1.9.0 behavior.
</msg>
</logentry>
<logentry
   revision="1723588">
<author>ivan</author>
<date>2016-01-07T16:54:02.913439Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
</paths>
<msg>* subversion/libsvn_repos/reporter.c
  (delta_proplists): Reduce scope of several local variables.</msg>
</logentry>
<logentry
   revision="1723587">
<author>ivan</author>
<date>2016-01-07T16:49:51.897919Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
</paths>
<msg>* subversion/libsvn_repos/reporter.c
  (delta_proplists): Reduce scope of local variable. No functional changes.
</msg>
</logentry>
<logentry
   revision="1723415">
<author>philip</author>
<date>2016-01-06T21:54:05.144167Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/relocate_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/relocate_tests.py
  (prefix_partial_component): Don't use read_only=True as we want to delete
   the repository.  This should fix a test failure with GLOBAL_SCHEDULER=1.
</msg>
</logentry>
<logentry
   revision="1723399">
<author>philip</author>
<date>2016-01-06T18:45:03.331129Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/relocate_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/relocate_tests.py
  (prefix_partial_component): New test, prefix has a partial component.
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1723390">
<author>philip</author>
<date>2016-01-06T17:36:39.653613Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/relocate_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/relocate_tests.py
  (relocate_with_relative_externals): Followup to r1723387, match the code
   style used earlier in the test.
</msg>
</logentry>
<logentry
   revision="1723387">
<author>philip</author>
<date>2016-01-06T17:32:10.450795Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/relocate_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/relocate_tests.py
  (relocate_with_relative_externals): Followup to r1723385, verify the
   relocate has occurred.
</msg>
</logentry>
<logentry
   revision="1723385">
<author>philip</author>
<date>2016-01-06T17:20:28.099714Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/relocate.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/relocate_tests.py</path>
</paths>
<msg>Fix a problem relocating some externals.

Reported by: Larry Baird &lt;lab{_AT_}gta.com&gt;

* subversion/libsvn_client/relocate.c
  (svn_client_relocate2): Handle case where prefix is too long
   to be valid for externals.

* subversion/tests/cmdline/relocate_tests.py
  (relocate_with_relative_externals): Extend.
</msg>
</logentry>
<logentry
   revision="1723328">
<author>stefan2</author>
<date>2016-01-06T13:59:39.710310Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/logic.c</path>
</paths>
<msg>* tools/client-side/svn-mergeinfo-normalizer/logic.c
  (show_elision_result,
   show_obsoletes_summary): I can ze english good.</msg>
</logentry>
<logentry
   revision="1723325">
<author>stefan2</author>
<date>2016-01-06T13:56:44.163590Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/eol.c</path>
</paths>
<msg>* subversion/libsvn_subr/eol.c
  (svn_eol__find_eol_start): Fix indentation. No functional change.</msg>
</logentry>
<logentry
   revision="1723324">
<author>stefan2</author>
<date>2016-01-06T13:56:30.279575Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/logic.c</path>
</paths>
<msg>Minor UI and docstring tweaks in svn-mergeinfo-normalizer.
No functional change intended.

* tools/client-side/svn-mergeinfo-normalizer/logic.c
  (show_removing_obsoletes): Don't claim that we will actually remove
                             all these entries because we often won't.
  (remove_obsolete_line): Clarify docstring w.r.t. LOCAL_ONLY. 
  (show_elision_result,
   show_obsoletes_summary): Make wording in our output account for the
                            case that there is only one such branch.</msg>
</logentry>
<logentry
   revision="1723285">
<author>ivan</author>
<date>2016-01-06T11:36:28.291575Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/deprecated.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
</paths>
<msg>Move deprecated FS API functions to deprecated.c. No functional changes.

* subversion/libsvn_fs/fs-loader.c
  (): Do not include &lt;apr_md5.h&gt;
  (svn_fs_paths_changed, svn_fs_file_md5_checksum): Move to ... 
* subversion/libsvn_fs/deprecated.c
  (svn_fs_paths_changed, svn_fs_file_md5_checksum): ... here.
  (): Include &lt;apr_md5.h&gt;
</msg>
</logentry>
<logentry
   revision="1722913">
<author>julianfoad</author>
<date>2016-01-04T16:25:37.965252Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/diff.c</path>
</paths>
<msg>* subversion/libsvn_client/diff.c
  (diff_repos_wc): Deduplicate one (long) line of duplicated code.</msg>
</logentry>
<logentry
   revision="1722887">
<author>stefan2</author>
<date>2016-01-04T15:11:08.225726Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Stop trying to align pointers in the cache-membuffer code, too, because
that is not portable.

* subversion/libsvn_subr/cache-membuffer.c
  (ITEM_ALIGNMENT): Document that this is no longer an "absolute" alignment.
  (ALIGN_POINTER,
   secure_aligned_alloc): Drop. We can't do this.
  (svn_cache__membuffer_cache_create): Don't align pointers but still
                                       ensure that the data buffer sizes
                                       and relative positions are multiples
                                       of ITEM_ALIGNMENT.
  (membuffer_cache_get_internal): No longer try to be better than standard
                                  APR pointer alignment.</msg>
</logentry>
<logentry
   revision="1722881">
<author>stefan2</author>
<date>2016-01-04T14:21:34.343142Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>Fix a minor inefficiency when generating a "random" file name.

* subversion/libsvn_subr/io.c
  (get_default_file_perms): Use more of the entropy that we are given.
</msg>
</logentry>
<logentry
   revision="1722879">
<author>stefan2</author>
<date>2016-01-04T14:17:04.774885Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/utf_validate.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/eol.c</path>
</paths>
<msg>Stop using pointer arithmetics to check for proper alignment because
that is not portable.

As a result, platforms that don't allow unaligned data access will
suffer a small additional performance hit.

* subversion/libsvn_subr/eol.c
  (svn_eol__find_eol_start): No longer attempt aligned chunky processing
                             when unaligned access is not supported.

* subversion/libsvn_subr/utf_validate.c
  (first_non_fsm_start_char): Same.
</msg>
</logentry>
<logentry
   revision="1722865">
<author>stefan2</author>
<date>2016-01-04T13:31:54.618224Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/notes/knobs</path>
</paths>
<msg>Follow-up to r1722860: Update dev documentation.

* notes/knobs
  (SVN_UTF_NO_UNINITIALISED_ACCESS): Remove section about this knob and
                                     update the index. Our code no longer
                                     uses it.</msg>
</logentry>
<logentry
   revision="1722861">
<author>stefan2</author>
<date>2016-01-04T12:42:16.601043Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/eol.c</path>
</paths>
<msg>* subversion/libsvn_subr/eol.c
  (svn_eol__find_eol_start): Fix wording in comment. No functional change.</msg>
</logentry>
<logentry
   revision="1722860">
<author>stefan2</author>
<date>2016-01-04T12:41:58.257568Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/utf_validate.c</path>
</paths>
<msg>Fix access to uninitialized memory in our UTF8 validity checker.
For static strings like "", this violated C99, 6.2.4.5 and 3.17.2.

The code path for C strings only fully worked for APR allocated memory
and could fail otherwise on systems with fine-grained boundary checks.

This patch simply eliminates the C string specific implementation and
reuses the equally efficient svn_utf__last_valid function.  Calling
strlen is not an added overhead here:  If the string is ASCII-7 only,
strlen is about as efficient as first_non_fsm_start_char_cstring's
implicit EOS check.  If the string contains chars &gt;= 0x80, the much
more expensive state machine code will dominate the runtime.

Reported by: Hanno Böck &lt;hanno{_AT_}hboeck.de&gt;

* subversion/libsvn_subr/utf_validate.c
  (first_non_fsm_start_char_cstring): Remove because it is no longer used. 
  (svn_utf__cstring_is_valid): Implement in terms of svn_utf__last_valid.</msg>
</logentry>
<logentry
   revision="1722441">
<author>julianfoad</author>
<date>2015-12-31T12:48:16.546041Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/notes/move-tracking/path_pairs_to_eid_map.py</path>
</paths>
<msg>* notes/move-tracking/path_pairs_to_eid_map.py
  Rewrite with EID mapping classes for easier translation to C.</msg>
</logentry>
<logentry
   revision="1722266">
<author>jamessan</author>
<date>2015-12-30T03:27:45.341810Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport.pl</path>
</paths>
<msg>* tools/dist/backport.pl
  Change upper-bound of tested smartmatch behavior to Perl 5.22.1
</msg>
</logentry>
<logentry
   revision="1722164">
<author>jamessan</author>
<date>2015-12-29T15:53:22.125216Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/configure.ac</path>
</paths>
<msg>Filter out -Wdate-time from SWIG_CPPFLAGS

As part of the reproducible builds effort[0], it's becoming more common to see
-Wdate-time in CPPFLAGS, which is used to seed SWIG_CPPFLAGS.  Swig doesn't
understand this switch, so continue the current whack-a-mole approach of
filtering out unsupported switches in SWIG_CPPFLAGS.

[0]: https://reproducible-builds.org/

* configure.ac
  (SWIG_CPPFLAGS): Filter out -Wdate-time
</msg>
</logentry>
<logentry
   revision="1721747">
<author>ivan</author>
<date>2015-12-26T19:13:26.823900Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/deadprops.c</path>
</paths>
<msg>* subversion/mod_dav_svn/deadprops.c
  (db_first_name): Use RESOURCE-&gt;COLLECTION instead of svn_fs_check_path() to
   find whether we're iterating properties for directory or file.
</msg>
</logentry>
<logentry
   revision="1721746">
<author>ivan</author>
<date>2015-12-26T18:33:48.675370Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/commit.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/mod_dav_svn/merge.c</path>
</paths>
<msg>Obtain svn:author and svn:date using one FS call after commit.

* subversion/libsvn_repos/commit.c
* subversion/mod_dav_svn/merge.c
  (invoke_commit_cb, dav_svn__merge_response): Use svn_fs_revision_proplist2()
   to get svn:author and svn:date instead of two calls separate calls to
   svn_fs_revision_prop2().
</msg>
</logentry>
<logentry
   revision="1721732">
<author>ivan</author>
<date>2015-12-26T14:03:42.850096Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/mod_dav_svn/deadprops.c</path>
</paths>
<msg>mod_dav_svn: Improve performance and memory usage of PROPFIND with &lt;allprop /&gt;
request processing.

* subversion/mod_dav_svn/deadprops.c
  (get_value): Obtain property value from DB-&gt;PROPS hash if exists.
</msg>
</logentry>
<logentry
   revision="1721716">
<author>ivan</author>
<date>2015-12-26T09:14:25.045887Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/reports/update.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/liveprops.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/dav_svn.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/mod_dav_svn/version.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/reports/get-location-segments.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/lock.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/activity.c</path>
</paths>
<msg>Cache youngest revision during processing one request on mod_dav_svn.

* subversion/mod_dav_svn/dav_svn.h
  (dav_svn_repos): Add YOUNGEST_REV member.
  (dav_svn__create_txn): Drop const qualifier from REPOS argument.
  (dav_svn__get_youngest_rev): New function declaration.

* subversion/mod_dav_svn/util.c
  (dav_svn__get_youngest_rev): New function.

* subversion/mod_dav_svn/activity.c
* subversion/mod_dav_svn/liveprops.c
* subversion/mod_dav_svn/lock.c
* subversion/mod_dav_svn/reports/get-location-segments.c
* subversion/mod_dav_svn/reports/update.c
* subversion/mod_dav_svn/repos.c
* subversion/mod_dav_svn/version.c
  (dav_svn__create_txn, insert_prop_internal, append_locks,
   dav_svn__get_location_segments_report, dav_svn__update_report,
   prep_regular, prep_version, parse_querystring,
   dav_svn__working_to_regular_resource, get_option, dav_svn__checkout):
   Use dav_svn__get_youngest_rev() instead of direct call to
   svn_fs_youngest_rev().
  (get_parentpath_resource, get_resource): Initialize RESPO-&gt;YOUNGEST_REV to
   SVN_INVALID_REVNUM. 
</msg>
</logentry>
<logentry
   revision="1721669">
<author>ivan</author>
<date>2015-12-25T11:23:11.978516Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/liveprops.c</path>
</paths>
<msg>Remove unneeded call to svn_fs_check_path() in mod_dav_svn.

* subversion/mod_dav_svn/liveprops.c
  (insert_prop_internal): Do not call to svn_fs_check_path() to check whether
   resource is a file: we already checked this information using
   RESOURCE-&gt;COLLECTION flag.
</msg>
</logentry>
<logentry
   revision="1721668">
<author>ivan</author>
<date>2015-12-25T10:47:55.467809Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/revisions.c</path>
</paths>
<msg>Refactor code a bit to make easier for reading.

* subversion/libsvn_client/revisions.c
  (svn_client__get_revision_number): Duplicate svn_error_create() call instead
   of using goto statement.
</msg>
</logentry>
<logentry
   revision="1721660">
<author>ivan</author>
<date>2015-12-25T07:05:37.440537Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
</paths>
<msg>* subversion/mod_dav_svn/repos.c
  (get_last_modified): Use SVN_PROP_REVISION_DATE constant instead of
   hard-coded "svn:date".
</msg>
</logentry>
<logentry
   revision="1721648">
<author>jamessan</author>
<date>2015-12-24T18:33:13.332049Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build/ac-macros/swig.m4</path>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/subversion/bindings/swig/include/proxy.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/include/proxy.swg</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/INSTALL</path>
</paths>
<msg>Fix Python bindings with SWIG &lt; 3.0.6, followup on 1721488.

“%pythoncode { ... }” had to be changed to “%pythoncode %{ ... %}” to avoid
macro expansion (done in r1721488).  This was a latent bug in the bindings
exposed by stricter parsing in SWIG 3.x.

However, there was a bug in SWIG through 3.0.6 which would remove part of the
commented lines inside the “%pythoncode %{ ... %}” block.  This caused the
"right" fix to break everywhere except 3.0.6+.

As discussed in the SWIG bug tracker[0], an alternative form of the pythoncode
directive can be used to inline the contents of a specified file.  Use of this
form works in all supported SWIG versions.

[0]: https://github.com/swig/swig/issues/379#issuecomment-107664345

* subversion/bindings/swig/include/proxy.swg:
  (proxy_pythoncode): Copy %pythoncode contents to ...

* subversion/bindings/swig/include/proxy.py:
  ... new file which is included in proxy.swg via “%pythoncode "..."”
  directive.

* build/ac-macros/swig.m4
  subversion/bindings/swig/INSTALL:
  Remove 3.x related SWIG restrictions.  All SWIG versions are supported again.
</msg>
</logentry>
<logentry
   revision="1721538">
<author>julianfoad</author>
<date>2015-12-23T12:53:40.405922Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/notes/move-tracking/path_pairs_to_eid_map.py</path>
</paths>
<msg>* notes/move-tracking/path_pairs_to_eid_map.py
  Fix, following r1721537.</msg>
</logentry>
<logentry
   revision="1721537">
<author>julianfoad</author>
<date>2015-12-23T12:48:32.155225Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/notes/move-tracking/path_pairs_to_eid_map.py</path>
</paths>
<msg>* notes/move-tracking/path_pairs_to_eid_map.py
  Avoid duplicates in the output.</msg>
</logentry>
<logentry
   revision="1721534">
<author>julianfoad</author>
<date>2015-12-23T12:26:55.791371Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/notes/move-tracking/path_pairs_to_eid_map.py</path>
</paths>
<msg>* notes/move-tracking/path_pairs_to_eid_map.py
  Take input from command-line arguments.</msg>
</logentry>
<logentry
   revision="1721527">
<author>julianfoad</author>
<date>2015-12-23T11:52:59.042048Z</date>
<paths>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/notes/move-tracking/path_pairs_to_eid_map.py</path>
</paths>
<msg>Add a script that converts (initial_path, final_path) pairs to a pair of
element mappings, for move tracking.

* notes/move-tracking/path_pairs_to_eid_map.py
  New file.</msg>
</logentry>
<logentry
   revision="1721488">
<author>jamessan</author>
<date>2015-12-23T04:46:42.036028Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/include/proxy.swg</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/INSTALL</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/build/ac-macros/swig.m4</path>
</paths>
<msg>Enable building bindings with SWIG &gt;= 3.0.6

This reinstates r1690591 and adds the minimum version checks for SWIG
proposed by Joe Orton in http://svn.haxx.se/dev/archive-2015-07/0028.shtml.

* build/ac-macros/swig.m4,
  subversion/bindings/swig/INSTALL:
  Change version check and documentation to allow SWIG &gt;= 3.0.6

* subversion/bindings/swig/include/proxy.swg:
  Use %{ %} with %pythoncode so comments avoid the SWIG processor,
  fixing the bindings with SWIG &gt;= 3.0.6.
</msg>
</logentry>
<logentry
   revision="1721291">
<author>jamessan</author>
<date>2015-12-22T01:46:36.181502Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/perl/native/Base.pm</path>
</paths>
<msg>* subversion/bindings/swig/perl/native/Base.pm: Fix link to API docs
</msg>
</logentry>
<logentry
   revision="1721290">
<author>stefan2</author>
<date>2015-12-22T01:10:09.255196Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Fix an inefficiency in the membuffer cache introduced by r1717338:
Very large high-prio items would falsly get rejected.

High-priority items may be larger than the L1 max_entry_size but
still get written directly to L2, skipping L1.

* subversion/libsvn_subr/cache-membuffer.c
  (membuffer_cache_set_internal): Check for arithmetic overflow only and
                                  leave the size to check to select_level.</msg>
</logentry>
<logentry
   revision="1721289">
<author>stefan2</author>
<date>2015-12-22T00:47:58.790712Z</date>
<paths>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/find-control-statements.py</path>
</paths>
<msg>Add a simple script I used to grep all SVN sources for control statements.

* tools/dev/find-control-statements.py:
  New file.</msg>
</logentry>
<logentry
   revision="1721285">
<author>stefan2</author>
<date>2015-12-22T00:27:50.262846Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/caching.c</path>
</paths>
<msg>Make the directory cache in FSFS accept 4x larger objects than before.

Directory data, especially when it is large, needs to be cached at almost
any cost because of its big-O impact on various request execution times.
The membuffer cache will accept larger objects (~65% instead of ~15% of
the cache size) only when they are given above-average priority.

* subversion/libsvn_fs_fs/caching.c
  (svn_fs_fs__initialize_caches,
   svn_fs_fs__initialize_txn_caches): Directory data is high-prio.</msg>
</logentry>
<logentry
   revision="1721179">
<author>danielsh</author>
<date>2015-12-21T15:02:31.290143Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/backup/hot-backup.py.in</path>
</paths>
<msg>hot-backup.py: Modernize Python syntax.

* tools/backup/hot-backup.py.in: Drop syntaxes unsupported by ≥py3.0, while
    retaining compatibility with ≥py2.6.  (Both trunk and 1.9.x require ≥py2.7.)
</msg>
</logentry>
<logentry
   revision="1721175">
<author>danielsh</author>
<date>2015-12-21T15:01:22.574406Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/backup/hot-backup.py.in</path>
</paths>
<msg>hot-backup.py: Input validation.

* tools/backup/hot-backup.py.in: Error out on unknown values.</msg>
</logentry>
<logentry
   revision="1721174">
<author>danielsh</author>
<date>2015-12-21T15:00:41.413029Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/backup/hot-backup.py.in</path>
</paths>
<msg>hot-backup.py: Housekeeping.

* tools/backup/hot-backup.py.in: Escape positional arguments and regexp injects.</msg>
</logentry>
<logentry
   revision="1720643">
<author>rhuijben</author>
<date>2015-12-17T20:22:49.252560Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/remote/StatusEditor.java</path>
</paths>
<msg>* subversion/bindings/javahl/src/org/apache/subversion/javahl/remote/StatusEditor.java
  (addAbsent): Ignore callback instead of throwing error.

Patch by: Marc Strapetz &lt;marc.strapetz{_AT_}syntevo.com&gt;
</msg>
</logentry>
<logentry
   revision="1720560">
<author>julianfoad</author>
<date>2015-12-17T14:50:51.855560Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/merge.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/client.h</path>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/subversion/libsvn_client/merge_elements.c</path>
</paths>
<msg>Add skeleton code for a merge-by-elements feature.

See dev@ email thread "[RFC] An element-based 'svn merge'" started by me on
2015-12-17, archived at e.g. http://svn.haxx.se/dev/archive-2015-12/0061.shtml
or http://mail-archives.apache.org/mod_mbox/subversion-dev/201512.mbox/%3CCAEcU=1aurg2SY96ff5B0HbCCoLXKb1f67CDcmS6nFz2D9CG2qg@mail.gmail.com%3E

This is conditional on an environment variable 'SVN_ELEMENT_MERGE' being
set.

* subversion/libsvn_client/client.h
  (merge_source_t,
   merge_target_t): Move these definitions to here from merge.c.
  (svn_client__merge_elements): New.

* subversion/libsvn_client/merge.c
  (merge_peg_locked): Call the merge-by-elements code under certain
    conditions.

* subversion/libsvn_client/merge_elements.c
  New file.
</msg>
</logentry>
<logentry
   revision="1720363">
<author>rhuijben</author>
<date>2015-12-16T14:27:30.073863Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/patch_tests.py
  (missing_trailing_context): Following up on r1720359 and r1720114, write
    patchfiles as binary files to avoid platform specific behavior
    differences. Update expected results.
</msg>
</logentry>
<logentry
   revision="1720359">
<author>rhuijben</author>
<date>2015-12-16T13:57:15.912279Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Following up on r1720351, fix handling patch files that have more context
than the diff headers tell us in the same way as a shortage of context.

This change makes a bad patch in our testsuite visible, where we expected
bad behavior. This patch fixes that test and adds more testing.

* subversion/libsvn_client/patch.c
  (hunk_info_t): Separate reported fuzz from matching fuzz as mixing them
    causes errors.
  (get_hunk_info): Store both fuzz values.
  (apply_hunk): Use match fuzz for apply-magic.
  (send_hunk_notification): Report fuzz with penalty.

* subversion/libsvn_diff/parse-diff.c
  (parse_next_hunk): Parse extra context when that exists. Report this case
    as fuzz penalty, like a fuzz shortage.

* subversion/tests/cmdline/patch_tests.py
  (patch_empty_file): Fix patch to work as document. Expect the proper result.
    Extract the original version as new test.
  (missing_trailing_context): Extend test with reverse patching and too much
    trailing context.
  (patch_missed_trail): New test, with the original case of patch_empty_file.
    Expect that it no longer ignores the 'replacement' line.
  (test_list): Add patch_missed_trail.
</msg>
</logentry>
<logentry
   revision="1720351">
<author>rhuijben</author>
<date>2015-12-16T12:42:06.739372Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_diff_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Resolve issue #4609, by extending the diff parser with some additional
verifications and a match penalty.

Temporarily keep this as private api to allow backporting this patch.

[Note: This introduces some new issues applying certain bad patches. These
       issues are fixed in r1720359]

* subversion/include/private/svn_diff_private.h
  (svn_diff_hunk__get_fuzz_penalty): New function.

* subversion/libsvn_client/patch.c
  (match_hunk): Check for fuzz penalties.

* subversion/libsvn_diff/parse-diff.c
  (svn_diff_hunk_t): Add two fields.
  (add_or_delete_single_line): Safely initialize everything to 0.
  (parse_next_hunk): Handle missing context lines by updating the number
    of lines in the hunk and applying a fuzz penalty.
  (svn_diff_hunk__get_fuzz_penalty): New function.

* subversion/tests/cmdline/patch_tests.py
  (missing_trailing_context): Remove XFail. Expect fuzz.
</msg>
</logentry>
<logentry
   revision="1720333">
<author>rhuijben</author>
<date>2015-12-16T11:09:36.864270Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Following up on r1720220, make testcase expect new behavior.

* subversion/tests/libsvn_ra/ra-test.c
  (commit_empty_last_change): Update expected result.
</msg>
</logentry>
<logentry
   revision="1720220">
<author>philip</author>
<date>2015-12-15T18:39:56.024325Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_base/tree.c</path>
</paths>
<msg>* subversion/libsvn_fs_base/tree.c
  (txn_body_commit): Ensure root node is mutable so that revisions have
   distinct root node-revision-ids.  This fixes fs-test 2 FAIL for BDB.
</msg>
</logentry>
<logentry
   revision="1720118">
<author>julianfoad</author>
<date>2015-12-15T11:31:30.018608Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_nested.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch_impl.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
</paths>
<msg>In 'svnmover', consolidate some branching methods: merge the 'branch' and
'open_branch' methods into one.

* subversion/include/private/svn_branch.h
  (svn_branch__txn_open_branch): Add a 'tree_ref' parameter.
  (svn_branch__txn_branch): Delete.

* subversion/include/private/svn_branch_impl.h
  (svn_branch__txn_v_open_branch_t): Add a 'tree_ref' parameter.
  (svn_branch__txn_v_branch_t): Delete.
  (svn_branch__txn_vtable_t): Remove that method from the vtable.

* subversion/libsvn_delta/branch.c
  (branch_txn_open_branch): Add a 'tree_ref' parameter, and apply it like
    the 'branch' method used to do.
  (branch_txn_branch): Delete.
  (svn_branch__txn_open_branch): Add a 'tree_ref' parameter.
  (svn_branch__txn_branch): Delete.
  (branch_txn_create): Remove that method from the vtable.

* subversion/libsvn_delta/branch_compat.c
  (compat_branch_txn_open_branch): Add a 'tree_ref' parameter.
  (compat_branch_txn_branch): Delete.
  (svn_branch__compat_txn_from_delta_for_commit): Remove that method from
    the vtable.

* subversion/libsvn_delta/branch_nested.c
  (svn_branch__instantiate_elements_r): Update caller: pass null.
  (nested_branch_txn_open_branch): Add a 'tree_ref' parameter, and apply
    recursion to it like nested_branch_txn_branch() used to do.
  (nested_branch_txn_branch): Delete.
  (svn_branch__nested_txn_create): Remove that method from the vtable.

* tools/dev/svnmover/merge3.c
  (merge_subbranch): Use 'open_branch' instead of 'branch' method.

* tools/dev/svnmover/svnmover.c
  (svn_branch__replay,
   update_wc_base_r,
   do_mkbranch): Update caller: pass null.
  (do_branch,
   do_topbranch): Use 'open_branch' instead of 'branch' method.
</msg>
</logentry>
<logentry
   revision="1720114">
<author>philip</author>
<date>2015-12-15T10:55:12.637667Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/patch_tests.py
  (missing_trailing_context): New XFail test for issue 4609.
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1720047">
<author>stefan2</author>
<date>2015-12-14T23:31:48.125752Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Another follow-up to r1719649: Fix FS test.

* subversion/tests/libsvn_fs/fs-test.c
  (test_fsfs_config_opts): Use consistent directory names / paths.</msg>
</logentry>
<logentry
   revision="1720020">
<author>kotkov</author>
<date>2015-12-14T21:40:10.556163Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_io.h</path>
</paths>
<msg>Following up on r1710201, match the docstring for svn_stringbuf_from_stream()
with current implementation.

* subversion/include/svn_io.h
  (svn_stringbuf_from_stream): This function doesn't close the stream upon
   completion.
</msg>
</logentry>
<logentry
   revision="1720015">
<author>kotkov</author>
<date>2015-12-14T21:11:35.490196Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
</paths>
<msg>Don't leave the *use_log_addressing variable uninitialized when opening
FSFS repositories without db/format files (legacy 1.1-era repositories
didn't have these files).

Uninitialized output variable leads to undefined behavior when accessing it.
In practice, this can result in failing commits, wrong output in svnadmin
info and other feasible problems, since a non-zero value enables the logical
addressing code in a situation where it's not supposed to work:

  &gt; svn mkdir URL
  svn: E200004: Invalid L2P offset in r0 footer

  &gt; svnadmin info
  Path: C:\Repositories\repos
  UUID: fc2931cb-22a3-424d-a79e-62392adb82f0
  Revisions: 0
  Repository Format: 3
  Compatible With Version: 1.1.0
  Filesystem Type: fsfs
  Filesystem Format: 1
  FSFS Sharded: no
  FSFS Logical Addressing: yes   &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
  Configuration File: C:\Repositories\repos\db\fsfs.conf

* subversion/libsvn_fs_fs/fs_fs.c
  (read_format): Initialize *use_log_addressing when handling a filesystem
   without the format file.
</msg>
</logentry>
<logentry
   revision="1719961">
<author>julianfoad</author>
<date>2015-12-14T17:15:42.161717Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_nested.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_branch_impl.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
</paths>
<msg>In 'svnmover', consolidate some branching methods. Basically, delete the
two 'add branch' methods because 'open branch' can do the same job.

* subversion/include/private/svn_branch.h
  (svn_branch__txn_get_branches): Add comments.
  (svn_branch__txn_open_branch): Add comments. Rename a parameter.
  (svn_branch__state_t): Add comments.
  (svn_branch__txn_add_branch,
   svn_branch__txn_add_new_branch): Delete.

* subversion/include/private/svn_branch_impl.h
  (svn_branch__txn_v_add_branch_t,
   svn_branch__txn_v_add_new_branch_t): Delete.
  (svn_branch__txn_vtable_t): Delete those entries from the vtable.

* subversion/libsvn_delta/branch.c
  (branch_txn_add_branch,
   branch_txn_add_new_branch): Delete.
  (branch_txn_open_branch,
   branch_txn_branch): Don't use svn_branch__txn_add_new_branch().
  (svn_branch__txn_add_branch,
   svn_branch__txn_add_new_branch): Delete.
  (svn_branch__txn_open_branch): Rename a parameter.
  (branch_txn_create): Update the vtable.
  (svn_branch__txn_parse): Don't use svn_branch__txn_add_branch().

* subversion/libsvn_delta/branch_compat.c
  (compat_branch_txn_add_branch,
   compat_branch_txn_add_new_branch): Delete.
  (svn_branch__compat_txn_from_delta_for_commit): Update the vtable.

* subversion/libsvn_delta/branch_nested.c
  (svn_branch__instantiate_elements_r): Use svn_branch__txn_open_branch()
    instead of ...add_new_branch.
  (nested_branch_txn_add_branch,
   nested_branch_txn_add_new_branch): Delete.
  (svn_branch__nested_txn_create): Update the vtable.

* tools/dev/svnmover/svnmover.c
  (do_mkbranch): Add a comment.
</msg>
</logentry>
<logentry
   revision="1719730">
<author>ivan</author>
<date>2015-12-12T20:05:42.997666Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>Resolve one compilation warning on 32-bit platforms in FSFS.

* subversion/libsvn_fs_fs/pack.c
  (get_block_left): Return apr_off_t instead of apr_size_t. Caller will store
   result to variable of type apr_off_t anyway.
</msg>
</logentry>
<logentry
   revision="1719727">
<author>stefan2</author>
<date>2015-12-12T19:46:15.751200Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>Since we don't pre-alloc the next txn-current during commit in FSX anymore,
we don't need to take out the txn-current lock.

* subversion/libsvn_fs_x/transaction.c
  (bump_ids_baton_t): Remove.
  (bump_ids): Rename to ...
  (bump_current): ... this and replace the BATON with "proper" parameters. 
  (commit_body): Update caller to invoke the bump function directly w/o
                 wrapping it into a locking section.
</msg>
</logentry>
<logentry
   revision="1719726">
<author>stefan2</author>
<date>2015-12-12T19:36:09.720953Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>Finally, add checksums to non-packed revprop files as well.
All revprop data is checksummed now.

* subversion/libsvn_fs_x/revprops.h
  (svn_fs_x__write_non_packed_revprops): Declare new internal API to
                                         avoid code duplication.

* subversion/libsvn_fs_x/fs_x.c
  (write_revision_zero): Use the new API to create the revprops.

* subversion/libsvn_fs_x/transaction.c
  (write_final_revprop): Same.

* subversion/libsvn_fs_x/revprops.c
  (verify_checksum): Factored out from read_packed_data_checksummed.
  (read_non_packed_revprop): Call the new function to verify the
                             revprop file contents.
  (read_packed_data_checksummed): Call factored out function now.
  (svn_fs_x__write_non_packed_revprops): Implement the new API.
  (write_non_packed_revprop): Use the new API to write revprops.
  (copy_revprops): Verify revprops before packing them.</msg>
</logentry>
<logentry
   revision="1719717">
<author>stefan2</author>
<date>2015-12-12T18:40:27.683220Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>In FSX, add checksums to the packed revprop files.

Most of this is done by reusing code already written for the checksummed
manifest file.

* subversion/libsvn_fs_x/revprops.c
  (write_packed_data_checksummed): Factored out from ...
  (write_manifest): ... this.
  (read_packed_data_checksummed): Factored out from ...
  (read_manifest): ... this.
  (parse_packed_revprops,
   repack_revprops,
   copy_revprops): Call the new checksumming I/O functions for svn_packed_*.</msg>
</logentry>
<logentry
   revision="1719716">
<author>stefan2</author>
<date>2015-12-12T18:12:31.001043Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Instead of defining an on-disc structure locally for packed revprops in FSX,
simply take the svn_packed__* API to store these blobs.

* subversion/libsvn_fs_x/revprops.c
  (packed_revprops_t): Instead of the whole buffer plus a set of offsets
                       into it, simply store the serialized revprop lists
                       as individual items.
  (parse_packed_revprops): Simplify by extracting the revprop lists from a
                           svn_packed__* object.
  (read_pack_revprop): Update check for "load succeeded".
  (write_encoded_uint,
   serialize_revprops_header): Drop.
  (repack_revprops): Simplify using a svn_packed__* object and expecting the
                     REVPROPS struct to be up-to-date.
  (props_len): Update.
  (write_packed_revprop): Update the REVPROPS struct before serializing the
                          data instead of passing the modified item around.
  (copy_revprops): Also use the svn_packed__* API to write the initial pack
                   contents.</msg>
</logentry>
<logentry
   revision="1719681">
<author>stefan2</author>
<date>2015-12-12T12:52:23.869407Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>More code cleanup in FSX revprops code.

* subversion/libsvn_fs_x/revprops.c
  (parse_revprop): A 'const' parameter will do just fine.
  (parse_packed_revprops): Take the file contents as explicit parameter
                           rather than reappropriating the REVPROPS struct.
  (read_pack_revprop): Allocate the temp data in the temp pool and general
                       reduce scopes.</msg>
</logentry>
<logentry
   revision="1719678">
<author>stefan2</author>
<date>2015-12-12T12:40:35.623575Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Minor code cleanup in FSX revprops code.

* subversion/libsvn_fs_x/revprops.c
  (props_len): New utility function.
  (write_packed_revprop): Use the new function and a local variable
                          to shorten the code a bit.
</msg>
</logentry>
<logentry
   revision="1719655">
<author>stefan2</author>
<date>2015-12-12T11:25:03.216860Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_subr/packed-data-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_packed_data.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/packed_data.c</path>
</paths>
<msg>Introduce a previously missing "size" function to the svn_packed API.

We'll need it shortly and this fixes an asymmetry between integer data
and blob data streams.

* subversion/include/private/svn_packed_data.h
  (svn_packed__byte_block_count): Declare new internal API.

* subversion/libsvn_subr/packed_data.c
  (svn_packed__byte_block_count): Implement.

* subversion/tests/libsvn_subr/packed-data-test.c
  (test_byte_stream): Cover the new API as well.</msg>
</logentry>
<logentry
   revision="1719654">
<author>stefan2</author>
<date>2015-12-12T11:24:35.742974Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Follow-up to r1719649: Fix FS tests after cleanup.

* subversion/tests/libsvn_fs/fs-test.c
  (freeze_and_commit): Make sure to use the same repo name throughout
                       this test.
</msg>
</logentry>
<logentry
   revision="1719650">
<author>stefan2</author>
<date>2015-12-12T10:58:37.176416Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/low_level.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/low_level.c</path>
</paths>
<msg>Minor internal API adjustment.

* subversion/libsvn_fs_x/low_level.h
  (svn_fs_x__parse_properties): A 'const' string will do just fine.

* subversion/libsvn_fs_x/low_level.c
  (svn_fs_x__parse_properties): Sync signature with declaration.
</msg>
</logentry>
<logentry
   revision="1719649">
<author>stefan2</author>
<date>2015-12-12T10:56:13.813159Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/Makefile.in</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Have 'make clean' cover more of the temporary test data.

* Makefile.in
  (check-clean): Clean up repos in the fsx tests folder as well.

* subversion/tests/libsvn_fs/fs-test.c
  (test_fs_info_format,
   commit_timestamp,
   dir_prop_merge,
   upgrade_while_committing,
   test_paths_changed,
   test_delete_replaced_paths_changed,
   test_fsfs_config_opts,
   test_modify_txn_being_written,
   freeze_and_commit): Make sure all test repo names are prefixed by
                       "test-repo-".</msg>
</logentry>
<logentry
   revision="1719413">
<author>ivan</author>
<date>2015-12-11T13:41:26.796908Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>Simplify FSFS physical addressing packing code a bit.

* subversion/libsvn_fs_fs/pack.c
  (pack_phys_addressed): Obtain actual revision data offset in pack file
   before writing revision data, instead of calculating in parallel using
   revision file size.
</msg>
</logentry>
<logentry
   revision="1719336">
<author>ivan</author>
<date>2015-12-11T10:39:43.952248Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/pack.c
  (append_revision): Obtain file size from handle after opening revision file
   instead of calling stat() to obtain file size by name.
</msg>
</logentry>
<logentry
   revision="1719281">
<author>ivan</author>
<date>2015-12-11T08:50:19.994979Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_io.h</path>
</paths>
<msg>Follow-up to r1719269: Fix documentation markup for svn_io_file_get_offset().

Found by: rhuijben

* subversion/include/svn_io.h
  (svn_io_file_get_offset): Use /** to open comment block.
</msg>
</logentry>
<logentry
   revision="1719271">
<author>ivan</author>
<date>2015-12-11T07:11:06.729996Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Use svn_io_file_get_offset() instead of svn_io_file_seek(APR_CUR) where it
makes sense.

* subversion/libsvn_client/patch.c
* subversion/libsvn_diff/parse-diff.c
* subversion/libsvn_repos/dump.c
* subversion/libsvn_subr/io.c
* subversion/libsvn_subr/stream.c
* subversion/tests/libsvn_subr/io-test.c
  (tell_file, read_handler_base85, hunk_readline_original_or_modified,
   svn_diff_hunk_readline_diff_text, parse_next_hunk, parse_binary_patch,
   svn_diff_parse_next_patch, store_delta, svn_io_file_readline,
   mark_handler_apr, test_file_readline, aligned_seek): Use
   svn_io_file_get_offset() instead of svn_io_file_seek(0, APR_CUR).
</msg>
</logentry>
<logentry
   revision="1719269">
<author>ivan</author>
<date>2015-12-11T06:57:56.020005Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/util.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/verify.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/index.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/util.c</path>
</paths>
<msg>Promote libsvn_fs_fs private helper svn_fs_fs__get_file_offset() to public
libsvn_subr function svn_io_file_get_offset().

* subversion/libsvn_fs_fs/util.c
* subversion/libsvn_fs_fs/util.h
  (svn_fs_fs__get_file_offset): Move/rename to ...

* subversion/include/svn_io.h
* subversion/libsvn_subr/io.c
  (svn_io_file_get_offset): ... here.

* subversion/libsvn_fs_fs/cached_data.c
* subversion/libsvn_fs_fs/index.c
* subversion/libsvn_fs_fs/pack.c
* subversion/libsvn_fs_fs/transaction.c
* subversion/libsvn_fs_fs/verify.c
  (get_file_offset, stream_error_create, copy_item_to_temp, copy_rep_to_temp,
   copy_node_to_temp, rep_write_get_baton, rep_write_contents_close,
   write_container_rep, write_container_delta_rep, write_final_rev,
   write_final_changed_path_info, commit_body, expect_buffer_nul): Replace
   calls to svn_fs_fs__get_file_offset() within svn_io_file_get_offset().
</msg>
</logentry>
<logentry
   revision="1719203">
<author>ivan</author>
<date>2015-12-10T20:41:12.767689Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
</paths>
<msg>Add test for svn_io_file_readline().

* subversion/tests/libsvn_subr/io-test.c
  (test_file_readline): New test for svn_io_file_readline().
  (test_funcs): Add test_file_readline to the list.
</msg>
</logentry>
<logentry
   revision="1719196">
<author>ivan</author>
<date>2015-12-10T20:18:48.688721Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>Revert r1719188: It seems APR doesn't report proper position for apr_file_t
with ungotten character while our patch parser relies on that.

* subversion/include/svn_io.h
  (svn_io_file_ungetc): Revert r1719188.

* subversion/libsvn_subr/io.c
  (svn_io_file_ungetc, svn_io_file_readline): Revert r1719188.

* subversion/tests/libsvn_subr/io-test.c
  (test_file_readline, test_file_ungetc,
   svn_test_descriptor_t): Revert r1719188.
</msg>
</logentry>
<logentry
   revision="1719188">
<author>ivan</author>
<date>2015-12-10T20:02:33.363808Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_io.h</path>
</paths>
<msg>[Reverted in 1719196]

Use existing APR function in implementation of svn_io_file_readline() for
peeking char after we found '\r' instead of save position and seek back.

* subversion/include/svn_io.h
  (svn_io_file_ungetc): New.

* subversion/libsvn_subr/io.c
  (svn_io_file_ungetc): New. Wrapper around apr_file_ungetc().
  (svn_io_file_readline): Use svn_io_file_ungetc() for peeking char after we
   found '\r' instead of save position and seek back.

* subversion/tests/libsvn_subr/io-test.c
  (test_file_readline): New test for svn_io_file_readline().
  (test_file_ungetc): New test for svn_io_file_ungetc().
  (svn_test_descriptor_t): Add test_file_readline and test_file_ungetc.
</msg>
</logentry>
<logentry
   revision="1719120">
<author>julianfoad</author>
<date>2015-12-10T17:31:08.756970Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Remove the debug code inserted in r1719056, r1719067, r1719072, r1719074.

* subversion/libsvn_delta/branch_compat.c
  (pathrev_str,
   hash_keys_str,
   change_node_str): Comment out, as now unused but might be useful again.
  (insert_change,
   drive_changes_r): Remove recent (and some older) debugging code.</msg>
</logentry>
<logentry
   revision="1719113">
<author>julianfoad</author>
<date>2015-12-10T17:03:33.458358Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/branch_nested.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_branch_impl.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/ra.c</path>
</paths>
<msg>In 'svnmover', track history better.

For each version of each branch, store pointers to previous branch-versions,
called "parents" like in Git. Usually, a branch version has one parent that
points to the previous version of the same branch. Upon branching, the new
branch gets one parent that points to the chosen version of the source
branch. Upon merging, in the usual case of a complete merge from a source
branch into a target branch, the target branch gets two parents: its own
previous version, and the merge source.

* subversion/include/private/svn_branch.h
  (svn_branch__txn_open_branch,
   svn_branch__txn_add_new_branch): Don't take a 'predecessor' parameter.
  (svn_branch__state_t): Don't track a 'predecessor' as a public field here.
  (svn_branch__history_t,
   svn_branch__history_create_empty,
   svn_branch__history_create,
   svn_branch__history_dup): New.
  (svn_branch__state_get_history): Rename from
    'svn_branch__state_get_merge_ancestor'.
  (svn_branch__state_set_history): Rename from
    'svn_branch__state_add_merge_ancestor'.

* subversion/include/private/svn_branch_impl.h
  Track the changes in svn_branch.h.

* subversion/libsvn_delta/branch.c
  Implement the changes in svn_branch.h.

* subversion/libsvn_delta/branch_compat.c
  Track the changes in svn_branch.h.

* subversion/libsvn_delta/branch_nested.c
  Track the changes in svn_branch.h.

* subversion/tests/cmdline/svnmover_tests.py
  (reported_mg_diff): No longer expect any diff output describing a merge
    history difference, as we don't print that in a diff any more.

* tools/dev/svnmover/ra.c
  (branch_get_mutable_state): Initialize each branch's parent to point to
    the same branch in the base revision.

* tools/dev/svnmover/svnmover.c
  (list_parents,
   history_str,
   svn_branch__history_add_parent): New.
  (history_diff): Rename from 'merge_history_diff'.
  (txn_is_changed): Don't compare history, but leave some place-holder code
    in case we want to do so later.
  (get_union_of_subbranches): Make robust against either or both inputs
    being null.
  (svn_branch__replay): Update the replaying of a change of history.
  (update_wc_base_r): Update the copying of history for a new branch.
  (do_merge): Update the recording of history.
  (do_auto_merge): Dummy implementation: does nothing.
  (show_history_r): New.
  (branch_diff_r): Don't show history differences.
  (find_branch_main_parent): New.
  (svn_branch__find_predecessor_el_rev): Update the finding of the main
    parent.
  (do_log): Also show the history before the diff of each revision.
  (do_mkbranch): Track the API changes.
  (do_branch): Initialize the history (parent) of the new branch.
  (show_branch_history): New.
  (execute): In the 'info-wc' subcommand, show the history of the working
    branch (and not of the base branch).
</msg>
</logentry>
<logentry
   revision="1719107">
<author>brane</author>
<date>2015-12-10T16:35:22.746085Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/security/_gnupg.py</path>
</paths>
<msg>Update the gnupg module to the author's most recent version to support
new features in gpg 2.1.3 [1].

* tools/dist/security/_gnupg.py: Update to latest version. [2]

[1] https://bitbucket.org/vinay.sajip/python-gnupg/issues/35/status-newsig-missing-in-verify
[2] https://bitbucket.org/vinay.sajip/python-gnupg/src/1337e6ce364fc0381bbec7f366f524ea87f3f482/gnupg.py?at=default&amp;fileviewer=file-view-default
</msg>
</logentry>
<logentry
   revision="1719089">
<author>julianfoad</author>
<date>2015-12-10T14:47:46.219854Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Continue debugging: try avoiding apr_hash_overlay() as it appears to be
returning a hash with duplicate keys in it (which should be impossible),
on the Mac buildbots. A follow-up to r1719056.

* subversion/libsvn_delta/branch_compat.c
  (hash_overlay): New.
  (drive_changes_r): Use hash_overlay() instead of apr_hash_overlay().</msg>
</logentry>
<logentry
   revision="1719075">
<author>ivan</author>
<date>2015-12-10T12:25:44.499833Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_main.c</path>
</paths>
<msg>Unify creating sandbox directory in io-test.

* subversion/tests/svn_test.h
* subversion/tests/svn_test_main.c
  (svn_test_make_sandbox_dir): New helper to create sandbox directory and
   schedule for automatic cleanup.

* subversion/tests/libsvn_subr/io-test.c
  (create_test_file): Accept TEST_DIR instead of TESTNAME.
  (create_comparison_candidates): Use svn_test_make_sandbox_dir() helper.
   Pass TEST_DIR to create_test_file().
  (read_length_line_shouldnt_loop, test_read_length_line, aligned_seek_test,
   ignore_enoent, test_install_stream_to_longpath,
   test_install_stream_over_readonly_file, test_file_size_get,
   test_file_rename2): Use svn_test_make_sandbox_dir() helper to create
   temporary sandbox for test.
</msg>
</logentry>
<logentry
   revision="1719074">
<author>julianfoad</author>
<date>2015-12-10T12:18:39.987149Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Change the debug code to return the info as an error message text, as that
may be logged by the buildbots whereas stdout/stderr are not. A follow-up
to r1719056.

* subversion/libsvn_delta/branch_compat.c
  (insert_change,
   drive_changes_r): Report debugging info through an error object.</msg>
</logentry>
<logentry
   revision="1719072">
<author>julianfoad</author>
<date>2015-12-10T12:02:41.401340Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Enable the debug code also in release builds, as the buildbots are doing
release builds. A follow-up to r1719067.

* subversion/libsvn_delta/branch_compat.c
  (change_node_str): Don't make debugging info conditional on SVN_DEBUG.</msg>
</logentry>
<logentry
   revision="1719067">
<author>julianfoad</author>
<date>2015-12-10T11:43:58.400583Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Enable the debug code also in release builds, as the buildbots are doing
release builds. A follow-up to r1719056.

[Note from the future: Corrected in r1719072.]

* subversion/libsvn_delta/branch_compat.c
  (pathrev_str,
   hash_keys_str,
   insert_change,
   drive_changes_r): Don't make debugging info conditional on SVN_DEBUG.
</msg>
</logentry>
<logentry
   revision="1719066">
<author>ivan</author>
<date>2015-12-10T11:38:31.051417Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
</paths>
<msg>Add unit test for svn_io_read_length_line() function.

* subversion/tests/libsvn_subr/io-test.c
  (test_read_length_line): New.
  (test_funcs): Add test_read_length_line() to list.
</msg>
</logentry>
<logentry
   revision="1719056">
<author>julianfoad</author>
<date>2015-12-10T10:47:53.841558Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Add some debugging in 'svnmover' compatibility code to try to diagnose
failures that show up on some buildbots but not on my system.

* subversion/libsvn_delta/branch_compat.c
  (pathrev_str,
   hash_keys_str,
   change_node_str): New.
  (insert_change,
   drive_changes_r): Print debugging info if there's an assertion failure.</msg>
</logentry>
<logentry
   revision="1718923">
<author>ivan</author>
<date>2015-12-09T17:41:52.323634Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/commit.c</path>
</paths>
<msg>Use existing helper to simplify code a bit.

* subversion/libsvn_repos/commit.c
  (add_file_or_directory): Use svn_cstring_skip_prefix() instead of strncmp().
</msg>
</logentry>
<logentry
   revision="1718913">
<author>julianfoad</author>
<date>2015-12-09T17:03:53.595925Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
</paths>
<msg>* tools/dev/svnmover/svnmover.c
  (branch_diff_r): Following r1718900, restore the ability to diff a subtree.</msg>
</logentry>
<logentry
   revision="1718912">
<author>rhuijben</author>
<date>2015-12-09T17:03:15.472990Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_props.h</path>
</paths>
<msg>* subversion/include/svn_props.h
  Add some missing @since info.
</msg>
</logentry>
<logentry
   revision="1718907">
<author>julianfoad</author>
<date>2015-12-09T16:58:13.953057Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/element.c</path>
</paths>
<msg>* subversion/libsvn_delta/element.c
  (svn_eid__hash_sorted_first,
   svn_eid__hash_sorted_next): Tweak a cast to avoid a 'discarding const'
    warning that GCC can produce (even though the warning was poor
    because the code only used the pointer for reading).
</msg>
</logentry>
<logentry
   revision="1718900">
<author>julianfoad</author>
<date>2015-12-09T16:44:39.234404Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
</paths>
<msg>In 'svnmover', rework the 'diff' code a little.

* tools/dev/svnmover/svnmover.c
  (subtree_diff_r): Take branch state objects instead of 'subtree' objects.
  (branch_diff_r): Track the change.</msg>
</logentry>
<logentry
   revision="1718820">
<author>philip</author>
<date>2015-12-09T11:36:51.902470Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/configure.ac</path>
</paths>
<msg>* configure.ac: Add -Wno-unused-const-variable as we use const variables
   in several internal header files and recent gcc will issue warnings.
</msg>
</logentry>
<logentry
   revision="1718809">
<author>philip</author>
<date>2015-12-09T10:47:43.137914Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_delta/element.c</path>
</paths>
<msg>* subversion/libsvn_delta/element.c
  (svn_element__payload_invariants): Tweak conditionals to avoid
   compiler warning.
</msg>
</logentry>
<logentry
   revision="1718639">
<author>rhuijben</author>
<date>2015-12-08T15:53:37.640726Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/commit.c</path>
</paths>
<msg>Revert r1718566 until I investigated the ruby/Windows problem.</msg>
</logentry>
<logentry
   revision="1718572">
<author>philip</author>
<date>2015-12-08T11:36:18.311421Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnfsfs_tests.py</path>
</paths>
<msg>Fix svnfsfs_tests.py --fsfs-sharding=N --fsfs-packing FAIL.

* subversion/tests/cmdline/svnfsfs_tests.py
  (load_index_sharded): Always pack because --fsfs-packing does not
   trigger packing in this particular test since r1 is created before
   the shard size is modified.
</msg>
</logentry>
<logentry
   revision="1718567">
<author>rhuijben</author>
<date>2015-12-08T11:18:46.114563Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/status.c</path>
</paths>
<msg>* subversion/mod_dav_svn/status.c
  (includes): Include &lt;process.h&gt; if available.
  (dav_svn__status): Produce process-id on Windows.
</msg>
</logentry>
<logentry
   revision="1718566">
<author>rhuijben</author>
<date>2015-12-08T11:14:23.871567Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/commit.c</path>
</paths>
<msg>In the libsvn_repos commit handling: Use modern uri functions instead
of a completely nonstandard form for relpath calculations.

* subversion/libsvn_repos/commit.c
  (edit_baton): Store url in canonical form.
  (add_file_or_directory): Ensure copyfrom_path is in canonical form.
    Use standard functions.
  (svn_repos_get_commit_editor5): Canonicalize incoming url.
</msg>
</logentry>
<logentry
   revision="1718484">
<author>philip</author>
<date>2015-12-07T22:25:20.101904Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/status.c</path>
</paths>
<msg>* subversion/mod_dav_svn/status.c: Include unistd.h in the manner
   used in other files.

Patch by: kotkov
</msg>
</logentry>
<logentry
   revision="1718358">
<author>kotkov</author>
<date>2015-12-07T13:58:10.076092Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Populate the 1.8.15 and 1.9.3 sections.
</msg>
</logentry>
<logentry
   revision="1718269">
<author>kotkov</author>
<date>2015-12-07T09:51:16.356013Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
</paths>
<msg>* subversion/mod_dav_svn/util.c
  (request_body_to_string): Defer the actual memory allocation to the
   moment when are ready to read the request body from the buckets.
</msg>
</logentry>
<logentry
   revision="1718267">
<author>kotkov</author>
<date>2015-12-07T09:48:45.660279Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>Make the string unmarshalling code in libsvn_ra_svn resilient against
theoretically possible data corruptions.

* subversion/libsvn_ra_svn/marshal.c
  (read_string): Adjust the conditions under which we use a shortcut.
</msg>
</logentry>
<logentry
   revision="1718167">
<author>kotkov</author>
<date>2015-12-06T12:02:00.711575Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_ra_local/ra_plugin.c</path>
</paths>
<msg>Disable zero-copy code path for ra_local update reporters.

The known and documented limitation of svn_repos_begin_report3() is that
with zero-copy enabled, the delta editor callbacks cannot access FSFS
or use Subversion caches directly.  This limitation comes from the fact
that sending delta using the zero-copy code path happens from within a cache
access wrapper — that is, while holding the lock.  If a particular delta
consumer happens to access or invalidate the cache, bad things could happen,
spanning from UB due to accessing a dangling pointer to a deadlock caused by
an attempt to take a non-recursive (blocking) lock, that has already been
taken by the same thread.

Within ra_local, we cannot be sure that arbitrary callers of our public
API, namely, svn_ra_do_update3(), svn_ra_do_switch3() or svn_ra_do_status2(),
are aware of this limitation and pass-in the delta editor that doesn't access
FSFS or caches — because everything happens locally and all operations that
use the FS layer have a chance of using the cache.

* subversion/libsvn_ra_local/ra_plugin.c
  (make_reporter): Pass 0 as zero_copy_limit when creating the update
   reporter.
</msg>
</logentry>
<logentry
   revision="1718135">
<author>brane</author>
<date>2015-12-05T23:28:02.406991Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/README.advisory</path>
</paths>
<msg>* tools/dist/README.advisory: Duh; can't make a single commit without typos.
</msg>
</logentry>
<logentry
   revision="1718134">
<author>brane</author>
<date>2015-12-05T23:22:20.138044Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/tools/dist/README.advisory</path>
<path
   text-mods="true"
   kind="file"
   action="A"
   prop-mods="true">/subversion/trunk/tools/dist/advisory.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dist/security/mailinglist.py</path>
</paths>
<msg>Finally wrote the script for sending advisory mails.

* tools/dist/advisory.py: New; the all-in-one script.
* tools/dist/README.advisory: Instructions for using said script.

* tools/dist/security/mailinglist.py:
   Tweak interface to match the other scripts in this module.
</msg>
</logentry>
<logentry
   revision="1717962">
<author>julianfoad</author>
<date>2015-12-04T13:35:09.521201Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
</paths>
<msg>Revert a tweak commited accidentally in r1717957.

* subversion/libsvn_delta/branch.c
  (svn_branch__txn_get_branch_by_id): Remove the extra 'return'.</msg>
</logentry>
<logentry
   revision="1717957">
<author>julianfoad</author>
<date>2015-12-04T12:56:31.313490Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.h</path>
</paths>
<msg>A small step towards making 'svnmover merge' operate into a new temporary
txn first.

* subversion/trunk/subversion/libsvn_delta/branch.c
  (svn_branch__txn_get_branch_by_id): Tweak to allow setting a breakpoint on
    a null return. (Committed accidentally.)

* tools/dev/svnmover/svnmover.h
  (svnmover_branch_merge): Take the branch to be edited as a parameter,
    instead of making edits in the 'target' branch.

* tools/dev/svnmover/merge3.c
  (merge_subbranch,
   branch_merge_subtree_r,
   svnmover_branch_merge): Same.

* tools/dev/svnmover/svnmover.c
  (do_switch,
   do_merge): Update callers: for now, just pass the target branch as the
    branch to be edited.
  (execute): Enforce that the specified target of a merge must be the
    working copy, not a revision.
</msg>
</logentry>
<logentry
   revision="1717951">
<author>julianfoad</author>
<date>2015-12-04T12:28:07.952503Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>* subversion/libsvn_delta/branch_compat.c
  (convert_branch_to_paths): To ease debugging and understanding, don't
    insert entries for subbranch-root elements and then hope they get
    overwritten by the corresponding inner branch root element.
</msg>
</logentry>
<logentry
   revision="1717949">
<author>julianfoad</author>
<date>2015-12-04T12:23:33.512300Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_nested.c</path>
</paths>
<msg>In 'svnmover', allow a couple of nested-branching functions to operate on a
non-flat branch hierarchy without raising an assertion failure.

The specific case this enables is where a branch-root element points to a
nested branch that doesn't currently exist. No test currently requires this,
but it makes the functions more widely applicable for future use.

* subversion/libsvn_delta/branch_nested.c
  (svn_branch__get_immediate_subbranch_eids): New, extracted...
  (svn_branch__get_immediate_subbranches): ... from here.
  (svn_branch__get_subtree,
   svn_branch__find_nested_branch_element_by_relpath): Use it, and ignore
    any subbranch-root element that points to a nonexistent nested branch
    instead of raising an assertion failure.
</msg>
</logentry>
<logentry
   revision="1717919">
<author>brane</author>
<date>2015-12-04T10:00:12.413119Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="A"
   prop-mods="true">/subversion/trunk/tools/dist/security/mailinglist.py</path>
</paths>
<msg>Add parser for the advisory mail recipients.

* tools/dist/security/mailinglist.py: New.
</msg>
</logentry>
<logentry
   revision="1717889">
<author>jamessan</author>
<date>2015-12-04T03:03:44.502812Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/COMMITTERS</path>
</paths>
<msg>* COMMITTERS: Add myself (jamessan) as a full committer
</msg>
</logentry>
<logentry
   revision="1717887">
<author>rhuijben</author>
<date>2015-12-04T00:58:20.188363Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db.c</path>
</paths>
<msg>* subversion/libsvn_wc/wc_db.c
  (relocate_txn): Add missing newline. Note a few more limitations.
</msg>
</logentry>
<logentry
   revision="1717885">
<author>rhuijben</author>
<date>2015-12-04T00:40:50.671639Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_wc/wc-queries.sql</path>
</paths>
<msg>Remove some dead code from libsvn_wc. We always use the function that
also looks in parent directories instead of this function that gives
just a result when the node itself has the data.

* subversion/libsvn_wc/wc-queries.sql
  (STMT_SELECT_IPROPS): Remove unused query.

* subversion/libsvn_wc/wc_db.c
  (db_read_cached_iprops,
   svn_wc__db_read_cached_iprops): Remove functions.
</msg>
</logentry>
<logentry
   revision="1717878">
<author>rhuijben</author>
<date>2015-12-03T23:40:10.405778Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>* subversion/libsvn_ra_svn/client.c
  (parse_iproplist): Following up on r1717875, remove some unneeded coded and
    reinstate copying path to the result_pool.
</msg>
</logentry>
<logentry
   revision="1717875">
<author>rhuijben</author>
<date>2015-12-03T23:34:57.809126Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/inherited_props.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>Following up on r1717874, make all ra layers consistently report inherited
properties in the documented way.

This makes ra_svn and ra_serf against new servers report the properties in
the documented way and the way ra_local already reported these.

Which form ra_serf reported before this patch depended on the server
capabilities... If it could use the optimized request it reported like
ra_svn, if not like ra_local.

* subversion/libsvn_ra_serf/inherited_props.c
  (iprops_closed): Stop adding the repository url in output arguments in
    unexpected ways.

* subversion/libsvn_ra_svn/client.c
  (parse_iproplist): Stop adding the repository url in output arguments
    when it is documented that we shouldn't do this.
</msg>
</logentry>
<logentry
   revision="1717874">
<author>rhuijben</author>
<date>2015-12-03T23:25:25.639292Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_client/mtcc-test.c</path>
</paths>
<msg>Write regression test for inherited property issue I just discovered.
Currently this test passes for ra_local... and fails for ra_serf and ra_svn.

And our code doesn't notice any of this because
svn_path_url_add_component2() doesn't care which of the two forms is used.

* subversion/tests/libsvn_client/mtcc-test.c
  (test_iprops_path_format): New test.
  (test_list): Add test_iprops_path_format.
</msg>
</logentry>
<logentry
   revision="1717873">
<author>stefan2</author>
<date>2015-12-03T23:15:39.377852Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c</path>
</paths>
<msg>Follow-up to 1717869: Second attempt to fix the compile error with VC .

* subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c
  (compare_0_length_rep): When in doubt, use macros.</msg>
</logentry>
<logentry
   revision="1717871">
<author>stefan2</author>
<date>2015-12-03T23:05:05.834923Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c</path>
</paths>
<msg>Follow-up to 1717869: Try to fix the compile error with VC .

* subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c
  (compare_0_length_rep): Add few more 'const's into the mix.</msg>
</logentry>
<logentry
   revision="1717867">
<author>stefan2</author>
<date>2015-12-03T22:56:01.309339Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c</path>
</paths>
<msg>Add a test for why r1712927 was wrong.

* subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c
  (compare_0_length_rep): New test case.
  (test_funcs): Register new test.</msg>
</logentry>
<logentry
   revision="1717864">
<author>stefan2</author>
<date>2015-12-03T22:54:07.758170Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
</paths>
<msg>Revert r1712927 because that check is actually required.</msg>
</logentry>
<logentry
   revision="1717847">
<author>rhuijben</author>
<date>2015-12-03T21:03:33.240620Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/configure.ac</path>
</paths>
<msg>* trunk/configure.ac
  Fix message to reflect reality (since before 1.0).
</msg>
</logentry>
<logentry
   revision="1717793">
<author>julianfoad</author>
<date>2015-12-03T16:09:01.518424Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
</paths>
<msg>A minor tweak in 'svnmover'.

* tools/dev/svnmover/merge3.c
  (branch_merge_subtree_r): Simplify, and lose an obsolete comment.</msg>
</logentry>
<logentry
   revision="1717785">
<author>julianfoad</author>
<date>2015-12-03T15:55:55.023354Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_delta/element.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_element.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/branch_nested.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_branch_impl.h</path>
</paths>
<msg>In 'svnmover', tweak the 'branch state' API to slightly simplify both the
implementation and some callers.

* subversion/include/private/svn_branch.h
  (svn_branch__state_set_element): New.

* subversion/include/private/svn_branch_impl.h
  (svn_branch__state_v_set_element_t): New.
  (svn_branch__state_v_alter_one_t,
   svn_branch__state_v_delete_one_t): Delete.
  (svn_branch__state_vtable_t): Replace 'alter_one' and 'delete_one' with
    'set_element'.

* subversion/include/private/svn_element.h,
  subversion/libsvn_delta/element.c
  (svn_element__tree_set): Constify the input.

* subversion/libsvn_delta/branch.c
  (branch_map_set): Constify the input.
  (branch_state_delete_one,
   branch_state_alter): Delete.
  (branch_state_set_element,
   svn_branch__state_set_element): New.
  (svn_branch__state_alter_one,
   svn_branch__state_delete_one): Change implementations to forward to
    svn_branch__state_set_element.
  (branch_state_create): Update the vtable.
  (svn_branch__map_add_subtree,
   svn_branch__state_parse): Update callers.

* subversion/libsvn_delta/branch_nested.c
  (branch_instantiate_elements): Use the new method. Add a missing SVN_ERR().

* tools/dev/svnmover/merge3.c
  (branch_merge_subtree_r): Use the new method.

* tools/dev/svnmover/svnmover.c
  (branch_elements_replay,
   update_wc_base_r): Use the new method.
</msg>
</logentry>
<logentry
   revision="1717778">
<author>julianfoad</author>
<date>2015-12-03T14:59:31.855113Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/svnmover.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
</paths>
<msg>In 'svnmover', improve how we diff and merge subtrees.

When merging a subtree, notice all changes to each element that is in any of
the three subtrees. In other words, for an element that is present in only
the source or only the target subtree, don't ignore any changes that may
have happened to that element on the other side of the merge, even though it
is outside the given subtrees on that side. Add a regression test for this.

When merging an element that is the branch root in one or two of the three
(YCA, source, target) inputs, but is a non-root element in others, ignore
that element's parentage. Otherwise, if we try to merge that difference in
parentage, we would mess up the tree structure of the target branch.
svnmover_tests.py 16 "merge from subbranch to subtree" covers this case, and
would fail if only the "notice all changes" change above were committed.

* tools/dev/svnmover/merge3.c
  (is_branch_root_element): New, copied from svnmover.c.
  (branch_merge_subtree_r): Diff the elements in the union of all three
    subtrees, not just those in each pair of subtrees.

* tools/dev/svnmover/svnmover.h
  (svnmover_element_differences): Take the set of elements to diff as an
    input. Allow other inputs to be null.

* tools/dev/svnmover/svnmover.c
  (svnmover_element_differences): Take the set of elements to diff as an
    input. Allow other inputs to be null.
  (txn_is_changed): Update caller, passing null.
  (branch_elements_replay): Rename from 'subtree_replay'. Take the set of
    elements to diff as an input. Simplify.
  (svn_branch__replay,
   update_wc_base_r,
   subtree_diff): Update callers, passing null.
  (show_subtree_diff): Update the doc string.

* subversion/tests/cmdline/svnmover_tests.py
  (merge_move_into_subtree): New test.
  (test_list): Run it.
</msg>
</logentry>
<logentry
   revision="1717607">
<author>philip</author>
<date>2015-12-02T11:17:12.339179Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnmover_tests.py
  (simple_branch): Tweak expectation, still XFAIL.
</msg>
</logentry>
<logentry
   revision="1717592">
<author>rhuijben</author>
<date>2015-12-02T09:25:46.786704Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
</paths>
<msg>Make two more fs vtable pointers constant.

* subversion/libsvn_fs/fs-loader.h
  (svn_fs_t,
   svn_fs_txn_t): Do that here.
</msg>
</logentry>
<logentry
   revision="1717577">
<author>rhuijben</author>
<date>2015-12-02T07:48:14.851800Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/configure.ac</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra/ra_loader.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build/generator/gen_win_dependencies.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_local/ra_plugin.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn_private_config.hw</path>
</paths>
<msg>Rename the ill-defined SVN_LIBSVN_CLIENT_LINKS_* defines to an
easier to maintain SVN_LIBSVN_RA_LINKS_*. LIBSVN_CLIENT didn't
link any of this since well before 1.0.

* trunk/build/generator/gen_win_dependencies.py
* trunk/configure.ac
* trunk/subversion/libsvn_ra/ra_loader.c
* trunk/subversion/libsvn_ra_local/ra_plugin.c
* trunk/subversion/svn_private_config.hw
  Update references.
</msg>
</logentry>
<logentry
   revision="1717575">
<author>rhuijben</author>
<date>2015-12-02T07:37:53.869276Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
</paths>
<msg>Constify a few vtable pointers in the internal fs api.

* subversion/libsvn_fs/fs-loader.h
  (svn_fs_root_t,
   svn_fs_history_t,
   svn_fs_id_t): Mark vtable const.
</msg>
</logentry>
<logentry
   revision="1717574">
<author>rhuijben</author>
<date>2015-12-02T07:35:18.224924Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra/ra_loader.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_ra/ra_loader.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_local/ra_plugin.c</path>
</paths>
<msg>Extend and cleanup the ra api a bit to allow ra session implementations to
open other ra sessions. (This is similar to how the fs layer receives a
pointer to svn_fs_openX())

The ra-git branch will use this to implement ra_git by passing most of the
ra functions to an ra_local session to the local git repository.

* subversion/libsvn_ra/ra_loader.c
  (svn_ra_open4,
   svn_ra__dup_session): Call set_svn_ra_open.

* subversion/libsvn_ra/ra_loader.h
  (svn_ra__open_func_t): New prototype.
  (svn_ra__vtable_t): Introduce set_svn_ra_open. Move experimental functions
    to the end of the list.

* subversion/libsvn_ra_local/ra_plugin.c
  (ra_local_vtable): Update table. Document missing items.

* subversion/libsvn_ra_serf/serf.c
  (serf_vtable): Update table. Document missing items.

* subversion/libsvn_ra_svn/client.c
  (ra_svn_vtable): Update table. Document missing items.
</msg>
</logentry>
<logentry
   revision="1717485">
<author>stefan2</author>
<date>2015-12-01T18:15:51.578080Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Switch the header of packed FSX revprops from decimal numbers to the 7/8b
integer encoding.

* subversion/libsvn_fs_x/revprops.c
  (parse_packed_revprops): We can parse directly from the uncompressed
                           buffer but we must always parse the whole header
                           now because there is no way to skip to its end.
  (write_encoded_uint): New utility.
  (serialize_revprops_header): Write the simpler header format now.</msg>
</logentry>
<logentry
   revision="1717453">
<author>stefan2</author>
<date>2015-12-01T16:19:35.676211Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Follow-up to r1717438: Make sure the revprop contents always remains valid
as long as the props hash itself.

Reported by: philip

* subversion/libsvn_fs_x/revprops.c
  (read_non_packed_revprop): Copy the contents string into the result pool
                             before building the props hash upon it.
</msg>
</logentry>
<logentry
   revision="1717438">
<author>stefan2</author>
<date>2015-12-01T13:33:19.214349Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>In FSX, use the new proplist serialization for revprops as well.

* subversion/libsvn_fs_x/fs_x.c
  (write_revision_zero): Create revprop for r0 using the new API.

* subversion/libsvn_fs_x/revprops.c
  (parse_revprop,
   write_non_packed_revprop,
   write_packed_revprop): Call the new internal API instead of
                          the old hash serializer.

* subversion/libsvn_fs_x/transaction.c
  (get_txn_proplist): Call the new proplist parser and make the
                      function signature more suitable for that.
  (set_txn_proplist): Call the new serializer.
  (svn_fs_x__change_txn_props): Update caller.
  (write_final_revprop): Call the new serializer.
  (svn_fs_x__txn_proplist): Update caller.</msg>
</logentry>
<logentry
   revision="1717430">
<author>stefan2</author>
<date>2015-12-01T13:20:56.638392Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
</paths>
<msg>* subversion/libsvn_fs_x/cached_data.c
  (svn_fs_x__get_proplist): Minor simplification based on the fact that
                            the in-txn case has already been covered.</msg>
</logentry>
<logentry
   revision="1717429">
<author>philip</author>
<date>2015-12-01T13:19:50.458176Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnmover_tests.py
  (simple_branch): New XFAIL test to show bug in compatibility layer.
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1717427">
<author>stefan2</author>
<date>2015-12-01T13:15:06.037429Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/low_level.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_error_codes.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/low_level.c</path>
</paths>
<msg>In FSX, introduce a denser and easier to parse on-disk representation
for property lists.  In a first step, use it for node properties.

* subversion/include/svn_error_codes.h
  (SVN_ERR_FS_CORRUPT_PROPLIST): Define a new parser error code.

* subversion/libsvn_fs_x/low_level.h
  (svn_fs_x__parse_properties,
   svn_fs_x__write_properties): Declare new internal (de-)serialization APIs.

* subversion/libsvn_fs_x/low_level.c
  (svn_fs_x__parse_properties,
   svn_fs_x__write_properties): Implement them.

* subversion/libsvn_fs_x/cached_data.c
  (svn_fs_x__get_proplist): Call the new APIs to parse the prop lists.
                            Use the SVN_ERR_W macro instead of local code
                            for decorating error objects.

* subversion/libsvn_fs_x/transaction.c
  (svn_fs_x__set_proplist,
   write_hash_to_stream): Write node properties in the new format.</msg>
</logentry>
<logentry
   revision="1717420">
<author>julianfoad</author>
<date>2015-12-01T13:04:46.396035Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnmover_tests.py
  (see_the_revision_just_committed): New test, XFail.
  (test_list): Run it.</msg>
</logentry>
<logentry
   revision="1717409">
<author>philip</author>
<date>2015-12-01T12:33:10.404397Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnmover_tests.py
  (test_svnmover): Split log verification into the new function ...
  (test_svnmover_verify_log): ... here.
  (replace_via_rm_cp): New XFAIL test to show bug in compatibility
   layer.
</msg>
</logentry>
<logentry
   revision="1717356">
<author>stefan2</author>
<date>2015-12-01T00:03:55.232852Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>Fix the console test output in GLOBAL_SCHEDULER mode.

* build/run_tests.py
  (TestHarness._run_global_sheduler): Make sure the "Tests to execute"
                                      line is shown before the first
                                      results come in.
</msg>
</logentry>
<logentry
   revision="1717355">
<author>stefan2</author>
<date>2015-11-30T23:56:55.163885Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>Minor tuning of the GLOBAL_SCHEDULER test script option.  This saves
about 5% wallclock time on my workstation.

* build/run_tests.py
  (TestHarness._run_global_sheduler): Cause very long C test suites
                                      to be schedules early on.</msg>
</logentry>
<logentry
   revision="1717350">
<author>stefan2</author>
<date>2015-11-30T23:33:56.443394Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
</paths>
<msg>Sync'ing FSX with FSFS: Port minor optimizations.

This merges r1711582, r1715793, r1716047 and r1716974 from FSFS to FSX.
The usual text conflicts due to renaming and refactoring had to be resolved.
</msg>
</logentry>
<logentry
   revision="1717349">
<author>stefan2</author>
<date>2015-11-30T23:25:16.463201Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/index.c</path>
</paths>
<msg>Sync'ing FSX with FSFS: Merge error and overflow checking related changes.

This merges revisions r1711672, r1715947, r1716784, r1716973, r1717332 and
r1717334 from FSFS to FSX.  The usual text conflicts due to renaming and
refactoring had to be resolved.</msg>
</logentry>
<logentry
   revision="1717343">
<author>stefan2</author>
<date>2015-11-30T22:58:52.677140Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>Sync'ing FSX with FSFS: Block changes not relevant for FSX.

* subversion/libsvn_fs_x
  (svn:mergeinfo): Block r1709799, 1710017, 1710359, 1712927 and 1716067.</msg>
</logentry>
<logentry
   revision="1717339">
<author>stefan2</author>
<date>2015-11-30T22:34:04.198030Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>Make ra_svn handle the theoretical case of running on a system with
segmented memory and sending strings (paths and property values)
whose size approaches APR_SIZE_MAX.

The main benefit here is that the code becomes more resilient against
faulty string data being passed in.  As a result, the application will
(probably) segfault upon read instead or overwriting data before either
there is a read or a write segfault.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn__write_ncstring,
   write_tuple_string_opt_list,
   svn_ra_svn__write_data_log_changed_path): Reformulate the send buffer
                                             overflow checks to prevent
                                             arithmetic overflow as well.</msg>
</logentry>
<logentry
   revision="1717338">
<author>stefan2</author>
<date>2015-11-30T22:15:00.406972Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Fix insertion of very large items into the membuffer cache on machines
with segmented memory. 

* subversion/libsvn_subr/cache-membuffer.c
  (membuffer_cache_set_internal): With segmented memory, item size + key
                                  length might actually overflow size_t.</msg>
</logentry>
<logentry
   revision="1717337">
<author>stefan2</author>
<date>2015-11-30T22:11:44.731457Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Fix an inefficiency in the membuffer cache when the item to insert gets
close to APR_SIZE_MAX / 4, e.g. about 1GB on 32 bit systems.

Prior to this fix, very large items would often be rejected early on and
slightly smaller ones caused to large amounts of higher priority data to
be evicted from the cache.

* subversion/libsvn_subr/cache-membuffer.c
  (ensure_data_insertable_l2): Prevent large items from being rejected
                               too early due to overflow.  Also, allow
                               for MOVED_SIZE to exceed 4GB on 32 bit
                               so we properly limit work &amp; eviction.</msg>
</logentry>
<logentry
   revision="1717334">
<author>stefan2</author>
<date>2015-11-30T21:52:29.630570Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/index.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
</paths>
<msg>Complete overflow checking working in FSFS.

While the principle is the same as in r1714372 and r1717332, the changes
here were less straight-forward.

* subversion/libsvn_fs_fs/cached_data.c
  (get_contents_from_windows): Rewrite the limiter code such that no
                               arithmetic overflow may occur.

* subversion/libsvn_fs_fs/index.c
  (read_entry): Add another overflow check to ensure that the frequently
                used "offset + size" expression never causes an overflow.

* subversion/libsvn_fs_fs/revprops.c
  (svn_fs_fs__pack_revprops_shard): Extend the overflow check to cover all
                                    theoretical edge cases.</msg>
</logentry>
<logentry
   revision="1717332">
<author>stefan2</author>
<date>2015-11-30T21:36:20.622871Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/base64.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/string.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/index.c</path>
</paths>
<msg>Continue work started in r1714372: 
Fix a number of potential overflow conditions on platforms where pointers
may be allocated very close to the end of address space, such as WoW64.
Same for systems with 32 bit file offsets.

There is no direct way to trigger the respective overflow conditions but
this patch makes the code more resilient against repository corruption and
failures higher up in the call stack.

* subversion/libsvn_fs_fs/cached_data.c
  (block_read): Instead of "base + x &lt; max", we must check "max - base &gt; x"
                to prevent overflows under all circumstances.

* subversion/libsvn_fs_fs/index.c
  (svn_fs_fs__l2p_get_max_ids): Same.

* subversion/libsvn_fs_fs/pack.c
  (pack_log_addressed): Same.

* subversion/libsvn_fs_fs/revprops.c
  (parse_packed_revprops): Same.

* subversion/libsvn_subr/base64.c
  (encode_bytes,
   decode_bytes): Same.

* subversion/libsvn_subr/stream.c
  (svn_stringbuf_from_stream): Same.

* subversion/libsvn_subr/string.c
  (svn_cstring__match_length): Same. </msg>
</logentry>
<logentry
   revision="1717154">
<author>danielsh</author>
<date>2015-11-30T03:16:03.961946Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>* subversion/include/svn_fs.h
  (svn_fs_node_created_rev): Clarify documentation.</msg>
</logentry>
<logentry
   revision="1717153">
<author>danielsh</author>
<date>2015-11-30T03:13:25.658899Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/COMMITTERS</path>
</paths>
<msg>* COMMITTERS: Reflect that Andreas Stieger is now a full committer.</msg>
</logentry>
<logentry
   revision="1716974">
<author>ivan</author>
<date>2015-11-28T13:49:42.121772Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/transaction.c
  (allocate_item_index): Open itemidx file without APR buffering since we're
   going to perform just one read and one write I/O operation.
</msg>
</logentry>
<logentry
   revision="1716973">
<author>ivan</author>
<date>2015-11-28T13:47:14.113011Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Add detection of some very unlikely itemidx corruption in FSFS transaction.

* subversion/libsvn_fs_fs/transaction.c
  (allocate_item_index): Check that we hit EOF when reading itemidx file.
</msg>
</logentry>
<logentry
   revision="1716895">
<author>julianfoad</author>
<date>2015-11-27T16:36:45.135191Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/notes/move-tracking/element-model/CommitBranch1.pdf</path>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/notes/move-tracking/element-model/MergeBranch1.pdf</path>
</paths>
<msg>Add a couple of move-tracking diagrams.

* notes/move-tracking/element-model/CommitBranch1.pdf,
  notes/move-tracking/element-model/MergeBranch1.pdf
    New.</msg>
</logentry>
<logentry
   revision="1716874">
<author>philip</author>
<date>2015-11-27T13:33:01.180660Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/ra.c</path>
</paths>
<msg>* tools/dev/svnmover/ra.c (read_rev_prop): Use non-deprecated API.
</msg>
</logentry>
<logentry
   revision="1716831">
<author>philip</author>
<date>2015-11-27T11:17:38.004512Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/svn-sparc-solaris/svncheck.sh</path>
</paths>
<msg>* tools/buildbot/slaves/svn-sparc-solaris/svncheck.sh: Fix syntax error.
</msg>
</logentry>
<logentry
   revision="1716828">
<author>rhuijben</author>
<date>2015-11-27T11:01:49.296815Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_ra/ra-test.c
  (commit_empty_last_change): Fix minor const issue, not detected by my
    compiler in plain C mode.
</msg>
</logentry>
<logentry
   revision="1716827">
<author>philip</author>
<date>2015-11-27T10:53:07.981204Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/svn-sparc-solaris/svncheck.sh</path>
</paths>
<msg>* tools/buildbot/slaves/svn-sparc-solaris/svncheck.sh:
   Enable GLOBAL_SCHEDULER for trunk builds.
</msg>
</logentry>
<logentry
   revision="1716820">
<author>rhuijben</author>
<date>2015-11-27T10:06:13.749067Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/.editorconfig</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk</path>
</paths>
<msg>Store an editor configuration for another set of editors and update
svn:ignore for another Visual Studio update.

* .
  (svn:ignore): Just ignore each and every file named after the VS solution.
  
* .editorconfig
  New file
</msg>
</logentry>
<logentry
   revision="1716812">
<author>rhuijben</author>
<date>2015-11-27T09:47:27.211907Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/svn_test.h</path>
</paths>
<msg>* subversion/tests/svn_test.h
  (SVN_TEST_INT_ASSERT): Following up on r1716808, remove unneeded '\n'.
</msg>
</logentry>
<logentry
   revision="1716809">
<author>rhuijben</author>
<date>2015-11-27T09:25:33.940556Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Following up on r1716579, add a test to verify that we can copy from
a no-op revisions in later revisions, and that the history is kept
up to date.

On the FS layer in BDB this will currently be represented as a copy
from something later than what the transaction is based on.
(But everything works as expected)

* subversion/tests/libsvn_ra/ra-test.c
  (AA_receiver): New function.
  (commit_empty_last_change): Extend test.
</msg>
</logentry>
<logentry
   revision="1716808">
<author>rhuijben</author>
<date>2015-11-27T09:24:41.076250Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/svn_test.h</path>
</paths>
<msg>* subversion/tests/svn_test.h
  (SVN_TEST_INT_ASSERT): New define. Similar to the existing
    SVN_TEST_STRING_ASSERT.
</msg>
</logentry>
<logentry
   revision="1716784">
<author>stefan2</author>
<date>2015-11-26T23:51:27.017526Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/revprops.h</path>
</paths>
<msg>Use the appropriate type for revprop and revprop pack sizes in FSFS.

This eliminates type conversions, improving the resiliance against
corrupted data.  In practical terms, we use apr_size_t for all sizes
because we are reading those buffers &amp; proplists into memory whole.

* subversion/libsvn_fs_fs/revprops.h
  (svn_fs_fs__pack_revprops_shard): The fsfs.conf value is i64, so accept
                                    that in our internal API and let the
                                    implementation limit it in one place.

* subversion/libsvn_fs_fs/pack.c
  (synced_pack_shard): Update caller. Don't truncate the configurated
                       limit just yet.

* subversion/libsvn_fs_fs/revprops.c
  (parse_packed_revprops,
   serialize_revprops_header,
   repack_revprops,
   write_packed_revprop): All sizes are apr_size_t instead of apr_off_t.
  (svn_fs_fs__pack_revprops_shard): Same.  Also sanitize the pack file
                                    size limit.</msg>
</logentry>
<logentry
   revision="1716779">
<author>stefan2</author>
<date>2015-11-26T22:43:49.656844Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnrdump_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Minor test dump / rdump test code improvement.

Suggested by: rhuijben

* subversion/tests/cmdline/svnadmin_tests.py
  (dont_drop_valid_mergeinfo_during_incremental_loads): Use the sandbox API
     to create &amp; manage the temporary dump files. Give them specific name
     prefixes to make debugging easier in case the dump files are dodgy.

* subversion/tests/cmdline/svnrdump_tests.py
  (dont_drop_valid_mergeinfo_during_incremental_svnrdump_loads): Same.</msg>
</logentry>
<logentry
   revision="1716749">
<author>julianfoad</author>
<date>2015-11-26T17:54:57.119264Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/svnmover/svnmover.h</path>
</paths>
<msg>Extend 'svnmover's mixed-revision support to nested branches, and add an
'svnmover info' command to show info about one element, following r1716710.

* tools/dev/svnmover/svnmover.h
  (svnmover_wc_t): Update the comment.

* tools/dev/svnmover/svnmover.c
  (svnmover_wc_set_base_rev,
   svnmover_wc_get_base_rev,
   svnmover_wc_set_base_revs,
   svnmover_wc_get_base_revs,
   update_wc_base): Work with nested branches.
  (wc_checkout,
   find_el_rev_by_rrpath_rev): Update calls to track those changes.
  (action_code_t,
   action_defn_t): Add an 'info' subcommand.
  (do_info): New.
  (execute): Implement the 'info' subcommand.
</msg>
</logentry>
<logentry
   revision="1716742">
<author>rhuijben</author>
<date>2015-11-26T16:45:32.272654Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/commit.c</path>
</paths>
<msg>Mostly revert r1716575, keeping just the comment in apply_textdelta.

* subversion/libsvn_ra_serf/commit.c
  (close_file): Revert r1716575 request scheduling change.
</msg>
</logentry>
<logentry
   revision="1716731">
<author>rhuijben</author>
<date>2015-11-26T16:08:31.271751Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/win32-SharpSvn/svntest-test.cmd</path>
</paths>
<msg>* svntest-test.cmd
  Try to show remaining files in TMP on exit.
</msg>
</logentry>
<logentry
   revision="1716720">
<author>julianfoad</author>
<date>2015-11-26T15:21:07.702472Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
</paths>
<msg>Add a missing copy-constructor: svn_branch__el_rev_id_dup().

* subversion/include/private/svn_branch.h,
  subversion/libsvn_delta/branch.c
  (svn_branch__el_rev_id_dup): New.
</msg>
</logentry>
<logentry
   revision="1716710">
<author>julianfoad</author>
<date>2015-11-26T14:48:49.735052Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
</paths>
<msg>Teach 'svnmover' to support a mixed-revision WC.

The WC storage structure now supports a different base revision for each
element. The 'info-wc' command now shows minimum and maximum base revisions
(if they differ). There is not yet a way to see the base revision of a
specific element.

Commit will now produce a mixed-rev WC: it no longer updates the whole WC.

In order to fully identify a base element with an older revision number, we
will need a way to trace the branch back through history, following any
changes in the branch id.

Bug: The committed revision doesn't get attached to the WC's 'repos' object
(only to the server's 'repos' object) so we then can't access it: e.g.
'update .@HEAD' fails with 'No such revision'.

* tools/dev/svnmover/svnmover.c
  (svnmover_wc_set_base_rev,
   svnmover_wc_get_base_rev,
   svnmover_wc_set_base_revs,
   svnmover_wc_get_base_revs): New.
  (wc_checkout): Initialize the base revision numbers.
  (update_wc_eids,
   update_wc_base): New.
  (wc_commit): Update the WC base to reflect the commit.
  (find_el_rev_by_rrpath_rev): Allow looking up an element in revision
    'BASE'.
  (subtree_diff_r,
   branch_diff_r): Stop reporting a (single) revision number for each side
    of the diff.
  (commit): Tweak a comment.
  (do_commit): Don't update the whole WC after commit.
  (arg_t): Remove the 'revnum' field.
  (execute): Expand the 'info-wc' display to report the minimum and maximum
    base revision numbers. Track the other changes. Add a comment.

* tools/dev/svnmover/svnmover.h
  (svnmover_wc_t): Add storage for the base revision numbers.
</msg>
</logentry>
<logentry
   revision="1716593">
<author>kotkov</author>
<date>2015-11-26T10:18:01.337443Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/subversion/tests/cmdline/mod_dav_svn_tests.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/lock_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
</paths>
<msg>Fixup the recent solution for issue SVN-4514 by discouraging caching for
requests that include ?r=WORKINGREV, but don't contain ?p=PEGREV in the
url, e.g.:

  https://svn.apache.org/repos/asf/subversion/trunk/README?r=1716593

Results for these requests aren't guaranteed to be stable, since mod_dav_svn
can either immediately return the resource at the revision or trace back the
history to the canonical ?p=PEGREV location.  The result depends on current
state of the repository, and cannot be cached, so make sure we set the
"Cache-Control: max-age=0" header when responding to such requests.

Other possible ?p= and ?r= requests were producing appropriate Cache-Control
headers even before this changeset, and that behavior is left intact:

  https://svn.apache.org/repos/asf/subversion/trunk/README
  https://svn.apache.org/repos/asf/subversion/trunk/README?p=1716593
  https://svn.apache.org/repos/asf/subversion/trunk/README?p=1716593&amp;r=1716593

Add a new test that specifies current behavior of how and when we set the
Cache-Control header, and as well covers the aforementioned ?r= case.

* subversion/mod_dav_svn/repos.c
  (prep_regular): Do not mark the resource with a URL query string as
   'idempotent', unless it specifies a peg revision.

* subversion/tests/cmdline/svntest/main.py
  (create_http_connection): New utility function, factored out from ...

* subversion/tests/cmdline/lock_tests.py
  (http_connection, create_dav_lock_timeout, dav_lock_refresh): ...here.

* subversion/tests/cmdline/mod_dav_svn_tests.py: New file.
</msg>
</logentry>
<logentry
   revision="1716582">
<author>rhuijben</author>
<date>2015-11-26T08:44:02.736716Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/commit.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/commit.c
  (open_root,
   delete_entry): Remove two accidentally added SVN_DBG() calls.
</msg>
</logentry>
<logentry
   revision="1716579">
<author>rhuijben</author>
<date>2015-11-26T08:27:41.034985Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Following up on r1716548, add another regression test. Asserting current
behavior.

* subversion/tests/libsvn_ra/ra-test.c
  (commit_empty_last_change): New test.
  (test_funcs): Add commit_empty_last_change.
</msg>
</logentry>
<logentry
   revision="1716575">
<author>rhuijben</author>
<date>2015-11-26T08:05:36.279277Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/ra_serf.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/commit.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
</paths>
<msg>In ra_serf: when a to-be committed file has text and property changes to be
applied, pipeline both requests.

* subversion/libsvn_ra_serf/commit.c
  (apply_textdelta): Add comment noting why the suggested EAGAIN approach
     doesn't work as simple as this.
  (close_file): Pipeline both requests if there are multiple requests. For
     simplicity just wait for the propfind to be done before waiting for
     the put. We have to wait for both anyway.

* subversion/libsvn_ra_serf/ra_serf.h
  (svn_ra_serf__unschedule_handler): Add prototype.

* subversion/libsvn_ra_serf/util.c
  (svn_ra_serf__unschedule_handler): Make library private.
</msg>
</logentry>
<logentry
   revision="1716554">
<author>rhuijben</author>
<date>2015-11-25T22:58:55.282887Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/win-tests.py</path>
</paths>
<msg>Enable global scheduler support in the Windows testrunner.

Apply some tweaks used for http/2 testing.

* win-tests.py
  Add argument, parse argument, pass argument.
  Tweak generated httpd config.
</msg>
</logentry>
<logentry
   revision="1716548">
<author>rhuijben</author>
<date>2015-11-25T21:31:20.094340Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Create simpler reproduction recipe for BDB issue julian found using
svnmover+BDB+ra_serf.

* subversion/tests/libsvn_fs/fs-test.c
  (reopen_trivial_transaction): Extend test.
</msg>
</logentry>
<logentry
   revision="1716464">
<author>philip</author>
<date>2015-11-25T16:22:39.674088Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>Make builddir != srcdir work with global scheduler.

* build/run_tests.py
  (CollectingThread.__init__): Add builddir parameter.
  (CollectingThread.run): Find compiled executables in builddir.
  (TestHarness._run_global_sheduler): Pass builddir.
</msg>
</logentry>
<logentry
   revision="1716450">
<author>rhuijben</author>
<date>2015-11-25T16:01:12.487028Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/lock.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/lock_tests.py</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/authz_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/lock.c</path>
</paths>
<msg>Improve error message handling on two lock operations via ra_serf. These
errors still relied on the http reason string for the user visible text.

This fixes a serf/mod_dav TODO and two http/2 test failures.

* subversion/libsvn_ra_serf/lock.c
  (run_locks): Tweak text on 304. This was not unlock specific.
               Prefer 423 text from server if it looks valid.

* subversion/mod_dav_svn/lock.c
  (get_locks): Add another lie to this function, that already has a few.

* subversion/tests/cmdline/authz_tests.py
  (authz_locking): Allow other text. Expecting an unlock error when
    performing an 'svn lock' doesn't make much sense.

* subversion/tests/cmdline/lock_tests.py
  (unlocked_lock_of_other_user): Expect same error on all ra layers.
</msg>
</logentry>
<logentry
   revision="1716405">
<author>stefan2</author>
<date>2015-11-25T13:42:30.470140Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>Follow-up to r1716399:

* build/run_tests.py
  (TestHarness._run_local_schedulers): Fix docstring indentation.</msg>
</logentry>
<logentry
   revision="1716400">
<author>rhuijben</author>
<date>2015-11-25T13:34:52.806472Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/replay.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/ra_serf.h</path>
</paths>
<msg>Apply some minor tweaks to libsvn_ra_serf to handle some http/2 cases.

This reduces the number of testfailures to 3 or 5 for me when running
the tests over http/2 with a slightly patched serf trunk.
(2 tests that rely on the http reason text.
 2 tests that somehow hit an httpd limit
 And one segfault/abort in serf triggered by a svnmover test)

* subversion/libsvn_ra_serf/ra_serf.h
  (svn_ra_serf__session_t): Add boolean.

* subversion/libsvn_ra_serf/replay.c
  (svn_ra_serf__replay_range): Implement api for http/2.0 by not implementing
    it. See comment.

* subversion/libsvn_ra_serf/serf.c
  (svn_ra_serf__open): Initialize new var.
  (ra_serf_dup_session): Document that we dup a variable.

* subversion/libsvn_ra_serf/util.c
  (conn_negotiate_protocol): Tweak a few more vars.
  (handle_response): Also detect 2.0
</msg>
</logentry>
<logentry
   revision="1716399">
<author>stefan2</author>
<date>2015-11-25T13:34:41.083746Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/run_tests.py</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/Makefile.in</path>
</paths>
<msg>Add a --global-scheduler option to the Unix run_tests harness.

The idea is to run not parallelize within the individual Python test
scripts alone but instead to have one global scheduler for all tests.
That significantly improves scalability with large numbers of HW threads:

  MacBook (4C/8T):       140s -&gt; 110s
  Workstation (12C/24T): 100s -&gt;  40s

Note that the consolue output is different in global scheduler mode
and the log files then no longer contain start time stamps.

Because the C tests use their own scheduler, partially to enforce
specific restrictions on parallel execution, schedule whole C test
apps instead of individual C tests.

* build/run_tests.py
  (): Update usage docstring and add missing imports.
  (TestHarness._init_py_tests): Remember the command line for Python tests
                                as well because the global scheduler doesn't
                                load those tests but runs them externally.
  (TestHarness.Job,
   TestHarness.CollectingThread,
   TestHarness.TestSpawningThread): New classes for the global scheduler
                                    functionality.
  (TestHarness._run_global_sheduler): Main routine for the new scheduler.
  (TestHarness._run_local_schedulers): Encapsulates the traditional behavior.
  (TestHarness.run): Run the tests with the selected scheduler.
  (create_parser): Add '-g' / '--global-scheduler' option.

* Makefile.in
  (check): Add GLOBAL_SCHEDULER option.</msg>
</logentry>
<logentry
   revision="1716397">
<author>stefan2</author>
<date>2015-11-25T13:33:48.455955Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>Minor refactoring of the Unix run_tests harness.

This is to reduce the code churn for the upcoming feature commit.

* build/run_tests.py
  (TestHarness._process_test_output_line): Factored out from ...
  (TestHarness._run_c_test): ... this one.
  (TestHarness._check_for_unknown_failure): Factored out from ...
  (TestHarness._run_test): ... this one.
</msg>
</logentry>
<logentry
   revision="1716395">
<author>stefan2</author>
<date>2015-11-25T13:32:45.104743Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/authz_tests.py</path>
</paths>
<msg>Make authz Python tests fully work in parallel execution.

* subversion/tests/cmdline/authz_tests.py
  (authz_checkout_test,
   authz_checkout_and_update_test,
   authz_partial_export_test,
   authz_validate,
   authz_switch_to_directory): All these tests tweek their repository
                               configuration and must therefore use
                               private repository copies.
</msg>
</logentry>
<logentry
   revision="1716394">
<author>stefan2</author>
<date>2015-11-25T13:32:19.921219Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnrdump_tests.py</path>
</paths>
<msg>Don't have different tests produce the same files.

* subversion/tests/cmdline/svnrdump_tests.py
  (dont_drop_valid_mergeinfo_during_incremental_svnrdump_loads):
                               Use test-specific dump file names, so they
                               won't overlap with the svnadmin dump tests.</msg>
</logentry>
<logentry
   revision="1716240">
<author>philip</author>
<date>2015-11-24T20:13:02.843447Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>When getting the default file permissions for a file created outside
the system directory create the necessary temporary files in the
given directory.  This removes the disk IO to TMPDIR during the first
commit made by mod_dav_svn and svnserve processes, all disk IO now
happens in the repositories.

* subversion/libsvn_subr/io.c
  (get_default_file_perms): Create temporary files in given directory.
  (merge_default_file_perms): Add directory parameter.
  (svn_io_open_unique_file3): Pass directory.
</msg>
</logentry>
<logentry
   revision="1716219">
<author>kotkov</author>
<date>2015-11-24T17:23:36.584252Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_repos/repos-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/fs-wrap.c</path>
</paths>
<msg>Don't leave *conflict_p uninitialized if svn_repos_fs_commit_txn() fails
before calling the FS layer.

This function gives the same promises as svn_fs_commit_txn(), which always
sets the conflict variable to either NULL, or to a valid conflict string.
Make sure that we fulfil this contract even if the commit preparation fails
— e.g., when calling pre-commit hook or removing ephemeral txnprops.

* subversion/libsvn_repos/fs-wrap.c
  (svn_repos_fs_commit_txn): Start from setting *conflict_p to NULL.

* subversion/tests/libsvn_repos/repos-test.c
  (commit_aborted_txn, test_funcs): Add a test for this behavior.
</msg>
</logentry>
<logentry
   revision="1716095">
<author>julianfoad</author>
<date>2015-11-24T09:52:44.349161Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/private/svn_branch_impl.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/wc.py</path>
</paths>
<msg>In 'svnmover', start tracking complete merges.

Track the source-branch end point of each merge. Add an 'automerge' command
that uses this as the ancestor for the next merge from the same source.

This is a very primitive initial implementation. It only enables each branch
to track complete merges from a single source branch. Complete merges here
refers to completeness in revisions (all revisions up to N, no cherry
picking) and also to the complete tree (no subtree tracking). It overwrites
the previous merge history regardless whether the new merge is from the same
source branch, and regardless whether it is in fact a complete merge.

* subversion/include/private/svn_branch.h
  (svn_branch__rev_bid_equal): New.
  (svn_branch__state_get_merge_ancestor,
   svn_branch__state_set_merge_ancestor): New.

* subversion/include/private/svn_branch_impl.h
  (svn_branch__state_v_get_merge_ancestor_t,
   svn_branch__state_v_set_merge_ancestor_t): New.
  (svn_branch__state_vtable_t): Add the new methods to the vtable.

* subversion/libsvn_delta/branch.c
  (svn_branch__state_priv_t): Add storage for a merge ancestor (just one, so
    far).
  (svn_branch__rev_bid_equal): New.
  (branch_state_get_merge_ancestor,
   branch_state_set_merge_ancestor): New.
  (svn_branch__state_get_merge_ancestor,
   svn_branch__state_set_merge_ancestor): New.
  (branch_state_create): Add the new methods to the vtable.
  (svn_branch__get_default_r0_metadata): Update.
  (merge_history_parse): New.
  (parse_element_line): Take and use a result pool for the results, in order
    to avoid surprises in future.
  (svn_branch__state_parse): Parse the merge history.
  (merge_history_serialize): New.
  (svn_branch__state_serialize): Serialize the merge history.

* subversion/tests/cmdline/svnmover_tests.py
  (reported_mg_diff): New.
  (...everywhere...): Expect a merge-history diff whenever there is a merge.

* subversion/tests/cmdline/svntest/wc.py
  (_re_parse_eid_merge_history): New.
  (State.from_eids): Parse and ignore merge history lines.

* tools/dev/svnmover/merge3.c
  (merge_subbranch): Correct a comment.

* tools/dev/svnmover/svnmover.c
  (rev_bid_str,
   merge_history_diff): New.
  (txn_is_changed): Also check for any change in merge history.
  (svn_branch__replay): Also replay any change in merge history.
  (action_code_t,
   action_defn): Define a new 'automerge' command. Rename a constant.
  (do_merge): Also record the merge history.
  (do_auto_merge): New.
  (branch_diff_r): Also diff the merge history.
  (execute): Expand the 'info-wc' command to show merge history status.
    Implement the 'automerge' command. Track the rename.
</msg>
</logentry>
<logentry
   revision="1716067">
<author>ivan</author>
<date>2015-11-24T08:29:30.663282Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>FSFS: Optimize reading directories in incremental mode a bit: pre-allocate
APR array since we know final directories entry count.

* subversion/libsvn_fs_fs/cached_data.c
  (read_dir_entries): Create ENTRIES here instead of filling caller provided
   array.   
  (get_dir_contents): Adapt calls to read_dir_entries().
</msg>
</logentry>
<logentry
   revision="1716047">
<author>ivan</author>
<date>2015-11-24T07:40:34.116478Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/caching.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/caching.c
  (svn_fs_fs__initialize_txn_caches): Build txn directory cache prefix using
   one apr_strcat() call. 
</msg>
</logentry>
<logentry
   revision="1715947">
<author>ivan</author>
<date>2015-11-23T20:35:55.763469Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Refactor code to use standard error handling pattern. No function changes
intended.

* subversion/libsvn_fs_fs/cached_data.c
  (get_node_revision_body): Use 'if/else if' instead of nested 'if' to handle
   specific error code.
</msg>
</logentry>
<logentry
   revision="1715832">
<author>rhuijben</author>
<date>2015-11-23T14:29:59.134650Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/win-tests.py</path>
</paths>
<msg>* win-tests.py
  (Svnserve.start): Pass the SVN_DBG_STACKTRACES_TO_STDERR environment
    variable to svnserve.exe to get more information on crashes on testruns.
</msg>
</logentry>
<logentry
   revision="1715793">
<author>ivan</author>
<date>2015-11-23T12:41:04.669142Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Do not read TXN props on every svn_fs_txn_open() in libsvn_fs_fs: FSFS doesn't
use transaction_t.proplist (and never used). This code seems to inherited
from BDB.

FWIW this is responsible for about 5% I/O operations when running testsuite
over http:// protocol on Windows, because mod_dav_svn opens TXN for every
request against transaction.

* subversion/libsvn_fs_fs/fs.h
  (transaction_t): Remove PROPLIST member.

* subversion/libsvn_fs_fs/transaction.c
  (svn_fs_fs__get_txn): Remove call to get_txn_proplist().
</msg>
</logentry>
<logentry
   revision="1715781">
<author>julianfoad</author>
<date>2015-11-23T12:23:57.911259Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
</paths>
<msg>A bug fix and minor tweaks in 'svnmover'.

* tools/dev/svnmover/svnmover.c
  (do_switch): Fix a wrong-pool bug that affected any update or switch
    that raised conflicts.
  (do_merge): New, extracted from execute().
  (do_mkbranch): Rename from 'mk_branch', for consistency.
  (execute): Add an error message when the user asks to resolve a conflict
    but there are no conflicts. Track the above changes.</msg>
</logentry>
<logentry
   revision="1715777">
<author>ivan</author>
<date>2015-11-23T12:10:23.211857Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/config_file.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_subr/config-test.c</path>
</paths>
<msg>Convert assertion failure to error if configuration file contains just one
0xEE character.

* subversion/libsvn_subr/config_file.c
  (parse_context_t): Add HIT_STREAM_EOF member.
  (parser_getc): Set CTX-&gt;HIT_STREAM_EOF to TRUE once we hit end-of-file and
   do not attempt to read from stream after that.
  (skip_bom): Extend SVN_ERR_ASSERT() condition. Check for subsequent BOM
   characters only if we have more than two bytes in buffer remaining.

* subversion/tests/libsvn_subr/config-test.c
  (test_invalid_bom): New test.
  (test_funcs): Add test_invalid_bom test to list.
</msg>
</logentry>
<logentry
   revision="1715740">
<author>ivan</author>
<date>2015-11-23T09:24:14.615658Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/hashdump-test.c</path>
</paths>
<msg>Add test for reading hash from buffered APR file.

* subversion/tests/libsvn_subr/hashdump-test.c
  (hash_gets_stringt, read_hash_buffered_test): New.
  (test_funcs): Add read_hash_buffered_test() to test list.
</msg>
</logentry>
<logentry
   revision="1715551">
<author>ivan</author>
<date>2015-11-21T18:53:14.498006Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/dav_svn.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
</paths>
<msg>Resolve issue SVN-4514. Add 'Cache-Control: max-age=604800' for all requests
to resource that are 'idempotent', i.e. target is fully specified in URI and
cannot change. For other requests add 'Cache-Control: max-age=0' to disable
browser's heuristic caching.

* subversion/mod_dav_svn/dav_svn.h
  (dav_resource_private): Add new member IDEMPOTENT.

* subversion/mod_dav_svn/repos.c
  (parse_version_uri): Mark resource as 'idempotent'.
  (prep_regular): Mark resource as 'idempotent' only if revision is specified
   in request URI.
  (is_cacheable): New.
  (set_headers): Use is_cacheable() to determine Cache-Control header value.
   Set Cache-Control for non-existing resources too.
</msg>
</logentry>
<logentry
   revision="1715358">
<author>julianfoad</author>
<date>2015-11-20T13:32:31.209777Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
</paths>
<msg>A follow-up to r1715354.

* tools/dev/svnmover/merge3.c
  (brief_eid_and_name_or_nil): Delete, as this is now unused.
  (partial_relpath): Update the doc string.
</msg>
</logentry>
<logentry
   revision="1715354">
<author>julianfoad</author>
<date>2015-11-20T13:27:07.471852Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.h</path>
</paths>
<msg>Improve 'svnmover' conflict displays a little bit.

Report the relevant inputs (yca, src, tgt) for each element in conflict and
identify elements by their paths (as far as possible) when the UI mode is
'paths'.

Detect cycles better: only report the elements involved in a cycle, not all
elements whose parentage leads to a cycle.

* tools/dev/svnmover/merge3.c
  (partial_relpath,
   display_relpath,
   merged_element_id_str): New.
  (element_merge3_conflict_str,
   name_clash_conflict_str,
   cycle_conflict_str,
   orphan_conflict_str,
   svnmover_display_conflicts): Display nicer descriptions.
  (record_cycle): New.
  (detect_cycles): Improve.
  (branch_merge_subtree_r): Store references to the branch states.

* tools/dev/svnmover/svnmover.c
  (the_ui_mode): Move this and its enumeration constants...

* tools/dev/svnmover/svnmover.h
  (the_ui_mode): ... to here.
  (conflict_storage_t): Store references to the four (yca, src, tgt, merge)
    branch states here.
</msg>
</logentry>
<logentry
   revision="1715262">
<author>rhuijben</author>
<date>2015-11-19T20:16:52.802042Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/replay.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/replay.c
  (svn_ra_serf__replay_range): Set Content-Type on report request, just like
    in svn_ra_serf__replay().
</msg>
</logentry>
<logentry
   revision="1715256">
<author>rhuijben</author>
<date>2015-11-19T19:57:14.973228Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/version.c</path>
</paths>
<msg>* subversion/mod_dav_svn/version.c
  (get_option): Store generated header values in the request pool instead
    of the resource pool. Not that there is really a difference, but this
    is the pool that contains the headers table itself.
</msg>
</logentry>
<logentry
   revision="1715232">
<author>rhuijben</author>
<date>2015-11-19T18:19:02.617294Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/commit.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/commit.c
  (proppatch_resource): Properly set Content-Type header.
</msg>
</logentry>
<logentry
   revision="1715228">
<author>rhuijben</author>
<date>2015-11-19T18:03:11.940739Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
</paths>
<msg>Add a tiny bit of code to allow testing with Apache Serf's http/2 support.

I committed this patch to celebrate that I got through basic_tests.py
using the current http/2 support.

* subversion/libsvn_ra_serf/util.c
  (conn_negotiate_protocol): New function.
  (conn_setup): Register usage of conn_negotiate_protocol when
    a very recent (read: trunk) serf + SVN__SERF_TEST_HTTP2 are used.
</msg>
</logentry>
<logentry
   revision="1715224">
<author>rhuijben</author>
<date>2015-11-19T17:50:31.154730Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/merge.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/merge.c
  (svn_ra_serf__run_merge): Properly send content type on MERGE request.
</msg>
</logentry>
<logentry
   revision="1714996">
<author>julianfoad</author>
<date>2015-11-18T14:05:18.373845Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.h</path>
</paths>
<msg>In 'svnmover', tweak the display of conflicts towards being slightly more
user-friendly.

* tools/dev/svnmover/svnmover.h
  (conflict_storage_t): Rename 'single-element' conflict to 'element-merge'
    conflict, which it already was called in some places. Update all users.

* tools/dev/svnmover/merge3.c
  (element_merge3_conflict_str,
   name_clash_conflict_str,
   cycle_conflict_str,
   orphan_conflict_str,
   svnmover_display_conflicts): Tweak the display of conflicts.
  (conflict_kind_t): Rename 'single-element' conflict to 'element-merge'
    conflict, which it already was called in some places. Update all users.</msg>
</logentry>
<logentry
   revision="1714993">
<author>julianfoad</author>
<date>2015-11-18T13:24:45.239969Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
</paths>
<msg>In 'svnmover', change the default to non-coloured output, as coloured
output can be annoying when not wanted whereas plain text is a 'safe'
and familiar default setting.

Suggested by: philip

* tools/dev/svnmover/svnmover.c
  (usage): Change the help text.
  (sub_main): Change the default to 'never'.
</msg>
</logentry>
<logentry
   revision="1714840">
<author>julianfoad</author>
<date>2015-11-17T18:07:11.097505Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_ra.h</path>
</paths>
<msg>* subversion/include/svn_ra.h
  (svn_ra_get_dir2): Correct a typo in the doc string.</msg>
</logentry>
<logentry
   revision="1714830">
<author>julianfoad</author>
<date>2015-11-17T16:36:52.812635Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnmover_tests.py
  (basic_svnmover): Avoid paths containing a URI-encoded space, because that
    isn't relevant to the purpose of this test, doesn't work the way it was
    originally intended, and causes confusion when it fails on a system like
    mine that has a buggy Apache version (at least I suppose that's the
    cause).</msg>
</logentry>
<logentry
   revision="1714814">
<author>julianfoad</author>
<date>2015-11-17T15:51:59.098900Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
</paths>
<msg>In 'svnmover', don't do so much work towards preparing a commit when
there are no changes to commit.

* tools/dev/svnmover/svnmover.c
  (wc_commit): Return early when there are no changes to commit.</msg>
</logentry>
<logentry
   revision="1714806">
<author>julianfoad</author>
<date>2015-11-17T15:11:24.388135Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/property.c</path>
</paths>
<msg>Work around a bug in Serf bucket handling, which could crash in some cases
within svn_ra_serf__get_dir(dirent_fields=0). Found by 'svnmover' tests.

The bug is fixed in Serf trunk r1712790, but not yet released.

Suggested by: rhuijben

* subversion/libsvn_ra_serf/property.c
  (create_propfind_body): Avoid the possibility of the first operation on the
    bucket being serf_bucket_aggregate_prepend(), by only using _append().</msg>
</logentry>
<logentry
   revision="1714790">
<author>philip</author>
<date>2015-11-17T14:20:09.663474Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/ruby/test/test_wc.rb</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/Makefile.in</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/swig/ruby/test/my-assertions.rb</path>
</paths>
<msg>Adapt Ruby tests to work with test-unit gem.

Ruby 2.2 bundles the test-unit gem instead of using the older "test-unit
API provided by minitest".  This also fixes testing when the test-unit
gem happens to be installed along with older Ruby versions.

* Makefile.in:
  (check-swig-rb): Detect whether test-unit supports the --collector
   argument and, if so, use the dir collector.

* subversion/bindings/swig/ruby/test/my-assertions.rb:
  (_my_assert_block): Remove unnecessary assert_block.

* subversion/bindings/swig/ruby/test/test_wc.rb:
  (test_context_create): Remove useless assertion on result of
   Svn::Wc::Create, especially since it varies based on Ruby version.

Patch by: James McCoy &lt;jamessan{_AT_}debian.org&gt;
</msg>
</logentry>
<logentry
   revision="1714776">
<author>julianfoad</author>
<date>2015-11-17T13:20:28.910415Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/ra.c</path>
</paths>
<msg>Make 'svnmover' return a friendly error message instead of failing an assertion
when no move-tracking metadata is found in the repository.

* tools/dev/svnmover/ra.c
  (branch_revision_fetch_info): Return a friendly error message when
    no move-tracking metadata is found.</msg>
</logentry>
<logentry
   revision="1714772">
<author>julianfoad</author>
<date>2015-11-17T12:31:16.953308Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Un-break the build. A follow-up to r1714769.

* subversion/libsvn_delta/branch_compat.c
  Remove the obsolete #include.</msg>
</logentry>
<logentry
   revision="1714769">
<author>julianfoad</author>
<date>2015-11-17T12:27:36.434846Z</date>
<paths>
<path
   action="D"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/libsvn_delta/debug_editor.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_delta_private.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/debug_editor.c</path>
</paths>
<msg>Move a debugging declaration to a more suitable place.

* subversion/include/private/svn_delta_private.h
  (svn_delta__get_debug_editor): Move to here from debug_editor.h.

* subversion/libsvn_delta/debug_editor.h
  Delete this file.

* subversion/libsvn_delta/debug_editor.c,
  tools/dev/svnmover/svnmover.c
  Update the #include.
</msg>
</logentry>
<logentry
   revision="1714768">
<author>julianfoad</author>
<date>2015-11-17T12:15:25.424857Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build.conf</path>
</paths>
<msg>* build.conf
  (__ALL__): Move 'svnmover' to here...
  (__MORE__): ... from here, because then we think the Windows build will
    build it.</msg>
</logentry>
<logentry
   revision="1714741">
<author>julianfoad</author>
<date>2015-11-17T09:37:49.265798Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build.conf</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_branch_nested.h</path>
</paths>
<msg>Fix some more build problems found by buildbots, following r1714640 and
r1714644.

* build.conf
  (svnmover): Remove the 'manpages' line, as there is no manual page.

* subversion/include/private/svn_branch_nested.h
  (svn_branch__get_eid_by_rrpath): Add more comment markers so that
    the simple regex in build/generator/extractor.py doesn't see this
    already commented-out declaration.
</msg>
</logentry>
<logentry
   revision="1714644">
<author>julianfoad</author>
<date>2015-11-16T17:59:04.701356Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_branch_nested.h</path>
</paths>
<msg>Un-break the Windows build, following r1714640.

* subversion/libsvn_wc/wc.h
  (svn_branch__get_eid_by_rrpath): Comment out this declaration, as it has no
    definition and that breaks the Windows build.</msg>
</logentry>
<logentry
   revision="1714640">
<author>julianfoad</author>
<date>2015-11-16T17:46:37.621550Z</date>
<paths>
<path
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/libsvn_delta/branch_migrate.c"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/branch_migrate.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/notes/move-tracking/README</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/libsvn_delta/branch_repos.c"
   copyfrom-rev="1714632">/subversion/trunk/subversion/libsvn_delta/branch_repos.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
<path
   text-mods="false"
   kind="dir"
   copyfrom-path="/subversion/branches/move-tracking-2/tools/dev/svnmover"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false">/subversion/trunk/tools/dev/svnmover</path>
<path
   copyfrom-path="/subversion/branches/move-tracking-2/notes/move-tracking"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="dir">/subversion/trunk/notes/move-tracking</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/include/private/svn_element.h"
   copyfrom-rev="1714632">/subversion/trunk/subversion/include/private/svn_element.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/configure.ac</path>
<path
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/tests/cmdline/svnmover_tests.py"
   copyfrom-rev="1714632"
   action="A">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
<path
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/include/private/svn_branch.h"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/include/private/svn_branch_nested.h"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch_nested.h</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/include/private/svn_branch_compat.h"
   copyfrom-rev="1714632">/subversion/trunk/subversion/include/private/svn_branch_compat.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svntest/actions.py</path>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_cmdline_private.h</path>
<path
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/include/private/svn_branch_repos.h"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch_repos.h</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/libsvn_delta/element.c"
   copyfrom-rev="1714632">/subversion/trunk/subversion/libsvn_delta/element.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/LICENSE</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svntest/wc.py</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/libsvn_delta/branch.c"
   copyfrom-rev="1714632">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build.conf</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cmdline.c</path>
<path
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/libsvn_delta/branch_nested.c"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/branch_nested.c</path>
<path
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/libsvn_delta/branch_compat.c"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false"
   text-mods="false">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/include/private/svn_branch_impl.h"
   copyfrom-rev="1714632">/subversion/trunk/subversion/include/private/svn_branch_impl.h</path>
</paths>
<msg>Merge the 'svnmover' prototype from the 'move-tracking-2' branch to trunk.

See the dev@ email thread "Merge 'svnmover' demo tool to trunk" started on
2015-11-10, archived at e.g. &lt;http://mail-archives.apache.org/mod_mbox/subversion-dev/201511.mbox/%3CCAEcU=1YE5Ci02j_4aAeB_roS1X0H2QWPP3juu0exjVJ-FGCLyg@mail.gmail.com%3E&gt;.

This is a reintegration (performed as an automatic merge) followed by
reverting the unwanted parts. As such, those unwanted parts (such as shim
insertions in several libraries) will be treated as 'record-only merged' and
will not be picked up by any subsequent automatic merge to trunk.

A brief description of the changes follows.

* build.conf
  Adjust to build the new files.

* configure.ac
  Adjust compiler warning flags to not warn about passing or returning a
  structure, because some of the code does so.

* LICENSE
  Add the licence text for the embedded 'linenoise' library.

* notes/move-tracking/README
  New file, describing this work.

* subversion/include/private/svn_branch.h,
  subversion/include/private/svn_branch_compat.h,
  subversion/include/private/svn_branch_impl.h,
  subversion/include/private/svn_branch_nested.h,
  subversion/include/private/svn_branch_repos.h,
  subversion/include/private/svn_element.h
  New files.

* subversion/libsvn_delta/branch.c,
  subversion/libsvn_delta/branch_compat.c,
  subversion/libsvn_delta/branch_migrate.c,
  subversion/libsvn_delta/branch_nested.c,
  subversion/libsvn_delta/branch_repos.c,
  subversion/libsvn_delta/element.c
  New files.

* subversion/include/private/svn_cmdline_private.h
  subversion/libsvn_subr/cmdline.c
  (svn_cmdline__stdin_is_a_terminal,
   svn_cmdline__stdout_is_a_terminal,
   svn_cmdline__stderr_is_a_terminal): New.

* subversion/tests/cmdline/svnmover_tests.py
  New file.

* subversion/tests/cmdline/svntest/actions.py
  (run_and_verify_svnmover,
   run_and_verify_svnmover2): New.

* subversion/tests/cmdline/svntest/main.py
  (svnmover_binary,
   run_svnmover): New.
  (execute_tests): Initialize 'svnmover_binary'.

* subversion/tests/cmdline/svntest/wc.py
  (State): Add 'rename' and 'from_eids' methods.
  (StateItem): Add an 'eid' attribute.

* tools/dev/svnmover
  New tool.
</msg>
</logentry>
<logentry
   revision="1714382">
<author>stefan2</author>
<date>2015-11-14T21:19:06.132089Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>* subversion/libsvn_subr/cache-membuffer.c
  (ensure_data_insertable_l2): Fix wording in comment. No functional change.</msg>
</logentry>
<logentry
   revision="1714380">
<author>stefan2</author>
<date>2015-11-14T21:17:40.369598Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/sorts.c</path>
</paths>
<msg>Fix svn_sort__array_delete for very large arrays.

The only way to trigger this in our current code is to have
mergeinfo with more than 1G ranges per path.

* subversion/libsvn_subr/sorts.c
  (svn_sort__array_delete): Use the right overflow check.</msg>
</logentry>
<logentry
   revision="1714372">
<author>stefan2</author>
<date>2015-11-14T21:02:37.494147Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/prefix_string.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/compress.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/skel.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/spillbuf.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/subst.c</path>
</paths>
<msg>Fix a number of potential overflow conditions on platforms where pointers
may be allocated very close to the end of address space, such as WoW64.

Instead of "if (base + x &lt; max)", we must use "if (max - base &gt; x)" to
prevent overflows under all circumstances.

There is no direct way to use these to trigger a segfault on purpose,
rather a user might experience random crashes.  Due to the block sizes
we allocate and the fact that OS and RTL reserve the very top of the
address space, it is very unlikely to ever actually encounter an overflow
with valid lengths and offsets in SVN.

* subversion/libsvn_subr/cache-membuffer.c
  (ensure_data_insertable_l2,
   ensure_data_insertable_l1, 
   membuffer_cache_set_partial_internal): Fix the overflow check as
                                          indicated above.

* subversion/libsvn_subr/compress.c
  (svn__decode_uint): Same.

* subversion/libsvn_subr/prefix_string.c
  (svn_prefix_string__create): Same.

* subversion/libsvn_subr/skel.c
  (explicit_atom): Same.

* subversion/libsvn_subr/spillbuf.c
  (svn_spillbuf__write): Same.

* subversion/libsvn_subr/subst.c
  (translate_chunk): Same.</msg>
</logentry>
<logentry
   revision="1714359">
<author>stefan2</author>
<date>2015-11-14T20:20:36.246023Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/svndiff.c</path>
</paths>
<msg>* subversion/libsvn_delta/svndiff.c
  (write_handler): Code formatting fixes. No functional change.</msg>
</logentry>
<logentry
   revision="1714358">
<author>stefan2</author>
<date>2015-11-14T20:16:29.829398Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/string-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/string.c</path>
</paths>
<msg>Fix the overflow / truncating handling handling of svn_stringbuf_remove
and svn_stringbuf_replace.  The API allows for deleted region to extend
beyond the current string; APR_SIZE_MAX in particular is a valid length
for the region to remove.

Note that all calls within our code use properly limited calls to these
functions, so they never may cause overflows.  3rd party callers might
be affected, though.

* subversion/libsvn_subr/string.c
  (svn_stringbuf_remove,
   svn_stringbuf_replace): Correct the removal length limiting code.

* subversion/tests/libsvn_subr/string-test.c
  (test_stringbuf_remove,
   test_stringbuf_replace): Add test cases for the fixed conditions.</msg>
</logentry>
<logentry
   revision="1714357">
<author>stefan2</author>
<date>2015-11-14T19:55:56.577179Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>* subversion/libsvn_subr/cache-membuffer.c
  (svn_cache__create_membuffer_cache): Add a paranoia parameter check.</msg>
</logentry>
<logentry
   revision="1714356">
<author>stefan2</author>
<date>2015-11-14T19:52:23.559007Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Fix capacity check in the membuffer cache's prefix pool.
The current implementation used only about 1% of its capacity.

* subversion/libsvn_subr/cache-membuffer.c
  (prefix_pool_get_internal): Actually check byte usage against bytes
                              limit - not entry count limit.</msg>
</logentry>
<logentry
   revision="1714339">
<author>stefan2</author>
<date>2015-11-14T14:42:17.806729Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>For ra-svn client requests that exceed the newly introduced limit,
usually there is only one huge string component, e.g. some large
property value, that causes the problem.  Detect them early such
that we might not even need to transfer the whole data up to the
limit before giving up. 

* subversion/libsvn_ra_svn/marshal.c
  (read_string): Exit as soon as we know we will exceed the configured
                 size limit.</msg>
</logentry>
<logentry
   revision="1714335">
<author>stefan2</author>
<date>2015-11-14T14:29:22.042521Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>* subversion/libsvn_ra_svn/marshal.c
  (read_string): Clarify a comment. No functional change.</msg>
</logentry>
<logentry
   revision="1714334">
<author>stefan2</author>
<date>2015-11-14T14:28:33.919122Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>Following up on r1714330 and r1714333, fix deprecation warnings.

* subversion/libsvn_ra_svn/client.c
  (handle_child_process_error,
   make_tunnel,
   open_session): Call the latest API version but don't set any limits
                  because the client already has cancellation support
                  if needed.</msg>
</logentry>
<logentry
   revision="1714333">
<author>stefan2</author>
<date>2015-11-14T14:24:50.255881Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnserve/serve.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/ra_svn.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_error_codes.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/deprecated.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_ra_svn.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnserve/server.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/svnserve.c</path>
</paths>
<msg>Following up on r1714330, implement a similar limit to svnserve responses.

If --max-response-size is specified and a response exceeds that limit,
it gets truncated and the connetion will be reset.  This allows us to limit
the server load caused by "don't do that" type of requests like exporting
the root of the repository instead of some project branch.

By default, this limit is 0, i.e. inactive.

* subversion/include/svn_error_codes.h
  (SVN_ERR_RA_SVN_RESPONSE_SIZE): New error code.

* subversion/include/svn_ra_svn.h
  (svn_ra_svn_create_conn5): Add another limit parameter.

* subversion/libsvn_ra_svn/ra_svn.h
  (svn_ra_svn_conn_st): Add fields for the new data counter and its limit.

* subversion/libsvn_ra_svn/deprecated.c
  (svn_ra_svn_create_conn4): Update.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn_create_conn5): Initialize the new struct elements.
  (svn_ra_svn__reset_command_io_counters): One more counter to reset.
  (check_io_limits): One more limit to check.
  (writebuf_output): Count outgoing data and enforce limits.

* subversion/svnserve/server.h
  (serve_params_t): Add field for the new --max-response-size option.

* subversion/svnserve/serve.c
  (serve_interruptable): Pass the new option to the bumped API.

* subversion/svnserve/svnserve.c
  (SVNSERVE_OPT_MAX_RESPONSE): Declare the new option.
  (svnserve__options): Define and document the new option.
  (sub_main): Handle the new option and pass it to the bumped API.</msg>
</logentry>
<logentry
   revision="1714330">
<author>stefan2</author>
<date>2015-11-14T14:09:18.868117Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/ra_svn.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_error_codes.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/deprecated.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_ra_svn.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnserve/server.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnserve/svnserve.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/editorp.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/serve.c</path>
</paths>
<msg>Add the equivalent of LimitXMLRequestBody to svnserve.

The idea is simple, whenever we fill our receive buffer, we update the sum
total and compare it to some limit.  Reset the counter sum at each new
command / request coming in.

If a client request exceeds the --max-request-size parameter given to
svnserve (16MB by default, twice the httpd default), the processing gets
terminated and the connection will be closed.  The latter is necessary
because the protocol is stateful and we just skipped / ignored a potential
state transition.

As a result, the memory usage of a threaded server is now bound to approx.
(max-request-size + 4M) x max-threads even in high-load scenarios.  On the
flip side, propsets are limited to around 15M per property by default.

* subversion/include/svn_error_codes.h
  (SVN_ERR_RA_SVN_REQUEST_SIZE): New error code.

* subversion/include/svn_ra_svn.h
  (svn_ra_svn_create_conn5): Bumped API, adding the new limit parameter.
  (svn_ra_svn_create_conn4): Deprecate.

* subversion/libsvn_ra_svn/ra_svn.h
  (svn_ra_svn_conn_st): Add fields for the data counter and its limit.
  (svn_ra_svn__reset_command_io_counters): Declare a function to reset the
                                           counter - to be called before
                                           each new command.

* subversion/libsvn_ra_svn/deprecated.c
  (svn_ra_svn_create_conn4): Implement in terms of the new API.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn_create_conn5): Implement like the predecessor but init the
                             new struct elements as well.
  (svn_ra_svn__reset_command_io_counters): Implement new private API.
  (check_io_limits): New function performing the actual error detection.
  (readbuf_input): Count incoming data and enforce limits.
  (svn_ra_svn__has_command): Be sure to count I/O per command.
  (svn_ra_svn__handle_command): Same. Also handle the case that we truncated
                                I/O and are now in a potentially inconsistent
                                state.

* subversion/libsvn_ra_svn/editorp.c
  (svn_ra_svn_drive_editor2): Limit the request size separately for each
                              editor command - not the whole editor drive.

* subversion/svnserve/server.h
  (serve_params_t): Add field for the new --max-request-size option.

* subversion/svnserve/serve.c
  (serve_interruptable): Pass the new option to the bumped API.

* subversion/svnserve/svnserve.c
  (MAX_REQUEST_SIZE): Define the default value for the new option.
  (SVNSERVE_OPT_MAX_REQUEST): Declare the new option.
  (svnserve__options): Define and document the new option.
  (sub_main): Handle the new option and pass it to the bumped API.</msg>
</logentry>
<logentry
   revision="1714317">
<author>stefan2</author>
<date>2015-11-14T13:23:36.075931Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/serve.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>Improve pool usage in svnserve and ra_svn.

All callers to the protocol parser now (indirectly) use a short-lived
scratch pool to hold the request data.

* subversion/libsvn_ra_svn/client.c
  (ra_svn_get_locations): Use an ITERPOOL as scratch within the loop.

* subversion/svnserve/serve.c
  (internal_auth_request): Same.</msg>
</logentry>
<logentry
   revision="1714316">
<author>stefan2</author>
<date>2015-11-14T13:18:12.005512Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnserve/serve.c</path>
</paths>
<msg>Some code cleanup in svnserve.

* subversion/svnserve/serve.c
  (auth): Put the return parameter in front of all others.
          Expliciyly mark the pool as a SCRATCH_POOL.
  (internal_auth_request): Update caller.</msg>
</logentry>
<logentry
   revision="1714315">
<author>stefan2</author>
<date>2015-11-14T13:10:18.671104Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>* subversion/libsvn_ra_svn/marshal.c
  (readbuf_fill): Adding some commentary. No functional change.</msg>
</logentry>
<logentry
   revision="1714314">
<author>stefan2</author>
<date>2015-11-14T13:10:05.991598Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/deprecated.c</path>
</paths>
<msg>Fix a regression in svn_ra_svn_create_conn3.  1.9.x would simply
ignore the parameters added in *3 over *2.

* subversion/libsvn_ra_svn/deprecated.c
  (svn_ra_svn_create_conn3): We need to pass all parameters along.</msg>
</logentry>
<logentry
   revision="1713910">
<author>rhuijben</author>
<date>2015-11-11T18:37:20.429659Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/eagain_bucket.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/sb_bucket.c</path>
</paths>
<msg>When using a new enough serf, stop using our own stubs that just raise a
malfunction error.

* subversion/libsvn_ra_serf/eagain_bucket.c
  (eagain_bucket_readline,
   delay_bucket_vtable): Don't define+use with new serf.

* subversion/libsvn_ra_serf/sb_bucket.c
  (sb_bucket_readline,
   sb_bucket_vtable): Don't define+use with new serf.
</msg>
</logentry>
<logentry
   revision="1713812">
<author>julianfoad</author>
<date>2015-11-11T11:27:54.942831Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_sorts_private.h</path>
</paths>
<msg>* subversion/include/private/svn_sorts_private.h
  (svn_sort__hash): Tweak the doc string to avoid some confusing notation.</msg>
</logentry>
<logentry
   revision="1713700">
<author>julianfoad</author>
<date>2015-11-10T17:07:55.464977Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_fs/fs-test.c
  (compare_contents): Add a doc string with a note about incompleteness.</msg>
</logentry>
<logentry
   revision="1713132">
<author>stefan2</author>
<date>2015-11-07T14:35:30.246158Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Add a checkum to the revprop manifests in FSX and verify it upon read.
So, this check is also implict when 'svnadmin verify' accesses the revprops.

* subversion/libsvn_fs_x/revprops.c
  (write_manifest): Append a 4-byte checksum to the actual manifest.
  (read_manifest): Read and verify the checksum before processing the
                   actual manifest.
  (get_revprop_packname,
   write_packed_revprop,
   svn_fs_x__pack_revprops_shard): Update callers.  The manifest de-/
                                   serialization functions create their
                                   stream objects on demand now.</msg>
</logentry>
<logentry
   revision="1713111">
<author>stefan2</author>
<date>2015-11-07T11:47:04.263016Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_error_codes.h</path>
</paths>
<msg>Add some consistency checks to FSX' packed revprop manifest parser.

* subversion/include/svn_error_codes.h
  (SVN_ERR_FS_CORRUPT_REVPROP_MANIFEST): Define new error code.

* subversion/libsvn_fs_x/revprops.c
  (get_revprop_packname): Verify that the entries are in proper order
                          and within the shard's revision range.</msg>
</logentry>
<logentry
   revision="1713109">
<author>stefan2</author>
<date>2015-11-07T11:39:48.563144Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Significantly reduce the size of the packed revprop manifest data in FSX
by only storing a record for the first revision in each pack file.

Now, there are only as many entries in the manifest as there are pack files
and the access uses a binary search to find the one containing a specific
revision.

* subversion/libsvn_fs_x/revprops.c
  (manifest_entry_t,
   packed_revprops_t): Reflect the new usage in the docstrings.
  (compare_entry_revision,
   get_entry): Implement the binary search.
  (get_revprop_packname): Update the lookup.
  (repack_file_open): For each pack file, we only need to update or insert
                      a single manifest record.
  (write_packed_revprop): Update caller to provide the pack file start rev
                          instead of an offset range within the manifest.
  (svn_fs_x__pack_revprops_shard): Produce only one entry per pack file.</msg>
</logentry>
<logentry
   revision="1713104">
<author>stefan2</author>
<date>2015-11-07T11:13:35.391176Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Remove another redundant element from FSX' packed revprops description struct.

* subversion/libsvn_fs_x/revprops.c
  (packed_revprops_t): MANIFEST_START is the same as MANIFEST[0].START_REV.
  (get_revprop_packname, 
   repack_file_open): Determine the MANIFEST_START locally where needed.</msg>
</logentry>
<logentry
   revision="1713102">
<author>stefan2</author>
<date>2015-11-07T11:04:54.759179Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Remove a redundant variable from FSX' packed revprops description struct.

* subversion/libsvn_fs_x/revprops.c
  (packed_revprops_t): START_REVISION is the same as ENTRY.START_REV .
  (parse_packed_revprops): Check that they are actually the same.
  (repack_revprops,
   repack_file_open,
   write_packed_revprop): Use ENTRY instead of START_REVISION.</msg>
</logentry>
<logentry
   revision="1713100">
<author>stefan2</author>
<date>2015-11-07T10:50:27.972887Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Begin switching packed revprop manifests in FSX to an easier verifiable,
faster and much denser format.

In this patch, we only replace the string-based representation with one
using a proper proper record type.  The packed file name mapping does not
change.  Use our packed data stream class for efficient (de-)serialization.

* subversion/libsvn_fs_x/revprops.c
  (manifest_entry_t): Declare the new entry type, making explicit what has
                      only be implicit in the strings used previously.
  (packed_revprops_t): Replace the string members with our new entry type.
  (get_min_filename_len): No longer needed.
  (write_manifest,
   read_manifest): New de-/serialization logic for our new manifest type.
  (get_revprop_pack_filepath): New utility to make up for the removed
                               file name strings.
  (get_revprop_packname): This is now a thin wrapper around read_manifest.
  (read_pack_revprop): Update the revprop pack file path construction.
  (repack_file_open): Same. Also adapt to the new manifest entry type.
  (write_packed_revprop): Update the revprop pack file path construction
                          and use write_manifest to write the manifest.
  (svn_fs_x__packed_revprop_available): Straight-forward reimplementation
                                        using the new parser function.
  (svn_fs_x__pack_revprops_shard): Replace the local logic for writing
                                   the manifest with write_manifest.</msg>
</logentry>
<logentry
   revision="1712967">
<author>stefan2</author>
<date>2015-11-06T14:12:46.991077Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_subr_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/compress.c</path>
</paths>
<msg>Replace the hash-based in-repository representation of directories with one
that is tighter and easier to write as well as parse.  Moreover, it allows
for entry names to be any utf8 string.

The new format is:

  directory  := u(entry-count) entry*
  entry      := name-as-utf8 NUL u(node-type) noderev-id
  noderev-id := i(change-set) u(item-index)

  u(x) ... unsigned int x in 7b/8b encoding
  i(x) ... signed int x in 7b/8b encoding

Incremental directory representations work by appending new records and
applying them to a temporary hash when reading them.  No special separator
is needed - only the entry-count information will be ignored in that case.
Deleted entries are signified by an SVN_FS_X__INVALID_CHANGE_SET.

* subversion/include/private/svn_subr_private.h
  (svn__encode_int,
   svn__decode_int): Declare signed int wrappers for svn__encode_uint
                     and svn__decode_uint, respectively.

* subversion/libsvn_subr/compress.c
  (svn__encode_int,
   svn__decode_int): Implement them.

* subversion/libsvn_fs_x/cached_data.c
  (read_dir_entries): Remove old parser.
  (parse_dir_entries): The new parser with a slightly modified signature.
                       We now expect and consume a DATA buffer instead of
                       a STREAM and we create the result instead of just
                       populating it.
  (get_dir_contents): Update caller to provide the serialized contents,
                      allocated in the RESULT_POOL.

* subversion/libsvn_fs_x/transaction.c
  (unparse_dir_entry,
   unparse_dir_entries): Write the new, simpler format.
  (svn_fs_x__set_entry): Update the representation of deleted entries.</msg>
</logentry>
<logentry
   revision="1712962">
<author>stefan2</author>
<date>2015-11-06T13:26:20.674299Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/packed_data.c</path>
</paths>
<msg>Fix a minor naming standard violation.

* subversion/libsvn_subr/packed_data.c
  (svn_packed__data_flush_buffer): Is static and gets renamed to ...
  (data_flush_buffer): ... this.
  (svn_packed__add_uint,
   write_int_stream_structure): Update callers.
</msg>
</logentry>
<logentry
   revision="1712947">
<author>stefan2</author>
<date>2015-11-06T11:44:57.479546Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>* subversion/libsvn_fs_x/transaction.c
  (get_and_increment_txn_key_body): Update commentary. No functional change.</msg>
</logentry>
<logentry
   revision="1712946">
<author>stefan2</author>
<date>2015-11-06T11:43:33.642502Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/util.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
</paths>
<msg>Following up on r1712944, remove some now used code.

* subversion/libsvn_fs_x/fs.h
  (PATH_TXN_NEXT): Remove.

* subversion/libsvn_fs_x/util.h
  (svn_fs_x__path_txn_next): Remove.

* subversion/libsvn_fs_x/util.c
  (svn_fs_x__path_txn_next): Remove.</msg>
</logentry>
<logentry
   revision="1712944">
<author>stefan2</author>
<date>2015-11-06T11:41:19.857381Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/caching.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/recovery.c</path>
</paths>
<msg>No longer guarantee eternally unique transaction IDs in FSX.

After the latest changes, we only need them to be unique among the running
transactions.  We still increment them as before but allow for resetting
the counter upon system failure etc.  This eliminates the need to fsync
txn-current and the txn-ID pre-allocation optimization.

Caveat:  We must make sure that a reused transaction ID does not result
in cache key collisions.  The are tree scenarios in which an txn ID might
be reused.  First, after a system crash leaving txn-current empty or
with random contents.  This is not a problem as the caching server process
will have died, too.

Second, the storage system (NAS) might have failed.  In that case, the
server process must be restarted as well because any transient data may
have been lost leading to inconsistent state between the storage and the
server process.  This implictly resolves the txn ID caching situation.

Third, a user might run 'svnadmin recover' or directly call the respective
FS API function while the server processes remain up.  For that case, we
make the instance ID - which gets bumped upon recover - part of the cache
key.

* subversion/libsvn_fs_x/transaction.c
  (get_and_txn_key,
   bump_txn_key): Simplify and merge into ...
  (get_and_increment_txn_key_body): ... this one.  Add ability to detect
                                    and recover from txn ID collisions.
  (create_txn_dir): Simplify as there is no pre-allocation anymore and the
                    txn dir is already being created as part of txn ID
                    collision handling code.
  (bump_ids): Remove the txn-current handling here as it is now self-
              contained in create_txn_dir - without fsync calls.

* subversion/libsvn_fs_x/recovery.c
  (reset_txn_number): New utility.
  (recover_body): Always reset txn-current.

* subversion/libsvn_fs_x/caching.c
  (svn_fs_x__initialize_caches): Guarantee disjoint cache keys after e.g.
                                 'svnadmin recover' reset the txn-current.

* subversion/libsvn_fs_x/fs.h
  (svn_fs_x__data_t): Txn ID pre-allocation is no longer needed.</msg>
</logentry>
<logentry
   revision="1712937">
<author>stefan2</author>
<date>2015-11-06T11:01:00.688005Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/recovery.c</path>
</paths>
<msg>In FSX, make 'svnadmin recover' discard all transactions - or any remnants
thereof.

Transactions are fragile wrt. to any scenario that would require a recovery
and dead txns tend to accumulate over time.  So, let's get rid of them
before somebody uses the FS API to reopen them and ends up with incomplete
or otherwise corrupted data.

This can be backported to FSFS.

* subversion/libsvn_fs_x/recovery.c
  (clear_directory,
   discard_transactions): New utilities implementing the txn cleanup.
  (recover_body): Invoke the new cleanup step.</msg>
</logentry>
<logentry
   revision="1712935">
<author>stefan2</author>
<date>2015-11-06T10:51:36.032301Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>In FSX, make sure that the noderev-ids stored in a revision's change paths
list aren't the in-txn ids but the actual ones from the final revision.
Reset the noderev-ids for deleted nodes.

This fixes a long-standing FS API issue where the svn_fs_id_t reported in
svn_fs_path_change_t was invalid outside a transaction.  It also eliminates
the last transaction reference from committed data, i.e. transaction IDs
no longer need to be globally unique but only between the tranactions
currently in existence.

A backport to FSFS should be straightforward.

* subversion/libsvn_fs_x/transaction.c
  (write_final_rev): Update the CHANGED_PATHS as we go.
  (sanitize_changed_path_info): New utility function for all paths that are
                                no longer available in the new revision.
  (commit_body): Update caller.</msg>
</logentry>
<logentry
   revision="1712933">
<author>stefan2</author>
<date>2015-11-06T10:39:44.545501Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>* subversion/libsvn_fs_x/transaction.c
  (write_final_rev): Minor simplification; just comparing change sets
                     covers all the txn / rev / invalid cases.</msg>
</logentry>
<logentry
   revision="1712927">
<author>stefan2</author>
<date>2015-11-06T09:41:59.029905Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
</paths>
<msg>[Reverted in 1717864]

The svn_fs_contents_different implementation is broken in 1.9.x under the
circumstances described in issue #4554.  Trunk works because there we
correct expanded-size values when reading them from disk.

This patch removes the special case code that triggers the problem in 1.9.x
so we can backport it directly as a fix.  On trunk, it results in a minor
simplification with virtually zero impact on performance.

The problem is FSFS-specific, meaning BDB and FSX don't need to be fixed.

Found by: kotkov

* subversion/libsvn_fs_fs/fs_fs.c
  (svn_fs_fs__file_text_rep_equal): Remove the rather pointless length==0
                                    special case. They are rare and will
                                    compare just fine like any other contents.</msg>
</logentry>
<logentry
   revision="1712828">
<author>julianfoad</author>
<date>2015-11-05T17:31:05.205941Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>Tweak a comment about reuse of transaction names, following r1712600.

Suggested by: rhuijben

* subversion/include/svn_fs.h
  Tweak top-of-file comment: s/reuse/may reuse/.</msg>
</logentry>
<logentry
   revision="1712600">
<author>julianfoad</author>
<date>2015-11-04T17:57:50.768634Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>* subversion/include/svn_fs.h
  (svn_fs_txns group): Remove an obsolete comment about transaction names.
    It described a naming scheme introduced in r865504 and removed in r865943.

(Committed previously as ^/subversion/branches/move-tracking-2@1607290, but
unrelated to that branch.)
</msg>
</logentry>
<logentry
   revision="1712223">
<author>ivan</author>
<date>2015-11-03T08:12:36.021056Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
</paths>
<msg>Do not insert newlines in base64 encoded responses in mod_dav_svn. This is
slightly reduce CPU usage on the client since it could decode responses with
bigger chunks instead line-by-line.

* subversion/mod_dav_svn/util.c
  (dav_svn__make_base64_output_stream): Call svn_base64_encode2() with
   BREAK_LINES=FALSE.
</msg>
</logentry>
<logentry
   revision="1711956">
<author>philip</author>
<date>2015-11-02T13:11:40.933921Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnadmin_tests.py
  (dump_no_op_changes, dump_no_op_prop_change): Guard against no-op
   change being elided on commit to avoid false positive PASS.
</msg>
</logentry>
<logentry
   revision="1711948">
<author>philip</author>
<date>2015-11-02T12:44:42.005989Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnadmin_tests.py
  (dump_no_op_prop_change): Change propdel to propset, still XFAIL.
</msg>
</logentry>
<logentry
   revision="1711947">
<author>philip</author>
<date>2015-11-02T12:41:07.448138Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnadmin_tests.py
  (dump_no_op_prop_change): New, marked XFAIL.
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1711672">
<author>ivan</author>
<date>2015-10-31T19:08:59.416596Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
</paths>
<msg>Use more specific error code in FSFS implementation of svn_fs_contents_changed()
and svn_fs_contents_different().

Suggested by: rhuijben

* subversion/libsvn_fs_fs/tree.c
  (fs_contents_changed): Use SVN_ERR_FS_NOT_FILE instead of SVN_ERR_FS_GENERAL
   error code if one of provided path is not a file.
</msg>
</logentry>
<logentry
   revision="1711666">
<author>ivan</author>
<date>2015-10-31T18:53:45.502646Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
</paths>
<msg>Optimize 'svn blame' a bit. 

* subversion/libsvn_repos/rev_hunt.c
  (send_path_revision): Use svn_fs_props_changed() to find whether properties
   may have changed and retrieving new properties worth the effort. Otherwise
   just use LAST_PROPS.
</msg>
</logentry>
<logentry
   revision="1711582">
<author>ivan</author>
<date>2015-10-31T09:31:46.032353Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Avoid double DAG lookup in FSFS implementation of svn_fs_contents_changed()
and svn_fs_contents_different().

It also slightly changes error message when these invoked functions invoked
for non-existent path: before this change error message was "'/non-existent'
is not a file" now it will be "File not found: revision 1, path
'/non-existent'"

* subversion/libsvn_fs_fs/tree.c
  (fs_contents_changed): Use svn_fs_fs__dag_node_kind() to get node kind of
   already obtained dag_node_t instead of calling to svn_fs_fs__check_path(). 

* subversion/tests/libsvn_fs/fs-test.c
  (compare_contents): Extend test to test behavior of
   svn_fs_contents_changed() and svn_fs_contents_different() with directories
   and non-existent paths.
</msg>
</logentry>
<logentry
   revision="1711517">
<author>ivan</author>
<date>2015-10-30T17:21:14.861424Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/base64.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_base64.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/stream-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_delta/svndiff-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/deprecated.c</path>
</paths>
<msg>Implement svn_base64_encode2() with BREAK_LINES flag to control whether
insert newlines periodically or not. The old svn_base64_encode() was
inserting newlines unconditionally.

* subversion/include/svn_base64.h
  (svn_base64_encode2): New function declaration.
  (svn_base64_encode): Deprecate.  

* subversion/libsvn_subr/base64.c
  (encode_baton): Add BREAK_LINES field.
  (encode_data, finish_encoding_data): Use EB-&gt;BREAK_LINES flag.
  (svn_base64_encode2): Revv from svn_base64_encode(). Add BREAK_LINES.
   argument and save it in ENCODE_BATON.

* subversion/libsvn_subr/deprecated.c
  (svn_base64_encode): Call svn_base64_encode2() with BREAK_LINES=TRUE.

* subversion/mod_dav_svn/util.c
  (dav_svn__make_base64_output_stream): Use svn_base64_encode2() with
   BREAK_LINES=TRUE.

* subversion/tests/libsvn_delta/svndiff-test.c
  (main): Use svn_base64_encode2() with BREAK_LINES=TRUE.

* subversion/tests/libsvn_subr/stream-test.c
  (test_stream_base64, test_stream_base64_2): Test svn_base64_encode2() with
   BREAK_LINES=TRUE and BREAK_LINES=FALSE.
</msg>
</logentry>
<logentry
   revision="1711510">
<author>kotkov</author>
<date>2015-10-30T17:13:34.600078Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>* subversion/include/svn_fs.h
  (svn_fs_props_different, svn_fs_props_changed,
   svn_fs_contents_different, svn_fs_contents_changed): Describe why do we
   require all of these functions in @note statements and cross-link them.
   No functional changes.
</msg>
</logentry>
<logentry
   revision="1711507">
<author>kotkov</author>
<date>2015-10-30T16:58:45.186127Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_repos.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/dag.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/delta.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_ra.h</path>
</paths>
<msg>Following up on r1709388, undo the behavior change of the calling sites of
svn_fs_contents_different() and svn_fs_props_different() that is not required
nor justified in the context of fixing issue #4598, "No-op changes no longer
dumped by 'svnadmin dump' in 1.9".

This commit also restores the hack required for blame -g for old clients
(see r1686478, r1686888) in rev_hunt.c:send_path_revision().  Perhaps there
is a better replacement for it, since we now have the original behavior of
svn_fs_contents_changed() available, but this can be handled separately.

* subversion/libsvn_fs_fs/dag.c
  (svn_fs_fs__dag_things_different): Tweak the related comment within this
   function.

* subversion/libsvn_fs_fs/tree.c
  (merge): Compare the property lists based on their contents.

* subversion/libsvn_repos/delta.c
  (delta_proplists): Use svn_fs_props_different() when comparing property
   lists.
  (svn_repos__compare_files): Call svn_fs_contents_different() instead of
   reimplementing the content comparison in this function.
  (delta_files): Call svn_fs_contents_different(), as we were doing prior
   to r1709388.

* subversion/libsvn_repos/reporter.c
  (delta_proplists): Use svn_fs_props_different() when comparing property
   lists.

* subversion/libsvn_repos/rev_hunt.c
  (send_path_revision): Call svn_fs_contents_different().  Restore the
   blame -g compatibility hack.

* subversion/include/svn_ra.h
  (svn_ra_get_file_revs2): Restore the original @note in the docstring.

* subversion/include/svn_repos.h
  (svn_repos_get_file_revs2): Restore the original @note in the docstring.
</msg>
</logentry>
<logentry
   revision="1711443">
<author>stefan2</author>
<date>2015-10-30T10:39:54.514107Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
</paths>
<msg>Re-enable proper fsync'ing in FSX for renames on non-POSIX platforms.

* subversion/libsvn_fs_x/util.c
  (svn_fs_x__move_into_place): Use the batching infrastructure on POSIX only.</msg>
</logentry>
<logentry
   revision="1711438">
<author>stefan2</author>
<date>2015-10-30T09:45:57.047128Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
</paths>
<msg>Pool usage cleanup in FSX' write_revision_zero.

* subversion/libsvn_fs_x/fs_x.c
  (write_revision_zero): Get rid of the SUBPOOL and never use the
                         FS-&gt;POOL for temporaries.</msg>
</logentry>
<logentry
   revision="1711437">
<author>stefan2</author>
<date>2015-10-30T09:34:31.857102Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
</paths>
<msg>Eliminate the last fsync call from FSX' repository creation sequence.

* subversion/libsvn_fs_x/fs_x.c
  (write_revision_zero): Write the revprops directly without the whole
                         'changing revprops' overhead.
</msg>
</logentry>
<logentry
   revision="1711393">
<author>stefan2</author>
<date>2015-10-30T00:28:49.247480Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/util.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>Code cleanup in FSX.

* subversion/libsvn_fs_x/util.h
  (svn_fs_x__move_into_place2): Rename to ...
  (svn_fs_x__move_into_place): ... this.

* subversion/libsvn_fs_x/util.c
  (svn_fs_x__move_into_place2): Rename to ...
  (svn_fs_x__move_into_place): ... this.

* subversion/libsvn_fs_x/revprops.c
  (switch_to_new_revprop): Update caller.

* subversion/libsvn_fs_x/transaction.c
  (bump_txn_key,
   bump_ids): Same.</msg>
</logentry>
<logentry
   revision="1711391">
<author>stefan2</author>
<date>2015-10-30T00:20:55.357437Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.h</path>
</paths>
<msg>Get rid of svn_fs_x__move_into_place.

* subversion/libsvn_fs_x/util.h
  (svn_fs_x__move_into_place): Remove.
  (svn_fs_x__move_into_place2): Update commentary since we can't refer to
                                the previous function anymore.

* subversion/libsvn_fs_x/util.c
  (svn_fs_x__write_current): Because NAME and TMP_NAME are within the same
                             folder, we can trivially inline the necessary
                             code from svn_fs_x__move_into_place.</msg>
</logentry>
<logentry
   revision="1711390">
<author>stefan2</author>
<date>2015-10-30T00:20:41.087949Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
</paths>
<msg>Eliminate yet another fsync call from the FSX repository creation sequence.

* subversion/libsvn_fs_x/fs_x.c
  (svn_fs_x__create_file_tree): Create the rather trivial 'current' file
                                just like we create the 'min-unpacked-rev'
                                file. </msg>
</logentry>
<logentry
   revision="1711389">
<author>stefan2</author>
<date>2015-10-29T23:59:10.685143Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Eliminate a large portion of the fsyncs when modifying revprops in FSX.

* subversion/libsvn_fs_x/revprops.c
  (write_revprop_generation_file): A revprop generation file change does
                                   not need to survive a system crash
                                   because it only coordinates between
                                   running processes.</msg>
</logentry>
<logentry
   revision="1711388">
<author>stefan2</author>
<date>2015-10-29T23:58:55.419769Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/recovery.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/fs_x.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/hotcopy.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs.c</path>
</paths>
<msg>Reduce the cost of creating a new repository in FSX.

Similar to svn_fs_x__write_format, don't fsync when writing the initial
uuid file.

* subversion/libsvn_fs_x/fs_x.h
  (svn_fs_x__set_uuid): Add OVERWRITE parameter.

* subversion/libsvn_fs_x/fs_x.c
  (svn_fs_x__create_file_tree): Update caller - request a fresh uuid file.
  (svn_fs_x__set_uuid): Perform the expensive atomic replacement dance
                        only if the file already exists and may be read
                        by others.

* subversion/libsvn_fs_x/fs.c
  (x_set_uuid): Update caller - modifying the existing file.

* subversion/libsvn_fs_x/hotcopy.c
  (svn_fs_x__hotcopy): Same.

* subversion/libsvn_fs_x/recovery.c
  (recover_body): Same.</msg>
</logentry>
<logentry
   revision="1711384">
<author>stefan2</author>
<date>2015-10-29T23:34:13.187151Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.h</path>
</paths>
<msg>Speed up FSX pack by using a common fsync batch for rev props and rev data.

* subversion/libsvn_fs_x/revprops.h
  (svn_fs_x__pack_revprops_shard): Make the BATCH an argument.

* subversion/libsvn_fs_x/revprops.c
  (svn_fs_x__pack_revprops_shard): No longer create &amp; run the BATCH locally.

* subversion/libsvn_fs_x/pack.c
  (pack_log_addressed): Ditto.
  (pack_rev_shard): Take a BATCH and pass it through.  Also, ensure the
                    directory addition gets sync'ed properly.
  (pack_shard): Create the fsync batch locally, let the pack steps fill it
                and run it here. </msg>
</logentry>
<logentry
   revision="1711379">
<author>stefan2</author>
<date>2015-10-29T23:14:19.680566Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
</paths>
<msg>In FSX, make revision data packing code use the batch fsync infrastructure.

* subversion/libsvn_fs_x/pack.c
  (initialize_pack_context): Implicitly schedule an fsync through the BATCH.
  (close_pack_context): No need for the explicit fsync here anymore.
  (pack_log_addressed): Create the fsync batch locally and run it here.</msg>
</logentry>
<logentry
   revision="1711377">
<author>stefan2</author>
<date>2015-10-29T23:04:10.950553Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/batch_fsync.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_fs_x/fs-x-pack-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Make the batch fsync object in FSX easier to use:
When we create a new file through svn_fs_x__batch_fsync_open_file,
implicitly call svn_fs_x__batch_fsync_new_path if necessary.

* subversion/libsvn_fs_x/batch_fsync.c
  (internal_open_file): Test whether a new file will be created and
                        schedule any necessary additional fsyncs.

* subversion/libsvn_fs_x/revprops.c
  (svn_fs_x__pack_revprops_shard): Remove redundant call.

* subversion/libsvn_fs_x/transaction.c
  (write_final_revprop,
   write_next_file): Same.

* subversion/tests/libsvn_fs_x/fs-x-pack-test.c
  (test_batch_fsync): Same.</msg>
</logentry>
<logentry
   revision="1711374">
<author>stefan2</author>
<date>2015-10-29T22:30:08.166343Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/batch_fsync.c</path>
</paths>
<msg>Eliminate most of the overhead introduced by batch fsync'ing in FSX when
we actually only fsync a single file. 

* subversion/libsvn_fs_x/batch_fsync.c
  (svn_fs_x__batch_fsync_run): Fall back to ordinary foreground processing
                               when there is nothing to parallelize.</msg>
</logentry>
<logentry
   revision="1711373">
<author>stefan2</author>
<date>2015-10-29T22:11:16.449074Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
</paths>
<msg>Minor code cleanup eliminating redundant code in FSX.

* subversion/libsvn_fs_x/pack.c
  (pack_shard): Rev data and rev props use the same folders.</msg>
</logentry>
<logentry
   revision="1711372">
<author>stefan2</author>
<date>2015-10-29T22:11:04.380745Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Use the batch fsync mechanism in FSX during revprop packing.

* subversion/libsvn_fs_x/revprops.c
  (copy_revprops): Implicitly schedule the fsync through the BATCH.
  (svn_fs_x__pack_revprops_shard): Create the fsync batch locally and fsync
                                   the manifest + pack files in one go.</msg>
</logentry>
<logentry
   revision="1711369">
<author>stefan2</author>
<date>2015-10-29T21:46:59.272755Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>In FSX, make revprop modifications use the batch fsync infrastructure.

This does not make a difference in most cases but is part of the fsync
handling unification effort.  We also use well-defined file names for
the temp files involved as they guarantee volume-local renames and are
easier to use with svn_fs_x__batch_fsync_open_file.  They are safe
because we know that we have exclusive write access to the repo.

* subversion/libsvn_fs_x/revprops.c
  (write_non_packed_revprop): Implicitly schedule an fsync through the
                              provided BATCH and append ".tmp" to form
                              temp file names.
  (switch_to_new_revprop): Implement the fsync-rename-fsync cycle based
                           on an fsync BATCH now.
  (repack_revprops): All revprop files are fsync'ed implicitly through
                     some batch now.
  (repack_file_open): Implicitly schedule an fsync through the BATCH.
  (write_packed_revprop): Same. Pass BATCH into sub-routines.
  (svn_fs_x__set_revision_proplist): Create the fsync batch locally.</msg>
</logentry>
<logentry
   revision="1711354">
<author>stefan2</author>
<date>2015-10-29T20:09:52.571929Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
</paths>
<msg>In FSX, provide a move-into-place function that supports fsync batching.

Note that svn_fs_x__move_into_place2 does not do The Right Thing on Win32
atm but that is no different from the previous state.  This will be
addressed soon.

* subversion/libsvn_fs_x/util.h
  (svn_fs_x__move_into_place2): Declare new internal API.

* subversion/libsvn_fs_x/util.c
  (svn_fs_x__move_into_place2): Implement it.

* subversion/libsvn_fs_x/transaction.c
  (bump_txn_key,
   bump_ids): Call the new batch-enabled move-into-place function.
</msg>
</logentry>
<logentry
   revision="1711346">
<author>rhuijben</author>
<date>2015-10-29T19:40:01.597027Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnlook/svnlook.c</path>
</paths>
<msg>Simplify temporary file handling in svnlook a bit by using 'modern' standard
functions instead of the +- 2003 style manual removing of tempfiles.

This fixes some problems with files that are left behind when the diff somehow
stops midway (E.g. broken pipe)

* subversion/svnlook/svnlook.c
  (prepare_tmpfiles): Switch to result_pool, scratch_pool pattern. Remove
    unneeded tmpdir argument. Pass svn_io_file_del_on_pool_cleanup to the
    tempfile creation functions.
  (print_diff_tree): Remove tmpfile argument. Switch to proper iterpool.
  (do_diff): Update caller.

Found by: markphip
</msg>
</logentry>
<logentry
   revision="1711250">
<author>kotkov</author>
<date>2015-10-29T13:39:56.379780Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/notes/api-errata/1.9/fs001.txt</path>
</paths>
<msg>Following up on r1709388, update the necessary documentation and the
API errata.

* notes/api-errata/1.9/fs001.txt
  (): Add a note about the scope of this erratum.  Provide references to the
   issue tracker and to relevant discussions in the mailing list.

* subversion/include/svn_fs.h
  (svn_fs_props_changed, svn_fs_contents_different, svn_fs_contents_changed):
   Update the docstrings for these functions.  Link the documentation for
   svn_fs_props_changed() to svn_fs_contents_changed() and state the design
   rationale for the latter.  Mention issue 4598 in the docstrings.
</msg>
</logentry>
<logentry
   revision="1710837">
<author>rhuijben</author>
<date>2015-10-27T15:19:38.964793Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/win-tests.py</path>
</paths>
<msg>Following up on r1710707 and r1709585 extend the httpd configuration file
a tiny bit.

* win-tests.py
  (Httpd): Disable ssl2 and ssl3. Explicitly enable h2direct for http/2.
</msg>
</logentry>
<logentry
   revision="1710749">
<author>ivan</author>
<date>2015-10-27T08:59:50.799039Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/deprecated.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
</paths>
<msg>Move deprecated libsvn_fs functions to deprecated.c.

Suggested by: rhuijben

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_create, svn_fs_open, svn_fs_node_history, svn_fs_get_mergeinfo,
   svn_fs_history_prev): Move from here...
* subversion/libsvn_fs/deprecated.c:
  (svn_fs_create, svn_fs_open, svn_fs_node_history, svn_fs_get_mergeinfo,
   svn_fs_history_prev): ...to here.
</msg>
</logentry>
<logentry
   revision="1710747">
<author>ivan</author>
<date>2015-10-27T08:51:09.916522Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
</paths>
<msg>Use standard pattern for implementing deprecated functions.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_node_history): Implement via svn_fs_node_history2() instead of
   calling vtable member directly.
  (svn_fs_get_mergeinfo): Implement via svn_fs_get_mergeinfo2() instead of
   calling vtable member directly.
  (svn_fs_history_prev): Implement via svn_fs_history_prev2() instead of
   calling vtable member directly.
</msg>
</logentry>
<logentry
   revision="1710707">
<author>rhuijben</author>
<date>2015-10-26T21:54:48.512419Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/win-tests.py</path>
</paths>
<msg>Allow setting up Apache Httpd with http/2 enabled when running our testsuite
on Windows.

* win-tests.py
  (): Document --https and --http2. Parse --http2.
  (Httpd):Write values in config file when requested.
  (): Update caller.
</msg>
</logentry>
<logentry
   revision="1710638">
<author>ivan</author>
<date>2015-10-26T15:59:53.554177Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/null-list-cmd.c</path>
</paths>
<msg>Port r1673153 to svnbench from svn: request only required directory fields in 
'svnbench null-list' to have the same performance as 'svn ls'.

* subversion/svnbench/null-list-cmd.c
  (print_dirent_fields, print_dirent_fields_verbose): New constant variables.
  (svn_cl__null_list): Only request the required fields.
</msg>
</logentry>
<logentry
   revision="1710634">
<author>ivan</author>
<date>2015-10-26T15:48:50.958406Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/update.c</path>
</paths>
<msg>ra_serf: Remove unneeded 'q=0.9' from Accept-Encoding request header value if
there is only one accept encoding.

Suggested by: rhuijben

* subversion/libsvn_ra_serf/update.c
  (headers_fetch, setup_update_report_headers): Just use 'svndiff' as
   Accept-Encoding request header value if compression is disabled.
</msg>
</logentry>
<logentry
   revision="1710631">
<author>ivan</author>
<date>2015-10-26T15:37:49.592346Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/repos.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/svn_test_fs.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>Switch svn_fs_create() to result/scratch pool paradigm.

* subversion/include/svn_fs.h
  (svn_fs_create2): Revv svn_fs_create() with SCRATCH_POOL argument.
  (svn_fs_create): Deprecate.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_create2): Revv. Use SCRATCH_POOL for temporary allocations instead
   of creating new subpool.
  (svn_fs_create): Implement deprecated function.

* subversion/libsvn_repos/repos.c
  (svn_repos_create): Use svn_fs_create2().

* subversion/tests/svn_test_fs.c
  (create_fs): Use svn_fs_create2().
</msg>
</logentry>
<logentry
   revision="1710613">
<author>ivan</author>
<date>2015-10-26T15:08:05.540711Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/update.c</path>
</paths>
<msg>ra_serf: Do not advertise svndiff1 support if user explicitly disabled HTTP
compression via 'http-compression=off' configuration option. The only
difference between svndiff1 and svndiff0 that svndiff1 supports compression.

* subversion/libsvn_ra_serf/update.c
  (headers_fetch, setup_update_report_headers): Do not add 'svndiff1' to
   Accept-Encoding request header if we're not using compression.
</msg>
</logentry>
<logentry
   revision="1710586">
<author>ivan</author>
<date>2015-10-26T12:43:12.661325Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
</paths>
<msg>Show how many bytes transferred over network in svnbench's non-quiet output.

* subversion/svnbench/svnbench.c
  (): Include private/svn_string_private.h.
  (ra_progress_baton_t, ra_progress_func): New.
  (sub_main): Setup RA progress callback if not in quiet mode. Print
   information how many bytes transferred over network if RA layer provided
   this information.
</msg>
</logentry>
<logentry
   revision="1710558">
<author>ivan</author>
<date>2015-10-26T10:40:18.130560Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/externals.c</path>
</paths>
<msg>Follow-up to r1705843: Improve error message in some edge cases. For example
if svn_wc__external_remove() function returns SVN_ERR_CANCELLED.

* subversion/libsvn_client/externals.c
  (switch_dir_external): Return error from svn_wc__external_remove() as-is
   instead of chaining to SVN_ERR_WC_PATH_UNEXPECTED_STATUS error.
</msg>
</logentry>
<logentry
   revision="1710370">
<author>stefan2</author>
<date>2015-10-24T18:17:11.574409Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
</paths>
<msg>Minor speedup of the DAG node L1 cache lookup in FSFS.

* subversion/libsvn_fs_fs/tree.c
  (get_dag): Prevent double cache lookups when the path is normalized
             while not incurring a performance hit for non-normalized
             paths.</msg>
</logentry>
<logentry
   revision="1710368">
<author>stefan2</author>
<date>2015-10-24T18:07:22.704329Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
</paths>
<msg>Minor refactoring of FSFS' L1 dag node cache access.

Split lookup and insertion into two separate functions.  That comes at
the cost of calculating the hash twice but allows us to delay the cache
auto-clear call until we actually have an L2 item that we can promote
to L1.  The redcution in cache misses will often compensate for the hash
calculation overhead.

* subversion/libsvn_fs_fs/tree.c
  (hash_func): Move out of cache_lookup.
  (cache_lookup): Don't clear the entry when we found a mismatch and
                  return the node - if found - instead of the whole bucket.
  (cache_insert): New function.
  (dag_node_cache_get): Update and slightly simplify the caller.</msg>
</logentry>
<logentry
   revision="1710360">
<author>stefan2</author>
<date>2015-10-24T16:06:08.879525Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
</paths>
<msg>Reduce the permanent memory footprint of svn_fs_create.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_create): FS creation is a quite memory intensive operation,
                   so use a scratch pool for anything temporary.</msg>
</logentry>
<logentry
   revision="1710359">
<author>stefan2</author>
<date>2015-10-24T15:35:55.733942Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_base/fs.c</path>
</paths>
<msg>Document the fact that FS create / open functions take a scratch pool
parameter - not a combined scratch&amp;result pool.

* subversion/libsvn_fs/fs-loader.h
  (fs_library_vtable_t): The POOL in these vtable entries is actually
                         a SCRATCH_POOL.

* subversion/libsvn_fs_base/fs.c
  (base_create,
   base_open): Same rename in the BDB implementation of those functions.

* subversion/libsvn_fs_fs/fs.c
  (fs_create,
   fs_open): Same for FSFS.</msg>
</logentry>
<logentry
   revision="1710355">
<author>stefan2</author>
<date>2015-10-24T15:16:39.390550Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_base/fs.c</path>
</paths>
<msg>Minor code cleanup in the BDB backend.

* subversion/libsvn_fs_base/fs.c
  (open_databases): Remove unused POOL parameter.
  (base_create,
   base_open): Update callers.</msg>
</logentry>
<logentry
   revision="1710349">
<author>stefan2</author>
<date>2015-10-24T14:57:35.157562Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>In FSX, release potentially large internal allocations before returning
from the respective FS API function.

It may be difficult for the FS API user to decide which of the functions
may allocate a larger amount of temporary memory.  Hence, they might not
clean up their scratch pool very often.  But whenever FSX *knows* that
its code involves opening multiple files or manipulating larger buffers,
it can make sure to use a sub-pool around that section with minimal added
overhead.

* subversion/libsvn_fs_x/transaction.c
  (with_some_lock_file): Whenever we lock the repo, we will probably write
                         data.  That's usally expensive and we give it a
                         separate sub-pool.
  (svn_fs_x__change_txn_props): Properties can be large as well, therefore
                                make sure to clean them up asap.</msg>
</logentry>
<logentry
   revision="1710344">
<author>stefan2</author>
<date>2015-10-24T14:24:01.190492Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_fs.c</path>
</paths>
<msg>Tighten the memory pool usage in our FS tests.

This is not so much about absolute memory usage etc. but about a better
signal-noise-ratio when profiling for pool usage issues in the FS backend.
Also, cleaning up pools early and reusing them may uncover object lifetime
issues that "normal" API users might encounter.

* subversion/tests/libsvn_fs/fs-test.c
  (txn_names_are_not_reused_helper1): We created many transaction objects.
                                      Clean them up as soon as possible.
  (check_entry): Directories may be large-ish. Make sure that multiple calls
                 to this simple predicate function do not build up a large
                 pool. 
  (closest_copy_test): Clear the SPOOL immediately after each transaction.
  (test_delta_file_stream): Use a SUBPOOL and clear it after each delta
                            application because txdelta is a complex op.

* subversion/tests/svn_test_fs.c
  (svn_test__set_file_contents): TxDelta windows can be 100k, therefore
                                 release them asap.
  (svn_test__create_blame_repository): Use a SUBPOOL for the txns and clear
                                       it immediately after each one.</msg>
</logentry>
<logentry
   revision="1710292">
<author>philip</author>
<date>2015-10-23T23:15:15.368080Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/path.c</path>
</paths>
<msg>* subversion/libsvn_subr/path.c (uri_escape): Remove unused variable.
</msg>
</logentry>
<logentry
   revision="1710290">
<author>philip</author>
<date>2015-10-23T22:51:42.773749Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/cleanup.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>Revert the libsvn_client part of r1710215, leaving the JNI part. This
means JavaHL still accepts relpaths and non-canonical paths while
libsvn_client requires canonical abspaths.

* subversion/include/svn_client.h
  (svn_client_vacuum, svn_client_cleanup2): Rename parameter.

* subversion/libsvn_client/cleanup.c
  (svn_client_vacuum, svn_client_cleanup2): Rename parameter, assert
   abspath.
</msg>
</logentry>
<logentry
   revision="1710236">
<author>philip</author>
<date>2015-10-23T15:24:00.730564Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/davautocheck.sh</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/ac-macros/apache.m4</path>
</paths>
<msg>* build/ac-macros/apache.m4
  (SVN_FIND_APACHE): Reorder search to prefer local installations
   over system installations.

* subversion/tests/cmdline/davautocheck.sh: Add comment.
</msg>
</logentry>
<logentry
   revision="1710215">
<author>philip</author>
<date>2015-10-23T13:56:40.876977Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/SVNClient.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/cleanup.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>Allow svn_client_vacuum and svn_client_cleanup2 to accept non-absolute
paths and convert to absolute, rather than asserting that the passed
paths are absolute.  This makes the functions behave like other client
functions.

* subversion/include/svn_client.h
  (svn_client_vacuum, svn_client_cleanup2): Rename parameter.

* subversion/libsvn_client/cleanup.c
  (svn_client_vacuum, svn_client_cleanup2): Rename parameter, convert
   to abspath.

* subversion/bindings/javahl/native/SVNClient.cpp
  (SVNClient::vacuum): Add Path checking to parameter.

[libsvn_client part reverted in r1710290.]
</msg>
</logentry>
<logentry
   revision="1710202">
<author>julianfoad</author>
<date>2015-10-23T12:58:09.115851Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/x509-parser.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/reps.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/deprecated.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/old-and-busted.c</path>
</paths>
<msg>Remove the scratch pool from svn_string_from_stream2(), for consistency with
svn_stringbuf_from_stream().

* subversion/include/svn_io.h,
  subversion/libsvn_subr/stream.c
  (svn_string_from_stream2): Remove the scratch scratch pool parameter. (It
    wasn't used.)

* subversion/libsvn_fs_x/reps.c
  (svn_fs_x__reps_add_base): Update a caller.

* subversion/libsvn_subr/deprecated.c
  (svn_string_from_stream): Update a caller.

* subversion/libsvn_wc/old-and-busted.c
  (svn_wc__read_entries_old): Update a caller.

* tools/dev/x509-parser.c
  (get_der_cert_from_stream): Update a caller.
</msg>
</logentry>
<logentry
   revision="1710201">
<author>julianfoad</author>
<date>2015-10-23T12:49:45.226500Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_io.h</path>
</paths>
<msg>Improve the documentation of svn_string[buf]_from_stream(), especially in
describing the length hint parameter and in documenting the two similar
functions the same way.

Also rename the output parameter of one of them for consistency with the
other.

* subversion/include/svn_io.h
  (svn_stringbuf_from_stream): Rename the output parameter 'str' to 'result'.
    Improve the documentation.
  (svn_string_from_stream2): Improve the documentation.

* subversion/libsvn_subr/stream.c
  (svn_stringbuf_from_stream): Rename the output parameter 'str' to 'result'.
    Document the performance characteristics.
</msg>
</logentry>
<logentry
   revision="1710167">
<author>philip</author>
<date>2015-10-23T10:34:40.215300Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc-queries.sql</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/sqlite.c</path>
</paths>
<msg>Make exclusive-locking mode set the SQLite journal mode as well, this
gives better performance on NFS and exclusive-locking is a feature
intended to help performance on remote filesystems.

* subversion/libsvn_wc/wc-queries.sql
  (STMT_PRAGMA_LOCKING_MODE): Set journal mode as well.

* subversion/libsvn_subr/sqlite.c
  (svn_sqlite__open): Add comment.
</msg>
</logentry>
<logentry
   revision="1710104">
<author>brane</author>
<date>2015-10-22T21:13:13.331369Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="A"
   prop-mods="true">/subversion/trunk/subversion/bindings/javahl/native/org_apache_subversion_javahl_NativeResources.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/NativeResources.java</path>
</paths>
<msg>Fix an ABI compatibility bug in the JavaHL library initialization.

[in subversion/bindings/javahl]
* native/org_apache_subversion_javahl_NativeResources.cpp: Resurrect.
  (Java_org_apache_subversion_javahl_NativeResources_initNativeLibrary)
   Implement this as a no-op.

* src/org/apache/subversion/javahl/NativeResources.java
  (initNativeLibrary): Restore the native function declarationt that
   was removed in 1.9.
  (init): Call initNativeLibrary which is require to make 1.8 and older
   JavaHL JNI libraries initialized far enough to make the version
   check work.
</msg>
</logentry>
<logentry
   revision="1710103">
<author>stefan2</author>
<date>2015-10-22T21:02:53.723331Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/path.c</path>
</paths>
<msg>Speed up uri_escape() even further by making the EOS test implicit.

Because all strings are NUL-terminated C strings, we can simply mark NUL
as "invalid" in any table we pass to uri_escape; it will never be used
within a string.  Then, we only need to scan up to the first "invalid"
char and then check it for NUL.

This can significantly improve the throughput on newer processors
(Haswell and up) but others will see some benefit, too.

* subversion/libsvn_subr/path.c
  (uri_escape): Verify that the table meets our assumption about NULs
                and then scan the PATH without calculating its length
                first.
  (iri_escape_chars,
   uri_autoescape_chars): Mark NUL as "invalid".</msg>
</logentry>
<logentry
   revision="1710099">
<author>stefan2</author>
<date>2015-10-22T20:44:00.510910Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/path.c</path>
</paths>
<msg>Triple the performance of our URI escapement code when applied to already
valid input.  This function is at the core of svn_path_url_add_component2(),
which in turn is called all over the place.

* subversion/libsvn_subr/path.c
  (uri_escape): Delay any escapement overhead until we find the first
                character that needs escaping.</msg>
</logentry>
<logentry
   revision="1710076">
<author>stefan2</author>
<date>2015-10-22T19:05:28.718328Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/cyrus_auth.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/serve.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/internal_auth.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>Make "word" protocol items in ra-svn more efficient to process by storing
them as proper svn_string_t instead of plain C strings.

* subversion/include/private/svn_ra_svn_private.h
  (svn_ra_svn__item_t): WORD is now a svn_string_t.

* subversion/libsvn_ra_svn/marshal.c
  (str_true,
   str_false): New string constants for efficient boolean decoding.
  (svn_ra_svn__to_public_item,
   svn_ra_svn__to_private_item): Convert "word" string types. 
  (svn_ra_svn__set_capabilities): Leverage the full string information.
  (read_item): Store the full string info for words now.
  (vparse_tuple): Adapt C string access for words and word-to-bool conversion.
  (svn_ra_svn__read_word): Adapt C string access.
  (svn_ra_svn__read_boolean): Update word-to-bool conversion.

* subversion/libsvn_ra_svn/client.c
  (is_done_response): Update string comparison.

* subversion/svnserve/serve.c
  (get_dir,
   construct_server_baton): Ditto.

* subversion/libsvn_ra_svn/cyrus_auth.c
  (svn_ra_svn__do_cyrus_auth): Adapt access to the word's C string.

* subversion/libsvn_ra_svn/internal_auth.c
  (svn_ra_svn__find_mech): Same.</msg>
</logentry>
<logentry
   revision="1710069">
<author>stefan2</author>
<date>2015-10-22T18:16:37.978356Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_string_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/props.c</path>
</paths>
<msg>Introduce the SVN__STATIC_STRING macro to simplify the definition of
static svn_string_t instances.

* subversion/include/private/svn_string_private.h
  (SVN__STATIC_STRING): Define new macro.

* subversion/libsvn_repos/log.c
  (fill_log_entry): Use the new macro.

* subversion/libsvn_wc/props.c
  (svn_wc_canonicalize_svn_prop): Ditto.</msg>
</logentry>
<logentry
   revision="1710068">
<author>stefan2</author>
<date>2015-10-22T18:16:30.093042Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>Minor refactoring in ra_svn.

* subversion/libsvn_ra_svn/client.c
  (is_done_response): New utility function.
  (ra_svn_diff,
   perform_ra_svn_log,
   perform_get_location_segments,
   ra_svn_lock,
   ra_svn_unlock): Call the new function instead of checking the
                   response locally.</msg>
</logentry>
<logentry
   revision="1710066">
<author>ivan</author>
<date>2015-10-22T17:09:38.566573Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>* subversion/libsvn_subr/stream.c
  (): Include svn_sorts.h.
  (svn_stringbuf_from_stream): Optimize memory usage a bit and avoid
   svn_stream_read_full() call after we got partial read.
</msg>
</logentry>
<logentry
   revision="1710065">
<author>ivan</author>
<date>2015-10-22T17:08:26.000408Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/x509-parser.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/reps.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/deprecated.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/old-and-busted.c</path>
</paths>
<msg>Revv svn_string_from_stream() function and share implementation with
svn_stringbuf_from_stream().

Suggested by: julianf

* subversion/include/svn_io.h
  (svn_string_from_stream2): New.
  (svn_string_from_stream): Deprecate.

* subversion/libsvn_subr/stream.c
  (svn_string_from_stream2): Revv from svn_string_from_stream(): add LEN_HINT
   argument. Use svn_stringbuf_from_stream() as implementation.

* subversion/libsvn_subr/deprecated.c
  (svn_string_from_stream): Call svn_string_from_stream2() with LEN_HINT=0.

* subversion/libsvn_fs_x/reps.c
* subversion/libsvn_wc/old-and-busted.c
* tools/dev/x509-parser.c
  (svn_fs_x__reps_add_base, svn_wc__read_entries_old,
   get_der_cert_from_stream): Use svn_string_from_stream2() with
   LEN_HINT=SVN__STREAM_CHUNK_SIZE. It doesn't increase memory usage because
   we use same pool for SCRATCH and RESULT pool.
</msg>
</logentry>
<logentry
   revision="1710026">
<author>stefan2</author>
<date>2015-10-22T14:32:54.914890Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/editorp.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/ra_svn.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>Remove the unused POOL parameter from svn_ra_svn__handle_failure_status
and update all callers.

* subversion/libsvn_ra_svn/ra_svn.h
  (svn_ra_svn__handle_failure_status): Remove POOL parameter from
                                       decalaration.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn__handle_failure_status): Remove POOL parameter from
                                       implementation and get rid of the
                                       now unused SUBPOOL.

  (svn_ra_svn__read_cmd_response): Update caller.

* subversion/libsvn_ra_svn/client.c
* subversion/libsvn_ra_svn/editorp.c
  (*): Update callers.</msg>
</logentry>
<logentry
   revision="1710025">
<author>stefan2</author>
<date>2015-10-22T14:26:34.038430Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/serve.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/deprecated.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/editorp.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>Remove the unused POOL parameter from svn_ra_svn__parse_tuple and update
all callers.

* subversion/include/private/svn_ra_svn_private.h
  (svn_ra_svn__parse_tuple): Remove POOL parameter from decalaration.

* subversion/libsvn_ra_svn/marshal.c
  (vparse_tuple): Remove POOL pass-through parameter.
   svn_ra_svn__parse_tuple): Remove POOL parameter from implementation.
  (svn_ra_svn__read_tuple,
   svn_ra_svn__parse_proplist,
   svn_ra_svn__handle_failure_status,
   svn_ra_svn__read_cmd_response): Update callers.

* subversion/libsvn_ra_svn/client.c
* subversion/libsvn_ra_svn/deprecated.c
* subversion/libsvn_ra_svn/editorp.c
* subversion/svnserve/serve.c
  (*): Update callers.</msg>
</logentry>
<logentry
   revision="1710017">
<author>stefan2</author>
<date>2015-10-22T13:46:16.820010Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_atomic.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/atomic.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/fs.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/caching.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs.h</path>
</paths>
<msg>Instead of a UUID, produce a unique 64 bit number as a key prefix to FSFS'
temporary revprop cache.

This introduces a svn_atomic__unique_counter(), which uses a thread-safe
64 bit counter implementation to produce unique values.  Switching FSFS
from a UUID string to an integer key element is straight-forward.

The rationale behind this change is that the UUID generation may be very
expensive on some systems.

Suggested by: rhuijben

* subversion/include/private/svn_atomic.h
  (svn_atomic__unique_counter): Declare the new private API.

* subversion/libsvn_subr/atomic.c
  (unique_counter,
   counter_status,
   counter_mutex): New static objects for the counter itself and its
                   access serialization support.
  (init_unique_counter,
   read_unique_counter,
   svn_atomic__unique_counter): New functions implementing the new API.

* subversion/libsvn_fs_fs/fs.h
  (fs_fs_data_t): Change the prefix type to a ui64.

* subversion/libsvn_fs_fs/fs.c
  (initialize_fs_struct): Update initialization for that struct.

* subversion/libsvn_fs_fs/caching.c
  (svn_fs_fs__initialize_caches): The cache key is now a pair_cache_key_t.

* subversion/libsvn_fs_fs/revprops.c
  (svn_fs_fs__reset_revprop_cache): Update prefix reset code.
  (prepare_revprop_cache): Call the new API to generate the prefix and
                           handle errors.
  (cache_revprops,
   svn_fs_fs__get_revision_proplist): Update cache key construction.</msg>
</logentry>
<logentry
   revision="1709996">
<author>stefan2</author>
<date>2015-10-22T11:40:33.748145Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/index.c</path>
</paths>
<msg>Merge the remaining small changes from FSFS to FSX and resolve text conflicts.

This changes comprise
* r1652451 - int type correctness in index.c
* r1680819, 1683330 - revprop serialization tweak
* r1688270 - "pack was noop" notification
* r1703069 - formal pointer type correctness</msg>
</logentry>
<logentry
   revision="1709986">
<author>stefan2</author>
<date>2015-10-22T11:09:10.159585Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
</paths>
<msg>Merge efficiency improvements from FSFS to FSX and resolve text conflicts.

This merges revisions 1681974, 1681994 and 1683544 from FSFS to FSX.</msg>
</logentry>
<logentry
   revision="1709985">
<author>stefan2</author>
<date>2015-10-22T10:57:02.906700Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>Merge error handling improvements from FSFS to FSX and resolve text conflicts.

This merges revisions 1678149, 1682086 and 1682093 from FSFS to FSX.</msg>
</logentry>
<logentry
   revision="1709984">
<author>stefan2</author>
<date>2015-10-22T10:36:38.281949Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>Merge the packing logic changes - to the degree they apply - from FSFS to
FSX and resolve text conflicts.

This merges revisions r1705646, 1706612, 1706615 and 1706979-1706980 from
FSFS to FSX.</msg>
</logentry>
<logentry
   revision="1709980">
<author>stefan2</author>
<date>2015-10-22T10:16:57.076998Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Merge the fsync usage changes from FSFS to FSX and resolve text conflicts.

This merges revisions r1682259, 1682265, 1683378 and 1701053 from FSFS to FSX.
</msg>
</logentry>
<logentry
   revision="1709975">
<author>stefan2</author>
<date>2015-10-22T10:03:43.123201Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>In FSX, block FSFS DAG cache changes from merges because the DAG handling
will change soon-ish anyway.

* subversion/libsvn_fs_x
  (svn:mergeinfo): Block r1655649, 1655651, 1656176, 1673197, 1673202 and
                   1673204.</msg>
</logentry>
<logentry
   revision="1709922">
<author>philip</author>
<date>2015-10-21T21:30:04.339282Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/core.i</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/python/tests/run_all.py</path>
</paths>
<msg>Allow SWIG to support svn_cache_config_t so that scripts can configure
the FSFS cache.  This works for Python, I think Ruby and Perl need some
more bits but I cannot work out what is required.

* subversion/bindings/swig/core.i: Include svn_cache_config header.

* subversion/bindings/swig/python/tests/run_all.py: Set the cache size.
</msg>
</logentry>
<logentry
   revision="1709861">
<author>stefan2</author>
<date>2015-10-21T15:02:17.054007Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/low_level.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/rev_file.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/low_level.h</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>Merge the revision / pack file footer parser changes from FSFS to FSX and
resolve text conflicts.

This merges revisions r1680460, 1680464 and 1680476 from FSFS to FSX.</msg>
</logentry>
<logentry
   revision="1709856">
<author>stefan2</author>
<date>2015-10-21T14:47:09.002882Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/fs_x.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/hotcopy.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/hotcopy.h</path>
</paths>
<msg>Merge the hotcopy changes from FSFS to FSX, resolve text conflicts and use
proper svn_fs_x__* identifiers.

This merges revisions r1686542, 1686554, 1686557, 1687070-1687071, 1687074
and 1687078-1687079 from FSFS to FSX.
</msg>
</logentry>
<logentry
   revision="1709846">
<author>stefan2</author>
<date>2015-10-21T14:04:39.603968Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.h</path>
</paths>
<msg>Merge the in-txn directory handling speedup from FSFS to FSX, resolve text
conflicts and use proper svn_fs_x__* identifiers.

This merges revisions r1706617, 1706619, 1706675-1706676, 1706679 and 1707308
from FSFS to FSX.
</msg>
</logentry>
<logentry
   revision="1709832">
<author>stefan2</author>
<date>2015-10-21T13:32:44.503800Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>Merge the in-txn directory caching fixes from FSFS to FSX, resolve text
conflicts and use proper svn_fs_x__* identifiers.

This merges revisions r1679920-1679924, 1679926, 1682008 and 1702922 from
FSFS to FSX.</msg>
</logentry>
<logentry
   revision="1709831">
<author>stefan2</author>
<date>2015-10-21T13:30:14.426156Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>Make FSX tests pass again.

* subversion/libsvn_fs_x/transaction.c
  (write_container_delta_rep): Be sure to always set the expanded fulltext
                               size before comparing the rep with one from
                               rep-cache.db.</msg>
</logentry>
<logentry
   revision="1709808">
<author>stefan2</author>
<date>2015-10-21T11:51:19.570999Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>Merge rep-cache.db-related changes from FSFS to FSX and resolve text
conflicts.

This merges revisions r1674673, 1675396, 1677431, 1679169 and 1681949
from FSFS to FSX.</msg>
</logentry>
<logentry
   revision="1709805">
<author>stefan2</author>
<date>2015-10-21T11:41:38.288901Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>Merge docstring and formatting changes from FSFS to FSX and resolve
text conflicts.

This merges revisions r1657972, 1667090 and 1674631 from FSFS to FSX.</msg>
</logentry>
<logentry
   revision="1709799">
<author>stefan2</author>
<date>2015-10-21T11:35:58.596658Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
</paths>
<msg>Increase the default revprop pack size in FSFS from 4k to 16k.

Given that the manifest file is typically 8k to 10k already, the increase
in data transfer and processing overhead for random, uncached access is
a moderate 50%.  The revprop prefetching / temporary buffering needs fewer
manifest reads and fopen calls now such that the total CPU will actually
go down in typical scenarios.

On the physical side of things, we see a significant reduction in file
count, which reduces random I/O and the cost of copying repositories.

* subversion/libsvn_fs_fs/fs_fs.c
  (read_config): Increase the pack file size defaults by a factor of 4.
  (write_config): Update the docstring on the fsfs.conf template.</msg>
</logentry>
<logentry
   revision="1709798">
<author>stefan2</author>
<date>2015-10-21T11:19:32.972054Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/merge.c</path>
</paths>
<msg>Switch the last FS revprop API users to the rev'ed functions. 
This fixes the last deprecation warnings

* subversion/mod_dav_svn/merge.c
  (dav_svn__merge_response): Call the latest API variant, always
                             requesting the latest data.

* subversion/mod_dav_svn/repos.c
  (get_last_modified): Same.</msg>
</logentry>
<logentry
   revision="1709645">
<author>stefan2</author>
<date>2015-10-20T16:55:52.963224Z</date>
<paths>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>In FSX, block FSFS changes from merges that updated both backends already.

* subversion/libsvn_fs_x
  (svn:mergeinfo): Block :r1654932,1654934,1654937,1655635,1655664,1662668,
                   1669743,1669945,1673445,1673454,1673685,1673689,1673875,
                   1674165,1674341,1674404,1674669,1676667,1678151,1678725,
                   1679907,1680347,1682739,1682864,1686232,1686546,1687061,
                   1687064,1688425,1694489,1696185,1696627-1696628,1696630,
                   1702600,1703237,1705638 and 1705643.</msg>
</logentry>
<logentry
   revision="1709624">
<author>stefan2</author>
<date>2015-10-20T15:32:53.514057Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>In FSX, block recent FSFS stats and load-index-related changes from merges.
FSX doesn't have that functionality.

* subversion/libsvn_fs_x
  (svn:mergeinfo): Block r1674400,1681966,1697381,1697387,1697393,1697403,
                   1697405,1705724,1705730,1705739r1707971-1707973,1707986,
                   1707988 and 1707989.</msg>
</logentry>
<logentry
   revision="1709623">
<author>stefan2</author>
<date>2015-10-20T15:26:12.428673Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/index.c</path>
<path
   kind="dir"
   action="M"
   prop-mods="true"
   text-mods="false">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Merge recent FSFS index.c-related changes to FSX and fix a few conflicts.

This merges the revisions r1652076, 1652441, 1657978 and 1697372.</msg>
</logentry>
<logentry
   revision="1709622">
<author>stefan2</author>
<date>2015-10-20T15:10:26.984531Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>Follow-up to r1709621 fixing compilation.

* subversion/libsvn_fs_x/cached_data.c
  (svn_fs_x__get_proplist): Add missing ERR declaration and fix the
                            ID stringification calls.

* subversion/libsvn_fs_x/transaction.c
  (get_txn_proplist): Add missing ERR declaration and fix the error
                      construction.
</msg>
</logentry>
<logentry
   revision="1709621">
<author>stefan2</author>
<date>2015-10-20T15:02:17.064777Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/lock.c</path>
</paths>
<msg>Merge recent FSFS lock.c changes to FSX and fix a few conflicts.

This merges the revisions r1652068, 1657525, 1659212, 1659217,1659314
and 1678718.</msg>
</logentry>
<logentry
   revision="1709616">
<author>stefan2</author>
<date>2015-10-20T14:40:18.767259Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/verify.c</path>
</paths>
<msg>Follow-up to r1709614.

* subversion/libsvn_fs_x/verify.c
  (svn_fs_x__verify): Replace a few FSFS identifiers that slipped through.
                      Also remove a now unused local variable.</msg>
</logentry>
<logentry
   revision="1709614">
<author>stefan2</author>
<date>2015-10-20T14:35:43.424299Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/verify.c</path>
</paths>
<msg>Merge recent FSFS verify.c changes to FSX and fix a few conflicts.

This merges the revisions r1649590, 1665854, 1667538, 1683553 and 1693886.</msg>
</logentry>
<logentry
   revision="1709607">
<author>stefan2</author>
<date>2015-10-20T14:23:10.265223Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>In FSX, block FSFS changes from merges that updated both backends already.

* subversion/libsvn_fs_x
  (svn:mergeinfo): Block r1651567,1659509,1665318,1665894,1667101,1669746,
                   1669749,1670139,1670953,1673170,1682076,1683311,1684047,
                   1692650,1694848,1696171,1696758,1701017,1703142,1703240,
                   1705266.</msg>
</logentry>
<logentry
   revision="1709600">
<author>stefan2</author>
<date>2015-10-20T14:11:12.082027Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>In FSX, block recent FSFS revprop-related changes from merges.
FSX already provides an improved version of the same functionality.

* subversion/libsvn_fs_x
  (svn:mergeinfo): Block r1707971-1707973,1707986,1707988-1707989.</msg>
</logentry>
<logentry
   revision="1709594">
<author>stefan2</author>
<date>2015-10-20T14:01:23.096664Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/verify.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>Replicate r1708004 from FSFS in FSX.
This provides a minor FS verification speedup.

* subversion/libsvn_fs_x
  (svn:mergeinfo): Update.

* subversion/libsvn_fs_x/verify.c
  (verify_revprops): Invalidate the revprop generation only once and then
                     use it as read-ahead buffer.</msg>
</logentry>
<logentry
   revision="1709593">
<author>stefan2</author>
<date>2015-10-20T14:01:03.752086Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnbench/null-log-cmd.c</path>
</paths>
<msg>Make svn-bench null-log actually evaluate the --with-no-revprops option.

* subversion/svnbench/null-log-cmd.c
  (svn_cl__null_log): Explicitly request 0 revprops when no-revprops has
                      has been set.</msg>
</logentry>
<logentry
   revision="1709585">
<author>rhuijben</author>
<date>2015-10-20T13:27:37.119773Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/win-tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
</paths>
<msg>Following up on r1349699, make the windows testrunner capable of setting up
httpd for running tests over https, just like the *nix scripts can.

* subversion/tests/cmdline/svntest/main.py
  (trust_ssl_cert): Write file as binary to fix byte lengths stored in the
    file.

* win-tests.py
  (imports): Import re.
  (): Add --https option. Update url calculation.
  (Httpd): Add two arguments to allow setting up ssl. Calculate extra paths.
    Create certfiles if needed. Write additional config lines.
  (Httpd._create_cert_files): New function.
  (): Set certfile if we setup the server with our own cert.
</msg>
</logentry>
<logentry
   revision="1709562">
<author>philip</author>
<date>2015-10-20T10:11:08.286718Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/po/it.po</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/po/ko.po</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/po/ja.po</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/po/zh_TW.po</path>
</paths>
<msg>* subversion/po/it.po:
* subversion/po/ja.po:
* subversion/po/ko.po:
* subversion/po/zh_TW.po: 
   Remove trailing ^M introduced in r1709389, it may be the cause of the
   Solaris buildbot failure.
</msg>
</logentry>
<logentry
   revision="1709553">
<author>philip</author>
<date>2015-10-20T09:30:20.415865Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/status.c</path>
</paths>
<msg>* subversion/mod_dav_svn/status.c: Add missing include so that
   conditional code to show process ID gets enabled on Unix.
</msg>
</logentry>
<logentry
   revision="1709389">
<author>rhuijben</author>
<date>2015-10-19T11:05:57.403028Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/po/zh_CN.po</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/po/pt_BR.po</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/po/es.po</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/po/fr.po</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/po/sv.po</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/po/ko.po</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/po/ja.po</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/po/pl.po</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/po/zh_TW.po</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/po/it.po</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/po/nb.po</path>
</paths>
<msg>Apply translation fixes supplied by the debian maintainer.

Resolves one mismatch in all languages where we changed a bit
of witespace and adds one french translation item.

* subversion/po/es.po
* subversion/po/fr.po
* subversion/po/it.po
* subversion/po/ja.po
* subversion/po/ko.po
* subversion/po/nb.po
* subversion/po/pl.po
* subversion/po/pt_BR.po
* subversion/po/sv.po
* subversion/po/zh_CN.po
* subversion/po/zh_TW.po
  Tweak commit notifications.

Patch by: James McCoy &lt;jamessan{_AT_}debian.org&gt;
Via https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=802156
</msg>
</logentry>
<logentry
   revision="1709388">
<author>kotkov</author>
<date>2015-10-19T10:55:50.153779Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/dag.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_base/dag.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_base/fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/delta.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_ra.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_repos.h</path>
</paths>
<msg>Restore the 1.8 behavior of svn_fs_contents_changed() and _props_changed()
API.  Switch all calling sites of the new API, svn_fs_contents_different()
and _props_different(), back to using the old functions.

There are no user-visible problems associated with the old code.  The new
API doesn't improve any real use cases in the current code, but is causing
problems:

- We had a problem with misbehaving svn blame -g
  (http://svn.haxx.se/dev/archive-2015-06/0069.shtml, "Blame behaviour
   change in 1.9").

- We have an issue with repositories behaving differently in client-side
  operations like 'svn log' after dump/load
  (http://svn.haxx.se/dev/archive-2015-09/0269.shtml, "No-op changes no
   longer dumped by 'svnadmin dump' in 1.9"; also see issue #4598 in
   https://issues.apache.org/jira/browse/SVN-4598).

- We could experience same problems originating from other callers of the
  new API, because the low level behavior change associated with switching
  to it propagates up to higher levels like svn_repos or svn_ra and alters
  the behavior of many different callers like svn_ra_get_file_revs2() or
  the update reporter.  Third-party API callers could not be ready for it
  as well, because public API functions like svn_ra_get_file_revs2() didn't
  receive an erratum or a bump.

See the discussion in http://svn.haxx.se/dev/archive-2015-10/0022.shtml
("Re: No-op changes no longer dumped by 'svnadmin dump' in 1.9").

* subversion/libsvn_fs_base/dag.c
  (svn_fs_base__things_different): Compare the uniquifiers, as we did in 1.8.

* subversion/libsvn_fs_base/fs.h
  (node_revision_t.data_key_uniquifier): Remove the comment about not using
   this field.

* subversion/libsvn_fs_fs/fs_fs.c
  (svn_fs_fs__noderev_same_rep_key): Reintroduce this helper function.
  (svn_fs_fs__file_text_rep_equal, svn_fs_fs__prop_rep_equal): Always
   assume the strict mode in these helpers.

* subversion/libsvn_fs_fs/fs_fs.h
  (svn_fs_fs__noderev_same_rep_key): Declare this re-added helper.
  (svn_fs_fs__file_text_rep_equal, svn_fs_fs__prop_rep_equal): Update the
   docstrings for these helper functions.

* subversion/libsvn_fs_fs/dag.c
  (svn_fs_fs__dag_things_different): Preserve the current comparison behavior
   in strict mode.  Restore the 1.8 way of comparing the representation keys
   in non-strict mode.

* subversion/libsvn_fs_fs/tree.c
  (merge): Restore the 1.8 way of comparing property lists.

* subversion/libsvn_fs_fs/fs.h
  (representation_t.uniquifier): Remove the comment about not using this
   field.

* subversion/libsvn_repos/delta.c
  (delta_proplists): Switch back to using svn_fs_props_changed().
  (svn_repos__compare_files): Restore this function to its 1.8 state.
  (delta_files): Restore the 1.8 way of comparing files.

* subversion/libsvn_repos/dump.c
  (dump_node): Switch back to using svn_fs_contents_changed() and
   svn_fs_props_changed().

* subversion/libsvn_repos/reporter.c
  (delta_proplists): Switch back to using svn_fs_props_changed().

* subversion/libsvn_repos/rev_hunt.c
  (send_path_revision): Switch back to using svn_fs_contents_changed().
   Remove the no longer necessary hack for svn blame -g with older clients.

* subversion/include/svn_ra.h
  (svn_ra_get_file_revs2): Update @note in the docstring.

* subversion/include/svn_repos.h
  (svn_repos_get_file_revs2): Update @note in the docstring.

* subversion/tests/cmdline/svnadmin_tests.py
  (dump_no_op_change): No longer fails with fsfs and bdb.
</msg>
</logentry>
<logentry
   revision="1709319">
<author>stefan2</author>
<date>2015-10-18T20:59:57.513769Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_fs.c</path>
</paths>
<msg>Fix test suite to consistenly apply FS configuration settings when
creating new repos.  This fixes the FSX tests.

* subversion/tests/svn_test_fs.c
  (svn_test__create_fs2): Apply the same config when reopening a FS
                          that we used to create it.  That includes
                          cache settings, for instance.
</msg>
</logentry>
<logentry
   revision="1709039">
<author>stefan2</author>
<date>2015-10-16T15:30:41.568065Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_fs/fs-sequential-test.c</path>
</paths>
<msg>Move the new revprop_refresh test to the fs-sequential-test.

It assumes that the cache retains certain data long enough and
parallel test execution can violate that assumption.

* subversion/tests/libsvn_fs/fs-test.c
  (set_revprop,
   check_revprop,
   revprop_refresh): Remove here.
  (test_funcs): Unregister the test here.

* subversion/tests/libsvn_fs/fs-sequential-test.c
  (set_revprop,
   check_revprop,
   revprop_refresh): Move them here.
  (test_funcs): Register the test here.</msg>
</logentry>
<logentry
   revision="1708970">
<author>stefan2</author>
<date>2015-10-16T12:16:19.897393Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Add a test case for our revprop change visbility guarantees.

* subversion/tests/libsvn_fs/fs-test.c
  (set_revprop,
   check_revprop): New utility functions.
  (revprop_refresh): The new test.
  (test_funcs): Register the new test.</msg>
</logentry>
<logentry
   revision="1708904">
<author>stefan2</author>
<date>2015-10-15T23:39:06.562355Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/fs_x.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/verify.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/revprops.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Finally wire the new FS API "refresh" hint with FSX' revprop access.

Apart from passing the API parameters through, the only thing we change
is that the "refresh" option controls whether we read the generation
number from disk (possibly invalidating the cache).

* subversion/libsvn_fs_x/revprops.h
  (svn_fs_x__invalidate_revprop_generation): Declare a new utility API.
  (svn_fs_x__get_revision_proplist): Add the REFRESH option.

* subversion/libsvn_fs_x/revprops.c
  (svn_fs_x__invalidate_revprop_generation): Implement the new API.
  (is_generation_valid): New utility function.
  (parse_revprop): Assert that we got the "re-read generation after
                   invalidation" logic right.
  (svn_fs_x__get_revision_proplist): Only read the revprop generation
                                     if necessary.

* subversion/libsvn_fs_x/fs_x.h
  (svn_fs_x__revision_prop): Add the REFRESH option.

* subversion/libsvn_fs_x/fs_x.c
  (svn_fs_x__revision_prop): Pass through the REFRESH option.
  (change_rev_prop_body): Update caller.

* subversion/libsvn_fs_x/verify.c
  (verify_revprops): Update caller.

* subversion/libsvn_fs_x/fs.c
  (x_refresh_revprops): Call our new invalidation API.
  (x_revision_prop): This wrapper is no longer needed.
  (x_revision_proplist): Pass through the REFRESH option.
  (fs_vtable): Call into svn_fs_x__revision_prop directly. 
  (initialize_fs_struct): Ensure that the revprop generation is
                          initialially marked as invalid / unknown.</msg>
</logentry>
<logentry
   revision="1708902">
<author>stefan2</author>
<date>2015-10-15T23:03:58.625758Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Switch the FSX revprop code to take the revprop generation from the FS
instead of passing it through as a separate function parameter.

* subversion/libsvn_fs_x/revprops.c
  (read_revprop_generation,
   begin_revprop_change): Set the generation value inside FS instead
                          of returning it.
  (end_revprop_change): Take the generation value from FS and update it.
  (packed_revprops_t): Don't have a GENERATION element outside FS.
  (parse_revprop): Take the generation value from FS.
  (read_non_packed_revprop,
   parse_packed_revprops,
   read_pack_revprop): Update callers.
  (svn_fs_x__get_revision_proplist): Drop redundant docstring, take the
                                     generation value from FS and update
                                     callers.
  (switch_to_new_revprop,
   write_packed_revprop): Update callers. </msg>
</logentry>
<logentry
   revision="1708901">
<author>stefan2</author>
<date>2015-10-15T22:41:34.202540Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Make our test suite pass again for FSX.

* subversion/libsvn_fs_x/revprops.c
  (read_revprop_generation_file): Our atoi wrapper is picky about trailing
                                  whitespace.

* subversion/tests/cmdline/svnadmin_tests.py
  (check_hotcopy_fsfs_fsx): The revprop generation file contains one number.</msg>
</logentry>
<logentry
   revision="1708895">
<author>stefan2</author>
<date>2015-10-15T21:15:10.158230Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Since we moved to our standard atomic file replacement pattern for revprop
generation file changes in FSX, we no longer need to put checksums in it.

* subversion/libsvn_fs_x/revprops.c
  (CHECKSUMMED_NUMBER_BUFFER_LEN): Drop unused buffer size macro.
  (): Update commentary.
  (checkedsummed_number,
   verify_extract_number): No longer needed.
  (read_revprop_generation_file,
   write_revprop_generation_file): The file contents is now a simple number
                                   plus a newline.</msg>
</logentry>
<logentry
   revision="1708893">
<author>stefan2</author>
<date>2015-10-15T21:09:37.100302Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
</paths>
<msg>Follow-up to r1708891: Fix build.

* subversion/libsvn_fs_x/fs.h
  (svn_fs_x__data_t): Add a field for the revprop generation.  Right now,
                      we don't need it to be remembered between FS API calls
                      but the code already sets it instead of using some
                      local variables.</msg>
</logentry>
<logentry
   revision="1708891">
<author>stefan2</author>
<date>2015-10-15T20:51:27.394045Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Begin adopting FSX' revprop caching to the improved FS revprop interface.

This patch removes the permanently open revprop file instance with our
traditional open / close pattern.  Although that is much slower, it is
also much simpler and more robust.  A later patch will reduce the number
fopen calls significantly.

* subversion/libsvn_fs_x/fs.h
  (svn_fs_x__data_t): Remove the file instance.

* subversion/libsvn_fs_x/fs_x.c
  (svn_fs_x__create_file_tree): Ensure the revprop generation file always
                                exists to enable copy-perms.

* subversion/libsvn_fs_x/revprops.c
  (close_revprop_generation_file,
   open_revprop_generation_file): We no longer need these specific functions
                                  to open / close revprop generation files.
  (read_revprop_generation_file,
   write_revprop_generation_file): Now apply our standard open-access-close
                                   pattern.
  (svn_fs_x__reset_revprop_generation_file): Trivial reimplemenation.
  (log_revprop_cache_init_warning): No longer needed.
  (has_revprop_cache): No need to check for permanent file access anymore.
                       I/O errors are now covered in-band by the read/write
                       functions above.
  (revprop_generation_fixup,
   begin_revprop_change): No need to manage the permanently open file anymore.
</msg>
</logentry>
<logentry
   revision="1708699">
<author>philip</author>
<date>2015-10-14T21:51:39.068193Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_authz_svn/mod_authz_svn.c</path>
</paths>
<msg>The fix for CVE-2015-3184 (Subversion) and CVE-2015-3185 (httpd) broke
the use of 3rd party modules such as mod_auth_kerb and mod_auth_ntlm
when mandatory authn was combined with mod_authz_svn.  The problem
was httpd returned a 401 response without an Authentication header
meaning the client was unable to authenticate.  By returning DECLINED
we allow the authn module to generate a 401 with the correct headers.

* subversion/mod_authz_svn/mod_authz_svn.c
  (access_checker): Return DECLINED rather than HTTP_UNAUTHORIZED.
</msg>
</logentry>
<logentry
   revision="1708222">
<author>philip</author>
<date>2015-10-12T20:10:03.925568Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnlook/svnlook.c</path>
</paths>
<msg>Add -M to 'svnlook tree' to allow the FSFS cache size to be set so
that performance on large directories can be controlled.

With a directory of 10,000 names and the default 16MB cache running
'svnlook tree' takes about 1 minute, but with the cache increased to
64MB it takes less than 1 second.

* subversion/svnlook/svnlook.c
  (options_table): Add -M.
  (cmd_table): Add -M to 'tree'.
  (struct svnlook_opt_state): Add member.
  (sub_main): Add support for -M.
</msg>
</logentry>
<logentry
   revision="1708043">
<author>stefan2</author>
<date>2015-10-12T07:24:38.250909Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/fs-wrap.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/load-fs-vtable.c</path>
</paths>
<msg>Follow-up to r1708003: Accidentally didn't set the "refresh" option.

* subversion/libsvn_repos/fs-wrap.c
  (svn_repos_fs_change_rev_prop4,
   svn_repos_fs_revision_prop,
   svn_repos_fs_revision_proplist): Always return the latest revprop data.

* subversion/libsvn_repos/load-fs-vtable.c
  (close_revision,
   revprops_close_revision): Same.

* subversion/libsvn_repos/rev_hunt.c
  (svn_repos_get_committed_info): Same.

Found by: rhuijben</msg>
</logentry>
<logentry
   revision="1708042">
<author>stefan2</author>
<date>2015-10-12T07:15:20.936991Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
</paths>
<msg>Follow-up to r1708001: Did not really change the behavior ...

* subversion/libsvn_repos/dump.c
  (verify_one_revision): Actually disable the refresh.</msg>
</logentry>
<logentry
   revision="1708005">
<author>stefan2</author>
<date>2015-10-11T17:20:45.148112Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svnlook/svnlook.c</path>
</paths>
<msg>Switch the revprop FS API callers outside lib_repos to the latest FS API.

* subversion/svnlook/svnlook.c
  (get_property,
   generate_label,
   do_plist): None of these functions is performance sensitive. Call the
              rev'ed API requesting the same behavior as before.</msg>
</logentry>
<logentry
   revision="1708004">
<author>stefan2</author>
<date>2015-10-11T17:15:58.267000Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/verify.c</path>
</paths>
<msg>Speed up verification of FSFS repositories with packed revprops.

* subversion/libsvn_fs_fs/verify.c
  (verify_revprops): Invalidate the revprop cache only once and then
                     use it as read-ahead buffer.</msg>
</logentry>
<logentry
   revision="1708003">
<author>stefan2</author>
<date>2015-10-11T17:11:27.733685Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/commit.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/fs-wrap.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/load-fs-vtable.c</path>
</paths>
<msg>Switch the remaining FS API calls in lib_repos to the latest FS API.

* subversion/libsvn_repos/commit.c
  (invoke_commit_cb): There is no point enabling revprop caching here
                      because it could only speed up a 3rd access while
                      we have only two.

* subversion/libsvn_repos/fs-wrap.c
  (svn_repos_fs_change_rev_prop4,
   svn_repos_fs_revision_prop,
   svn_repos_fs_revision_proplist): These queries perform only a single
                                    revprop read and that needs to return
                                    the latest data.

* subversion/libsvn_repos/rev_hunt.c
  (svn_repos_get_committed_info): Same.

* subversion/libsvn_repos/load-fs-vtable.c
  (close_revision): Same.
  (revprops_close_revision): This one needs to read the latest data.</msg>
</logentry>
<logentry
   revision="1708001">
<author>stefan2</author>
<date>2015-10-11T17:01:33.655389Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
</paths>
<msg>Speed up revprop access in svn_repos_verify_fs3() by using the latest FS API.

* subversion/libsvn_repos/dump.c
  (verify_one_revision): Read revprops from the FS cache if we can.
  (svn_repos_verify_fs3): Refresh the revprops only once, at the start of the
                          operation.  This is the only public function that
                          calls the above.  Therefore, we still fulfill the
                          visibility guarantees for revprop changes.
</msg>
</logentry>
<logentry
   revision="1708000">
<author>stefan2</author>
<date>2015-10-11T16:57:55.714439Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
</paths>
<msg>Speed up revprop access in svn_repos_dump_fs4() by using the latest FS API.

* subversion/libsvn_repos/dump.c
  (write_revision_record): Read revprops from the FS cache if we can. 
  (svn_repos_dump_fs4): Refresh the revprops only once, at the start of the
                        operation.  This is the only public function that
                        calls the above.  Therefore, we still fulfill the
                        visibility guarantees for revprop changes.
</msg>
</logentry>
<logentry
   revision="1707999">
<author>stefan2</author>
<date>2015-10-11T16:51:43.573391Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
</paths>
<msg>Speed up revprop access in svn_repos_get_file_revs2() by using the latest
FS API.

* subversion/libsvn_repos/rev_hunt.c
  (send_path_revision): Read revprops from the FS cache if we can. 
  (svn_repos_get_file_revs2): Refresh the revprops only once, at the start
                              of the operation.  This is the only public
                              function that calls the above.
                              Therefore, we still fulfill the visibility
                              guarantees for revprop changes.
</msg>
</logentry>
<logentry
   revision="1707998">
<author>stefan2</author>
<date>2015-10-11T16:47:04.452012Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
</paths>
<msg>Follow-up to r1707997: Fix build.

* subversion/libsvn_repos/rev_hunt.c
  (svn_repos_dated_revision): Call the function by its correct name.</msg>
</logentry>
<logentry
   revision="1707997">
<author>stefan2</author>
<date>2015-10-11T16:43:55.031664Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
</paths>
<msg>Speed up revprop access in svn_repos_dated_revision() by using the latest
FS API.

* subversion/libsvn_repos/rev_hunt.c
  (get_time): Read revprops from the FS cache if we can.
  (svn_repos_dated_revision): Refresh the revprops only once, at the start
                              of the operation.  This is the only public
                              function that, indirectly, calls the above.
                              Therefore, we still fulfill the visibility
                              guarantees for revprop changes.</msg>
</logentry>
<logentry
   revision="1707996">
<author>stefan2</author>
<date>2015-10-11T16:31:30.317049Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Speed up revprop access in svn_repos_get_logs4 by using the latest FS API.

* subversion/libsvn_repos/log.c
  (fill_log_entry): Read revprops from the FS cache if we can. 
  (svn_repos_get_logs4): Refresh the revprops only once, at the start of
                         the operation.  This is the only public function
                         that, indirectly, calls the above.  Therefore, we
                         still fulfill the visibility guarantees for
                         revprop changes.</msg>
</logentry>
<logentry
   revision="1707995">
<author>stefan2</author>
<date>2015-10-11T16:20:02.675920Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
</paths>
<msg>Follow-up to r1707994: Did not really change the behavior ...

* subversion/libsvn_repos/reporter.c
  (get_revision_info): Actually disable the refresh.</msg>
</logentry>
<logentry
   revision="1707994">
<author>stefan2</author>
<date>2015-10-11T16:15:57.148618Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
</paths>
<msg>Speed up revprop access in svn_repos_finish_report(), i.e. the generic
lib_repos reporter, using the latest FS API.

* subversion/libsvn_repos/reporter.c
  (get_revision_info): Read revprops from the FS cache if we can. 
  (svn_repos_finish_report): Refresh the revprops only once, at the start
                             of the operation.  This is the only public
                             function that, indirectly, calls the above.
                             Therefore, we still fulfill the visibility
                             guarantees for revprop changes.</msg>
</logentry>
<logentry
   revision="1707993">
<author>stefan2</author>
<date>2015-10-11T16:09:27.669283Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/delta.c</path>
</paths>
<msg>Speed up revprop access in svn_repos_dir_delta2() using the latest FS API.

* subversion/libsvn_repos/delta.c
  (svn_repos_dir_delta2): Refresh the revprops only once, at the beginning
                          of the operation. This is the only public function
                          in this file, so we still fulfil the visibility
                          guarantees for revprop changes.
  (delta_proplists): Read revprops from cache if we can.</msg>
</logentry>
<logentry
   revision="1707992">
<author>stefan2</author>
<date>2015-10-11T15:58:33.529146Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/deprecated.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>Make the recent revprop read function changes in the FS vtable
available through the FS API.

* subversion/include/svn_fs.h
  (svn_fs_refresh_revision_props): Declare new public API.
  (svn_fs_revision_prop2): Bump version of ...
  (svn_fs_revision_prop): ... this now deprecated API.
  (svn_fs_revision_proplist2): Bump version of ...
  (svn_fs_revision_proplist): ... this now deprecated API.

* subversion/libsvn_fs/deprecated.c
  (svn_fs_revision_prop,
   svn_fs_revision_proplist): Implement in terms of the new API.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_refresh_revision_props,
   svn_fs_revision_prop2,
   svn_fs_revision_proplist2): Implement as direct vtable calls.</msg>
</logentry>
<logentry
   revision="1707989">
<author>stefan2</author>
<date>2015-10-11T15:12:09.861938Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
</paths>
<msg>Finally, also write to the FSFS revprop cache when allowed.

* subversion/libsvn_fs_fs/revprops.c
  (cache_revprops): New utility function.
  (read_non_packed_revprop,
   parse_packed_revprops,
   read_pack_revprop): Add an option to cache the revprops as we read them.
  (svn_fs_fs__get_revision_proplist): Populate the revprop cache if we
                                      did not just pass a barrier.
  (write_packed_revprop): There is no point in caching any revprops
                          because teh caller will invalidate the cache
                          at the end of the write.
</msg>
</logentry>
<logentry
   revision="1707988">
<author>stefan2</author>
<date>2015-10-11T14:48:13.496268Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/revprops.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/caching.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/fs.h</path>
</paths>
<msg>In FSFS, add the revprop cache object and its invalidation logic.
Do not write to the cache, yet.

Note that in an attempt to minimize the CPU overhead when reading
whole revprop pack files, we don't fully parse them before caching
them.  Instead, the cache expects the plain serialized hash in set()
and only parses it during get().  The overhead for the getter is very
small while the setter gets significantly faster. 

Also note that svn_fs_fs__get_revision_proplist will be the only
place where we may ever read cached revprops.  Therefore, functions
like svn_fs_fs__set_revision_proplist will never write (partially)
outdated revprops.

* subversion/libsvn_fs_fs/fs.h
  (fs_fs_data_t): Add the revprop cache and its key prefix.

* subversion/libsvn_fs_fs/caching.c
  (svn_fs_fs__initialize_caches): Construct the new cache as well.

* subversion/libsvn_fs_fs/fs.c
  (fs_refresh_revprops): This is now "invalidate revprop cache".
  (initialize_fs_struct): Initialize the new struct element.

* subversion/libsvn_fs_fs/temp_serializer.h
  (svn_fs_fs__serialize_revprops,
   svn_fs_fs__deserialize_revprops): Declare (de-)serialization functions
                                     for the new cache.

* subversion/libsvn_fs_fs/temp_serializer.c
  (svn_fs_fs__serialize_revprops,
   svn_fs_fs__deserialize_revprops): Implement them asymmetrically.

* subversion/libsvn_fs_fs/revprops.h
  (svn_fs_fs__reset_revprop_cache): Declare our new cache invalidation
                                    function.

* subversion/libsvn_fs_fs/revprops.c
  (svn_fs_fs__reset_revprop_cache): Implement.
  (prepare_revprop_cache): New utility function.
  (svn_fs_fs__get_revision_proplist): Actually evaluate the REFRESH option/
                                      sync barrier now and return cached
                                      data if available - which currently
                                      is never the case.
  (svn_fs_fs__set_revision_proplist): After we changed revprops, we *know*
                                      our cache is invalid. IOW, write
                                      implies a barrier.

* subversion/libsvn_fs_fs/fs_fs.c
  (change_rev_prop_body): Document why we need the "refresh" option here.</msg>
</logentry>
<logentry
   revision="1707986">
<author>stefan2</author>
<date>2015-10-11T14:02:34.384509Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/verify.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/revprops.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_base/fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_base/revs-txns.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_base/revs-txns.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
</paths>
<msg>Bump the FS vtable declarations for revprop access but keep the current
general behavior.

This is the first in a series of patches that will allow FS API users
to efficiently access multiple revprops during the same report.  Implement
the new functionality as no-op and ignore, respectively.

* subversion/libsvn_fs/fs-loader.h
  (fs_vtable_t): Anticipate the upcoming FS API change. Introduce the
                 new refresh_revprops method and bump revision_prop
                 as well as revision_proplist.  Those use the 2-pool
                 paradigm now and add a REFRESH option.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_revision_prop,
   svn_fs_revision_proplist): Adapt the old API to the new vtable.
                              refresh_revprops is not being used atm. 

* subversion/libsvn_fs_base/fs.c
  (base_bdb_refresh_revision): New no-op API implementation.
  (fs_vtable): Update vtable.

* subversion/libsvn_fs_base/revs-txns.h
  (svn_fs_base__revision_proplist,
   svn_fs_base__revision_prop): Follow vtable change.

* subversion/libsvn_fs_base/revs-txns.c
  (svn_fs_base__revision_proplist,
   svn_fs_base__revision_prop): Ditto. Always implicitly "refresh".

* subversion/libsvn_fs_x/fs.c
  (x_refresh_revprops): New no-op API implementation.
  (x_revision_prop,
   x_revision_proplist): Follow vtable change. Always implicitly "refresh".
                         We no longer need to create a local SCRATCH_POOL.
  (fs_vtable): Update vtable.

* subversion/libsvn_fs_fs/fs.c
  (fs_refresh_revprops): New no-op API implementation.
  (fs_vtable): Update vtable.

* subversion/libsvn_fs_fs/revprops.h
  (svn_fs_fs__get_revision_proplist): Follow vtable change.

* subversion/libsvn_fs_fs/revprops.c
  (svn_fs_fs__get_revision_proplist): Same. Always implicitly "refresh".
                                      Use the pools appropriately.

* subversion/libsvn_fs_fs/fs_fs.h
  (svn_fs_fs__revision_prop): Follow vtable change.

* subversion/libsvn_fs_fs/fs_fs.c
  (svn_fs_fs__revision_prop): Same. Only allocate the result in the
                              RESULT_POOL.
  (change_rev_prop_body): Update caller to always "refresh".

* subversion/libsvn_fs_fs/verify.c
  (verify_revprops): Same.
</msg>
</logentry>
<logentry
   revision="1707973">
<author>stefan2</author>
<date>2015-10-11T13:12:36.269506Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
</paths>
<msg>Code cleanup:
Properly name the RESULT_POOL in FSFS revprop functions that follow the
2-pool paradigm

* subversion/libsvn_fs_fs/revprops.c
  (parse_revprop,
   get_min_filename_len,
   get_revprop_packname,
   parse_packed_revprops): Rename the POOL parameter to RESULT_POOL.</msg>
</logentry>
<logentry
   revision="1707972">
<author>stefan2</author>
<date>2015-10-11T13:00:10.448508Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
</paths>
<msg>Minor refactoring in FSFS.

* subversion/libsvn_fs_fs/revprops.c
  (read_non_packed_revprop): Factor out the string construction.</msg>
</logentry>
<logentry
   revision="1707971">
<author>stefan2</author>
<date>2015-10-11T12:57:23.994670Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
</paths>
<msg>Code cleanup:
Get rid of the last places in FSFS that mention revprop generations.

* subversion/libsvn_fs_fs/revprops.c
  (packed_revprops_t): Drop the GENERATION element.
  (parse_revprop,
   read_non_packed_revprop,
   parse_packed_revprops,
   read_pack_revprop): Drop the GENERATION parameter and update function
                       calls.
  (svn_fs_fs__get_revision_proplist,
   write_packed_revprop): Updater callers to not provide a GENERATION.</msg>
</logentry>
<logentry
   revision="1707766">
<author>julianfoad</author>
<date>2015-10-09T16:37:45.481654Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Reference a change to its issue number instead of revision.</msg>
</logentry>
<logentry
   revision="1707586">
<author>ivan</author>
<date>2015-10-08T17:11:44.577544Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (resolve_prop_conflict_on_node): Use svn_stringbuf_from_file2() and
   svn_stringbuf__morph_into_string() instead of svn_stream_open_readonly()
   and svn_string_from_stream().
</msg>
</logentry>
<logentry
   revision="1707584">
<author>ivan</author>
<date>2015-10-08T16:53:59.316718Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (generate_propconflict): Reduce scope of local variable.
</msg>
</logentry>
<logentry
   revision="1707493">
<author>rhuijben</author>
<date>2015-10-08T11:12:41.256605Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/diff_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/diff.c</path>
</paths>
<msg>Resolve issue #4597, and add a regression test for this problem.

The problem here is that our diff code doesn't handle full url, revision, peg
revision walking. The code assumes that the user either passes a single path
and upto 3 revisions -left, right, peg- or a path/url and a single revision.

The internal apis guessed which way they were called by looking at specific
argument combinations. In the 1.9 refactoring of diff to the common diff tree
processors the code was normalized to how we usually handle these revisions
in other code, fixing theoretical issues, but losing the notion that this
code is only used in a limited number of cases...

In the specific case of issue #4597 no peg revision was passed, but just a
(url/local path)+ revision... But because we still had an 'unspecified' peg
revision we applied the default rule, resolve revision in HEAD.

The patch resolves this problem by adding an additional argument telling that
we are in this specific case.

* subversion/libsvn_client/diff.c
  (diff_repos_wc): Update arguments to more closely document behavior.
  (do_diff): Add no_peg_revision argument. Update caller.
  (svn_client_diff6,
   svn_client_diff_peg6,
   svn_client_diff_summarize2,
   svn_client_diff_summarize_peg2): Update caller.

* subversion/tests/cmdline/diff_tests.py
  (diff_peg_resolve): New test.
  (test_list): Add diff_peg_resolve.
</msg>
</logentry>
<logentry
   revision="1707391">
<author>luke1410</author>
<date>2015-10-07T21:10:34.364493Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/help-cmd.c</path>
</paths>
<msg>Minor corrections to svn-mergeinfo-normalizer help syntax.

* tools/client-side/svn-mergeinfo-normalizer/help-cmd.c
  (svn_min__help): replace svn with correct svn-mergeinfo-normalizer comand
   and drop svn: prefix

Approved by: rhuijben (via IRC)</msg>
</logentry>
<logentry
   revision="1707308">
<author>stefan2</author>
<date>2015-10-07T13:53:06.158710Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/transaction.c
  (svn_fs_fs__set_entry): Remove duplicate local variable declaration.</msg>
</logentry>
<logentry
   revision="1707255">
<author>rhuijben</author>
<date>2015-10-07T11:17:51.744995Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_ra_serf/multistatus.c</path>
</paths>
<msg>Following up on r1707164, simplify the handling of errors during parsing
server generated errors a bit more: return whatever we parsed successfully,
combined with the parser error.

After this patch this includes the error from the status line if nothing
was parsed properly.

* subversion/libsvn_ra_serf/multistatus.c
  (svn_ra_serf__handle_server_error): Add whatever we parsed before the
    parsing errors of server generated errors.
</msg>
</logentry>
<logentry
   revision="1707196">
<author>ivan</author>
<date>2015-10-07T07:57:05.959714Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>Slightly optimize svn_stringbuf_from_stream() to avoid allocating twice
more memory and unnecessary memcpy() when LEN_HINT is equal to final stringbuf
length.

* subversion/libsvn_subr/stream.c
  (svn_stringbuf_from_stream): Always preallocate LEN_HINT + MIN_READ_SIZE
   bytes to be able perform final read without stringbuf reallocation.  
</msg>
</logentry>
<logentry
   revision="1707164">
<author>rhuijben</author>
<date>2015-10-06T22:39:03.023235Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/multistatus.c</path>
</paths>
<msg>Expose some error messages generated by github (or any buggy server) that
are transferred as invalid xml.

In the case I encountered the xml document ends with a '\0' byte, which makes
it invalid xml... but the client already received a more specific error
message.

This changes the message I got from
[[
svn: E170013: Unable to connect to a repository at URL 'https://github.com/libgit2/libgit2/tags/v0.23.3'
svn: E175009: The XML response contains invalid XML
svn: E130003: Malformed XML: not well-formed (invalid token)
]]

to

[[
svn: E170013: Unable to connect to a repository at URL 'https://github.com/libgit2/libgit2/tags/v0.23.3'
svn: E175009: The XML response contains invalid XML
svn: E130003: Malformed XML: not well-formed (invalid token)
svn: E200042: Additional errors:
svn: E900002: This repository is hosted on a new server that doesn't support SVN yet. Please contact support if you need SVN access for this repository.
]]

* subversion/libsvn_ra_serf/multistatus.c
  (svn_ra_serf__handle_server_error): If we already recorded an error, return
    that with the xml parser errors of possible further errors.
</msg>
</logentry>
<logentry
   revision="1707034">
<author>rhuijben</author>
<date>2015-10-06T12:31:43.215312Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Describe adds and removes in the 'svn patch' reject file headers.

* subversion/libsvn_client/patch.c
  (init_patch_target): Tweak reject file header based on whether we
    are trying to add or remove the file.

* subversion/tests/cmdline/patch_tests.py
  (patch_delete_modified,
   patch_git_symlink,
   patch_like_git_symlink): Update expected rejectfile.
</msg>
</logentry>
<logentry
   revision="1706999">
<author>rhuijben</author>
<date>2015-10-06T11:28:29.179767Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_config.h</path>
</paths>
<msg>* subversion/include/svn_config.h
  (SVN_CONFIG_OPTION_NEON_DEBUG_MASK,
   SVN_CONFIG_OPTION_HTTP_AUTH_TYPES,
   SVN_CONFIG_OPTION_SSL_PKCS11_PROVIDER,
   SVN_CONFIG_OPTION_HTTP_LIBRARY,
   SVN_CONFIG_OPTION_STORE_PASSWORDS,
   SVN_CONFIG_OPTION_STORE_SSL_CLIENT_CERT_PP,
   SVN_CONFIG_OPTION_STORE_SSL_CLIENT_CERT_PP_PLAINTEXT,
   SVN_CONFIG_OPTION_MERGE_TOOL_CMD,
   SVN_CONFIG_SECTION_SASL,
   SVN_CONFIG_OPTION_USE_SASL,
   SVN_CONFIG_OPTION_MIN_SSF): Add some version information.
</msg>
</logentry>
<logentry
   revision="1706983">
<author>rhuijben</author>
<date>2015-10-06T11:04:29.973031Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_config.h</path>
</paths>
<msg>* subversion/include/svn_config.h
  (SVN_CONFIG_OPTION_NO_UNLOCK,
   SVN_CONFIG_OPTION_MIMETYPES_FILE,
   SVN_CONFIG_OPTION_PRESERVED_CF_EXTS): Add @since information.
</msg>
</logentry>
<logentry
   revision="1706980">
<author>stefan2</author>
<date>2015-10-06T10:38:38.540538Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/pack.c
  (sort_reps_range): Fix a constness mismatch compiler warning.</msg>
</logentry>
<logentry
   revision="1706979">
<author>stefan2</author>
<date>2015-10-06T10:37:50.107961Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>Fine-tune the FSFS pack reordering strategy.
This slightly reduces the random seeks during checkouts.

* subversion/libsvn_fs_fs/pack.c
  (sort_reps_range): Put fewer nodes from long chains into the "hot zone"
                     and add anything from infrequently changing nodes.</msg>
</logentry>
<logentry
   revision="1706965">
<author>julianfoad</author>
<date>2015-10-06T08:52:07.407524Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/export_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/merge_automatic_tests.py</path>
</paths>
<msg>A cosmetic tweak: add a final comma to lists of tests in a few test files
where this was not present, for consistency with all the rest.

* subversion/tests/cmdline/export_tests.py,
  subversion/tests/cmdline/merge_automatic_tests.py,
  subversion/tests/cmdline/svnadmin_tests.py
  (test_list): Add a final comma.
</msg>
</logentry>
<logentry
   revision="1706893">
<author>rhuijben</author>
<date>2015-10-05T18:15:08.702368Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Extend the 'svn patch' handling of moves to detect recorded moves that are
already applied.

* subversion/libsvn_client/patch.c
  (init_patch_target): Verify if a move can be applied before opening the
    target file. If the target is already moved to this exact location just
    apply the patch to the target.

* subversion/tests/cmdline/patch_tests.py
  (patch_git_rename,
   patch_move_and_change): Retry applying the move patch.
</msg>
</logentry>
<logentry
   revision="1706875">
<author>rhuijben</author>
<date>2015-10-05T17:16:59.333002Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Fix the interaction between moves and property changes during 'svn patch'.

Before this patch property changes would be applied to the source of the move,
which would cause an error because it is not possible to set properties on
a deleted file.

To make it easier to test this also fix move issues in the dry run mode.

* subversion/libsvn_client/patch.c
  (resolve_target_path): Allow to disable the following of local moves to
    allow tree changes on the pre-move target.
  (init_patch_target): Allow adding new nodes in place of something that is
    moved away. Detect interactions with previously recorded patches.
  (send_patch_notification): Don't notify a delete when the add was skipped.
  (install_patched_prop_targets): Apply property changes to the right target.

* subversion/tests/cmdline/patch_tests.py
  (patch_git_rename): Extend test.
  (patch_move_and_change): New test.
  (test_list): Add patch_move_and_change.
</msg>
</logentry>
<logentry
   revision="1706855">
<author>rhuijben</author>
<date>2015-10-05T15:34:49.389301Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_diff_tree.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/diff.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/diff.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/diff_editor.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/diff_local.c</path>
</paths>
<msg>Extend 'svn diff --git' to produce 'rename from' and 'rename to' headers
on the add side of the move operation from local diffs.

* subversion/include/private/svn_diff_tree.h
  (svn_diff_source_t): Extend struct. Extend documentation.

* subversion/libsvn_client/diff.c
  (diff_file_added): Handle (direct) moves of files.

* subversion/libsvn_wc/diff.h
  (svn_wc__diff_local_only_file,
   svn_wc__diff_local_only_dir): Add moved_from argument to pass on.

* subversion/libsvn_wc/diff_editor.c
  (walk_local_nodes_diff): Update caller. Calculate moved_from when
    touching a moved node.
  (svn_wc__diff_local_only_file): Set info when available.
   svn_wc__diff_local_only_dir): Set info when available. Calculate
     moved_from on children.

* subversion/libsvn_wc/diff_local.c
  (diff_status_callback): Update caller.
</msg>
</logentry>
<logentry
   revision="1706825">
<author>rhuijben</author>
<date>2015-10-05T12:25:11.512804Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Following up on r1706817, make the diff parser continue parsing other property
changes after an 'svn:mergeinfo' property.

* subversion/libsvn_diff/parse-diff.c
  (parse_next_hunk): Exit the mergeinfo hunk when we find no more mergeinfo.
    This allows finding more property changes.

* subversion/tests/cmdline/patch_tests.py
  (patch_with_mergeinfo): Remove XFail marker.
</msg>
</logentry>
<logentry
   revision="1706817">
<author>rhuijben</author>
<date>2015-10-05T12:05:00.620214Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Add XFail test on missing property changes when patching a diff with
svn:mergeinfo changes.

Currently not patching 'svn:mergeinfo' is expected, but we shouldn't
skip other property changes in the same patch.


* subversion/tests/cmdline/patch_tests.py
  (patch_with_mergeinfo): New function.
  (test_list): Add patch_with_mergeinfo.
</msg>
</logentry>
<logentry
   revision="1706812">
<author>rhuijben</author>
<date>2015-10-05T11:47:14.333374Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/patch_tests.py
  (imports): Remove unused imports.
  (patch_one_property): Apply the same patch on all platforms.
</msg>
</logentry>
<logentry
   revision="1706783">
<author>rhuijben</author>
<date>2015-10-05T10:20:41.197795Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Make the filter function of 'svn patch' actually provide the rejection file
and patched files that it promises in the documentation. Before this patch
the patched path and the rejection file were always empty, because nothing
of the patch was applied to the actual targets at this stage.

* subversion/libsvn_client/patch.c
  (patch_target_t): Remove boolean.
  (apply_one_patch): Remove patch_func handling.
  (apply_patches): Apply filtering here after the patch was applied to a
    temporary file, but before the result is installed
</msg>
</logentry>
<logentry
   revision="1706738">
<author>philip</author>
<date>2015-10-04T23:22:21.589805Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/org_apache_subversion_javahl_remote_StateReporter.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/org_apache_subversion_javahl_util_ConfigImpl_Category.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/org_apache_subversion_javahl_SVNClient.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/org_apache_subversion_javahl_remote_RemoteSession.cpp</path>
</paths>
<msg>Correct some JNIEntry method names.

[in subversion/bindings/javahl/native]

* org_apache_subversion_javahl_SVNClient.cpp
  (Java_org_apache_subversion_javahl_SVNClient_setTunnelAgent,
   Java_org_apache_subversion_javahl_SVNClient_propertySetRemote,
   Java_org_apache_subversion_javahl_SVNClient_propertySetLocal,
   Java_org_apache_subversion_javahl_SVNClient_vacuum,
   Java_org_apache_subversion_javahl_SVNClient_nativeOpenRemoteSession):
  Correct JNIEntry method names.

* org_apache_subversion_javahl_remote_RemoteSession.cpp
  (Java_org_apache_subversion_javahl_remote_RemoteSession_reparent,
   Java_org_apache_subversion_javahl_remote_RemoteSession_getSessionRelativePath,
   Java_org_apache_subversion_javahl_remote_RemoteSession_getReposRelativePath,
   Java_org_apache_subversion_javahl_remote_RemoteSession_getReposUUID,
   Java_org_apache_subversion_javahl_remote_RemoteSession_getReposRootUrl,
   Java_org_apache_subversion_javahl_remote_RemoteSession_getRevisionByTimestamp):

  Correct JNIEntry method names.

* org_apache_subversion_javahl_remote_StateReporter.cpp
  (Java_org_apache_subversion_javahl_remote_StateReporter_nativeDispose):
  Correct JNIEntry method name.

* org_apache_subversion_javahl_util_ConfigImpl_Category.cpp
  (Java_org_apache_subversion_javahl_util_ConfigImpl_00024Category_enumerate):
  Correct JNIEntry method name.
</msg>
</logentry>
<logentry
   revision="1706737">
<author>rhuijben</author>
<date>2015-10-04T22:48:34.504661Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Extend a few more svn patch tests.

* subversion/tests/cmdline/patch_tests.py
  (patch_replace_dir_with_file_and_vv,
   single_line_mismatch): Use standard patch runner to extend expectations.
</msg>
</logentry>
<logentry
   revision="1706733">
<author>rhuijben</author>
<date>2015-10-04T22:11:41.967053Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/patch_tests.py
  (patch_symlink_traversal): Following up on r1706731 fix another typo in the
    expectations.
</msg>
</logentry>
<logentry
   revision="1706731">
<author>rhuijben</author>
<date>2015-10-04T21:56:31.670966Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Following up on r1706729, tweak more notifications on test that doesn't
work on Windows.

* subversion/tests/cmdline/patch_tests.py
  (patch_symlink_traversal): Update expected results. Pass wc_dir to state
    initializer instead of using deep paths.
</msg>
</logentry>
<logentry
   revision="1706729">
<author>rhuijben</author>
<date>2015-10-04T21:30:49.083235Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/notify.c</path>
</paths>
<msg>Following up on r1706693, tweak notifications on obstructed targets during
'svn patch'.

* subversion/svn/notify.c
  (notify_body): Add specialized notification for unversioned obstructions
    during skip.

* subversion/tests/cmdline/patch_tests.py
  (patch_symlink_traversal): Tweak skip kind. Don't produce unnecessary
    exact expected output.
</msg>
</logentry>
<logentry
   revision="1706703">
<author>ivan</author>
<date>2015-10-04T17:15:07.191385Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/opt.c</path>
</paths>
<msg>Refactor code to avoid goto statement and use consistent error handling.

* subversion/libsvn_subr/opt.c
  (print_generic_help_body): Extract from svn_opt_subcommand_help3().
  (svn_opt_print_generic_help2): Use print_generic_help_body() and handle
   errors if any.
</msg>
</logentry>
<logentry
   revision="1706693">
<author>rhuijben</author>
<date>2015-10-04T15:52:18.913258Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Make the 'svn patch' notification use 'U' when a patch has been applied,
instead of forcing a 'G' status whenever there were local changes before
applying the patch. Also improve obstruction notifications a bit.

This shows the result of the patch instead of just what running status
might have shown if you didn't apply the patch. (The patch might have
removed the modification).

This patch doesn't affect the patch algorithms.

* subversion/libsvn_client/patch.c
  (patch_target_t): Track skip caused by obstruction. Drop local mods info.
  (resolve_target_path): Update initialization.
  (send_patch_notification): Update notifications.
  (install_patched_target): Handle invalid type obstructions.

* subversion/tests/cmdline/patch_tests.py
  (patch_no_svn_eol_style,
   patch_with_svn_eol_style_uncommitted,
   patch_reverse_revert): Tweak expected output.
  (patch_apply_no_fuz): Use standard patch runner. Tweak expected output.
  (patch_lacking_trailing_eol_on_context,
   patch_binary_file) Tweak expected output.
  (patch_final_eol): Update expected result. Add some comments.
  (patch_add_remove_executable,
   patch_git_symlink,
   patch_like_git_symlink,
   patch_add_one_line): Update expected result.
</msg>
</logentry>
<logentry
   revision="1706687">
<author>rhuijben</author>
<date>2015-10-04T14:17:46.046900Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Extend the 'svn patch' logic to more accurately detect patches that are already
applied in the very specific case of a patch that adds something at the start
or end of the file.

* subversion/libsvn_client/patch.c
  (get_hunk_info): Extend scope of some easy to obtain values. Check for
    corner case.

* subversion/tests/cmdline/patch_tests.py
  (patch): Extend test with retry.
  (patch_same_twice): Update expected result.
  (patch_reverse_revert): Extend with retries.
  (patch_empty_file): Use standard test runner.
  (patch_add_one_line): New test.
  (test_list): Add test.
</msg>
</logentry>
<logentry
   revision="1706679">
<author>stefan2</author>
<date>2015-10-04T13:49:27.655177Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Eliminate the need to re-parse a directory that just got committed in FSFS.

After writing the new directory representation, add it to the revision data
cache as well.  However, mark it as "stale" until the commit actually went
through (new HEAD has been set).  The "staleness" checks themselves have
already been added in 1.9.

* subversion/libsvn_fs_fs/temp_serializer.h
  (svn_fs_fs__reset_txn_filesize): Declare a new cache data modifier that
                                   resets the "stale" indicator.

* subversion/libsvn_fs_fs/temp_serializer.c
  (svn_fs_fs__reset_txn_filesize): Implement.

* subversion/libsvn_fs_fs/transaction.c
  (write_final_rev): Populate the cache with the future in-revision dir
                     contents and fill the list of cache entries.
  (promote_cached_directories): Post-commit processing making the new dir
                                cache entries actually available.
  (commit_body): Provide the directory IDs container and invoke the new
                 post-commit processing code for it.</msg>
</logentry>
<logentry
   revision="1706676">
<author>stefan2</author>
<date>2015-10-04T13:30:18.618462Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Avoid an unnecessary directory representation parser run during the early
stages of a FSFS txn.

* subversion/libsvn_fs_fs/transaction.c
  (svn_fs_fs__set_entry): After storing the original dir content in the txn
                          as the starting point, write it to the in-txn dir
                          cache as well.</msg>
</logentry>
<logentry
   revision="1706675">
<author>stefan2</author>
<date>2015-10-04T13:22:44.442689Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Avoid directory cache misses in FSFS in early stages of a transaction.

* subversion/libsvn_fs_fs/cached_data.c
  (locate_dir_cache): As long as the dir representation has not been
                      touched, we will only find it in the committed
                      dir cache.</msg>
</logentry>
<logentry
   revision="1706653">
<author>ivan</author>
<date>2015-10-04T08:24:07.674725Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/upgrade.c</path>
</paths>
<msg>Another simplification of upgrade externals code: svn_client_propget5() has
API promise to return absolute paths hence we can avoid
svn_dirent_get_absolute() call.

* subversion/libsvn_client/upgrade.c
  (upgrade_external_item): Remove externals_parent since it had the same
   value as externals_parent_abspath.
  (upgrade_externals_from_properties): Do not convert paths returned from
   svn_client_propget5() to absolute, since they are already absolute path.
   Add assertion to make sure that it always true.
</msg>
</logentry>
<logentry
   revision="1706652">
<author>ivan</author>
<date>2015-10-04T07:53:30.909927Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/upgrade.c</path>
</paths>
<msg>Refactor WC upgrade code a bit to avoid goto statement and make error
handling more clear. Slighlty improve memory usage by using ITERPOOL in
iterations instead of SCRATCH_POOL.

* subversion/libsvn_client/upgrade.c
  (upgrade_external_item): New helper for upgrade_externals_from_properties().
   Extracted from upgrade_external_item().
  (upgrade_externals_from_properties): Use upgrade_external_item() helper.
</msg>
</logentry>
<logentry
   revision="1706639">
<author>rhuijben</author>
<date>2015-10-03T22:08:53.867099Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>* subversion/libsvn_client/patch.c
  (apply_one_patch): Following up on r1706623 remove variable that is only set.
</msg>
</logentry>
<logentry
   revision="1706638">
<author>rhuijben</author>
<date>2015-10-03T21:45:10.724929Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/config.c</path>
</paths>
<msg>Help the compiler and readability a bit by using apr_hash_this_val() in
the config parser.

* subversion/libsvn_subr/config.c
  (for_each_option,
   svn_config_enumerate_sections2,
   svn_config_enumerate,
   svn_config_enumerate2): Use apr_hash_this_val() instead of apr_hash_this().
</msg>
</logentry>
<logentry
   revision="1706634">
<author>rhuijben</author>
<date>2015-10-03T21:20:44.650280Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_client/client-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/merge.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_base/tree.c</path>
</paths>
<msg>Use the typesafe svn_sort__array() helper instead of qsort() in a few places.

* subversion/libsvn_client/merge.c
  (get_mergeinfo_paths,
   combine_range_with_segments): Use svn_sort__array().

* subversion/libsvn_fs_base/tree.c
  (includes): Add svn_sorts_private.h.
  (verify_locks): Use svn_sort__array().

* subversion/mod_dav_svn/repos.c
  (negotiate_encoding_prefs): Use svn_sort__array(). Remove const from local
    variable.

* subversion/tests/libsvn_client/client-test.c
  (includes): Add svn_sorts_private.h.
  (test_remote_only_status): Use svn_sort__array().
</msg>
</logentry>
<logentry
   revision="1706626">
<author>rhuijben</author>
<date>2015-10-03T20:51:39.984362Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Following up on r1706598, resolve testfailure on systems with a '\n' native
end of line.

* subversion/tests/cmdline/patch_tests.py
  (patch_with_properties): Write patch file as binary to have the same test
    results on Windows as on other platforms. Update expected result.
</msg>
</logentry>
<logentry
   revision="1706625">
<author>rhuijben</author>
<date>2015-10-03T20:45:13.351080Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/diff.c</path>
</paths>
<msg>* subversion/libsvn_client/diff.c
  (transform_link_to_git): Use safer type for formatting.
</msg>
</logentry>
<logentry
   revision="1706623">
<author>rhuijben</author>
<date>2015-10-03T20:28:33.474255Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Calculate whether a patch should add or delete nodes based on the patch and the
working copy state instead of the size of the resulting patchfile.

* subversion/libsvn_client/patch.c
  (init_patch_target): Check if files must be added from unified diff hunks
    and property change types.
  (send_patch_notification): Provide property notifications in lexical order.
  (apply_one_patch): Apply not-adding, not deleting before property changes.
    Reject property changes when there is no node to apply them to.

* subversion/tests/cmdline/patch_test.py
  (patch_with_properties): Update expected result.</msg>
</logentry>
<logentry
   revision="1706621">
<author>rhuijben</author>
<date>2015-10-03T20:15:09.274991Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>* subversion/libsvn_client/patch.c
  (init_prop_target): Add target argument to avoid querying wc_db on non
    existing targets.
  (init_patch_target): Update caller.
</msg>
</logentry>
<logentry
   revision="1706619">
<author>stefan2</author>
<date>2015-10-03T19:31:01.020384Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Disable representation sharing for directories in FSFS.

Due to the way directories get constructed, representation sharing does not
work for them, so we alredy don't store entries for them in rep-cache.db. 
However, we shall also disable the rep-cache lookup for them and finally
the SHA1 calculation.

* subversion/libsvn_fs_fs/transaction.c
  (get_shared_rep): Deal with representations that don't have a SHA1.
                    Simply return "not found".
  (digests_final): SHA1 is now optional.
  (write_container_baton): Document that SHA1 calculation is now optional.
  (write_container_handler): Only update SHA1, we enabled.
  (write_container_rep,
   write_container_delta_rep): Only enable SHA1 caclulations for non-dir reps.</msg>
</logentry>
<logentry
   revision="1706617">
<author>stefan2</author>
<date>2015-10-03T18:40:20.392840Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Speed up transaction processing for large directories.

Each directory gets serialized twice: when populating the transaction and
when creating the final in-revision representation.  For dirs with 1000s
of entries, this alone saves roughly 25% CPU load.

* subversion/libsvn_fs_fs/transaction.c
  (unparse_dir_entry): "Manually" construct the dir-entry representation
                       in one go. </msg>
</logentry>
<logentry
   revision="1706616">
<author>stefan2</author>
<date>2015-10-03T18:18:00.877498Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnfsfs_tests.py</path>
</paths>
<msg>Follow-up to r1706615: Forgot to commit the updated test.

* subversion/tests/cmdline/svnfsfs_tests.py
  (load_index_sharded): Update the test to always produce the desired
                        input data ordering.</msg>
</logentry>
<logentry
   revision="1706615">
<author>stefan2</author>
<date>2015-10-03T18:12:53.184937Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>Tune the FSFS format 7 pack ordering heuristics.

Noderevs that are not the latest for the respective path will most likely
not be needed when exporting file / directory contents for HEAD or any
future revisions.  Since these noderevs would be dead weight amongst the
reps, exclude those noderevs and put them at the end of the pack file.

Tests have been updated in a follow-up commit.

* subversion/libsvn_fs_fs/pack.c
  (path_order_t): Add a flag to indicate HEAD nodes.
  (classify_nodes): New function setting that flag.
  (sort_reps): Invoke the new function.
  (copy_reps_from_temp): Delay the placement of non-HEAD noderevs.
</msg>
</logentry>
<logentry
   revision="1706612">
<author>stefan2</author>
<date>2015-10-03T17:27:22.500083Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>Follow-up to r1705646: Remove remnants of the special treatment
of directory representations during FSFS format 7 pack.

* subversion/libsvn_fs_fs/pack.c
  (path_order_t): Remove obsolete directory indicator flag.
  (copy_node_to_temp): No need to set it anymore.
  (compare_path_order): No longer separate files from directories. 
</msg>
</logentry>
<logentry
   revision="1706609">
<author>rhuijben</author>
<date>2015-10-03T16:28:31.557480Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>* subversion/libsvn_client/patch.c
  (apply_one_patch): Following up on r1706598, add brackets.
</msg>
</logentry>
<logentry
   revision="1706600">
<author>rhuijben</author>
<date>2015-10-03T15:54:44.471384Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Properly create 'svn patch' reject files with a unique name, instead of
blindly overwriting pre-existing .svnpatch.rej files. Just like how we
create other conflict markers.

* subversion/libsvn_client/patch.c
  (patch_target_t): Use a stream for rejection info.
  (init_patch_target): Update creation.
  (reject_hunk): Use stream helpers for writing.
  (write_out_rejected_hunks): Create final file using
    svn_io_open_uniquely_named(), to ensure a unique name.

* subversion/tests/cmdline/patch_tests.py
  (patch_closest): Remove reject file before creating a new one.
</msg>
</logentry>
<logentry
   revision="1706599">
<author>rhuijben</author>
<date>2015-10-03T15:14:32.418577Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Apply a minor theoretical consistency fix. (Property operations are ram-&gt;ram)

* subversion/libsvn_client/patch.c
  (apply_one_patch): On error copying the property, only skip the property.
</msg>
</logentry>
<logentry
   revision="1706598">
<author>rhuijben</author>
<date>2015-10-03T15:10:45.828818Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>In 'svn patch' only handle property changes as a file addition if all the
property changes on the node are property additions.

When there is a combination of adds and modifications we shouldn't just
create a 0 byte file.

* subversion/libsvn_client/patch.c
  (apply_one_patch): Only handle a set of property adds as a trigger to
    potentially mark a file as added.

* subversion/tests/cmdline/patch_tests.py
  (patch_with_properties): Extend test.
</msg>
</logentry>
<logentry
   revision="1706565">
<author>ivan</author>
<date>2015-10-03T12:41:49.303714Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/diff_file.c</path>
</paths>
<msg>Make code slightly more safe.

* subversion/libsvn_diff/diff_file.c
  (svn_diff_file_options_parse): Use APR array instead of apr_palloc() and
   memcpy().
</msg>
</logentry>
<logentry
   revision="1706493">
<author>rhuijben</author>
<date>2015-10-02T21:51:48.307753Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Following up on r1706217, revert a change in pool in which some intermediate
values are stored. I hope this fixes the breakage on the openbsd buildbot.

* subversion/libsvn_client/patch.c
  (create_missing_parents): Store variable that is used in next iteration in
    scratch_pool.
</msg>
</logentry>
<logentry
   revision="1706482">
<author>rhuijben</author>
<date>2015-10-02T19:57:04.928765Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/diff.c</path>
</paths>
<msg>* subversion/libsvn_client/diff.c
  (diff_content_changed): Remove long handled ### comment (added in 2002).
</msg>
</logentry>
<logentry
   revision="1706461">
<author>rhuijben</author>
<date>2015-10-02T18:34:10.825800Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Following up on r1706446 and r1706460 extend test a bit more to truely
excercise the index lines of git patches for symlink changes.

* subversion/tests/cmdline/patch_tests.py
  (patch_symlink_madness): Rename to...
  (patch_symlink_changes): ... this and extend a bit. Remove some not that
    relevant scenarios I used while writing the test.
</msg>
</logentry>
<logentry
   revision="1706460">
<author>rhuijben</author>
<date>2015-10-02T18:20:55.510852Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Following up on r1706446, improve calculation on when a symlink was
transformed into a file.

* subversion/libsvn_client/patch.c
  (apply_one_patch): Don't assume that the presence of a SVN_PROP_SPECIAL
    hunk implies that the resulting node is a symlink.
  (install_patched_target): Just check for is_special, to allow changing type.

* subversion/tests/cmdline/patch_tests.py
  (patch_symlink_madness): New test.
  (test_list): Add patch_symlink_madness.
</msg>
</logentry>
<logentry
   revision="1706446">
<author>rhuijben</author>
<date>2015-10-02T16:58:19.071363Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Make 'svn patch' capable of handling git-like symlink changes.

* subversion/libsvn_client/patch.c
  (patch_target_t): Add boolean.
  (readline_symlink_git): New function.
  (write_symlink): Remove function. Assume intermediate file is always text.
  (contradictory_executability): Remove function. Fold in single caller.
  (init_patch_target): Detect when to use git like symlinks. Create
    intermediate always as normal file to simplify processing. Detect when to
    set svn:special. Simplify svn:executable handling.
  (apply_one_patch): Create svn:special hunk if necessary. Always close patch
    file.

* subversion/tests/cmdline/patch_tests.py
  (patch_git_symlink): Update expected results. Assume links are handled.
  (patch_like_git_symlink): New test. Based on patch_git_symlink but with mode
    specifying a regular file.
</msg>
</logentry>
<logentry
   revision="1706437">
<author>kotkov</author>
<date>2015-10-02T15:46:16.897765Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Following up on r1706428, extend the new test with another check.

* subversion/tests/cmdline/svnadmin_tests.py
  (dump_no_op_change): Test both svn log for the revision with a no-op
   change (r2), and for path with a no-op change (/bar) in its history.
</msg>
</logentry>
<logentry
   revision="1706432">
<author>kotkov</author>
<date>2015-10-02T15:39:01.012314Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>Following up on r1700215, unbreak the test runner's --bin option.

For instance, win-tests.py --bin=some\path used to error out like this:

  Traceback (most recent call last):
    File "win-tests.py", line 1025, in &lt;module&gt;
      failed = th.run(tests_to_run)
    File "C:\Projects\Subversion\trunk\build\run_tests.py", line 319, in run
      self._init_py_tests(list(py_basedir)[0])
    File "C:\Projects\Subversion\trunk\build\run_tests.py", line 219,
        in _init_py_tests
      cmdline.append('--bin=%s', self.opts.svn_bin)
  TypeError: append() takes exactly one argument (2 given)

* build/run_tests.py
  (TestHarness._init_py_tests): Use % operator to format the --bin path.
</msg>
</logentry>
<logentry
   revision="1706428">
<author>kotkov</author>
<date>2015-10-02T15:04:16.613500Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Add a failing test for issue 4598: No-op changes no longer dumped by
'svnadmin dump' in 1.9.

* subversion/tests/cmdline/svnadmin_tests.py
  (dump_no_op_change): New test, marked as XFail().
  (test_list): Reference new test.
</msg>
</logentry>
<logentry
   revision="1706415">
<author>rhuijben</author>
<date>2015-10-02T14:12:04.385748Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Even on platforms that don't have native symlink support, use the proper
symlink functions to write symlinks.

This exposed a bug in the patch_symlink_add test where a symlink got an
extra newline attached.

* subversion/libsvn_client/patch.c
  (resolve_target_path): Handle the local representation of symlinks on
    platforms that we don't support real symlinks on.

* subversion/tests/cmdline/patch_tests.py
  (patch_add_symlink): Our internal symlink format doesn't have an EOL.
</msg>
</logentry>
<logentry
   revision="1706403">
<author>rhuijben</author>
<date>2015-10-02T13:17:52.925038Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/patch_tests.py
  (patch_add_symlink): Fix diff format.
</msg>
</logentry>
<logentry
   revision="1706401">
<author>rhuijben</author>
<date>2015-10-02T13:15:43.327879Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/patch_tests.py
  (patch_add_symlink): Tweak test to also work on platforms that don't support
    symlinks. Extend test.
</msg>
</logentry>
<logentry
   revision="1706392">
<author>rhuijben</author>
<date>2015-10-02T12:55:26.232495Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>In the 'svn patch' tests: Create tempfiles using a standard sandbox function
instead of a local version. Pass local path if possible.

There should be no interesting behavior changes.

* subversion/tests/cmdline/patch_tests.py
  (*): Replace all calls to make_patch_path() with calls to.
       sbox.get_tempname('my.patch'). Make paths absolute before
       using chdir if necessary. Remove unneeded abspath calls.
</msg>
</logentry>
<logentry
   revision="1706384">
<author>rhuijben</author>
<date>2015-10-02T12:26:27.371118Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/diff.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/diff_tests.py</path>
</paths>
<msg>When parsing diffs note a possible file mode on git index lines to allow
seeing if we are processing git symlinks or Subversion symlinks in all
scenarios.

Extend our diff code to produce proper index lines when we are diffing
symlinks.

* subversion/libsvn_client/diff.c
  (maybe_print_mode_change): Print index line when there is no mode change and
    shas are available.
  (print_git_diff_header): Pass shas.
  (display_prop_diffs): Update caller.
  (transform_link_to_git): Calculate sha over the link when transformed.
  (diff_content_changed): Update caller.

* subversion/libsvn_diff/parse-diff.c
  (parse_next_hunk): Minor consistency fix. Ignore '\' lines outside hunks.
  (git_index): New function.
  (transitions): Add parser transitions to note index line.
  (svn_diff_parse_next_patch): Remove "index " hacks.

* subversion/tests/cmdline/diff_tests.py
  (diff_symlinks): Update expected result.
</msg>
</logentry>
<logentry
   revision="1706375">
<author>kotkov</author>
<date>2015-10-02T11:48:31.563379Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/win-tests.py</path>
</paths>
<msg>Following up on r1700215, unbreak the test runner's compabitility mode.

For instance, make check SERVER_MINOR_VERSION=8 used to error out
like this:

  Traceback (most recent call last):
    File "./build/run_tests.py", line 789, in &lt;module&gt;
      main()
    File "./build/run_tests.py", line 782, in main
      failed = th.run(args[2:])
    File "./build/run_tests.py", line 322, in run
      self._init_c_tests()
    File "./build/run_tests.py", line 196, in _init_c_tests
      self.opts.server_minor_version)
  TypeError: cannot concatenate 'str' and 'int' objects

* build/run_tests.py
  (TestHarness._init_c_tests): Use %d format for the minor version value,
   as we already do in _init_py_tests().

* win-tests.py:
  (): Convert the minor version value to integer, as we'll then be passing
   it to TestHarness.__init__() that expects an int.
</msg>
</logentry>
<logentry
   revision="1706373">
<author>rhuijben</author>
<date>2015-10-02T11:20:42.362808Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/diff_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/diff_tests.py
  (diff_symlinks): Following up on r1706372, use symlink of different size
    than 'iota' to properly detect changes during 'svn diff'.
</msg>
</logentry>
<logentry
   revision="1706372">
<author>rhuijben</author>
<date>2015-10-02T11:03:03.909872Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/diff_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/diff.c</path>
</paths>
<msg>When running 'svn diff --git' write diffs of symlinks in the same format as
git and 'hg diff -g'.

* subversion/libsvn_client/diff.c
  (EXEC_BIT,
   NO_EXEC_BIT): Replace these strings...
  (exec_mode,
   noexec_mode,
   kind_file_mode,
   kind_symlink_mode): ... with these integers.
  (print_git_diff_header_added,
   print_git_diff_header_deleted,
   maybe_print_mode_change): Calculate mode based on exec+symlink.
  (print_git_diff_header): Use property hash as argument.
  (display_prop_diffs): Update caller.
  (transform_link_to_git): New function.
  (diff_content_changed): Transform links if using git format.

* subversion/tests/cmdline/diff_tests.py
  (diff_symlinks): New test.
  (test_list): Add test.
</msg>
</logentry>
<logentry
   revision="1706366">
<author>rhuijben</author>
<date>2015-10-02T09:55:00.481273Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/diff_file.c</path>
</paths>
<msg>Improve cancel-ability of unified diff output.

Before this patch it was not possible to cancel the output of a file addition
or removal during 'svn diff' within the file on Windows.

* subversion/libsvn_client/diff.c
  (svn_diff__file_output_baton_t): Add cancel function.
  (output_unified_diff_range): Support cancelling.
  (output_unified_flush_hunk,
   output_unified_diff_modified): Update caller.
  (svn_diff_file_output_unified4): Set cancel function in baton.
</msg>
</logentry>
<logentry
   revision="1706324">
<author>kotkov</author>
<date>2015-10-01T21:56:26.000921Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/multistatus.c</path>
</paths>
<msg>Fix a crash in libsvn_ra_serf's multistatus parser.

One way to reproduce it is by trying to do a -g reverse blame against a
Subversion 1.8 server:

  svn blame -g -r 1706092:1706091 https://svn.apache.org/repos/asf/subversion/trunk/README

When rolling responses through the transition table, the multistatus parser
gathers attributes — e.g., &lt;D:href&gt; or &lt;D:status&gt; values.  They could then
be accessed by the parser upon closing a tag.  There are situations, such as
in the example above, when we don't gather these attributes, because there
actually is nothing to gather:

  &lt;?xml version="1.0" encoding="utf-8"?&gt;
  &lt;D:error xmlns:D="DAV:" xmlns:C="svn:"&gt;
    &lt;C:error/&gt;
  &lt;/D:error&gt;

Collecting attributes is done in a lazy fashion, and the corresponding hash
table can be null if nothing was collected.  If we try to access it a close
callback, we crash.  Fix this by using null-aware svn_hash__get_cstring()
function where necessary.

Found by: TortoiseSVN crash dump

* subversion/libsvn_ra_serf/multistatus.c
  (multistatus_closed): Use svn_hash__get_cstring() to access the attribute
   table when it can be null, i.e., within the MS_RESPONSE, MS_PROPSTAT
   and D_ERROR state handling.
</msg>
</logentry>
<logentry
   revision="1706323">
<author>kotkov</author>
<date>2015-10-01T21:47:42.776546Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/multistatus.c</path>
</paths>
<msg>Remove a bit of unneeded code from libsvn_ra_serf's multistatus parser.

Responses on request failures consist of a single &lt;D:error&gt; element and do
not contain a response description (&lt;D:responsedescription&gt;).  Hence, there
is no need to check if we have one when closing the &lt;D:error&gt; tag in the
transitional parser.

An example of such response:

  &lt;?xml version="1.0" encoding="utf-8"?&gt;
  &lt;D:error [...]&gt;
    &lt;C:error/&gt;
    &lt;m:human-readable errcode="160013"&gt;
      File not found: transaction '1-1', path '/A'
    &lt;/m:human-readable&gt;
  &lt;/D:error&gt;

* subversion/libsvn_ra_serf/multistatus.c
  (multistatus_closed): Remove the unnecessary else clause within the
   D_ERROR state handling.
</msg>
</logentry>
<logentry
   revision="1706243">
<author>rhuijben</author>
<date>2015-10-01T13:28:13.394064Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_diff.h</path>
</paths>
<msg>* subversion/include/svn_diff.h
  (svn_patch_t): Fix copy&amp;pasto.

Found by: danielsh
</msg>
</logentry>
<logentry
   revision="1706241">
<author>rhuijben</author>
<date>2015-10-01T13:23:01.323744Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db_pristine.c</path>
</paths>
<msg>* subversion/libsvn_wc/wc_db_pristine.c
  (pristine_cleanup_wcroot): Add iterpool to avoid unneeded memory growth.

Found by: jcorvel
</msg>
</logentry>
<logentry
   revision="1706240">
<author>rhuijben</author>
<date>2015-10-01T13:18:37.619229Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_diff/parse-diff-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_diff.h</path>
</paths>
<msg>In the diff parser: parse the symlink status from the mode flags.

* subversion/include/svn_diff.h
  (svn_patch_t): Rename executable bits to _bits and add
    symlink bit variables.

* subversion/libsvn_client/patch.c
  (contradictory_executability): Update caller.
  (init_patch_target): Don't call contradictory_executability when no
    executable change is described in the mode change. Update caller.
  (apply_one_patch): Update caller.

* subversion/libsvn_diff/parse-diff.c
  (parse_bits_into_executability): Rename to...
  (parse_git_mode_bits): ... this and also parse symlink info.
  (git_old_mode,
   git_new_mode,
   git_new_file,
   git_deleted_file): Update caller.
  (svn_diff_parse_next_patch): Update initialization. Reverse new bits
    when using a reverse diff.

* subversion/tests/libsvn_diff/parse-diff-test.c
  (test_parse_git_diff,
   test_parse_git_tree_and_text_diff): Update caller. Add assertions.
</msg>
</logentry>
<logentry
   revision="1706222">
<author>rhuijben</author>
<date>2015-10-01T12:33:17.094935Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>* subversion/libsvn_client/patch.c
  (apply_patches): Following up on r1706221, revert accidentally left hunk.
</msg>
</logentry>
<logentry
   revision="1706221">
<author>rhuijben</author>
<date>2015-10-01T12:30:01.042403Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Properly handle rejections in patches that describe an explicit file delete.

* subversion/libsvn_client/patch.c
  (apply_one_patch): When a delete doesn't match, don't handle it as a delete.
  (apply_patches): Accidental change. Reverted in r1706222.

* subversion/tests/cmdline/patch_tests.py
  (patch_git_symlink): Enable repeat run. Expect reject file.
</msg>
</logentry>
<logentry
   revision="1706217">
<author>rhuijben</author>
<date>2015-10-01T11:41:39.509246Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Record the patch dry run information in a way that even patches that replace
files can give acurate results.

* subversion/libsvn_client/patch.c
  (patch_target_info_t): Add boolean for adds.
  (target_is_added,
   target_is_deleted): New functions.
  (resolve_target_path): Handle self-deleted as not existing.
  (init_patch_target,
   apply_one_patch): Pass info.
  (create_missing_parents): Use target info instead of hashtable.
    Move cancel function up a bit.
  (install_patched_target): Pass info instead of hash.
  (apply_patches): Record info a bit later to allow processing just
    earlier items.

* subversion/tests/cmdline/patch_tests.py
  (patch_deletes_prop): Enable dry-run.
  (patch_git_symlink): New function.
  (test_list): Add patch_git_symlink.
</msg>
</logentry>
<logentry
   revision="1706213">
<author>rhuijben</author>
<date>2015-10-01T10:38:37.556649Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Following up on r1705080, fix a few more final-eol edge cases where different
read operations reported EOF at different times, resulting in content
mismatches.

* subversion/libsvn_client/patch.c
  (readline_prop,
   readline_symlink): Report EOF after the last line, not at the last line.

* subversion/libsvn_diff/parse-diff.c
  (hunk_readline_original_or_modified): Always report EOF after the last line,
    not only in final-eol mode.
</msg>
</logentry>
<logentry
   revision="1706139">
<author>rhuijben</author>
<date>2015-09-30T19:33:07.609422Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>* subversion/libsvn_client/patch.c
  (init_patch_target): Following up on r1706078, tweek comment. These
    duplicated hunks were reported separately in case the patch was
    already applied before this behavior change.
</msg>
</logentry>
<logentry
   revision="1706127">
<author>rhuijben</author>
<date>2015-09-30T18:54:10.113735Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/diff.c</path>
</paths>
<msg>Rename some pool arguments in the diff generator. No functional
changes.

* subversion/libsvn_client/diff.c
  (diff_label): Rename pool to result_pool.
  (print_git_diff_header_added,
   print_git_diff_header_deleted,
   print_git_diff_header_copied,
   print_git_diff_header_renamed,
   print_git_diff_header_modified): Rename result_pool to scratch_pool, as there
     is nothing result related here.
</msg>
</logentry>
<logentry
   revision="1706091">
<author>rhuijben</author>
<date>2015-09-30T17:22:35.378052Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Use the existing check for modifications in the status walker instead of
a separate later step during 'svn patch'.

* subversion/libsvn_client/patch.c
  (resolve_target_path): Check for modifications here.
  (init_patch_target): Instead of doing it with an expensive check here.
</msg>
</logentry>
<logentry
   revision="1706085">
<author>rhuijben</author>
<date>2015-09-30T17:03:04.121618Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/patch_tests.py
  (patch_add_remove_executable): Extend second version of file a bit
    to make it easier to recognize in the buildbot log.
</msg>
</logentry>
<logentry
   revision="1706078">
<author>rhuijben</author>
<date>2015-09-30T16:45:53.645067Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>In the 'svn patch' processing only add 'svn:executable' patch hunks if there
weren't any in the original patch.

This fixes duplicated notifications when patches that contain both mode
changes and property changes are applied for a second time.

* subversion/libsvn_client/patch.c
  (apply_one_patch): Don't add svn:executable property patches if there are
    already patches for it. We already detected mismatches, so this just
    avoids duplicated work.
</msg>
</logentry>
<logentry
   revision="1706055">
<author>rhuijben</author>
<date>2015-09-30T15:22:51.371618Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Following up on r1706052, add the regression test written for this
change.

* subversion/tests/cmdline/patch_tests.py
  (patch_add_remove_executable): Enable the repeat steps that used to be
    skipped and extend with reverse steps.
</msg>
</logentry>
<logentry
   revision="1706052">
<author>rhuijben</author>
<date>2015-09-30T15:12:44.094830Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Following up on r1704632, r1705692 and r1706049 make svn patch properly
detect that a binary file patch has already been applied. This matches
the behavior of unified diff patches.

* subversion/libsvn_client/patch.c
  (apply_one_patch): If not equal to the original version, compare with
    the final version.
</msg>
</logentry>
<logentry
   revision="1706049">
<author>rhuijben</author>
<date>2015-09-30T14:49:25.493690Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Make it possible to possible to apply git style mode changes and binary file
patches at the same time.

The patch to parse-diff.c was provided by danielsh.

* subversion/libsvn_diff/parse-diff.c
  (transitions): Add transition to combine patch types.

* subversion/tests/cmdline/patch_tests.py
  (patch_add_remove_executable): New testcase for this (and another) issue.
</msg>
</logentry>
<logentry
   revision="1706041">
<author>rhuijben</author>
<date>2015-09-30T14:25:02.423112Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/diff.c</path>
</paths>
<msg>Following up on r1705391 make 'svn diff --git' produce proper mode headers
to allow these patches to be applied by 'svn patch' without parse failures.

I think 'svn patch' should somehow allow old svn produced patches to be
applied with or without this fix; probably by loosening the consistency
test a bit.

* subversion/libsvn_client/diff.c
  (EXEC_BIT,
   NOEXEC_BIT): New defines.
  (print_git_diff_header_added,
   print_git_diff_header_deleted): Choose mode depending on executable bit.
  (maybe_print_mode_change): New function.
  (print_git_diff_header): Add exec bit arguments and use these to produce
    mode dynamically.
  (display_prop_diffs,
   diff_props_changed): Use left/right props arguments as all callers already
    have these. Update caller.
  (diff_content_changed): Use property hashes as argument instead of only
    mimetype. Move parse code from all callers to function itself. Update
    caller.
  (diff_file_changed,
   diff_file_added,
   diff_file_deleted,
   diff_dir_changed,
   diff_dir_added,
   diff_dir_deleted): Update caller.
</msg>
</logentry>
<logentry
   revision="1706020">
<author>rhuijben</author>
<date>2015-09-30T13:01:28.402349Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Consolidate the code that decides to create a new file in 'svn patch' in one
location to fix some cases where a patch couldn't be re-applied. This fix
also fixes some notifications where non changes were reported as changes.

* subversion/libsvn_client/patch.c
  (patch_target_t): Remove replaced boolean. Just use added.
  (init_patch_target): Don't set properties as changed until something is
    applied.
  (send_patch_notification): Simplify check.
  (apply_one_patch): Create files for property only changes if necessary.
  (install_patched_prop_targets): Don't create files here. Let caller handle
    that in an earlier stage.

* subversion/tests/cmdline/patch_tests.py
  (patch_adds_executability_nocontents): Expect mer'g'ed output when already
    applied.
  (patch_empty_vs_delete): Extend test.
</msg>
</logentry>
<logentry
   revision="1706005">
<author>rhuijben</author>
<date>2015-09-30T11:35:04.901114Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Don't create new files in 'svn patch' when a (git style) diff describes that
an existing target should only be modified.

* subversion/libsvn_client/patch.c
  (apply_one_patch,
   install_patched_prop_targets): Stop creating files for explicit
     modifications.

* subversion/tests/cmdline/patch_tests.py
  (patch_adds_executability_nocontents2): Remove XFail. Fix expectations.
  (patch_empty_vs_delete): Extend test.
</msg>
</logentry>
<logentry
   revision="1705979">
<author>ivan</author>
<date>2015-09-30T08:22:51.122221Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Fix potential unbounded memory usage in patch parser.

* subversion/libsvn_diff/parse-diff.c
  (hunk_readline_original_or_modified): Add LAST_POOL and use for allocations
   in loop body. Clear LAST_POOL on every iteration. It's not ITERPOOL because
   we use data allocated in LAST_POOL out of the loop body.
</msg>
</logentry>
<logentry
   revision="1705972">
<author>ivan</author>
<date>2015-09-30T07:07:25.657305Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/libsvn_subr/bit-array-test.c</path>
</paths>
<msg>Resolve signed/unsigned mismatch compilation warnings in bit-array-test.

* subversion/tests/libsvn_subr/bit-array-test.c
  (test_get_set, test_sparse): Use explicit test condition instead of
   comparing to 'i % 2' and '1-(i % 2)'.
</msg>
</logentry>
<logentry
   revision="1705874">
<author>rhuijben</author>
<date>2015-09-29T15:05:06.979295Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/patch_tests.py
  (patch_remove_empty_dirs): Tweak status values instead of replacing them
    via .add().
</msg>
</logentry>
<logentry
   revision="1705872">
<author>rhuijben</author>
<date>2015-09-29T14:58:43.306279Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Make 'svn patch' stop notifying that a node is deleted, when it was already
deleted before invoking the patch. This might just be an ordinary case of the
patch was already applied.

* subversion/libsvn_client/patch.c
  (send_patch_notification): Update notify type when the target was already
    deleted pre-patch.
  (install_patched_target): Pass cancel callbacks.

* subversion/tests/cmdline/patch_tests.py
  (patch_empty_vs_delete): Expect these patches are also repeatable with the
    usual notifications.
</msg>
</logentry>
<logentry
   revision="1705869">
<author>rhuijben</author>
<date>2015-09-29T14:42:10.339074Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Following up on r1705857, fix some edge cases on empty file diffs that
made applying the same patch again skip the target instead of noticing
that the patch was already applied.

* subversion/libsvn_client/patch.c
  (patch_target_t): Track operation a bit longer.
  (init_patch_target): Initialize operation. Only an executable change
    is a property change.
  (get_hunk_info): Properly handle the true empty file case instead of
    only deletes.
  (apply_one_patch): Remove doubled ';'. Don't handle every empty file
    in the same way.

* subversion/tests/cmdline/patch_tests.py
  (patch_same_twice,
   patch_delete_modified,
   patch_delete_missing_eol): Expect merged instead of skipped.
  (patch_empty_vs_delete): Extend test.
</msg>
</logentry>
<logentry
   revision="1705857">
<author>rhuijben</author>
<date>2015-09-29T13:31:19.508977Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Following up on r1705856, don't force the patch operation to modified
when encountering a binary patch. Binary patches can apply in other
cases, such as file deletes.

* subversion/libsvn_diff/parse-diff.c
  (binary_patch_start,
   parse_binary_patch): Don't force operation type to modified.
</msg>
</logentry>
<logentry
   revision="1705856">
<author>rhuijben</author>
<date>2015-09-29T13:10:12.946475Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Use the git information in patch files -when available- to see the difference
between a zero byte file and a deleted file, during 'svn patch'.

* subversion/libsvn_client/patch.c
  (apply_one_patch): Only handle an empty file as a delete if we don't know
    the explicit operation.

* subversion/tests/cmdline/patch_tests.py
  (patch_empty_vs_delete): New test.
  (test_list): Add test.
</msg>
</logentry>
<logentry
   revision="1705843">
<author>rhuijben</author>
<date>2015-09-29T12:16:04.407657Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/externals.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/externals_tests.py</path>
</paths>
<msg>Remove registration of external in the EXTERNALS table when we find a
versioned node that takes its place during update.

* subversion/libsvn_client/externals.c
  (switch_dir_external): Check node for wcroot before trying to handle as wc.

* subversion/tests/cmdline/externals_tests.py
  (external_externally_removed): New test.
  (test_list): Add external_externally_removed.
</msg>
</logentry>
<logentry
   revision="1705739">
<author>stefan2</author>
<date>2015-09-28T18:13:44.452014Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/stats.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnfsfs_tests.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_fs_fs_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-private-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnfsfs/stats-cmd.c</path>
</paths>
<msg>Teach 'svnfsfs stats' to show the average lengths of the representation
delta chains.

We build that info as we go: The chain length is the chain length of the
base representation we deltify against + 1.  For log. addressed repositories,
we want to keep the single pass process in place.  Therefore, we collect the
delta chain references and only after the whole rev / pack file was read,
will we set the counters.

Once at it, also determine and store the correct rep header size for phys.
addressed reps.

* subversion/include/private/svn_fs_fs_private.h
  (svn_fs_fs__representation_stats_t): Add the field to hold the sum of the
                                       lengths of the delta chains.

* subversion/libsvn_fs_fs/stats.c
  (rep_stats_t): Add field to hold the delta chain length.
  (rep_ref_t): New temporary data structure.
  (parse_representation): Set the chain length for phys. addressed reps.
  (compare_representation_refs,
   resolve_representation_refs): New functions to do the same for log.
                                 addressed reps as a post-scan step.
  (read_log_rev_or_packfile): Scan the file for reps as well and collect
                              the delta chain links.  Call the above to
                              update the rep info afterwards.
  (add_rep_stats): One more field to process in the aggregator.

* subversion/svnfsfs/stats-cmd.c
  (print_rep_stats,
   print_stats): Print the average delta chain lengths for these sections.

* subversion/tests/libsvn_fs_fs/fs-fs-private-test.c
  (verify_representation_stats): Have some check on the new data as well.

* subversion/tests/cmdline/svnfsfs_tests.py
  (test_stats): Update expected output pattern.</msg>
</logentry>
<logentry
   revision="1705733">
<author>rhuijben</author>
<date>2015-09-28T17:43:25.722927Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_diff_private.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Stop applying some kinds of property changes during 'svn patch' that should
have been stopped by a conflict.

Properties were deleted even if the original value didn't match. This
catches some hidden bugs in the svn:executable handling.

* subversion/include/private/svn_diff_private.h
  (svn_diff_hunk__create_adds_single_line,
   svn_diff_hunk__create_deletes_single_line): Constify argument.

* subversion/libsvn_client/patch.c
  (prop_patch_target_t): Add boolean.
  (apply_one_patch): Always push diff items to allow notifying conflicts.
    Set skip if nothing changed
  (install_patched_prop_targets): If skipping the property don't change its
    value.

* subversion/libsvn_diff/parse-diff.c
  (svn_diff_hunk_t,
   svn_diff_binary_patch_t): Constify pointer.
  (svn_diff_hunk__create_adds_single_line,
   svn_diff_hunk__create_deletes_single_line): Create reversed hunks, to allow
     reading them back as not reversed.

* subversion/tests/cmdline/patch_tests.py
  (patch_prop_madness): Tweak expectations. Expect conflicts on property
    mismatches, but (currently) not on final EOL only changes.
</msg>
</logentry>
<logentry
   revision="1705730">
<author>stefan2</author>
<date>2015-09-28T17:39:58.155463Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/stats.c</path>
</paths>
<msg>Minor refactoring.

* subversion/libsvn_fs_fs/stats.c
  (read_log_rev_or_packfile): Factor out common code.</msg>
</logentry>
<logentry
   revision="1705724">
<author>stefan2</author>
<date>2015-09-28T17:05:47.702661Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/stats.c</path>
</paths>
<msg>Some code cleanup in the FSFS stats collection code.

A few places that currently say "off_t offset" are actually ui64 item_offset.

* subversion/libsvn_fs_fs/stats.c
  (rep_stats_t): Replace the pre-f7 term OFFSET with the generic ITEM_INDEX.
  (compare_representation_offsets): Update and rename to ...
  (compare_representation_item_index): ... this. Compare with an ui64.
  (find_representation): Update and replace the function parameter.
  (parse_representation): Upate struct access and casts.</msg>
</logentry>
<logentry
   revision="1705710">
<author>rhuijben</author>
<date>2015-09-28T15:51:43.332245Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Fix some indentation. No functional changes.

* subversion/libsvn_client/patch.c
  (match_existing_target): Fix indentation.
</msg>
</logentry>
<logentry
   revision="1705709">
<author>rhuijben</author>
<date>2015-09-28T15:47:45.171486Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/tree.py</path>
</paths>
<msg>Fix a diagnostics output escaping issue in the test suite by using a bit more
standard code and less test suite specific code.

* subversion/tests/cmdline/svntest/tree.py
  (print_script): Just let Python format property dictionaries.
</msg>
</logentry>
<logentry
   revision="1705702">
<author>rhuijben</author>
<date>2015-09-28T14:45:49.009935Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Following up on r1705692, r1705698 update a test expectation.

* subversion/tests/cmdline/patch_tests.py
  (patch_dir_properties): Expect details on what failed.
</msg>
</logentry>
<logentry
   revision="1705698">
<author>rhuijben</author>
<date>2015-09-28T14:23:27.708476Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Properly notify 'svn patch' conflics on adding and removing properties.

* subversion/libsvn_client/patch.c
  (send_patch_notification): Only filter adds and deletes if they are applied
    without incident.
</msg>
</logentry>
<logentry
   revision="1705692">
<author>rhuijben</author>
<date>2015-09-28T13:57:30.865221Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/notify.c</path>
</paths>
<msg>Tweak the 'svn patch' property code to properly allow repeating patches
as already applied.

Found by r1705663 work.

* subversion/libsvn_client/patch.c
  (patch_target_t): Add booleans for already applied handling.
  (get_hunk_info): Detect deletes that are already applied.
  (send_patch_notification): Improve notification info to avoid
    notifying about hunks without an attached file.
  (apply_one_patch): Register already applied hunks.

* subversion/svn/notify.c
  (notify_body): Notify filenames when property changes are merged.
</msg>
</logentry>
<logentry
   revision="1705675">
<author>rhuijben</author>
<date>2015-09-28T12:37:01.991261Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Properly calculate the length of the diff header in the new generated hunks.

The value of 'sizeof(hunk_header[add]) - 1' is 3 on my compiler.
(pointer size -1)

* subversion/libsvn_diff/parse-diff.c
  (add_or_delete_single_line): Use the actual header instead of just the
    first 3 (or 7) bytes.
</msg>
</logentry>
<logentry
   revision="1705670">
<author>rhuijben</author>
<date>2015-09-28T12:28:16.173554Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>* subversion/libsvn_diff/parse-diff.c
  (add_or_delete_single_line): Following up on r1705668, use right member name.
</msg>
</logentry>
<logentry
   revision="1705668">
<author>rhuijben</author>
<date>2015-09-28T12:26:48.550333Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Following up on r1705663, add regression test for a new issue:
patches that just tweak filemode should not create an empty file.

* subversion/tests/cmdline/patch_tests.py
  (patch_adds_executability_nocontents2): New test.
  (test_list): Insert test.
</msg>
</logentry>
<logentry
   revision="1705663">
<author>rhuijben</author>
<date>2015-09-28T12:18:22.007664Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_diff_private.h</path>
</paths>
<msg>Following up on r1705391, r1705503, create the fake diff hunks in a form that
represents the properties in their canonical format, and fix some issues when
applying svn:executable changes in a reverse diff.

* subversion/include/private/svn_diff_private.h
  (svn_diff_hunk__create_adds_single_line,
   svn_diff_hunk__create_deletes_single_line): Tweak comments.

* subversion/libsvn_diff/parse-diff.c
  (add_or_delete_single_line): Update how not having a final EOL is recorded.
  (svn_diff_parse_next_patch): Handle reversing mode change diffs.

* subversion/tests/cmdline/patch_tests.py
  (patch_adds_executability_nocontents): Extend test.
</msg>
</logentry>
<logentry
   revision="1705648">
<author>rhuijben</author>
<date>2015-09-28T10:18:37.302068Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk</path>
</paths>
<msg>* /
  (bugtraq:logregex): Further tweak to allow a few more issue reference types.</msg>
</logentry>
<logentry
   revision="1705646">
<author>stefan2</author>
<date>2015-09-28T10:16:12.710139Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>Tune reorg strategy during the FSFS format7 packs such that it favors
checkout-style tree walks now.

Since r1703237, following the log history no longer requires frequent
access to directory data but mainly relies on noderev predecessor chain.
Therefore, it is no longer necessary to tightly pack directories in a
separate part of the pack file.  With this patch, they are now placed
with the file contents and can be processed by a quasi-linear scan
instead of reading from two sections per pack.

* subversion/libsvn_fs_fs/pack.c
  (compare_dir_entries_format7): Adapt reporting strategy - process dirs
                                 at the same time as files now.
  (compare_is_dir): No longer needed.
  (sort_reps): No longer distinguish between file and dir reps but only
               paths and delta chains when determining reprentation order.</msg>
</logentry>
<logentry
   revision="1705644">
<author>rhuijben</author>
<date>2015-09-28T10:13:30.575116Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk</path>
</paths>
<msg>* /
  (bugtraq:logregex
   bugtraq:url): Update bugtraq settings for new issuetracker.
                 Use redirect at subversion.apache.org
</msg>
</logentry>
<logentry
   revision="1705643">
<author>stefan2</author>
<date>2015-09-28T10:08:15.103398Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
</paths>
<msg>Follow-up to r1705638.

Found by: julianfoad

* subversion/libsvn_fs_fs/fs_fs.c
  (svn_fs_fs__prop_rep_equal): Fix the MD5 equality check.</msg>
</logentry>
<logentry
   revision="1705638">
<author>stefan2</author>
<date>2015-09-28T09:52:11.167515Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
</paths>
<msg>Make the "properties changed" tests in FSFS precise even in the case of
MD5 collisions.  The added comparison overhead is minimal with our usage
patterns.

* subversion/libsvn_fs_fs/fs_fs.c
  (svn_fs_fs__prop_rep_equal): If two separate prop reps have the same
                               MD5, still do a full comparison to be sure.</msg>
</logentry>
<logentry
   revision="1705504">
<author>danielsh</author>
<date>2015-09-27T01:04:49.918718Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/patch_tests.py
  (patch_add_symlink):
     Test a patch that adds SVN_PROP_BOOLEAN_TRUE without a trailing newline.
     .
     Patches that add SVN_PROP_BOOLEAN_TRUE with a trailing newline are already
     tested elsewhere.

Suggested by: rhuijben</msg>
</logentry>
<logentry
   revision="1705503">
<author>danielsh</author>
<date>2015-09-27T01:04:19.764446Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Followup to r1705391:

* subversion/libsvn_diff/parse-diff.c
  (add_or_delete_single_line): Fix uninitialized variable.

Found by: rhuijben</msg>
</logentry>
<logentry
   revision="1705391">
<author>danielsh</author>
<date>2015-09-26T00:46:52.135766Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_diff/parse-diff-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_diff.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_diff_private.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>patch: Parse 'old mode' / 'new mode' line from git diffs and translate them
to svn:executable propchanges.

This merges the 'patch-exec' branch into trunk.

---

The following are the major changes.  See the branch for detailed changes.

* subversion/include/svn_diff.h
  (svn_patch_t.old_executable_p, svn_patch_t.new_executable_p): New members.

* subversion/libsvn_client/patch.c
  (contradictory_executability): New function.
  (init_patch_target, apply_one_patch):
    Translate mode changes to svn:executable changes.

* subversion/include/private/svn_diff_private.h
  (svn_diff_hunk__create_adds_single_line,
   svn_diff_hunk__create_deletes_single_line): New functions.

* subversion/libsvn_diff/parse-diff.c
  (add_or_delete_single_line,
   svn_diff_hunk__create_adds_single_line,
   svn_diff_hunk__create_deletes_single_line): New functions.
  (parse_state::state_old_mode_seen,
   parse_state::state_git_mode_seen): New enumerators.
  (parse_bits_into_executability, git_old_mode, git_new_mode): New functions.
  (git_deleted_file, git_new_file): Parse file mode.
  (transitions): Parse "old mode" and "new mode" lines.

* subversion/tests/cmdline/patch_tests.py,
* subversion/tests/libsvn_diff/parse-diff-test.c:
    Add unit tests.</msg>
</logentry>
<logentry
   revision="1705386">
<author>danielsh</author>
<date>2015-09-25T23:29:09.915388Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>* subversion/libsvn_diff/parse-diff.c
  (svn_diff_parse_next_patch): Only attempt to parse an "index" line if the
    line wasn't otherwise recognized.
    .
    This seems to have no effect on trunk's behaviour, but will make
    a difference for an upcoming change on the 'patch-exec' branch.</msg>
</logentry>
<logentry
   revision="1705328">
<author>ivan</author>
<date>2015-09-25T16:25:28.795988Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/auth.c</path>
</paths>
<msg>Resolve a possible segfault in authentication credentials cache caused by
storing key in APR hashtable without copying to long-life pool. I don't know
exact reproduction script, but it's obvious bug and crash reported via
TortoiseSVN crash dump service multiple times.

Found by: TortoiseSVN crash dump

* subversion/libsvn_subr/auth.c
  (svn_auth_next_credentials): Copy STATE-&gt;CACHE_KEY to AUTH_BATON-&gt;POOL
   before adding it to AUTH_BATON-&gt;CREDS_CACHE.
</msg>
</logentry>
<logentry
   revision="1705266">
<author>julianfoad</author>
<date>2015-09-25T10:21:37.726115Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/lock.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/lock.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_base/lock.c</path>
</paths>
<msg>Update an obsolete comment about locking nonexistent paths.

* subversion/libsvn_fs_base/lock.c
  (txn_body_lock): Update a comment: we don't allow locking a nonexistent
    path, and haven't done so for a long time.

* subversion/libsvn_fs_fs/lock.c,
  subversion/libsvn_fs_x/lock.c
  (lock_body): Same.</msg>
</logentry>
<logentry
   revision="1705174">
<author>danielsh</author>
<date>2015-09-24T22:04:54.795504Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport/status.py</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/dist/backport/merger.py</path>
</paths>
<msg>backport.py: Start multiproject support.

* tools/dist/backport/status.py
  (StatusFile.BRANCHES): Replace this member object with..
  (StatusFile.branch_url): .. this member function.
  (StatusFile.TRUNK): Replace this member object with..
  (StatusFile.trunk_url): .. this member function.

* tools/dist/backport/merger.py
  (merge, validate_branch_contains_named_revisions): Track API changes.</msg>
</logentry>
<logentry
   revision="1705122">
<author>rhuijben</author>
<date>2015-09-24T18:33:14.557790Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Following up on r1705121, extend test to include another file that is
patched in the same way, but which is not at the end of the diff file.

This tests the other case of EOL handling in the diff file.

* subversion/tests/cmdline/patch_tests.py
  (patch_final_eol): Extend test.
</msg>
</logentry>
<logentry
   revision="1705121">
<author>rhuijben</author>
<date>2015-09-24T17:50:02.784608Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Following up on r1705038, r1705080, r1705102 separate the handling of final
eols for original and modified versions to be able to apply add/remove final
eol diffs from both forwards and backwards diffs.

* subversion/libsvn_diff/parse-diff.c
  (svn_diff_hunk_t): Split boolean.
  (svn_diff_hunk_readline_original_text,
   svn_diff_hunk_readline_modified_text): Pass the right boolean.
  (svn_diff_hunk_readline_diff_text): Always end the diff text with an EOL.
  (parse_next_hunk): Use last line info to set the flag only for
    the needed type.

* subversion/tests/cmdline/patch_tests.py
  (patch_final_eol): New test.
  (test_list): Add test.
</msg>
</logentry>
<logentry
   revision="1705102">
<author>rhuijben</author>
<date>2015-09-24T16:40:33.324548Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Following up on r1705038, r1705080 avoid an unneeded seek when the caller
doesn't need the EOL value. And apply the same behavior to the function that
is used for creating reject files.

* subversion/libsvn_diff/parse-diff.c
  (hunk_readline_original_or_modified): Avoid unneeded work. Don't duplicate
    EOL type as that is a static value anyway.
  (svn_diff_hunk_readline_diff_text): Add final EOL unless we explicitly don't
    want one, just like the other similar functions.
</msg>
</logentry>
<logentry
   revision="1705094">
<author>rhuijben</author>
<date>2015-09-24T16:08:20.325246Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_diff/parse-diff-test.c</path>
</paths>
<msg>Following up on r1705038, r1705080, update expected result in the diff parse c
tests on missing EOLs.

A missing eol in the patch file shouldn't affect the actual hunk. Only a no
finale EOL marker should really create a no-final EOL result.

* subversion/tests/libsvn_diff/parse-diff-test.c
  (stream_readline_diff): New function.
  (check_content): Use stream_readline_diff.
</msg>
</logentry>
<logentry
   revision="1705088">
<author>ivan</author>
<date>2015-09-24T15:53:09.497516Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/ra_serf.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
</paths>
<msg>Rename argument for clarity.

Suggested by: rhuijben

* subversion/libsvn_ra_serf/ra_serf.h
* subversion/libsvn_ra_serf/util.c
  (svn_ra_serf__uri_parse): Rename POOL argument to RESULT_POOL.
</msg>
</logentry>
<logentry
   revision="1705080">
<author>rhuijben</author>
<date>2015-09-24T15:29:11.387019Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Following up on r1705038, also report missing final EOLs if the caller is not
interested in EOL details.

* subversion/libsvn_diff/parse-diff.c
  (hunk_readline_original_or_modified): Always fetch eols. Only add an eol if
    there is an actual line.

* subversion/tests/cmdline/patch_tests.py
  (patch_delete_missing_eol): New test.
  (test_list): Add test.
</msg>
</logentry>
<logentry
   revision="1705079">
<author>rhuijben</author>
<date>2015-09-24T15:11:30.416355Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>* subversion/libsvn_client/patch.c
  (readline_file): Just use svn_io_file_readline() instead of reimplementing
    this here.
</msg>
</logentry>
<logentry
   revision="1705078">
<author>rhuijben</author>
<date>2015-09-24T14:51:18.209264Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>* subversion/libsvn_client/patch.c
  (apply_one_patch): Fix indentation.
</msg>
</logentry>
<logentry
   revision="1705064">
<author>ivan</author>
<date>2015-09-24T14:09:17.348786Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
</paths>
<msg>Resolve segfault in 'svn diff' when repository is on server root.

Found by: TortoiseSVN crash dump

* subversion/libsvn_ra_serf/serf.c
  (ra_serf_dup_session): Use svn_ra_serf__uri_parse() instead of
   apr_uri_parse() to convert URI.PATH to "/" if it's NULL.
</msg>
</logentry>
<logentry
   revision="1705062">
<author>ivan</author>
<date>2015-09-24T14:02:24.890442Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
</paths>
<msg>Follow-up to r1705060: Remove unused local variable.

* subversion/libsvn_ra_serf/serf.c
  (svn_ra_serf__reparent): Remove unused STATUS local variable.
</msg>
</logentry>
<logentry
   revision="1705060">
<author>ivan</author>
<date>2015-09-24T13:59:16.761899Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/ra_serf.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
</paths>
<msg>Refactor common code in ra_serf.

* subversion/libsvn_ra_serf/ra_serf.h
  (svn_ra_serf__uri_parse): New function declaration.

* subversion/libsvn_ra_serf/util.c
  (svn_ra_serf__uri_parse): New. Factored out from svn_ra_serf__open().

* subversion/libsvn_ra_serf/serf.c
  (svn_ra_serf__open, svn_ra_serf__reparent): Use svn_ra_serf__uri_parse().
</msg>
</logentry>
<logentry
   revision="1705038">
<author>rhuijben</author>
<date>2015-09-24T11:44:32.470343Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>`When parsing hunks in the diff parser, report a final EOL if the patch
declares that there should be one.

The patch code doesn't have access to this information, so we should handle
this while parsing the patch to hunks.

* subversion/libsvn_diff/parse-diff.c
  (svn_diff_hunk_t): Add boolean.
  (hunk_readline_original_or_modified): Add argument. Report an EOL when
    there should be one, but isn't (caused by EOF).

  (svn_diff_hunk_readline_original_text,
   svn_diff_hunk_readline_modified_text): Update caller.
  (parse_next_hunk): Remember no final EOL markers.

* subversion/tests/cmdline/patch_tests.py
  (patch_lacking_trailing_eol): Update expected result to the original expected
    result.
  (patch_lacking_trailing_eol_on_context): Remove XFail marker.
</msg>
</logentry>
<logentry
   revision="1704891">
<author>kotkov</author>
<date>2015-09-23T16:34:48.198213Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/options.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/mod_dav_svn/version.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_dav.h</path>
</paths>
<msg>Following up on r1704317, advertise svndiff1 support in mod_dav_svn servers.

When parsing OPTIONS responses in ra_serf, record that we can use svndiff1
upon seeing the new DAV header.  If there is no such header, use the current
approach of sending svndiff1 to servers that support Subversion's HTTPv2
protocol.

Related discussion is in http://svn.haxx.se/dev/archive-2015-09/0278.shtml
(Subject: "Re: svn commit: r1704317 - ...").

* subversion/include/svn_dav.h
  (SVN_DAV_NS_DAV_SVN_SVNDIFF1): New.

* subversion/mod_dav_svn/version.c
  (get_vsn_options): Advertise that svndiff1 is supported by the server.

* subversion/libsvn_ra_serf/options.c
  (capabilities_headers_iterator_callback): Record svndiff1 support if the
   server advertises it with the new header.  Update the related comment.

Suggested by: danielsh
</msg>
</logentry>
<logentry
   revision="1704888">
<author>rhuijben</author>
<date>2015-09-23T15:58:23.268553Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Fix some issues on applying --git diffs in reverse mode.

* subversion/libsvn_diff/parse-diff.c
  (parse_next_hunk): Properly record prop diffs as reversed.
  (transitions): Handle binary diffs after a delete.

* subversion/tests/cmdline/patch_tests.py
  (patch_delete_nodes): Add test on add and delete scenarios including
    properties and binary diffs.
</msg>
</logentry>
<logentry
   revision="1704883">
<author>rhuijben</author>
<date>2015-09-23T15:37:05.330060Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Fix doubled notifications in dry only 'svn patch' invocations for added
ancestor directories. When multiple files were added to a directory that
didn't exist all of them reported all missing ancestors.

* subversion/libsvn_client/patch.c
  (create_missing_parents): Check and record added ancestors when applying
    a patch.
  (install_patched_target): Add argument. Update caller.
  (apply_patches): Update caller. Record additions.
</msg>
</logentry>
<logentry
   revision="1704854">
<author>rhuijben</author>
<date>2015-09-23T13:58:46.805613Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Fix an issue in the diff parsing code where a delete or add in
a 'svn diff --git' was not properly applied in
'svn diff --reverse-diff'

This patch will be tested in a future regression test that currently
requires binary patch support.

* subversion/libsvn_diff/parse-diff.c
  (svn_diff_parse_next_patch): Properly reverse add and delete operations.
</msg>
</logentry>
<logentry
   revision="1704847">
<author>danielsh</author>
<date>2015-09-23T13:29:30.431289Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/serf.c
  (ra_serf_version): Report both built- and run-time versions of libserf,
    like we do for everything else.</msg>
</logentry>
<logentry
   revision="1704825">
<author>rhuijben</author>
<date>2015-09-23T12:05:47.651237Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/client.h</path>
</paths>
<msg>Update some documentation to avoid regressions as the one fixed in r1703689.

* subversion/libsvn_client/client.h
  (svn_client__get_normalized_stream):
     Following up on r1703689, tweak documentation.
</msg>
</logentry>
<logentry
   revision="1704824">
<author>rhuijben</author>
<date>2015-09-23T11:52:22.070488Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/binary_diff.c</path>
</paths>
<msg>* subversion/libsvn_diff/binary_diff.c
  (svn_diff__base85_decode_line): Use slightly different type to avoid
    comparing signed with unsigned after extending types.
</msg>
</logentry>
<logentry
   revision="1704821">
<author>rhuijben</author>
<date>2015-09-23T11:35:02.648847Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/win32_crashrpt.c</path>
</paths>
<msg>Fix some x86 vs x64 issues in the Win32 crash report handling.

Found by: Visual Studio 2015

* subversion/libsvn_subr/win32_crashrpt.c
  (FORMAT_PTR): Define integer as pointer sized to properly handle format
    checks via the "I" prefix.
  (write_module_info_callback): Properly handle always int64 value.
  (format_basic_type,
   format_value): Pass guaranteed right type on x86 and x64.
</msg>
</logentry>
<logentry
   revision="1704816">
<author>philip</author>
<date>2015-09-23T11:07:24.780269Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>* subversion/libsvn_client/patch.c
  (init_patch_target, apply_one_patch): Followup to r1704588, remove
   unused variable.
</msg>
</logentry>
<logentry
   revision="1704814">
<author>philip</author>
<date>2015-09-23T10:56:32.060039Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>* subversion/libsvn_diff/parse-diff.c
  (parse_binary_patch): Add brackets to correct a precedence bug in a
   logical expression, detected by gcc -Wparentheses
</msg>
</logentry>
<logentry
   revision="1704648">
<author>rhuijben</author>
<date>2015-09-22T15:02:19.512146Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Update some path arguments and comments. Remove the ### bug I reported in
r1704573, as this case is already handled in the libsvn_wc node api.

Replace an assertion with an error in case a move outside the patch tree
is reported.

* subversion/libsvn_client/patch.c
  (resolve_target_path): Rename argument. Tweak some comments and fix a path
    calculation. Replace assertion with a proper skip handling as this case
    is perfectly possible.
  (init_patch_target): Rename argument. Update caller.
  (apply_patches): Rename argument. Update caller.
</msg>
</logentry>
<logentry
   revision="1704635">
<author>rhuijben</author>
<date>2015-09-22T14:08:58.410201Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Remove several unneeded casts from void *. We explicitly try to avoid
these in our code.

There should be no functional changes.

* subversion/libsvn_client/patch.c
  (readline_prop,
   tell_prop,
   seek_prop,
   write_prop,
   readline_file,
   tell_file,
   seek_file,
   write_file): Use automatic instead of explicit casts.
</msg>
</logentry>
<logentry
   revision="1704632">
<author>rhuijben</author>
<date>2015-09-22T13:59:33.151603Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Following up on r1704616, make the binary patch code work in case the
in-workingcopy is a 100% match of the expected file. This leaves the
case where the file is not a match for a future patch.

* subversion/libsvn_client/patch.c
  (apply_one_patch): Compare file to expected file and create result file
    if the files match.

* subversion/tests/cmdline/patch_tests.py
  (patch_binary_file): Remove XFail. Extend test.
</msg>
</logentry>
<logentry
   revision="1704616">
<author>rhuijben</author>
<date>2015-09-22T13:10:49.480277Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>In the diff parser: apply the reverse flag even for binary diffs.

* subversion/libsvn_diff/parse-diff.c
  (parse_binary_patch): Add reverse argument and use it to reverse
    offsets when requested.
  (svn_diff_parse_next_patch): Update caller.
</msg>
</logentry>
<logentry
   revision="1704588">
<author>rhuijben</author>
<date>2015-09-22T12:05:01.610111Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>In the 'svn patch' code propertly detect that there is a binary patch and
prepare some bits for applying the patch.

* subversion/libsvn_client/patch.c
  (resolve_target_path): Use has_text_changes argument instead of an inversed
    prop_changes_only to detect cases.
  (init_patch_target): Update caller. Detect binary patches as a text patch.
  (apply_one_patch): Handle new kind of text change separate from original
    hunks. Separate the move only change.
</msg>
</logentry>
<logentry
   revision="1704573">
<author>rhuijben</author>
<date>2015-09-22T10:51:21.889489Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_diff/binary_diff.c</path>
</paths>
<msg>Tweak some comments in the diff/patch code. No functional changes.

* subversion/libsvn_client/patch.c
  (resolve_target_path): Add comment to note that we have a bug.

* subversion/libsvn_diff/binary_diff.c
  (svn_diff_output_binary): Revert some accidental whitespace changes
    committed in r1704292.
</msg>
</logentry>
<logentry
   revision="1704511">
<author>rhuijben</author>
<date>2015-09-22T10:11:54.246691Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_client/client-test.c</path>
</paths>
<msg>Fix a few tests to properly clean up after running.

* subversion/tests/libsvn_client/client-test.c
  (test_foreign_repos_copy,
   test_remote_only_status): Register everything we create as to be cleaned up.
</msg>
</logentry>
<logentry
   revision="1704374">
<author>rhuijben</author>
<date>2015-09-21T17:27:11.253388Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/binary_diff.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/diff.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_error_codes.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_diff.h</path>
</paths>
<msg>Complete the parsing routines for parsing git-like binary blobs. This patch
completes the parsing, but leaves out the patch application code as that
needs a bit more work before committing.

* subversion/include/svn_diff.h
  (svn_diff_get_binary_diff_original_stream,
   svn_diff_get_binary_diff_result_stream): New functions.

* subversion/include/svn_error_codes.h
  (SVN_ERR_DIFF_UNEXPECTED_DATA): New error.

* subversion/libsvn_diff/binary_diff.c
  (includes): Add svn_private_config.h and diff.h.
  (base85_value,
   svn_diff__base85_decode_line): New functions.

* subversion/libsvn_diff/diff.h
  (svn_diff__base85_decode_line): New function.

* subversion/libsvn_diff/parse-diff.c
  (includes): Add svn_private_config.h and diff.h.

  (base85_baton_t): New struct.
  (read_handler_base85,
   close_handler_base85,
   get_base85_data_stream): New functions.

  (length_verify_baton_t): New struct.
  (read_handler_length_verify,
   close_handler_length_verify,
   get_verify_length_stream): New functions.

  (svn_diff_get_binary_diff_original_stream,
   svn_diff_get_binary_diff_result_stream): New functions.

  (parse_binary_patch): Properly set apr_file in binary patch. Switch src and
    dest to the same order as used by git.

* subversion/tests/cmdline/patch_tests.py
  (patch_binary_file): Update expected ordering.
</msg>
</logentry>
<logentry
   revision="1704317">
<author>kotkov</author>
<date>2015-09-21T15:19:40.059518Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/commit.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/options.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/ra_serf.h</path>
</paths>
<msg>Use compressed svndiff1 format for deltas when committing changes over
http:// and https://.

Something I learned while working on the ra_serf-stream-commit branch is
that ra_serf doesn't use compression when sending deltas over http(s)://
— as opposed to, for instance, ra_svn, where compression is turned on by
default.  Enabling compression has a positive impact on commits that happen
over the WAN, especially, with slow connections, where the network speed is
the bottleneck.

Benchmarks over http:// with the repository located on a remote server,
before and after this patch:

1) Committing a Windows application build (.exe, .dll, resources),
   35 files, 55 MiB total size:

   51.901 s → 22.404 s

2) Committing a random bunch of compressible and incompressible files,
   135 files, 161 MiB total size:

   156.072 s → 115.445 s

3) Importing a subtree of TortoiseSVN's trunk, 1742 files, 81 MiB total size:

   186.548 s → 167.285 s

4) Importing Windows Installer log files, 23 files, 15 MiB total size:

   15.130 s → 6.030 s

So, we begin using compressed svndiff1 format in ra_serf, if that's possible.
This is done for servers that advertise Subversion's HTTP v2 protocol, unless
compression is disabled by the 'http-compression = no' client configuration
option.  Existing Apache HTTPd + mod_dav_svn servers know how to deal with
svndiff1, starting from Subversion 1.4, but the reasoning behind enabling
it with HTTP v2 is that if the user is stuck with the old protocol version,
she probably does not really care about the performance.  I tested existing
custom implementations of Subversion's HTTP v2 protocol that are not based
on mod_dav_svn, and they as well now how to deal with svndiff1 format.

* subversion/libsvn_ra_serf/ra_serf.h
  (svn_ra_serf__session_t.using_compression): Update comment.
  (svn_ra_serf__session_t.supports_svndiff1): New field.

* subversion/libsvn_ra_serf/options.c
  (capabilities_headers_iterator_callback): Remember that we can use svndiff1
   upon witnessing a Subversion's HTTPv2 protocol header.  Document the
   reasoning behind this.

* subversion/libsvn_ra_serf/commit.c
  (apply_textdelta): Use svndiff1 when calling svn_txdelta_to_svndiff3(), if
   possible.

* subversion/libsvn_ra_serf/serf.c
  (ra_serf_dup_session): Duplicating a session begins with apr_pmemdup(), and
   automatically covers all primitive fields, e.g., the new supports_svndiff1
   field or already existing supports_rev_rsrc_replay field.  So, just update
   the comment block.
</msg>
</logentry>
<logentry
   revision="1704296">
<author>julianfoad</author>
<date>2015-09-21T13:08:56.112453Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/diff.c</path>
</paths>
<msg>Fix issue #4596 "svn diff --no-diff-added shows properties as added".

* subversion/libsvn_client/diff.c
  (diff_file_added): In no-diff-added mode, just write the header line
    and return early.</msg>
</logentry>
<logentry
   revision="1704292">
<author>rhuijben</author>
<date>2015-09-21T12:58:06.520205Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/binary_diff.c</path>
</paths>
<msg>Auch... Write binary patches in the order git would: first new then old.

* subversion/libsvn_diff/binary_diff.c
  (svn_diff_output_binary): Write diff in proper order.
</msg>
</logentry>
<logentry
   revision="1704263">
<author>rhuijben</author>
<date>2015-09-21T11:04:38.168618Z</date>
<paths>
<path
   text-mods="false"
   kind="file"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/libsvn_subr/cache-null.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/jniwrapper/jni_channel.hpp</path>
<path
   kind="file"
   action="M"
   prop-mods="true"
   text-mods="false">/subversion/trunk/subversion/libsvn_fs_x/dag_cache.h</path>
</paths>
<msg>Add svn:eol-style on a few files that should have had them.

* subversion/bindings/javahl/native/jniwrapper/jni_channel.hpp
* subversion/libsvn_fs_x/dag_cache.h
* subversion/libsvn_subr/cache-null.c
  Set svn:eol-style.
</msg>
</logentry>
<logentry
   revision="1704255">
<author>ivan</author>
<date>2015-09-21T10:14:00.499520Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/cat.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/import.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/mergeinfo.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/iprops.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/blame.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/log.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/export.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/status.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/client.h</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/add.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/info.c</path>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/ra.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_client_private.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/checkout.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/externals.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/locking_commands.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/diff.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/copy.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/list.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/update.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/copy_foreign.c</path>
<path
   text-mods="false"
   kind="file"
   action="D"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/ra_cache.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/mtcc.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/commit.c</path>
<path
   text-mods="false"
   kind="file"
   action="D"
   prop-mods="false">/subversion/trunk/tools/dev/ra-cache-summary.py</path>
<path
   action="D"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/libsvn_client/ra_cache.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/ctx.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/merge.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/switch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/prop_commands.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/delete.c</path>
</paths>
<msg>Revert r1704048 (merge of 'reuse-ra-session' branch): unfortunately the code
is not ready for trunk. The most serious problem that we cannot assume that
API user doesn't change svn_client_ctx_t fields like AUTH_BATON or
OPEN_TUNNEL_FUNC between svn_client_*() functions invocation. JavaHL bindings
is one example of usage of such pattern.

I'll revive 'reuse-ra-session' branch and attempt to fix these problems there.

Discussion: "Merge ra-reuse-session branch to trunk or not?" [1]
http://svn.haxx.se/dev/archive-2015-09/0173.shtml
</msg>
</logentry>
<logentry
   revision="1704161">
<author>luke1410</author>
<date>2015-09-20T16:34:13.092089Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/INSTALL</path>
</paths>
<msg>Following up on r1703547, drop mentioning devenv command since we only  refer
to the msbuild command now.

* INSTALL: Removed devenv reference.</msg>
</logentry>
<logentry
   revision="1704158">
<author>luke1410</author>
<date>2015-09-20T16:03:50.659024Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/INSTALL</path>
</paths>
<msg>Following up on r1703547, removed trailing whitespaces.

* INSTALL: Removed whitespaces</msg>
</logentry>
<logentry
   revision="1704157">
<author>luke1410</author>
<date>2015-09-20T16:02:32.297626Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/INSTALL</path>
</paths>
<msg>Following up on r1703547, remove remaining traces to strict openSSL version
numbers.

* INSTALL: Update "cd openssl" (dropped -0.9.7f) and openssl target dir
  (dropped -x.x.x)</msg>
</logentry>
<logentry
   revision="1704048">
<author>ivan</author>
<date>2015-09-19T15:22:50.941611Z</date>
<paths>
<path
   copyfrom-path="/subversion/branches/reuse-ra-session/subversion/libsvn_client/ra_cache.c"
   copyfrom-rev="1704029"
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/libsvn_client/ra_cache.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/mtcc.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/commit.c</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/reuse-ra-session/tools/dev/ra-cache-summary.py"
   copyfrom-rev="1704029">/subversion/trunk/tools/dev/ra-cache-summary.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/add.c</path>
<path
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/reuse-ra-session/subversion/libsvn_client/ra_cache.h"
   copyfrom-rev="1704029"
   action="A"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/ra_cache.h</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/switch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/delete.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/externals.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/import.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/iprops.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/util.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/export.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/status.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/client.h</path>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/info.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/ctx.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/merge.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/prop_commands.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/ra.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_client_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/checkout.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/cat.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/locking_commands.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/diff.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/copy.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/mergeinfo.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/list.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/blame.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/log.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/update.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/copy_foreign.c</path>
</paths>
<msg>[Reverted in r1704255]

Introduce RA session pool in libsvn_client for managing and reusing RA session
for different URLs.

Discussion: "Merge ra-reuse-session branch to trunk or not?" [1]

More details are available in branch history [2].

[1] http://svn.haxx.se/dev/archive-2015-09/0173.shtml
[2] ^/subversion/branches/reuse-ra-session@1704029

* subversion/include/private/svn_client_private.h
  (svn_client__ra_session_from_path2): Update docstring to mention that RA
   session may be returned back to RA session pool by
   svn_client__ra_session_release() function.
  (svn_client__ra_session_release): New function declaration.

* subversion/libsvn_client/add.c
* subversion/libsvn_client/blame.c
* subversion/libsvn_client/cat.c
* subversion/libsvn_client/checkout.c
  (mkdir_urls, svn_client_blame5, svn_client_cat3,
   svn_client__checkout_internal): Release locally created sessions if there
   were no errors.
  
* subversion/libsvn_client/client.h
  (svn_client__ra_cache_t): Add new type declare.
  (svn_client__private_ctx_t): Add RA_CACHE field.

* subversion/libsvn_client/commit.c
  (check_url_kind_baton): Remove POOL, SESSION and REPOS_ROOT_URL -- they
   were used as local RA session pool.
  (check_url_kind): Just use svn_client_open_ra_session2() and
   svn_client__ra_session_release() instead of trying to reparent existing
   RA session.
  (svn_client_commit6): Update baton initialization and release locally
   created sessions if there were no errors.

* subversion/libsvn_client/copy.c
* subversion/libsvn_client/copy_foreign.c
* subversion/libsvn_client/ctx.c
* subversion/libsvn_client/delete.c
* subversion/libsvn_client/diff.c
* subversion/libsvn_client/export.c
* subversion/libsvn_client/externals.c
* subversion/libsvn_client/import.c
* subversion/libsvn_client/info.c
* subversion/libsvn_client/iprops.c
* subversion/libsvn_client/list.c
* subversion/libsvn_client/locking_commands.c
* subversion/libsvn_client/log.c
* subversion/libsvn_client/mtcc.c
* subversion/libsvn_client/prop_commands.c
  (pin_externals_prop, repos_to_repos_copy,  repos_to_repos_copy,
   wc_to_repos_copy,  repos_to_wc_copy,  svn_client__copy_foreign,
   delete_urls_multi_repos, diff_repos_repos, diff_repos_wc,
   svn_client_export5, handle_external_item_change, svn_client_import5,
   svn_client_info4, get_inheritable_props,  list_internal, release_locks,
   svn_client__get_copy_source, svn_client_log5, svn_client__mtcc_commit,
   propset_on_url): Release locally created sessions if there were no errors.

* subversion/libsvn_client/merge.c
  (ensure_ra_session_url): Add TODO comment to use release RA sessions back
   to RA session pool.
  (do_merge): Reduce scope of second RA session and return it early back to
   RA session pool.
  (merge_locked, merge_peg_locked, find_automatic_merge_no_wc,
   client_find_automatic_merge, do_automatic_merge_locked): Release locally
   created sessions if there were no errors.

* subversion/libsvn_client/mergeinfo.c
  (svn_client__get_wc_or_repos_mergeinfo_catalog, get_mergeinfo,
   logs_for_mergeinfo_rangelist, svn_client__mergeinfo_log,
   svn_client_suggest_merge_sources): Release locally created sessions if
   there were no errors.

* subversion/libsvn_client/ra.c
  (): Include "ra_cache.h"
  (svn_client__open_ra_session_internal): Use
   svn_client__ra_cache_open_session() to open RA session, instead of direct
   call to svn_ra_open4().
  (svn_client__repos_locations, svn_client__get_youngest_common_ancestor):
   Release RA sessions after we finished using them.
  (svn_client__ra_session_release): New.

* subversion/libsvn_client/ra_cache.c
* subversion/libsvn_client/ra_cache.h
  (MAX_INACTIVE_SESSIONS, INACTIVE_SESSION_TIMEOUT, cache_entry_t,
   open_tmp_file, get_wc_prop, set_wc_prop, push_wc_prop, invalidate_wc_props,
   progress_func, cancel_func, get_client_string,  get_wc_contents,
   check_tunnel_func,  open_tunnel_func,  cleanup_ra_cache,
   svn_client__ra_cache_init, close_ra_session, remove_inactive_entry,
   expunge_cache_entries, find_session_by_url, open_new_session,
   get_private_ra_cache, svn_client__ra_cache_open_session,
   svn_client__ra_cache_release_session): New.

* subversion/libsvn_client/status.c
* subversion/libsvn_client/switch.c
* subversion/libsvn_client/update.c
* subversion/libsvn_client/util.c
  (reporter_finish_report, svn_client_status6, switch_internal,
   svn_client__update_internal, svn_client_get_repos_root): Release locally
   created sessions if there were no errors.

* tools/dev/ra-cache-summary.py: New script to analyze debugging output of
  RA session reuse.
</msg>
</logentry>
<logentry
   revision="1703960">
<author>rhuijben</author>
<date>2015-09-19T08:55:15.978707Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>* subversion/libsvn_diff/parse-diff.c
  (parse_binary_patch): Folowing up on r1703925, fix variable reference.
</msg>
</logentry>
<logentry
   revision="1703925">
<author>rhuijben</author>
<date>2015-09-18T22:47:24.547709Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/binary_diff.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_diff.h</path>
</paths>
<msg>Start parsing binary diffs in svn patch. This handles the blocks and
records the locations for future processing.

* subversion/include/svn_diff.h
  (svn_diff_binary_patch_t): New opaque struct.
  (svn_patch_t): Extend struct with pointer.

* subversion/libsvn_diff/binary_diff.c
  (svn_diff_output_binary): Don't write unneeded blank line that looks
    ugly before a property diff.

* subversion/libsvn_diff/parse-diff.c
  (svn_diff_binary_patch_t): New struct.
  (parse_state): Add value.
  (binary_patch_start): New function.
  (parse_binary_patch): New function.
  (transitions): Add binary batch handling.
  (svn_diff_parse_next_patch): Parse binary diffs.

* subversion/tests/cmdline/patch_tests.py
  (patch_binary_file): Tweak expected result. One index line for one target.
</msg>
</logentry>
<logentry
   revision="1703919">
<author>rhuijben</author>
<date>2015-09-18T21:41:58.835117Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/diff.c</path>
</paths>
<msg>Fix two minor consistency issues in the unified diff generator.

* subversion/libsvn_client/diff.c
  (display_prop_diffs): Don't use translation here as that would break
    applying property patches from generated diff files via svn patch.
  (diff_content_changed): Properly record when the 'Index: ' header is
    already written.</msg>
</logentry>
<logentry
   revision="1703898">
<author>stsp</author>
<date>2015-09-18T16:16:20.081984Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/resolve-cmd.c</path>
</paths>
<msg>* subversion/svn/resolve-cmd.c
  (svn_cl__resolve): Restore assignment to variable 'err' lost in r1703892.
</msg>
</logentry>
<logentry
   revision="1703895">
<author>stsp</author>
<date>2015-09-18T16:04:20.090955Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (svn_cl__conflict_func_interactive): Fix a type mismatch in comparison.

Found by: danielsh
</msg>
</logentry>
<logentry
   revision="1703892">
<author>stsp</author>
<date>2015-09-18T15:54:26.515958Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/resolve-cmd.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/cl.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/svn.c</path>
</paths>
<msg>Continue removing svn_cl__interactive_conflict_baton_t from 'svn' conflict code.

Make svn_cl__resolve_conflict() accept new parameters instead of grabbing the
same data from the client context's conflict callback baton.

* subversion/svn/cl.h
  (svn_cl__conflict_stats_t): Move typedef upwards so svn_cl__cmd_baton_t
   can use it.
  (svn_cl__cmd_baton_t): Add 'conflict_stats' here so we can pass it to
   subcommands without relying on the conflict callback baton.
  (svn_cl__resolve_conflict): Update declaration.

* subversion/svn/conflict-callbacks.c
  (svn_cl__resolve_conflict): Add output arguments 'accept_which', 'quit',
   'external_failed', and 'printed_summary'. Add parameters 'editor_cmd',
   'config', 'path_prefix', 'pb', and 'conflict_stats'. Use these parameters
   instead of accessing the conflict callback baton in the client context.

* subversion/svn/resolve-cmd.c
  (conflict_status_walker_baton): Add new fields 'accept_which', 'quit',
   'external_failed', 'printed_summary', 'editor_cmd', 'config',
   'path_prefix', 'pb', and 'conflict_stats'.
  (conflict_status_walker): Update this caller of svn_cl__resolve_conflict().
  (walk_conflicts): Add new parameters 'accept_which', 'quit',
  'external_failed', 'printed_summary', 'editor_cmd', 'config',
   'path_prefix', 'pb', and 'conflict_stats'.
   Initialize the conflict walker baton with this data.
  (svn_cl__resolve): Get conflict stats from subcommand baton.
   Allocate and provide new arguments for svn_cl__resolve_conflict()
   and walk_conflicts().

* subversion/svn/svn.c
  (sub_main): Store a pointer to conflicts stats in command_baton.
</msg>
</logentry>
<logentry
   revision="1703855">
<author>stsp</author>
<date>2015-09-18T13:50:19.547415Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Continue removing svn_cl__interactive_conflict_baton_t from 'svn' conflict code.

Instead of passing the baton around, pass individual parameters based on
data in the baton.

* subversion/svn/conflict-callbacks.c
  (conflict_func_interactive): Add output arguments 'accept_which', 'quit',
  'external_failed', 'printed_summary'. Accept 'editor_cmd', 'config',
  'path_prefix', 'pb', and 'conflict_stats' parameters instead of
   svn_cl__interactive_conflict_baton_t.
  (svn_cl__conflict_func_interactive,
   svn_cl__resolve_conflict): Update callers.
</msg>
</logentry>
<logentry
   revision="1703848">
<author>stsp</author>
<date>2015-09-18T13:38:44.865143Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Continue removing svn_cl__interactive_conflict_baton_t from 'svn' conflict code.

Instead of passing the baton around, pass individual parameters based on
data in the baton.

* subversion/svn/conflict-callbacks.c
  (handle_tree_conflict): Add output arguments 'accept_which' and 'quit',
   and accept 'path_prefix' and 'pb' parameters instead of
   svn_cl__interactive_conflict_baton_t.
  (conflict_func_interactive): Update caller.
</msg>
</logentry>
<logentry
   revision="1703845">
<author>stsp</author>
<date>2015-09-18T13:36:09.967627Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Continue removing svn_cl__interactive_conflict_baton_t from 'svn' conflict code.

Instead of passing the baton around, pass individual parameters based on
data in the baton.

* subversion/svn/conflict-callbacks.c
  (handle_prop_conflict): Add output arguments 'accept_which' and 'quit',
   and accept 'path_prefix', 'pb', 'editor_cmd', and 'config' parameters
   instead of svn_cl__interactive_conflict_baton_t.
  (conflict_func_interactive): Update caller.
</msg>
</logentry>
<logentry
   revision="1703843">
<author>stsp</author>
<date>2015-09-18T13:31:30.800997Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Continue removing svn_cl__interactive_conflict_baton_t from 'svn' conflict code.

Instead of passing the baton around, pass individual parameters based on
data in the baton.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict): Add output arguments 'accept_which' and 'quit',
   and accept 'path_prefix', 'pb', 'editor_cmd', and 'config' parameters
   instead of svn_cl__interactive_conflict_baton_t.
  (conflict_func_interactive): Update caller.
</msg>
</logentry>
<logentry
   revision="1703841">
<author>stsp</author>
<date>2015-09-18T13:26:07.370822Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Follow-up to r1703839;

* subversion/svn/conflict-callbacks.c
  (handle_prop_conflict): Pass arguments to edit_prop_conflict in correct order.
</msg>
</logentry>
<logentry
   revision="1703839">
<author>stsp</author>
<date>2015-09-18T13:20:23.990937Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Continue removing svn_cl__interactive_conflict_baton_t from 'svn' conflict code.

Instead of passing the baton around, pass individual parameters based on
data in the baton.

* subversion/svn/conflict-callbacks.c
  (edit_prop_conflict): Accept 'editor_cmd', 'config', and 'pb' parameters
   instead of svn_cl__interactive_conflict_baton_t.
  (handle_prop_conflict): Update caller.
</msg>
</logentry>
<logentry
   revision="1703837">
<author>stsp</author>
<date>2015-09-18T13:16:56.167806Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Start removing svn_cl__interactive_conflict_baton_t from 'svn' conflict code.

Instead of passing the baton around, pass individual parameters based on
data in the baton.

* subversion/svn/conflict-callbacks.c
  (open_editor): Accept 'editor_cmd' and 'config' parameters instead
   of svn_cl__interactive_conflict_baton_t.
  (edit_prop_conflict, handle_text_conflict): Update callers. 
</msg>
</logentry>
<logentry
   revision="1703835">
<author>kotkov</author>
<date>2015-09-18T13:08:02.458629Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Add the EOL between 1.9.1 and 1.9.2 sections.
</msg>
</logentry>
<logentry
   revision="1703834">
<author>kotkov</author>
<date>2015-09-18T13:06:40.446309Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Add the entry for the r1700215 group in the 1.9.2 section.
</msg>
</logentry>
<logentry
   revision="1703819">
<author>kotkov</author>
<date>2015-09-18T12:27:39.888698Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Add the missing utf8proc entry in the 1.9.2 section.
</msg>
</logentry>
<logentry
   revision="1703809">
<author>rhuijben</author>
<date>2015-09-18T11:18:07.137106Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Add regression test on current 1.9 behavior that svn can output diffs of
binary files (when specifically enabled), but svn patch can't apply them
yet.

* subversion/tests/cmdline/patch_tests.py
  (patch_binary_file): New function.
  (test_list): Add patch_binary_file.
</msg>
</logentry>
<logentry
   revision="1703790">
<author>stsp</author>
<date>2015-09-18T09:32:21.038154Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/resolve-cmd.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/cl.h</path>
</paths>
<msg>Convert more of the 'svn' client to new svn_client_conflict APIs.

Replace use of svn_wc_conflict_choice_t with svn_client_conflict_option_id_t.

* subversion/svn/cl.h
  (svn_cl__resolve_conflict): Use conflict option ID. Swap parameters so
   that client context comes after other parameters.

* subversion/svn/conflict-callbacks.c
  (svn_cl__resolve_conflict): Use conflict option ID. Convert to the old
   libsvn_wc type where calling a libsvn_wc function.

* subversion/svn/resolve-cmd.c
  (conflict_status_walker_baton, conflict_status_walker, walk_conflicts,
   svn_cl__resolve): Use conflict option IDs.
</msg>
</logentry>
<logentry
   revision="1703740">
<author>brane</author>
<date>2015-09-18T04:52:22.471078Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/Makefile.in</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/win-tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>Correctly propagate the log level through the multiple layers of test
suite infrastructure and make sure the default log level is the same
on all platforms and across all types of tests.

* build/run_tests.py
  (create_parser): Make the --verbose option behave exactly as in the
   Python test drivers: i.e., set the log level to DEBUG.
  (TestHarness._init_c_tests): Pass --verbose to the C tests if the
   log level is DEBUG or less (that is, more verbose).
  (TestHarness._init_py_tests): Never send the --verbose option to the
   Python test driver; always use --set-log-level.
* subversion/tests/cmdline/svntest/main.py
  (TestSpawningThread.run_one): Likewise, tell the testcase subprocess
   what the actual log level is instead of passing -v (--verbose).

* Makefile.in
  (check): Do not make tests logs verbose by default.
* win-tests.py:
   Make the -v/--verbose option set the log level to DEBUG.
  (_usage_exit): Deprecate the -q/--quiet option as it is now a no-op.
</msg>
</logentry>
<logentry
   revision="1703699">
<author>philip</author>
<date>2015-09-17T21:29:09.427171Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/client-side/bash_completion</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
</paths>
<msg>Add -rN to "svnadmin lstxns" to skip the output of txns with a base
revision newer than rN.  This makes it easier to remove obsolete txns.

* subversion/svnadmin/svnadmin.c
  (cmd_table): Add 'r' to lstxns.
  (subcommand_lstxns): Add an iterpool, get the base revision, use the
   revision to restrict the output.

* tools/client-side/bash_completion
  (_svnadmin): Add -r to lstxns.
</msg>
</logentry>
<logentry
   revision="1703689">
<author>rhuijben</author>
<date>2015-09-17T21:00:36.142857Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/merge.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/merge_automatic_tests.py</path>
</paths>
<msg>Following up on r1703688 fix conflicts reported on merging deletes of
files that have an svn:eol-style 'CR' or 'CRLF' property.

* subversion/libsvn_client/merge.c
  (files_same_p): Use a stream in repository form instead of one with '\n'
    newlines to compare against the repository.

* subversion/tests/cmdline/merge_automatic_tests.py
  (merge_delete_crlf_file): Remove XFail marker. Tweak some comments.
</msg>
</logentry>
<logentry
   revision="1703688">
<author>rhuijben</author>
<date>2015-09-17T20:48:28.950921Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/merge_automatic_tests.py</path>
</paths>
<msg>Add regression test for issue merging deletes of files with svn:eol-style CRLF
Found by: ivan
when merging trunk to the reuse-ra-sessions branch.

* subversion/tests/cmdline/merge_automatic_tests.py
  (merge_delete_crlf_file): New function.
  (test_list): Add merge_delete_crlf_file.
</msg>
</logentry>
<logentry
   revision="1703686">
<author>stefan2</author>
<date>2015-09-17T20:37:49.431120Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/null-export-cmd.c</path>
</paths>
<msg>Correct the statistics gathered 'svnbench null-export' output.  The start
node was not included into it.

* subversion/svnbench/null-export-cmd.c
  (file_write_handler): New stream function.
  (bench_null_export): Count the root node.  For exports of single files,
                       count the plaintext bytes received.
</msg>
</logentry>
<logentry
   revision="1703675">
<author>philip</author>
<date>2015-09-17T19:44:55.201949Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
</paths>
<msg>An upgrade that packs revprops invokes just one notification per
shard so each console message should include a newline.

Before this patch the output was:

$ svnadmin upgrade repo
Repository lock acquired.
Please wait; upgrading the repository may take some time...
Packing revision properties in shard 0...Packing revision properties in shard 1...Bumped repository format to 7
Removing non-packed revision properties in shard 0...Removing non-packed revision properties in shard 1...
Upgrade completed.

With this patch the output is:

$ svnadmin upgrade repo
Repository lock acquired.
Please wait; upgrading the repository may take some time...
Packed revision properties in shard 0
Packed revision properties in shard 1
Bumped repository format to 7
Removed non-packed revision properties in shard 0
Removed non-packed revision properties in shard 1

* subversion/svnadmin/svnadmin.c
  (repos_notify_handler): Tweak messages.
</msg>
</logentry>
<logentry
   revision="1703646">
<author>stefan2</author>
<date>2015-09-17T15:12:09.469731Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/svn-mergeinfo-normalizer.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/mergeinfo-normalizer.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/normalize-cmd.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/analyze-cmd.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/logic.c</path>
</paths>
<msg>Teach svn-mergeinfo-normalizer to elide a simple case of misaligned merges:

At /trunk/foo, have svn:mergeinfo for the branches
   /branches/my-branch
   /branches/my-branch/foo
   /branches/my-branch/foo/bar/baz
where the second one is likely correctly aligned while the other two are
likely not.

With the new --remove-redundant-misaligned option, the m/i for those
misaligned branches gets removed, if the operative revisions are a subset
of the revisions given for the likely correctly aligned branch.  The 2.
branch is identified as likely correctly aligned since its name "foo"
matches the path base name "foo".  If there were multiple of these matches
amongst the sub-branches, elision will not kick in.

There is no guarantee that the branch "misalignment" classification is
correct. The conservative "must contain all operative revisions" condition
ensures that we virtually never lose any intended merge tracking info b/c
the info for those branches is already redundant by itself.  Adding the
alignment classification heuristics as a condition improves the safety of
this feature.

* tools/client-side/svn-mergeinfo-normalizer/mergeinfo-normalizer.h
  (svn_min__opt_state_t): Add new option flag.

* tools/client-side/svn-mergeinfo-normalizer/analyze-cmd.c
  (svn_min__analyze): Handle defaults for the new flag.

* tools/client-side/svn-mergeinfo-normalizer/normalize-cmd.c
  (svn_min__normalize): Same.

* tools/client-side/svn-mergeinfo-normalizer/logic.c
  (show_misaligned_branch_elision,
   remove_redundant_misaligned_branches): New logic for the new option.
  (normalize): Invoke the new elision logic if the new option is active.

* tools/client-side/svn-mergeinfo-normalizer/svn-mergeinfo-normalizer.c
  (svn_cl__longopt_t): Declare new CL option.
  (svn_min__options): Add option UI.
  (svn_min__cmd_table): Enable the new option for 'analyze' and 'normalize'.
                        Also extend the output description.
  (sub_main): Handle new option.</msg>
</logentry>
<logentry
   revision="1703639">
<author>kotkov</author>
<date>2015-09-17T14:52:34.224047Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Start populating the 1.9.2 section.
</msg>
</logentry>
<logentry
   revision="1703630">
<author>stsp</author>
<date>2015-09-17T14:09:48.187416Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Remove svn_client_conflict_walk() again. It is unused.

Clients are now expected to implement their own walker, as 'svn' does.

* subversion/include/svn_client.h
  (svn_client_conflict_walk_func_t, svn_client_conflict_walk): Remove.

* subversion/libsvn_client/resolved.c
  (conflict_resolver_baton_t, conflict_resolver_func, 
  svn_client_conflict_walk): Remove.
</msg>
</logentry>
<logentry
   revision="1703626">
<author>stsp</author>
<date>2015-09-17T13:52:33.965188Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>Rename some overlong svn_client_conflict option IDs to somewhat shorter names.

* subversion/include/svn_client.h
   (svn_client_conflict_option_id_t): Rename as follows:

    svn_client_conflict_option_incoming_new_text
      -&gt; svn_client_conflict_option_incoming_text

    svn_client_conflict_option_incoming_new_text_for_conflicted_hunks_only
      -&gt; svn_client_conflict_option_incoming_text_where_conflicted

    svn_client_conflict_option_working_text_for_conflicted_hunks_only
      -&gt; svn_client_conflict_option_working_text_where_conflicted

* subversion/libsvn_client/resolved.c
  (conflict_option_id_to_wc_conflict_choice, text_conflict_options,
   binary_conflict_options, prop_conflict_options): Track renames.

* subversion/svn/conflict-callbacks.c
  (conflict_option_id_to_wc_conflict_choice, text_conflict_options,
   binary_conflict_options, prop_conflict_options, tree_conflict_options,
   handle_text_conflict, conflict_func_interactive): Track renames.
</msg>
</logentry>
<logentry
   revision="1703608">
<author>stsp</author>
<date>2015-09-17T12:52:07.346232Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>More use of svn_client_conflict in the command line client.

Convert a lot of svn_wc_conflict_choice_t to svn_client_conflict_option_id_t.

* subversion/svn/conflict-callbacks.c
  (edit_prop_conflict, resolver_option_t, text_conflict_options,
   prop_conflict_options, tree_conflict_options): Use conflict option IDs.
  (handle_text_conflict, handle_prop_conflict, handle_tree_conflict,
   conflict_func_interactive): Return new conflict option IDs as resolution
   results. Add some output parameters for extra data contained in the old
   svn_wc_conflict_result_t type.
  (conflict_option_id_to_wc_conflict_choice): New helper function.
  (svn_cl__conflict_func_interactive): Use conflict option IDs while retaining
   compat with legacy libsvn_wc APIs.
  (svn_cl__resolve_conflict): USe conflict option IDs.
</msg>
</logentry>
<logentry
   revision="1703581">
<author>philip</author>
<date>2015-09-17T11:43:50.799044Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>In the interactive conflict resolver: allow users to
choose 'r', i.e. mark resolved, for binary files without
first looking at a diff as looking at a diff is not
possible for binary files.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict): Allow 'r' for binary files.
</msg>
</logentry>
<logentry
   revision="1703566">
<author>rhuijben</author>
<date>2015-09-17T10:55:09.873515Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/INSTALL</path>
</paths>
<msg>* INSTALL: Extend name of httpd a bit. Avoid writing strict revision numbers for VS.</msg>
</logentry>
<logentry
   revision="1703547">
<author>rhuijben</author>
<date>2015-09-17T09:35:02.692368Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/INSTALL</path>
</paths>
<msg>* INSTALL: Remove more outdated component references. Add some ### comments.</msg>
</logentry>
<logentry
   revision="1703544">
<author>luke1410</author>
<date>2015-09-17T09:24:03.066615Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/INSTALL</path>
</paths>
<msg>* INSTALL: Drop references to APR compatibility issues between APR 0.9 and APR
  1.x in the INSTALL documentation.</msg>
</logentry>
<logentry
   revision="1703477">
<author>luke1410</author>
<date>2015-09-17T01:00:46.901458Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/INSTALL</path>
</paths>
<msg>* INSTALL: Partially drop references to old Apache httpd 2.0 from INSTALL and
  mention Apache httpd 2.4 APR version requirement.</msg>
</logentry>
<logentry
   revision="1703476">
<author>luke1410</author>
<date>2015-09-17T00:40:24.850353Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/INSTALL</path>
</paths>
<msg>* INSTALL: Drop obsolete APR 0.9.x related step from INSTALL documentation.</msg>
</logentry>
<logentry
   revision="1703475">
<author>luke1410</author>
<date>2015-09-17T00:36:39.493686Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/INSTALL</path>
</paths>
<msg>* INSTALL: Correct minor mistake in INSTALL documentation.</msg>
</logentry>
<logentry
   revision="1703474">
<author>luke1410</author>
<date>2015-09-17T00:21:29.799327Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/INSTALL</path>
</paths>
<msg>Following up on r1703419, remove now implicit -t vcproj command from gen-make
in INSTALL build instructions.

* INSTALL: Remove -t vcproj from gen-make command.</msg>
</logentry>
<logentry
   revision="1703473">
<author>luke1410</author>
<date>2015-09-17T00:18:04.193118Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/INSTALL</path>
</paths>
<msg>* INSTALL: Add missing devenv statement for Windows build instructions to
  INSTALL.</msg>
</logentry>
<logentry
   revision="1703472">
<author>luke1410</author>
<date>2015-09-17T00:14:54.979513Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/INSTALL</path>
</paths>
<msg>Following up on r1703419, drop Visual Studio 6 support from INSTALL.
Implicitly this makes the Windows build instructions no longer targeting a
particular Visual Studio version.

* INSTALL: Drop Visual Studio 6 support.</msg>
</logentry>
<logentry
   revision="1703470">
<author>luke1410</author>
<date>2015-09-16T23:21:11.423153Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/INSTALL</path>
</paths>
<msg>* INSTALL: Remove obsolete (since at least 1.7) step to run gen-make before
  building Apache Httpd for Windows.</msg>
</logentry>
<logentry
   revision="1703469">
<author>luke1410</author>
<date>2015-09-16T23:17:21.161903Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/COMMITTERS</path>
</paths>
<msg>* COMMITTERS: removed trailing whitespace

Obvious fix.

Approved by: rhuijben</msg>
</logentry>
<logentry
   revision="1703420">
<author>rhuijben</author>
<date>2015-09-16T14:52:14.513392Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/generator/gen_vcnet_vcproj.py</path>
<path
   kind="file"
   action="D"
   prop-mods="false"
   text-mods="false">/subversion/trunk/build/generator/templates/vcnet_vc7_sln.ezt</path>
</paths>
<msg>Following up on r1703419, remove another unneeded template.

* build/generator/gen_vcnet_vcproj.py
  (write): Always write modern .sln files.
* build/generator/templates/vcnet_vc7_sln.ezt
  Delete file.
</msg>
</logentry>
<logentry
   revision="1703419">
<author>rhuijben</author>
<date>2015-09-16T14:47:11.816178Z</date>
<paths>
<path
   action="D"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/build/generator/templates/msvc_dsw.ezt</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/gen-make.py</path>
<path
   text-mods="false"
   kind="file"
   action="D"
   prop-mods="false">/subversion/trunk/build/generator/templates/svn_locale.dsp.ezt</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/generator/gen_win.py</path>
<path
   action="D"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/build/generator/templates/msvc_dsp.ezt</path>
<path
   action="D"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/build/generator/gen_msvc_dsp.py</path>
<path
   action="D"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/build/generator/templates/svn_config.dsp.ezt</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/generator/gen_vcnet_vcproj.py</path>
</paths>
<msg>Remove the project generator support for Visual Studio 6.0, .Net (2002) and
2003. This support is unmaintained for quite some time and these compilers
and their C libraries are not even supported by Microsoft anymore.

* build/generator/gen_msvc_dsp.py
  Remove file.

* build/generator/gen_vcnet_vcproj.py
  (get_external_project): Remove function; falling back to ancestor.

* build/generator/gen_win.py
  (get_external_project): Remove serf project hack that wasn't used since 1.7.
  
* build/generator/templates/msvc_dsp.ezt
* build/generator/templates/msvc_dsw.ezt
* build/generator/templates/svn_config.dsp.ezt
* build/generator/templates/svn_locale.dsp.ezt
  Remove files.

* gen-make.py
  Update documentation. Make --vsnet-version imply -t vcproj.
</msg>
</logentry>
<logentry
   revision="1703410">
<author>stefan2</author>
<date>2015-09-16T13:45:46.805015Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/logic.c</path>
</paths>
<msg>* tools/client-side/svn-mergeinfo-normalizer/logic.c
  (remove_lines): Fix commentary. No functional change.</msg>
</logentry>
<logentry
   revision="1703393">
<author>stsp</author>
<date>2015-09-16T12:45:06.107087Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/resolve-cmd.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/cl.h</path>
</paths>
<msg>Implement a conflict walker directly in the 'svn' client.

This is needed to keep moving the client over to the new svn_client_conflict
API, and as a result keep improving this API.

Before this change, the 'svn' client was forced to resolve conflicts by
passing a legacy conflict result back to libsvn_wc, since the resolution
process was driven from within libsvn_wc.
Now, the client drives the resolution process without using the conflict
callback. It relies on 'status' and some private libsvn_wc APIs for this
purpose. Use of private APIs will go away once more use of the public
svn_client_conflict API is implemented.

There may be some fallout in interactive conflict resolution mode since it
cannot be automatically tested. However, the regression test suite passes.
If you're using a trunk client and run into problems during interactive
conflict resolution, please let me know.

* subversion/svn/cl.h
  (svn_cl__resolve_conflict): Declare. No docstring yet since I'm not sure
   whether this is going to stay around very long.

* subversion/svn/conflict-callbacks.c
  (svn_cl__resolve_conflict): Implement.

* subversion/svn/resolve-cmd.c
  (conflict_status_walker_baton, tree_conflict_collector,
   conflict_status_walker, walk_conflicts): Implement a conflict walker based
   on similar code in libsvn_wc.
  (svn_cl__resolve): Use the new conflict APIs instead of svn_client_resolve(). 
</msg>
</logentry>
<logentry
   revision="1703391">
<author>stsp</author>
<date>2015-09-16T12:33:49.334320Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (conflict_get_internal): Always add a legacy conflict for now so
   all callers can assume it will be present and use it.
</msg>
</logentry>
<logentry
   revision="1703383">
<author>stefan2</author>
<date>2015-09-16T11:01:15.985458Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnbench/svnbench.c</path>
</paths>
<msg>Show time taken in svnbench's non-quiet output.

* subversion/svnbench/svnbench.c
  (sub_main): If there was no error and we are not simply showing help,
              show the time taken as the last line (if not in quiet mode).</msg>
</logentry>
<logentry
   revision="1703310">
<author>luke1410</author>
<date>2015-09-15T23:01:51.414160Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/COMMITTERS</path>
</paths>
<msg>* COMMITTERS: Add myself as a partial committer for doc.</msg>
</logentry>
<logentry
   revision="1703243">
<author>rhuijben</author>
<date>2015-09-15T16:12:26.298335Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/utf8proc/utf8proc.h</path>
</paths>
<msg>Following up on r1703239, reintroduce a bit of MSVC ugliness
to support old compiler versions.

* subversion/libsvn_subr/utf8proc/utf8proc.h
  (u?int*_t): Define in case they weren't defined.
</msg>
</logentry>
<logentry
   revision="1703242">
<author>stsp</author>
<date>2015-09-15T16:11:31.857407Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>* subversion/libsvn_subr/cache-membuffer.c
  (prefix_pool_get_internal): Rename local variable 'index' to 'idx'. Fixes
   another shadowed symbol warning (index() is an old synonym for strchr()).
</msg>
</logentry>
<logentry
   revision="1703240">
<author>stefan2</author>
<date>2015-09-15T16:02:55.908946Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/index.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/index.c</path>
</paths>
<msg>Fix a bunch of "declaration of 'read' shadows a global declaration" warnings.

* subversion/libsvn_fs_fs/index.c
* subversion/libsvn_fs_fs/transaction.c
* subversion/libsvn_fs_x/index.c
* subversion/libsvn_fs_x/transaction.c
  (*): Rename local "read" variables to "bytes_read".

Found by: stsp</msg>
</logentry>
<logentry
   revision="1703238">
<author>rhuijben</author>
<date>2015-09-15T15:56:14.797029Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/utf8proc/utf8proc.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn_private_config.hw</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/configure.ac</path>
</paths>
<msg>Use similar detection for a few system headers on Windows and other platforms,
to avoid problems whenever we want to reuse this code and to make it easier
to fix Windows specifics in one place.

* configure.ac
  Check for stdint.h instead of the less likely to exist inttypes.h, where
  we use the include of stdint.h of.

* subversion/libsvn_subr/utf8proc/utf8proc.h
  Use standard defines for the headers we need.

* subversion/svn_private_config.hw
  Declare defines for Visual Studio.
</msg>
</logentry>
<logentry
   revision="1703237">
<author>stefan2</author>
<date>2015-09-15T15:53:46.783393Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
</paths>
<msg>Eliminate most of the directory representation I/O during typical history
traversal in FSFS.  This effectively replicates the FSX change of r1680529.

To determine when &amp; where the next relevant copy operation for a given path
happened, we need to inspect the copy-from info for all parent folders.
Prior to this patch, we would do that crawl for each reported revision.
Now we remember the next copy revision number and simply follow the path's
node revision chain until then.

* subversion/libsvn_fs_fs/tree.c
  (fs_history_data_t): Add elements to remember the current noderev and
                       the next copy we found.
  (assemble_history): Store the new optional structure elements.

  (fs_node_history): Update caller - new optional info not available.
  (history_prev): Add a quick code path for following a linear history.
                  Provide &amp; reuse the "next copy" and "noderev" info.
  (fs_history_prev): Update caller - new optional info not available.</msg>
</logentry>
<logentry
   revision="1703190">
<author>stsp</author>
<date>2015-09-15T13:15:01.942150Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_walk): Resolve an error leak.
</msg>
</logentry>
<logentry
   revision="1703183">
<author>ivan</author>
<date>2015-09-15T12:57:59.287151Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/libsvn_fs_x/fs-x-pack-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_repos/repos-test.c</path>
</paths>
<msg>Do not perform flush to disk when it's completely unnecessary.

* subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c
* subversion/tests/libsvn_fs_x/fs-x-pack-test.c
* subversion/tests/libsvn_repos/repos-test.c
  (plain_0_length, write_format, test_config_pool): Call
   svn_io_atomic_write2() with FLUSH_TO_DISK=FALSE.
</msg>
</logentry>
<logentry
   revision="1703142">
<author>ivan</author>
<date>2015-09-15T10:32:39.858804Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_x/fs-x-pack-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/deprecated.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/activity.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_repos/repos-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/workqueue.c</path>
</paths>
<msg>Implement svn_io_write_atomic2() with FLUSH_TO_DISK flag to control whether
wait or not until file is actually written to disk. The old
svn_io_write_atomic() was flushing data to disk unconditionally.

* subversion/include/svn_io.h
  (svn_io_write_atomic2): New function declaration.
  (svn_io_write_atomic): Deprecate.

* subversion/libsvn_subr/io.c
  (svn_io_write_atomic2): Revv from svn_io_write_atomic() Add FLUSH_TO_DISK
   parameter and perform flush to disk only if FLUSH_TO_DISK is non-zero.

* subversion/libsvn_subr/deprecated.c
  (svn_io_write_atomic): Call svn_io_write_atomic2() with FLUSH_TO_DISK=TRUE.
 
* subversion/libsvn_fs_fs/fs_fs.c
* subversion/libsvn_fs_fs/transaction.c
* subversion/libsvn_fs_fs/util.c
* subversion/libsvn_fs_x/fs_x.c
* subversion/libsvn_fs_x/revprops.c
* subversion/libsvn_fs_x/util.c
* subversion/libsvn_wc/workqueue.c
* subversion/mod_dav_svn/activity.c
* subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c
* subversion/tests/libsvn_fs_x/fs-x-pack-test.c
* subversion/tests/libsvn_repos/repos-test.c
  (*): Use svn_io_write_atomic2() with FLUSH_TO_DISK=TRUE instead of
       svn_io_write_atomic().
</msg>
</logentry>
<logentry
   revision="1703141">
<author>stsp</author>
<date>2015-09-15T10:31:04.681758Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/bb-openbsd/svncheck-bindings.sh</path>
</paths>
<msg>Follow-up to r1700532:

* tools/buildbot/slaves bb-openbsd/svncheck-bindings.sh: Don't expect
   a perl bindings test log.
</msg>
</logentry>
<logentry
   revision="1703136">
<author>stsp</author>
<date>2015-09-15T10:03:40.181786Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/unix-build/Makefile.svn</path>
</paths>
<msg>* tools/dev/unix-build/Makefile.svn: In the build script used by the bb-openbsd
  buildbot, update to rbuy 1.8.7-p374 and fix build without SSL3.
</msg>
</logentry>
<logentry
   revision="1703132">
<author>astieger</author>
<date>2015-09-15T09:46:02.786376Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/repos.c</path>
</paths>
<msg>Fix start-commit hook template documentation so that the paragraphs referring to the CAPABILITIES parameter are together.

Obvious fix.

* subversion/libsvn_repos/repos.c
  (create_hooks): move paragraph up to note on CAPABILITIES
</msg>
</logentry>
<logentry
   revision="1703074">
<author>kotkov</author>
<date>2015-09-14T22:43:08.216980Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svndumpfilter/svndumpfilter.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
</paths>
<msg>Following up on r1702983, enable APR buffering for STDIN in svnrdump load
and in svndumpfilter.

Related discussion is in http://svn.haxx.se/dev/archive-2015-09/0092.shtml
(Subject: "Re: svn commit: r1700799 - ...").

* subversion/svndumpfilter/svndumpfilter.c
  (parse_baton_initialize): As above.

* subversion/svnrdump/svnrdump.c
  (load_revisions): As above.
</msg>
</logentry>
<logentry
   revision="1703073">
<author>kotkov</author>
<date>2015-09-14T22:32:14.601509Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
</paths>
<msg>* subversion/svnrdump/svnrdump.c
  (replay_revisions, load_revisions): Remove unnecessary svn_stream_close()
   calls.  Wrapped STDIN and STDOUT streams don't have a close handler.
</msg>
</logentry>
<logentry
   revision="1703072">
<author>kotkov</author>
<date>2015-09-14T22:22:12.711202Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svndumpfilter/svndumpfilter.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
</paths>
<msg>Use the standard way of initializing STDIN and STDOUT streams in svnrdump
and svndumpfilter with svn_stream_for_stdin2() and svn_stream_for_stdout()
functions respectively.

* subversion/svndumpfilter/svndumpfilter.c
  (open_fn_t): Remove this typedef.
  (create_stdio_stream): Remove this helper.
  (parse_baton_initialize): Use the functions from stream API to open the
   standard input and output streams.

* subversion/svnrdump/svnrdump.c
  (load_revisions): Use svn_stream_for_stdin2() to open the standard input.
</msg>
</logentry>
<logentry
   revision="1703069">
<author>julianfoad</author>
<date>2015-09-14T21:58:04.218947Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/temp_serializer.c
  (svn_fs_fs__serialize_properties): Use the correct pointer type in a
    sizeof() expression, for theoretical correctness; makes no difference in
    practice.</msg>
</logentry>
<logentry
   revision="1703068">
<author>julianfoad</author>
<date>2015-09-14T21:50:23.993657Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/actions.py</path>
</paths>
<msg>* subversion/tests/cmdline/svntest/actions.py
  (run_and_verify_diff_summarize_xml): Work properly when 'expected_prefix'
    is the empty string; not needed by any current callers but for future-
    proofing.</msg>
</logentry>
<logentry
   revision="1702991">
<author>rhuijben</author>
<date>2015-09-14T16:40:56.504213Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/token.c</path>
</paths>
<msg>Following up on r1702974, undo change to token parser as APR already
handles the formatting of NULL for %s in errors.

* subversion/libsvn_subr/token.c
  (svn_token__from_word_err): Revert NULL handling.

Suggested by: ivan
</msg>
</logentry>
<logentry
   revision="1702989">
<author>stefan2</author>
<date>2015-09-14T16:17:26.634173Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/stream-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_io.h</path>
</paths>
<msg>Remove the now unused svn_stream_wrap_buffered_read() functionality.

* subversion/include/svn_io.h
  (svn_stream_wrap_buffered_read): Drop.

* subversion/libsvn_subr/stream.c
  (buffering_stream_wrapper_baton,
   read_handler_buffering_wrapper,
   data_available_handler_buffering_wrapper,
   is_buffered_handler_buffering_wrapper,
   svn_stream_wrap_buffered_read): Drop.

* subversion/tests/libsvn_subr/stream-test.c
  (stream_baton_t,
   read_handler,
   data_available_handler,
   create_test_read_stream,
   expect_line_content,
   test_stream_buffered_wrapper): Drop.
  (test_funcs): Unregister test.</msg>
</logentry>
<logentry
   revision="1702983">
<author>stefan2</author>
<date>2015-09-14T16:03:02.614261Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/svnserve.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/deprecated.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnmucc/svnmucc.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnfsfs/load-index-cmd.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/x509-parser.c</path>
</paths>
<msg>Introduce svn_stream_for_stdin2 that supports optional APR buffering.
Update all callers.

* subversion/include/svn_io.h
  (svn_stream_for_stdin2): Declare new, bumped API version.
  (svn_stream_for_stdin): Depcreate.

* subversion/libsvn_subr/deprecated.c
  (svn_stream_for_stdin): Implement in terms of the new API version.

* subversion/libsvn_subr/stream.c
  (svn_stream_for_stdin2): Implement.

* subversion/svnadmin/svnadmin.c
  (subcommand_load): Update caller.
  (subcommand_load_revprops): Same. Also, don't use the buffering
                              read stream wrapper anymore.

* subversion/svnfsfs/load-index-cmd.c
  (subcommand__load_index): Ditto.

* subversion/svnmucc/svnmucc.c
  (execute): Update caller.

* subversion/svnserve/svnserve.c
  (sub_main): Same.

* tools/dev/x509-parser.c
  (main): Same.</msg>
</logentry>
<logentry
   revision="1702974">
<author>rhuijben</author>
<date>2015-09-14T15:43:31.254880Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/wc_db.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/token.c</path>
</paths>
<msg>Replace an ugly assertion caused by a corrupt working copy database with an
almost as ugly, but better to diagnose error message.

Somehow these few cases which should be completely impossible to trigger
without editing wc.db are reported as TortoiseSVN exception reports.

I explicitly add these extra checks only to the most common read operation,
as this function is usually called first and catching every invalid working
copy database is impossible without a performance and a maintenance impact.

* subversion/libsvn_subr/token.c
  (svn_token__from_word_err): Ensure NULL is handled safely.

* subversion/libsvn_wc/wc_db.c
  (column_token_err): New helper function.
  (read_info): Use column_token_err when parsing tokens.
</msg>
</logentry>
<logentry
   revision="1702952">
<author>stsp</author>
<date>2015-09-14T13:46:16.903746Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/unix-build/Makefile.svn</path>
</paths>
<msg>* tools/dev/unix-build/Makefile.svn: In the bb-openbsd bot build script,
  fix complation of httpd without SSL3 support in openssl.
</msg>
</logentry>
<logentry
   revision="1702922">
<author>ivan</author>
<date>2015-09-14T12:28:40.904000Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>In FSFS obtain size of file from already opened handle instead of requesting
it by filename.

* subversion/libsvn_fs_fs/transaction.c
  (svn_fs_fs__set_entry): Use svn_io_file_size_get() instead of
   svn_io_stat_dirent2() to obtain size of TXN node children file.
</msg>
</logentry>
<logentry
   revision="1702907">
<author>ivan</author>
<date>2015-09-14T11:14:29.874219Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/checksum.c</path>
</paths>
<msg>* subversion/libsvn_subr/checksum.c
  (svn_checksum_parse_hex): Rewrite to use unsigned char arithmetics instead
   of casting between signed/unsigned in several places.
</msg>
</logentry>
<logentry
   revision="1702905">
<author>ivan</author>
<date>2015-09-14T11:04:44.802238Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/checksum-test.c</path>
</paths>
<msg>Add test for some non-obvious, but documented behavior of
svn_checksum_parse_hex() to return NULL for 'all zeroes checksum'.

* subversion/tests/libsvn_subr/checksum-test.c
  (test_checksum_parse_all_zero): New test.
  (test_funcs): Add test to test list.
</msg>
</logentry>
<logentry
   revision="1702893">
<author>rhuijben</author>
<date>2015-09-14T09:58:37.212953Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/utf.c</path>
</paths>
<msg>* subversion/libsvn_subr/utf.c
  (svn_utf_string_from_utf8,
   svn_utf_cstring_from_utf8_string): Reduce scope of variable to get rid of a
     warning.
</msg>
</logentry>
<logentry
   revision="1702891">
<author>rhuijben</author>
<date>2015-09-14T09:57:03.294026Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_utf_private.h</path>
</paths>
<msg>* subversion/include/private/svn_utf_private.h
  (svn_utf__utf8proc_compiled_version,
   svn_utf__utf8proc_runtime_version):
      Extend documentation a bit.

Suggested by: stefan2
</msg>
</logentry>
<logentry
   revision="1702600">
<author>julianfoad</author>
<date>2015-09-12T08:33:45.264960Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/wc_db_util.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/xdelta.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/entries.c</path>
</paths>
<msg>Fix some typos in comments, mostly of the 's/then/than' variety.

Found by "grep -i '\([a-z]er\|more\|less\) then'".
</msg>
</logentry>
<logentry
   revision="1702598">
<author>julianfoad</author>
<date>2015-09-12T08:05:49.737215Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/po/it.po</path>
</paths>
<msg>Fix typo in Italian translation (volore).

Patch by: Andrea Pescetti &lt;pescetti{_AT_}apache.org&gt; 
</msg>
</logentry>
<logentry
   revision="1702565">
<author>kotkov</author>
<date>2015-09-11T22:55:26.104187Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/merge.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/merge_automatic_tests.py</path>
</paths>
<msg>Following up on r1702397, also avoid a segfault for --reintegrate merging
to a local addition.

* subversion/libsvn_client/merge.c
  (open_reintegrate_source_and_target): Check if TARGET-&gt;LOC.URL is null
   before attempting to open the RA session for it, as doing so would
   dereference the null pointer.

* subversion/tests/cmdline/merge_automatic_tests.py
  (merge_to_copy_and_add): Extend the test with another check that segfaults
   without this fix.
</msg>
</logentry>
<logentry
   revision="1702553">
<author>rhuijben</author>
<date>2015-09-11T21:06:20.721247Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnmucc_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnmucc_tests.py
  (svnmucc_propset_and_put): Following up on r1702549, fix syntax.
</msg>
</logentry>
<logentry
   revision="1702549">
<author>rhuijben</author>
<date>2015-09-11T20:50:00.255616Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnmucc_tests.py</path>
</paths>
<msg>Following up on r1702467 and r1702472, add a few more svnmucc regression
tests.

* subversion/tests/cmdline/svnmucc_tests.py
  (prohibited_deletes_and_moves): Use the standard repository.
  (svnmucc_type_errors,
   svnmucc_propset_and_put): New function.
  (test_list): Add new tests.
</msg>
</logentry>
<logentry
   revision="1702533">
<author>rhuijben</author>
<date>2015-09-11T18:30:19.333677Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/private/svn_utf_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/utf8proc/utf8proc.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/sysinfo.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/utf8proc.c</path>
</paths>
<msg>Expose utf8proc version information in 'svn --version --verbose'.

Found by: schabi
(via SharpSvn)

* subversion/include/private/svn_utf_private.h
  (svn_utf__utf8proc_version): Separate into...
  (svn_utf__utf8proc_compiled_version,
   svn_utf__utf8proc_runtime_version): These functions.

* subversion/libsvn_subr/sysinfo.c
  (includes): Add svn_utf_private.h.
  (svn_sysinfo__linked_libs): Expose utf8proc version.

* subversion/libsvn_subr/utf8proc.c
  (svn_utf__utf8proc_compiled_version): New function.
  (svn_utf__utf8proc_version): Rename to...
  (svn_utf__utf8proc_runtime_version): ... this.

* subversion/libsvn_subr/utf8proc/utf8proc.h
  (UTF8PROC_VERSION_*): Add definition in the same way as latest utf8proc
    defines these macros.
</msg>
</logentry>
<logentry
   revision="1702478">
<author>ivan</author>
<date>2015-09-11T14:23:59.649874Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/upgrade_tests.py</path>
</paths>
<msg>Following up on r1702474, remove UTF-8 BOM.

* subversion/tests/cmdline/upgrade_tests.py
  Remove BOM.
</msg>
</logentry>
<logentry
   revision="1702474">
<author>ivan</author>
<date>2015-09-11T14:00:46.903734Z</date>
<paths>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/upgrade_tests_data/upgrade_1_0_with_externals.tar.bz2</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/upgrade_tests.py</path>
</paths>
<msg>Add regression test for problem fixed in r1702218 (segfault on upgrade 1.0 WC
with externals)

* subversion/tests/cmdline/upgrade_tests.py
  (upgrade_1_0_with_externals): New test.
  (test_list): Add upgrade_1_0_with_externals.
  
* subversion/tests/cmdline/upgrade_tests_data/upgrade_1_0_with_externals.tar.bz2
  New test working copy (format 4).
</msg>
</logentry>
<logentry
   revision="1702472">
<author>kotkov</author>
<date>2015-09-11T13:56:49.880314Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/mtcc.c</path>
</paths>
<msg>Fixup mismatching errors in the svn_client__mtcc_check_path() implementation.

If mtcc has a file operation scheduled, but RA layer tells us that the actual
node is a directory, say that the node is not a file.  Previously we would
say that the node is not a directory, and that's wrong, because it actually
is a directory.  The same applies to scheduled directory operations, i.e.,
vice versa.

* subversion/libsvn_client/mtcc.c
  (svn_client__mtcc_check_path): Swap the svn_error_createf() calls between
   if and else-if clauses.
</msg>
</logentry>
<logentry
   revision="1702467">
<author>kotkov</author>
<date>2015-09-11T13:53:39.655418Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/mtcc.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnmucc_tests.py</path>
</paths>
<msg>Unbreak svnmucc propset + put action sequences executed for the same
existing file:

  svnmucc propset p v target put src target
  svnmucc: E160013: Can't open 'target' as it does not exist

There's a bug in svn_client__mtcc_check_path() implementation that doesn't
handle svn_node_file after determining the kind of a remote path.  As a
consequence, sometimes existing files were treated as non-existing and
that was triggering the error.

* subversion/libsvn_client/mtcc.c
  (svn_client__mtcc_check_path): Correct the condition so that it would
   handle svn_node_file kinds.

* subversion/tests/cmdline/svnmucc_tests.py
  (basic_svnmucc): Extend this test with another case; fails without
   the fix.
</msg>
</logentry>
<logentry
   revision="1702410">
<author>stefan2</author>
<date>2015-09-11T09:10:12.556375Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>Revert r1702305 due to issues with pipes in APR.</msg>
</logentry>
<logentry
   revision="1702407">
<author>rhuijben</author>
<date>2015-09-11T08:55:06.363920Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/merge.c</path>
</paths>
<msg>* subversion/libsvn_client/merge.c
  (client_find_automatic_merge): Following up on r1702397, really remove the
    outdated comment.
</msg>
</logentry>
<logentry
   revision="1702397">
<author>rhuijben</author>
<date>2015-09-11T08:40:42.255248Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/merge.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/merge_automatic_tests.py</path>
</paths>
<msg>Following up on r1388302 and r1702299, handle automatic merging to a local
addition as an error instead of a segfault.

* subversion/libsvn_client/merge.c
  (client_find_automatic_merge): Properly handle error condition.
    Remove ### comment that mentioned this as a todo.

* subversion/tests/cmdline/merge_automatic_tests.py
  (merge_to_copy_and_add): Remove XFail. Update expected error.
</msg>
</logentry>
<logentry
   revision="1702354">
<author>stefan2</author>
<date>2015-09-11T00:11:55.518249Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>Increase the default tuple buffer size in ra-svn such that any of the
protocol-defined tuples will fit in there without reallocation.

* subversion/libsvn_ra_svn/marshal.c
  (read_item): Bump the initial size to 12 and add a longish comment
               explaining the rationale and allocation behavior.</msg>
</logentry>
<logentry
   revision="1702310">
<author>stefan2</author>
<date>2015-09-10T18:57:32.745982Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnfsfs/stats-cmd.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnfsfs_tests.py</path>
</paths>
<msg>Fix division by zero bug when running 'svnfsfs stats' on an empty repo.

* subversion/svnfsfs/stats-cmd.c
  (print_extensions_by_changes): Don't show anything if there are no entries.
  (get_percentage): New utility function.
  (print_extensions_by_nodes,
   print_extensions_by_reps): Use the new utility to show correct percentages
                              even if there are only 0 length items.

* subversion/tests/cmdline/svnfsfs_tests.py
  (test_stats_on_empty_repo): New test.
  (test_list): Register new test.

Found by: philip
</msg>
</logentry>
<logentry
   revision="1702305">
<author>stefan2</author>
<date>2015-09-10T18:13:52.577372Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>[Reverted in 1702410]

APR file based streams shall not superficially support read or write
functions when we know that the APR file itself does not.  Instead,
they will now return a "not supported" stream error.

Note that this check is not perfect for arbitrary APR file handles
(may enable more functions than the handle actually supports) but
works correctly for our STD* streams and the files opened through
our svn_io_* API.

* subversion/libsvn_subr/stream.c
  (make_stream_from_apr_file): Set read and write functions conditionally.
  (svn_stream_from_aprfile2): Determine r/w capabilities to the degree
                              we can based on the APR API.
  (svn_stream_for_stdin,
   svn_stream_for_stdout,
   svn_stream_for_stderr): Update constructor callers.</msg>
</logentry>
<logentry
   revision="1702302">
<author>stefan2</author>
<date>2015-09-10T17:18:10.236355Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>Don't make svn_stream_skip segfault on write-only streams.

* subversion/libsvn_subr/stream.c
  (svn_stream_skip): The fallback only applies when we can read data at all.
</msg>
</logentry>
<logentry
   revision="1702300">
<author>rhuijben</author>
<date>2015-09-10T17:09:49.370199Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/merge_automatic_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/merge_automatic_tests.py
  Following up on r1702299, remove yet another UTF-8 BOM.
</msg>
</logentry>
<logentry
   revision="1702299">
<author>rhuijben</author>
<date>2015-09-10T17:05:35.196079Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/merge_automatic_tests.py</path>
</paths>
<msg>Add another testcase on a segfault reported by TortoiseSVN users.

* subversion/tests/cmdline/merge_automatic_tests.py
  (merge_to_copy_and_add): New function.
  (test_list): Add merge_to_copy_and_add.
</msg>
</logentry>
<logentry
   revision="1702289">
<author>rhuijben</author>
<date>2015-09-10T16:10:07.314500Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/wc_db.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/wc_db.h</path>
</paths>
<msg>Fix a theoretical segfault when trying to resolve a conflict that doesn't
exist in ACTUAL, but when an ACTUAL row does exist.

I don't know if this problem ever occured, but fixing this case doesn't
affect performance. (All callers appear to check if a conflict exists
before calling this function)

* subversion/libsvn_wc/wc_db.c
  (svn_wc__db_op_mark_resolved_internal): Don't segfault when the node has
    an ACTUAL node but no conflict stored in it.

* subversion/libsvn_wc/wc_db.h
  (svn_wc__db_op_mark_resolved): Extend docs a bit.
</msg>
</logentry>
<logentry
   revision="1702288">
<author>ivan</author>
<date>2015-09-10T16:08:50.866614Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/update.c</path>
</paths>
<msg>Return error if get unexpected 'X-SVN-VR-Base' HTTP header value instead of
crashing.

Found by: TortoiseSVN crash dump

* subversion/libsvn_ra_serf/update.c
  (handle_fetch): Check FETCH_CTX-&gt;DELTA_BASE for NULL before comparing
   it to received header value.
</msg>
</logentry>
<logentry
   revision="1702247">
<author>rhuijben</author>
<date>2015-09-10T13:37:19.944672Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/update_tests.py</path>
</paths>
<msg>Resolve a segfault on an incoming delete of an ancestor of a switched path
in a tree with other changes.

Found by: TortoiseSVN dump
          ivan
(Reproduction recipe and patch by me)

* subversion/libsvn_wc/wc_db.c
  (make_copy_txn): Properly detect a switched tree in all cases.

* subversion/tests/cmdline/update_tests.py
  (update_delete_switched): New function.
  (test_list): Add update_delete_switched.
</msg>
</logentry>
<logentry
   revision="1702239">
<author>rhuijben</author>
<date>2015-09-10T12:51:47.371151Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/revert_tests.py</path>
</paths>
<msg>Following up on r1702237, fix function name in test code.

* subversion/tests/cmdline/revert_tests.py
  (moved_dir_partial): Rename to...
  (revert_moved_dir_partial): ... this as expected by test_list.
</msg>
</logentry>
<logentry
   revision="1702238">
<author>rhuijben</author>
<date>2015-09-10T12:40:13.436389Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/revert_tests.py</path>
</paths>
<msg>Following up on r1702237, remove UTF-8 BOM.

* subversion/tests/cmdline/revert_tests.py
  Remove BOM.
</msg>
</logentry>
<logentry
   revision="1702237">
<author>rhuijben</author>
<date>2015-09-10T12:37:23.536418Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/wc_db.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/revert_tests.py</path>
</paths>
<msg>Resolve a possible segfault (caused by using an uninitialized variable)
on reverting the root of a move but not its descendants.

Found by: TortoiseSVN dump
          ivan
(Reproduction recipe and patch by me)

You probably need valgrind or some debug diagnostics (such as used by the
windows maintainer build) to find the problem.

* subversion/libsvn_wc/wc_db.c
  (revert_maybe_raise_moved_away): New function, extracted from...
  (op_revert_txn): ... here. Reduce scope of some variables.

* subversion/tests/cmdline/revert_tests.py
  (moved_dir_partial): New function.
  (test_list): Add revert_upwards.
</msg>
</logentry>
<logentry
   revision="1702231">
<author>ivan</author>
<date>2015-09-10T12:19:16.931759Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/adm_crawler.c</path>
</paths>
<msg>Fix potential access to uninitialized memory during 'svn commit'. I don't
know exact reproduction script, but it's obvious bug and crash reported via
TortoiseSVN crash dump service multiple times.

Found by: TortoiseSVN crash dump

* subversion/libsvn_wc/adm_crawler.c
  (svn_wc__internal_transmit_text_deltas): Do not attempt to access checksum
   from checksummed stream if svn_stream_close() returns error.
</msg>
</logentry>
<logentry
   revision="1702218">
<author>ivan</author>
<date>2015-09-10T11:21:46.834571Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/upgrade.c</path>
</paths>
<msg>Fix segfault in 'svn upgrade' of pre-Subversion 1.3 working copies with
externals.

Found by: TortoiseSVN crash dump

* subversion/libsvn_client/upgrade.c
  (upgrade_externals_from_properties): Accept INFO_BATON as argument instead
   of using uninitialized variable. 
  (svn_client_upgrade): Pass INFO_BATON to
   upgrade_externals_from_properties().
</msg>
</logentry>
<logentry
   revision="1702203">
<author>rhuijben</author>
<date>2015-09-10T10:02:05.235741Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/update_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db_pristine.c</path>
</paths>
<msg>Following up on r1701838, improve error reporting and add regression test,
including on 'svn cleanup' resolving the problem.

* subversion/libsvn_wc/wc_db_pristine.c
  (svn_wc__db_pristine_prepare_install): Wrap error message.

* subversion/tests/cmdline/update_tests.py
  (missing_tmp_update): New test.
  (test_list): Add test.
</msg>
</logentry>
<logentry
   revision="1702200">
<author>rhuijben</author>
<date>2015-09-10T09:47:25.902235Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/update_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/update_tests.py
  Following up on r1702198 remove UTF-8 BOM.
</msg>
</logentry>
<logentry
   revision="1702198">
<author>rhuijben</author>
<date>2015-09-10T09:42:58.342628Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/update_editor.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/update_tests.py</path>
</paths>
<msg>Resolve an obscure segfault when updating inside an already conflicted tree.

Found by: TortoiseSVN dump
          ivan
(Reproduction recipe and patch by me)

* subversion/libsvn_wc/update_editor.c
  (add_directory,
   add_file): Don't calculate new repository paths inside a skipped tree.

* subversion/tests/cmdline/update_tests.py
  (update_add_conflicted_deep): New test.
  (test_list): Add test.
</msg>
</logentry>
<logentry
   revision="1702089">
<author>kotkov</author>
<date>2015-09-09T19:14:04.420824Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>Explicitly release file locks on Windows, instead of relying on them to be
automatically unlocked by the OS.

Documentation for LockFileEx() [1] states that, although a process doesn't
necessarily have to release its file locks before closing the handle, it
is not recommended, and a better choice is to explicitly unlock them:
[[[
  If a process terminates with a portion of a file locked or closes a file
  that has outstanding locks, the locks are unlocked by the operating system.
  However, the time it takes for the operating system to unlock these locks
  depends upon available system resources. Therefore, it is recommended that
  your process explicitly unlock all files it has locked when it terminates.
  If this is not done, access to these files may be denied if the operating
  system has not yet unlocked them.
]]]

This changeset turns our common locking sequences from

  CreateFile → LockFile → (...) → CloseFile

    into

  CreateFile → LockFile → (...) → UnlockFileSingle → CloseFile

I conducted a couple of performance tests with svnadmin load, setrevprop,
simple commits, parallel short-living svnadmin instances doing work — i.e.,
tests where explicit unlocking could behave differently from delegating this
to OS.  There is no noticeable difference, at least on my machine.  So, we
do this not because it causes visible effects in common scenarios, but just
to follow the recommended practice and reduce the chance of encountering a
hard-to-diagnose problem.

Here is one of the performance tests that I used:
[[[
def lock_performance(sbox):
  "lock performance"

  sbox.build(create_wc=False)
  input_file = sbox.get_tempname()
  svntest.main.file_write(input_file, 'New log message')

  def setlog(n):
    svntest.actions.run_and_verify_svnadmin([], [], 'setrevprop', '-r1',
                                            sbox.repo_dir, 'prop' + str(n),
                                            input_file)
  import multiprocessing.dummy

  start = time.time()
  p = multiprocessing.dummy.Pool()
  results = p.map(setlog, range(2000))
  p.close()
  p.join();
  stop = time.time()
  logger.info('&lt;TOTAL TIME = %.6f&gt;' % (stop - start))
]]]

[1] https://msdn.microsoft.com/en-us/library/windows/desktop/aa365203

Found by: ivan

* subversion/libsvn_subr/io.c
  (file_clear_locks): Always compile this function.
  (svn_io_lock_open_file, svn_io_unlock_open_file): Install and remove pool
   cleanup handlers on all platforms.  Update the corresponding comments.
</msg>
</logentry>
<logentry
   revision="1701997">
<author>ivan</author>
<date>2015-09-09T13:07:29.435325Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/merge.c</path>
</paths>
<msg>Fix crash due access to uninitialized pointer. I don't know exact reproduction
script, but crash was reported multiple times using TortoiseSVN crash reporter
tool.

* subversion/libsvn_client/merge.c
  (merge_reintegrate_locked): Initialize output parameter *CONFLICT_REPORT to
   NULL if no merge source was found.
</msg>
</logentry>
<logentry
   revision="1701838">
<author>ivan</author>
<date>2015-09-08T16:36:48.330760Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/update_editor.c</path>
</paths>
<msg>Fix attempt to use uninitialized svn_wc__db_install_data_t pointer on error
in working copy update editor. I don't know exact reproduction script, but
this problem reported more than 400 times using TortoiseSVN crash reporter
tool.

* subversion/libsvn_wc/update_editor.c
  (lazy_open_target): Do not rely that output parameter INSTALL_DATA will be
   unchanged when svn_wc__db_pristine_prepare_install() returns error.
</msg>
</logentry>
<logentry
   revision="1701797">
<author>kotkov</author>
<date>2015-09-08T12:55:16.342645Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>Following up on r1701792, remove a misplaced svn_error_trace() call.

* subversion/libsvn_subr/stream.c
  (svn_stream_from_aprfile2): Don't call svn_error_trace() on a function
   that returns a svn_stream_t object.
</msg>
</logentry>
<logentry
   revision="1701792">
<author>kotkov</author>
<date>2015-09-08T12:48:49.558076Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>Following up on r1701633, do not use a custom svn_stream_skip() handler in
streams that wrap STDIN, STDOUT and STDERR.

This handler, skip_handler_apr(), performs a seek internally.  We cannot rely
on its behavior when wrapping standard I/O streams like STDIN, because they
do not generally support seeking.

Discussion can be found in http://svn.haxx.se/dev/archive-2015-09/0062.shtml
(Subject: "Re: svn commit: r1701633 - ...").

* subversion/libsvn_subr/stream.c
  (svn_stream_from_aprfile2): Extract the core of this function ...
  (make_stream_from_apr_file): ...into this new helper.  Add a new boolean
   argument that specifies whether we should install callbacks that depend
   on the ability to perform a seek().
  (svn_stream_for_stdin, svn_stream_for_stdout, svn_stream_for_stderr):
   Call the new helper while specifying that the handle does not support
   seeking.
</msg>
</logentry>
<logentry
   revision="1701763">
<author>brane</author>
<date>2015-09-08T10:07:38.764598Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
</paths>
<msg>In the Python tests, create and initialize the logger in
one place. Also set a sane default log level.

* build/run_tests.py
  (TestHarness._init_py_tests): Do not set svntest.main.logger.

* subversion/tests/cmdline/svntest/main.py
  (AbbreviatedFormatter): Move before _create_parser; no functional change.
  (_create_parser): Initialize the global logger variable and check the
   root logger. Moved from execute_tests(); no functional change.
   Set the default log level to WARN if it was not set elsewhere.
  (parse_options): Register a logging handler.
   Moved from execute_tests(); no functional change.
  (execute_tests): Remove logger checking and initialization.
</msg>
</logentry>
<logentry
   revision="1701753">
<author>ivan</author>
<date>2015-09-08T09:24:49.501120Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/wc_db_pristine.c</path>
</paths>
<msg>* subversion/libsvn_wc/wc_db_pristine.c
  (pristine_install_txn): Fix indentation. No functional changes intended.
</msg>
</logentry>
<logentry
   revision="1701749">
<author>ivan</author>
<date>2015-09-08T09:06:18.635659Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>Do not attempt convert arbitrary apr_status_t to OS error to check it for
OS specific codes.

* subversion/libsvn_subr/io.c
  (svn_io_open_uniquely_named, svn_io_dir_remove_nonrecursive,
   temp_file_create): Use 'apr_err == APR_FROM_OS_ERROR(os_error)' pattern
   instead of 'APR_TO_OS_ERROR(apr_err) == os_error'.
</msg>
</logentry>
<logentry
   revision="1701736">
<author>ivan</author>
<date>2015-09-08T07:32:02.917728Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>Fix Access Denied errors on checkout/update with working copies stored on
SMBv1 network shares.

Discussion: http://svn.haxx.se/dev/archive-2015-09/0054.shtml

Patch by: rhuijben
          me

* subversion/libsvn_subr/io.c
  (svn_io__win_rename_open_file): Return SVN_ERR_UNSUPPORTED_FEATURE if
   SetFileInformationByHandle() returns ERROR_ACCESS_DENIED. Windows seems
   to do not support performing rename operation twice using same file handle
   for SMBv1 network shares and return ERROR_ACCESS_DENIED in this without
   even sending request to SMB server. The caller will fall back to normal
   close + rename in this case.
</msg>
</logentry>
<logentry
   revision="1701649">
<author>rhuijben</author>
<date>2015-09-07T16:39:38.860701Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db_pristine.c</path>
</paths>
<msg>Following up on r1701641, handle the ugly pristine store testcase
here instead of by slowing down each and every pristine delete.

* subversion/libsvn_wc/wc_db_pristine.c
  (svn_wc__db_pristine_check): Introduce special handling for pristine
    store testcase here, where it doesn't slow down the generic case.
</msg>
</logentry>
<logentry
   revision="1701646">
<author>rhuijben</author>
<date>2015-09-07T16:07:48.027220Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/lock_tests.py</path>
</paths>
<msg>Following up on r1701598, further update lock expectations. In this case to
fix a specific non maintainer mode error text.

* subversion/tests/cmdline/lock_tests.py
  (lock_hook_messages): Expect summary at end of error.
</msg>
</logentry>
<logentry
   revision="1701643">
<author>rhuijben</author>
<date>2015-09-07T15:41:49.860883Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db_pristine.c</path>
</paths>
<msg>Following up on r1701641, remove wrapper function.

* subversion/libsvn_wc/wc_db_pristine.c
  (remove_file): Remove function.
  (pristine_remove_if_unreferenced_txn): Update caller.
</msg>
</logentry>
<logentry
   revision="1701641">
<author>rhuijben</author>
<date>2015-09-07T15:36:58.422956Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db_pristine.c</path>
</paths>
<msg>Remove a Windows specific slowdown from the pristine cleanup code, that
tried to rename a file to avoid file lock problems.

This block completely ignored that the rename would also fail in every
case where this 'optimization' would be interesting.

* subversion/libsvn_wc/wc_db_pristine.c
  (remove_file): Remove Win32 block.
</msg>
</logentry>
<logentry
   revision="1701638">
<author>rhuijben</author>
<date>2015-09-07T15:31:15.718520Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/wc_db_pristine.c</path>
</paths>
<msg>Avoid unnecessary work in the pristine install code.

* subversion/libsvn_wc/wc_db_pristine.c
  (pristine_install_txn): Don't set every pristine file to writable before it
    initially exists. There won't be a file anyway and otherwise it would
    just be replaced by the rename.
</msg>
</logentry>
<logentry
   revision="1701633">
<author>kotkov</author>
<date>2015-09-07T15:06:57.573885Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>Fix svn_stream_for_stdin() and related functions for STDOUT and STDERR
that were returning streams with mark() and seek() capabilities.

STDIN, STDOUT and STDERR don't provide general support for positioning
requests.  This behavior is implementation-specific and depends on what's
passed as the corresponding handle.  For example, on Linux, apr_file_seek()
that calls lseek() internally fails with ESPIPE [1] when the descriptor is
associated with a terminal device.  As we cannot safely advertise mark()
and seek() support for these streams, don't do that.

[1] http://pubs.opengroup.org/onlinepubs/9699919799/functions/lseek.html

* subversion/libsvn_subr/stream.c
  (svn_stream_for_stdin, svn_stream_for_stdout, svn_stream_for_stderr):
   Don't install mark and seek handlers.
</msg>
</logentry>
<logentry
   revision="1701611">
<author>rhuijben</author>
<date>2015-09-07T11:44:05.303558Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/authz_tests.py</path>
</paths>
<msg>Following up on r1701598, update expected error behavior in a lock authz test.

* subversion/tests/cmdline/authz_tests.py
  (authz_locking): Expect that all ra layers return the same exit code in
    these error conditions. Make error for other ra layers explicit by
    setting the same value again.
</msg>
</logentry>
<logentry
   revision="1701603">
<author>rhuijben</author>
<date>2015-09-07T10:42:32.068223Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/lock_tests.py</path>
</paths>
<msg>Following up on r1701598, revert guessed behavior change on posix platforms
in two tests.

* subversion/tests/cmdline/lock_tests.py
  (lock_and_exebit1,
   lock_and_exebit2): Revert change, as this change doesn't affect propset.
</msg>
</logentry>
<logentry
   revision="1701598">
<author>rhuijben</author>
<date>2015-09-07T10:23:44.938206Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/lock_tests.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/lock-cmd.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/unlock-cmd.c</path>
</paths>
<msg>Make 'svn' return an error when at least one lock or unlock operation fails.

Some users call this a regression against Subversion 1.8.x, but this really
depends on what RA layer you used before upgrading as the behavior wasn't
consistent.. Some returned an error, thereby failing the rest of the
operation while others produced a warning via the callback.

Note that there is no actual behavior change inside Subversion in this
commit, but just one in how the result is reported by svn.

* subversion/svn/lock-cmd.c
  (notify_lock_baton_t): New struct.
  (notify_lock_handler): New function.
  (svn_cl__lock): Wrap notify handler to detect errors.

* subversion/svn/unlock-cmd.c
  (notify_unlock_baton_t): New struct.
  (notify_unlock_handler): New function.
  (svn_cl__unlock): Wrap notify handler to detect errors.

* subversion/tests/cmdline/lock_tests.py
  (steal_lock,
   out_of_date,
   lock_and_exebit1,
   lock_and_exebit2,
   unlock_already_unlocked_files,
   unlock_wrong_token,
   unlocked_lock_of_other_user,
   lock_twice_in_one_wc,
   lock_path_not_in_head,
   block_unlock_if_pre_unlock_hook_fails,
   lock_invalid_token,
   lock_hook_messages,
   dav_lock_timeout,
   many_locks_hooks): Update expected behavior.
</msg>
</logentry>
<logentry
   revision="1701565">
<author>ivan</author>
<date>2015-09-07T07:18:24.924182Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>* subversion/libsvn_subr/stream.c
  (svn_stream__create_for_install): Update comment with rationale why we
   use buffered mode for temporary file.
</msg>
</logentry>
<logentry
   revision="1701564">
<author>ivan</author>
<date>2015-09-07T07:15:25.585443Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>Reduce difference between Windows and non-Windows implementation of
install_stream.

* subversion/libsvn_subr/stream.c
  (install_close): Remove #ifdef WIN32
  (svn_stream__create_for_install): Always setup flush on close stream
   handler.
  (svn_stream__install_stream): Close temporary file before rename on all
   platforms.
  (svn_stream__install_get_info): Obtain file info from file handle on all
   platforms.
  (svn_stream__install_delete): Close temporary file before delete on all
   platforms.
</msg>
</logentry>
<logentry
   revision="1701494">
<author>julianfoad</author>
<date>2015-09-06T14:53:25.633487Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/bash_completion</path>
</paths>
<msg>In 'bash_completion' implement much better URL completion.

See the dev@ email thread "bash_completion - subversion add: svn ls/merge
^/&lt;remote path&gt;", started by Christian Ferbar on 2015-08-12, archived at
e.g. &lt;http://svn.haxx.se/dev/archive-2015-08/0076.shtml&gt; or
&lt;http://mail-archives.apache.org/mod_mbox/subversion-dev/201508.mbox/%3C3421020.HomHkagcjs@chris-ws%3E&gt;.

Patch by: Christian Ferbar &lt;chris{_AT_}qnipp.com&gt;
(tweaked by me: removed a change in handling the SVN_BASH_COMPL_EXT env var)

* tools/client-side/bash_completion
  (_svn_lls): Add a comment noting brokenness.
  (_svn_complete_target): New.
  (_svn): Use _svn_complete_target() to complete URLs for merge, mergeinfo,
    checkout, list. Add a comment noting brokenness.
</msg>
</logentry>
<logentry
   revision="1701488">
<author>julianfoad</author>
<date>2015-09-06T13:27:43.154155Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/contrib/hook-scripts/check-mime-type.pl</path>
</paths>
<msg>Fix check-mime-type.pl so that it also works for svnlook versions from 1.7.8
(r1416637).

In r1416637, svnlook proplist --verbose output changed from propname : propval
format, to an indented output:

Properties on ...
  propname1
    propval1
    propval2

This change makes check-mime-type aware of both the pre 1.7.8 and 1.7.8+
formats.

Patch by: Brett Randall &lt;javabrett{_AT_}gmail.com&gt;
</msg>
</logentry>
<logentry
   revision="1701324">
<author>stefan2</author>
<date>2015-09-04T20:16:19.373579Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
</paths>
<msg>Keep the SVN_RA_SVN__LIST_ITEM macro.  It had been introduced to aid
the migration from APR arrays to a local type, but the code looks nicer
with it so I'll keep it.

* subversion/include/private/svn_ra_svn_private.h
  (SVN_RA_SVN__LIST_ITEM): Update commentary. No functional change.</msg>
</logentry>
<logentry
   revision="1701323">
<author>stefan2</author>
<date>2015-09-04T19:57:35.395275Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
</paths>
<msg>Fix compiler warning.

* subversion/include/private/svn_ra_svn_private.h
  (svn_ra_svn__item_t): Remove duplicate typedef.</msg>
</logentry>
<logentry
   revision="1701322">
<author>stefan2</author>
<date>2015-09-04T19:56:23.337787Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/cyrus_auth.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/cram.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/serve.c</path>
</paths>
<msg>Fine-tune ra_svn's item type definition: Remove a level of indirection
from the STRING union element.

This saves an extra allocation and the space for one pointer per string.
In total, this compensates the prior increase in RAM usage caused by
directly instantiating the list element.

* subversion/include/private/svn_ra_svn_private.h
  (svn_ra_svn__item_t): Instantiate the string directly instead of using
                        a pointer.

* subversion/libsvn_ra_svn/client.c
  (ra_svn_get_file): Update all references to the string union element.

* subversion/libsvn_ra_svn/cram.c
  (svn_ra_svn_cram_server): Same.

* subversion/svnserve/cyrus_auth.c
  (try_auth): Same.

* subversion/svnserve/serve.c
  (add_lock_tokens,
   unlock_paths,
   get_mergeinfo,
   log_cmd): Same.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn__to_public_item,
   svn_ra_svn__to_private_item): Same.
  (read_string): Don't allocate the string struct itself but only the
                 string data.
  (vparse_tuple,
   svn_ra_svn__read_string,
   svn_ra_svn__read_cstring): Update all references to the string element.
</msg>
</logentry>
<logentry
   revision="1701318">
<author>stefan2</author>
<date>2015-09-04T19:42:42.985177Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/serve.c</path>
</paths>
<msg>Fine-tune ra_svn's item type definition: Remove a level of indirection
from the LIST union element.

This saves an extra allocation per list and the space for one pointer
per list at the expense of adding space of 8 bytes per item.  In total,
a 10..20% increase in RAM usage for typical protocol data.

* subversion/include/private/svn_ra_svn_private.h
  (SVN_RA_SVN__LIST_ITEM): Allow for "&amp;" at the start of the list argument.
  (svn_ra_svn__item_t): Instantiate the list directly instead of using
                        a pointer.

* subversion/libsvn_ra_svn/client.c
  (parse_prop_diffs,
   parse_iproplist,
   ra_svn_get_dir,
   perform_ra_svn_log,
   perform_get_location_segments,
   ra_svn_lock,
   ra_svn_unlock,
   ra_svn_get_locks): Update all references to the list union element.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn__to_public_item,
   svn_ra_svn__to_private_item): Same.
  (read_item): No longer allocate the list struct but simply initialize it.
  (vparse_tuple,
   svn_ra_svn__read_tuple,
   svn_ra_svn__parse_proplist,
   svn_ra_svn__handle_failure_status,
   svn_ra_svn__read_list): Update all references to the list union element.

* subversion/svnserve/serve.c
  (add_lock_tokens,
   unlock_paths,
   lock_many,
   unlock_many): Same.
</msg>
</logentry>
<logentry
   revision="1701317">
<author>stefan2</author>
<date>2015-09-04T19:17:44.874058Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>Finally, make svn_ra_svn__list_t actually a fully typed, ra_svn-specific
object.  Update the creation functions; everything else already "just fits".

This change provides small performance and memory usage improvements
over plain APR arrays. The runtime savings come from apr_array_push
calling overhead and the non-allocation of the items array in case it is
empty. The space savings are due to allocating only the amount of elements
needed (if these are no more than 4) and the smaller array header type.

However, more performance improvements will be provided by follow-up
commits that merge array and string headers with the item type.

* subversion/include/private/svn_ra_svn_private.h
  (svn_ra_svn__list_t): Define locally as a struct now.
  (SVN_RA_SVN__LIST_ITEM): Update access macro.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn__to_private_array): Adapt conversion code.
  (read_item): Efficiently create instances of the new array type.</msg>
</logentry>
<logentry
   revision="1701316">
<author>stefan2</author>
<date>2015-09-04T19:17:06.179346Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/serve.c</path>
</paths>
<msg>Last preparations for switching to a different type for ra_svn item lists.

This replaces the last usages of APR arrays for protocol items with the
appropriate ra_svn type and access macro.

* subversion/svnserve/serve.c
  (get_dir,
   get_mergeinfo,
   log_cmd,
   get_locations,
   lock_many,
   unlock_many): Use the new array type and access macro for item lists.</msg>
</logentry>
<logentry
   revision="1701303">
<author>ivan</author>
<date>2015-09-04T18:06:03.328582Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>Remove unused argument from static function. No functional changes
intended.

* subversion/libsvn_subr/io.c
  (win32_file_rename): Remove POOL argument.
  (svn_io_file_rename2): Adapt calls to win32_file_rename().
</msg>
</logentry>
<logentry
   revision="1701299">
<author>ivan</author>
<date>2015-09-04T17:39:55.796173Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk</path>
</paths>
<msg>Configure tsvn:projectlanguage property to have TortoiseSVN 1.9 spell check
log messages on computers with non-English locale.

* trunk/
  (tsvn:projectlanguage): Set to 1033 (English).
</msg>
</logentry>
<logentry
   revision="1701298">
<author>ivan</author>
<date>2015-09-04T17:24:34.886513Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_io_private.h</path>
</paths>
<msg>Fix spurious 'Access Denied' errors during checkout or commit on Windows
reported on TortoiseSVN users mailing list [1].

The issue can be reproduced locally even though known problems reports are
with working copies stored on network share. The reproduction script is:
1. Checkout working copy with a file 'foo'
2. Run 'for /L %I in (1,1,50000000) do type foo' command in background to
   emulate indexers/antivirus scanners
3. Modify file 'foo' in repository via another working copy.
4. Update the original working copy with 'type foo' running

The real fix is to add retry loop for SetFileInformationByHandle() call. All
other changes are refactoring to move existing platform specific code from
libsvn_subr/stream.c to libsvn_subr/io.c to use WIN32_RETRY_LOOP macro. We
already have retry loops for almost all IO operations on Windows.

[1] http://tortoisesvn.tigris.org/ds/viewMessage.do?dsForumId=4061&amp;dsMessageId=3134203

* subversion/include/private/svn_io_private.h
  (svn_io__win_delete_file_on_close, svn_io__win_rename_open_file): Declare
   new library private functions.

* subversion/libsvn_subr/io.c
  (FILE_RENAME_INFO, FILE_DISPOSITION_INFO, FileRenameInfo,
   FileDispositionInfo, SetFileInformationByHandle_t,
   set_file_information_by_handle_proc): Move it here from
   libsvn_subr/stream.c.

  (win_init_dynamic_imports): Obtain pointer to SetFileInformationByHandle().

  (win32_set_file_information_by_handle): New helper.

  (svn_io__win_delete_file_on_close): New. Implementation extracted from
   svn_stream__install_delete().

  (svn_io__win_rename_open_file): New. Implementation extracted from
   svn_stream__install_stream(). Retry operation on Access Denied errors.
   
* subversion/libsvn_subr/stream.c
  (FILE_RENAME_INFO, FILE_DISPOSITION_INFO, SetFileInformationByHandle_t):
   Move to libsvn_subr/io.c.

  (SetFileInformationByHandle, SetFileInformationByHandle_a,
   find_SetFileInformationByHandle): Remove.

  (svn_stream__install_stream): Use svn_io__win_rename_open_file().
  
  (svn_stream__install_delete): Use svn_io__win_delete_file_on_close().
</msg>
</logentry>
<logentry
   revision="1701278">
<author>ivan</author>
<date>2015-09-04T14:48:14.984362Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/subst.c</path>
</paths>
<msg>* subversion/libsvn_subr/subst.c
  (create_special_file_from_stream): Use if/else if instead of nested if
   statements. Add missing svn_error_trace() call.
</msg>
</logentry>
<logentry
   revision="1701270">
<author>ivan</author>
<date>2015-09-04T14:06:26.756873Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>Follow-up to r1700215: Add required import in test suite.

* build/run_tests.py
  (): Add 'import re'.
</msg>
</logentry>
<logentry
   revision="1701237">
<author>rhuijben</author>
<date>2015-09-04T12:25:13.603382Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_repos/repos-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_repos/repos-test.c
  (includes): Add svn_sorts.h and svn_dep_compat.h.
  (MAX,MIN): Remove unneeded defines.
</msg>
</logentry>
<logentry
   revision="1701211">
<author>ivan</author>
<date>2015-09-04T11:11:19.298087Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
</paths>
<msg>Add another test for svn_stream__install_stream().

* subversion/tests/libsvn_subr/io-test.c
  (test_install_stream_over_readonly_file): New.
  (test_funcs): Add new test to list.
</msg>
</logentry>
<logentry
   revision="1701206">
<author>ivan</author>
<date>2015-09-04T10:40:00.794092Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>* subversion/libsvn_subr/stream.c
  (svn_stream__install_delete): Formatting fix.
</msg>
</logentry>
<logentry
   revision="1701077">
<author>stsp</author>
<date>2015-09-03T17:07:01.533912Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/serf.c
  (svn_ra_serf__progress): Resolve a shadowed symbol warning (about the 
   'read' function) by renaming function parameters: read -&gt; bytes_read,
   and written -&gt; bytes_written for consistency.
</msg>
</logentry>
<logentry
   revision="1701074">
<author>stsp</author>
<date>2015-09-03T17:01:55.155428Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/serf.c
  (load_config): Simplify by using svn_cstring_strtoi64() instead of strtol().
</msg>
</logentry>
<logentry
   revision="1701064">
<author>ivan</author>
<date>2015-09-03T16:33:31.371074Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>* subversion/libsvn_subr/io.c
  (win_init_dynamic_imports): Check return value from
   GetModuleHandle("kernel32.dll") for NULL even it's almost impossible 
   situation.
</msg>
</logentry>
<logentry
   revision="1701053">
<author>ivan</author>
<date>2015-09-03T15:39:55.904166Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/util.c</path>
</paths>
<msg>Use the native Windows API capabilities to guarantee that data is flushed
to disk after file renames in FSFS. This also avoids reopening the renamed
file just to perform the flush.

* subversion/libsvn_fs_fs/util.c
  (svn_fs_fs__move_into_place): Call svn_io_file_rename2() with
   FLUSH_TO_DISK=TRUE and remove flushing to disk after rename, since
   svn_io_file_rename2() will do this for us. We still have to manually
   flush changes for cross-volume copies, but it's something that could
   be improved later.
</msg>
</logentry>
<logentry
   revision="1701048">
<author>ivan</author>
<date>2015-09-03T15:16:50.895637Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>* subversion/libsvn_subr/io.c: Call svn_io_file_rename2() with
  FLUSH_TO_DISK=TRUE and remove posix-specific flushing to disk, since
  svn_io_file_rename2() will do this for us.
</msg>
</logentry>
<logentry
   revision="1701017">
<author>ivan</author>
<date>2015-09-03T13:24:03.345783Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/lock.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/lock.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/copy.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/node.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/export.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/upgrade.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/workqueue.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/config_auth.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db_pristine.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/subst.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/deprecated.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/util.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/externals.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/copy.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Implement svn_io_file_rename2() with FLUSH_TO_DISK flag to require OS to
wait until rename operation is actually written to disk. Discussed in thread
"svn commit: r1682265 - /subversion/trunk/subversion/libsvn_fs_fs/util.c" on
dev@s.a.o [1]

[1] http://svn.haxx.se/dev/archive-2015-05/0211.shtml

* subversion/include/svn_io.h
  (svn_io_file_rename2): New function declaration.
  (svn_io_file_rename): Deprecate.

* subversion/libsvn_subr/io.c
  (win32_file_rename): Use MOVEFILE_WRITE_THROUGH flag in call to
   MoveFileExW if FLUSH_TO_DISK is non-zero.
  (svn_io_file_rename2): Revv from svn_io_file_rename(). Add FLUSH_TO_DISK
   parameter and perform flush to disk operation depending on the platform:
   use MoveFileEx flag on Windows, fsync() target directory on POSIX and 
   fsync() target file on all other platforms. This logic mostly copied 
   from svn_fs_fs__move_into_place().
  (svn_io_copy_link, svn_io_copy_file, svn_io_write_atomic,
   svn_io_write_version_file): Use svn_io_rename2() with 
   FLUSH_TO_DISK=FALSE instead of svn_io_rename().

* subversion/tests/libsvn_subr/io-test.c
  (test_file_rename2): Simple tests for svn_io_file_rename2().
  (test_funcs): Add test_file_rename2.

* subversion/libsvn_subr/deprecated.c
  (svn_io_file_rename): Call svn_io_file_rename2() with FLUSH_TO_DISK=FALSE.

* subversion/libsvn_client/copy.c
* subversion/libsvn_client/export.c
* subversion/libsvn_client/externals.c
* subversion/libsvn_fs_fs/fs_fs.c
* subversion/libsvn_fs_fs/lock.c
* subversion/libsvn_fs_fs/transaction.c
* subversion/libsvn_fs_fs/util.c
* subversion/libsvn_fs_x/lock.c
* subversion/libsvn_fs_x/transaction.c
* subversion/libsvn_fs_x/util.c
* subversion/libsvn_subr/config_auth.c
* subversion/libsvn_subr/stream.c
* subversion/libsvn_subr/subst.c
* subversion/libsvn_wc/copy.c
* subversion/libsvn_wc/node.c
* subversion/libsvn_wc/upgrade.c
* subversion/libsvn_wc/wc_db_pristine.c
* subversion/libsvn_wc/workqueue.c
  (*): Use svn_io_file_rename2() with FLUSH_TO_DISK=FALSE instead of
  svn_io_file_rename().
</msg>
</logentry>
<logentry
   revision="1700966">
<author>danielsh</author>
<date>2015-09-03T09:21:43.694387Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/include/svn_types.swg</path>
</paths>
<msg>swig: Disable wrappers that aren't working.

This disables svn_fs_change_rev_prop2() and its higher-layer wrappers, which
are currently segfaulting when called from Python (other languages weren't
tested).

Found by: Mark Ziesemer &lt;online{_AT_}mark.ziesemer.com&gt;

* subversion/bindings/swig/include/svn_types.swg
  (const svn_string_t *const *old_value_p): New typemap.</msg>
</logentry>
<logentry
   revision="1700951">
<author>rhuijben</author>
<date>2015-09-03T08:29:26.129921Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_auth_kwallet/kwallet.cpp</path>
</paths>
<msg>Following up on r1700740, add missing include.

Patch by: James McCoy &lt;jamessan{_AT_}debian.org&gt;

* subversion/libsvn_auth_kwallet/kwallet.cpp
  (includes): Add svn_hash.h.
</msg>
</logentry>
<logentry
   revision="1700863">
<author>stefan2</author>
<date>2015-09-02T18:13:44.693607Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnserve/serve.c</path>
</paths>
<msg>* subversion/svnserve/serve.c
  (set_path): Code formatting fix. No functional change.</msg>
</logentry>
<logentry
   revision="1700862">
<author>stefan2</author>
<date>2015-09-02T18:12:49.542331Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnserve/serve.c</path>
</paths>
<msg>* subversion/svnserve/serve.c
  (construct_server_baton): Call the internal API to prevent parameter
                            type conversion issues later on.
</msg>
</logentry>
<logentry
   revision="1700861">
<author>stefan2</author>
<date>2015-09-02T18:09:52.645706Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/serve.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/deprecated.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>Resolve the last API dependency that prevents us from chaning the ra_svn
list item type: the (deprecated) command handler API.

This switches the private API to a new svn_ra_svn__command_handler type
which expects an svn_ra_svn__list_t parameter instead of an APR array.
Then there is the usual translation code between public &amp; private API.
However, since we can't easily translate the callbacks in the API-provided
table, we must allow for both callback types in our new command instance.
Upon invocation we decide which one to call (only one of them will be set).

* subversion/include/private/svn_ra_svn_private.h
  (svn_ra_svn__command_handler): New callback type, similar to
                                 svn_ra_svn_command_handler.
  (svn_ra_svn__cmd_entry_t): New command structure, similar to
                             svn_ra_svn_cmd_entry_t.
  (svn_ra_svn__handle_commands2): Expect commands of the new type.

* subversion/libsvn_ra_svn/deprecated.c
  (svn_ra_svn_handle_commands2): Translate command table.
  (svn_ra_svn_handle_commands): To reuse code, implement this in terms of
                                svn_ra_svn_handle_commands2 now.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn__handle_command): Expect the new command type now.
                                Translate parameters if we have to call
                                legacy handlers.
  (svn_ra_svn__handle_commands2): Switch to the new command type.

* subversion/svnserve/serve.c
  (report_commands,
   main_commands): Update command table definition.
  (serve_interruptable): Switch to the new command type.</msg>
</logentry>
<logentry
   revision="1700855">
<author>stefan2</author>
<date>2015-09-02T17:40:02.756288Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/internal_auth.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/cyrus_auth.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/serve.c</path>
</paths>
<msg>Continue work towards using a specialized list type for ra_svn items.

This introduces a typesafe access macro replacing APR_ARRAY_IDX for
svn_ra_svn__list_t.  The generated code is still the same but specifics
of the list data type are now hidden in that new macro.

* subversion/include/private/svn_ra_svn_private.h
  (SVN_RA_SVN__LIST_ITEM): Declare new macro.

* subversion/libsvn_ra_svn/client.c
  (parse_prop_diffs,
   parse_iproplist,
   ra_svn_get_dir,
   perform_ra_svn_log,
   ra_svn_get_locks): Use the new macro to access for svn_ra_svn__list_t
                      throughout the code.

* subversion/libsvn_ra_svn/cyrus_auth.c
  (svn_ra_svn__do_cyrus_auth): Same.

* subversion/libsvn_ra_svn/internal_auth.c
  (svn_ra_svn__find_mech): Same.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn__to_public_array,
   svn_ra_svn__set_capabilities,
   vparse_tuple,
   svn_ra_svn__parse_proplist,
   svn_ra_svn__handle_failure_status,
   svn_ra_svn__read_string,
   svn_ra_svn__read_cstring,
   svn_ra_svn__read_word,
   svn_ra_svn__read_revision,
   svn_ra_svn__read_boolean,
   svn_ra_svn__read_list): Same.

* subversion/svnserve/serve.c
  (add_lock_tokens,
   unlock_paths,
   construct_server_baton): Same.
</msg>
</logentry>
<logentry
   revision="1700849">
<author>danielsh</author>
<date>2015-09-02T16:18:26.198680Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/ac-macros/swig.m4</path>
</paths>
<msg>Followup to r1700844: fix the build.

* build/ac-macros/swig.m4
  (SVN_CHECK_SWIG, SVN_FIND_SWIG):
     Only require swig when --with-swig was passed.</msg>
</logentry>
<logentry
   revision="1700847">
<author>ivan</author>
<date>2015-09-02T16:09:55.716697Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>Follow-up to r1687583: Fix svn_io_file_rename() on OS/2.

* subversion/libsvn_subr/io.c
  (svn_io_file_rename): Restore call to apr_file_rename() on OS/2 like it
   was before r1687583.
</msg>
</logentry>
<logentry
   revision="1700844">
<author>danielsh</author>
<date>2015-09-02T15:39:13.631769Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/ac-macros/swig.m4</path>
</paths>
<msg>swig: Error out if --with-swig was passed but swig not found.

* build/ac-macros/swig.m4
  (SVN_FIND_SWIG): As above.
    Also, change the magic string used by SVN_CHECK_SWIG/SVN_FIND_SWIG to
    communicate the "--with-swig passed without value" case.</msg>
</logentry>
<logentry
   revision="1700831">
<author>stefan2</author>
<date>2015-09-02T14:10:58.673686Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_ra_svn/deprecated.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/cyrus_auth.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/editorp.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnserve/serve.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/internal_auth.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/ra_svn.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>First step towards using a specialized list type for ra_svn items.

This introduces svn_ra_svn__list_t as a mere alias to apr_array_header_t
and replaces all uses of the latter where they contain svn_ra_svn__item_t.
Exception: the command function definition because that one will require
a specific conversion routine.  So, lots of code churn here but no
intended functional change.

After a few more of these formal mirgration steps, we will make the new
list type type-safe and more light-weight than the generic APR array.

* subversion/include/private/svn_ra_svn_private.h
  (svn_ra_svn__list_t): Define our new list type.
  (svn_ra_svn__item_t,
   svn_ra_svn__to_public_array,
   svn_ra_svn__to_private_array,
   svn_ra_svn__set_capabilities,
   svn_ra_svn__parse_tuple,
   svn_ra_svn__parse_proplist,
   svn_ra_svn__read_data_log_changed_entry)
   svn_ra_svn__to_public_item): Switch to the new list type for
                                protocol items.

* subversion/libsvn_ra_svn/ra_svn.h
  (svn_ra_svn__handle_failure_status,
   svn_ra_svn__do_cyrus_auth,
   svn_ra_svn__do_internal_auth,
   svn_ra_svn__find_mech): Same.

* subversion/libsvn_ra_svn/client.c
  (make_connection,
   parse_prop_diffs,
   handle_auth_request,
   open_session,
   ra_svn_rev_proplist,
   parse_iproplist,
   ra_svn_get_file,
   ra_svn_get_dir,
   perform_ra_svn_log, 
   ra_svn_stat,
   ra_svn_lock_compat,
   ra_svn_lock,
   ra_svn_unlock,
   ra_svn_get_lock,
   ra_svn_get_locks,
   ra_svn_replay_range,
   ra_svn_get_inherited_props): Same.

* subversion/libsvn_ra_svn/cyrus_auth.c
  (svn_ra_svn__do_cyrus_auth): Same.

* subversion/libsvn_ra_svn/editorp.c
  (ra_svn_handle_target_rev,
   ra_svn_handle_open_root,
   ra_svn_handle_delete_entry,
   ra_svn_handle_add_dir,
   ra_svn_handle_open_dir,
   ra_svn_handle_change_dir_prop,
   ra_svn_handle_close_dir,
   ra_svn_handle_absent_dir,
   ra_svn_handle_add_file,
   ra_svn_handle_open_file,
   ra_svn_handle_apply_textdelta,
   ra_svn_handle_textdelta_chunk,
   ra_svn_handle_textdelta_end,
   ra_svn_handle_change_file_prop,
   ra_svn_handle_close_file,
   ra_svn_handle_absent_file,
   ra_svn_handle_close_edit,
   ra_svn_handle_abort_edit,
   ra_svn_handle_finish_replay,
   blocked_write,
   svn_ra_svn_drive_editor2): Same.

* subversion/libsvn_ra_svn/internal_auth.c
  (svn_ra_svn__find_mech,
   svn_ra_svn__do_internal_auth): Same.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn__to_public_array,
   svn_ra_svn__to_private_array,
   svn_ra_svn_set_capabilities,
   svn_ra_svn__set_capabilities,
   vparse_tuple,
   svn_ra_svn__parse_tuple,
   svn_ra_svn__parse_proplist,
   svn_ra_svn__handle_failure_status,
   svn_ra_svn__read_cmd_response,
   svn_ra_svn__handle_command,
   svn_ra_svn__read_string,
   svn_ra_svn__read_cstring,
   svn_ra_svn__read_word,
   svn_ra_svn__read_revision,
   svn_ra_svn__read_boolean,
   svn_ra_svn__read_list,
   svn_ra_svn__read_check_array_size,
   svn_ra_svn__read_data_log_changed_entry): Same.

* subversion/svnserve/serve.c
  (set_path,
   delete_path,
   link_path,
   finish_report,
   abort_report,
   reparent,
   get_latest_rev,
   do_change_rev_prop,
   change_rev_prop2,
   change_rev_prop,
   rev_proplist,
   rev_prop,
   add_lock_tokens,
   unlock_paths,
   commit,
   get_file,
   get_dir, 
   update,
   switch_cmd,
   status,
   diff,
   get_mergeinfo,
   log_cmd,
   check_path,
   stat_cmd,
   get_locations, 
   get_location_segments,
   get_file_revs,
   lock, 
   lock_many, 
   unlock, 
   unlock_many, 
   get_lock,
   get_locks,
   replay,
   replay_range, 
   get_deleted_rev,
   get_inherited_props,
   construct_server_baton): Same.

* subversion/libsvn_ra_svn/deprecated.c
  (svn_ra_svn_parse_tuple,
   svn_ra_svn_parse_proplist): Same. A temporary variable is used to
                               prevent future type conflicts.
</msg>
</logentry>
<logentry
   revision="1700799">
<author>stefan2</author>
<date>2015-09-02T13:04:51.905791Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_subr/stream-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svnfsfs/load-index-cmd.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
</paths>
<msg>[Combines r1698359 and r170078 into a single commit for better review.]
Introduce a stream wrapper object that adds buffering support to any
readable stream.  Use it on the stdin streams in our CL tools. 

As it turns out, parsing data from a stdin byte-by-byte incurs a
massive overhead of 100% internal and 300% system load over a buffered
stream.  'svnadmin load-revprops' sees a 5 times speedup if all data
is in OS disc caches.  This is a realistic assumption in a "final sync
and switch over to new repository" scenario.

The other 2 uses of stdin either have less data to process (svnfsfs
load-index) or parse only a small fraction of the stream (svnadmin load).

* subversion/include/svn_io.h
  (svn_stream_wrap_buffered_read): Declare the new stream constructor API.

* subversion/libsvn_subr/stream.c
  (read_handler_buffering_wrapper,
   data_available_handler_buffering_wrapper,
   is_buffered_handler_buffering_wrapper): Internal logic of the new
                                           stream object.
  (svn_stream_wrap_buffered_read): New constructor implementation.

* subversion/svnadmin/svnadmin.c
  (subcommand_load_revprops): Wrap the stdin stream.

* subversion/svnfsfs/load-index-cmd.c
  (subcommand__load_index): Same.

* subversion/tests/libsvn_subr/stream-test.c
  (struct stream_baton_t,
   read_handler,
   data_available_handler,
   create_test_read_stream): New configurable test read stream.
  (expect_line_content,
   test_stream_buffered_wrapper): New test for the new wrapper stream. 
  (test_funcs): Register the new test.</msg>
</logentry>
<logentry
   revision="1700797">
<author>stefan2</author>
<date>2015-09-02T12:56:36.332280Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_subr/stream-test.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/load-index-cmd.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
</paths>
<msg>Revert r1698359 and r1700789 for rehashing.</msg>
</logentry>
<logentry
   revision="1700789">
<author>stefan2</author>
<date>2015-09-02T12:33:52.749455Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/stream-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnfsfs/load-index-cmd.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
</paths>
<msg>[Reverted in r1700797 and re-applied as part of r1700799.]
Remove support for mark &amp; seek from "buffered read" stream wrapper as it
was deemed to difficult to handle.  See also here:
http://mail-archives.apache.org/mod_mbox/subversion-dev/201509.mbox/%3CCAP_GPNjwhjD1Ds5%2ByYKiqr2NwzbhmnGq%3DqtB8jowBUJty7_Z3Q%40mail.gmail.com%3E

* subversion/include/svn_io.h
  (svn_stream_wrap_buffered_read): Remove all references to mark &amp; seek
                                   other than saying we don't support them.

* subversion/libsvn_subr/stream.c
  (buffering_stream_wrapper_baton): Remove all elements used for mark &amp; seek.
  (buffering_stream_wrapper_mark): Drop.
  (read_handler_buffering_wrapper): Simplify as we always exhaust the buffer
                                    and can completely discard it now.
  (decrement_mark_count,
   mark_handler_buffering_wrapper,
   seek_handler_buffering_wrapper,
   assert_zero_mark_count): Drop.
  (svn_stream_wrap_buffered_read): Update. Allocate the buffer only one and
                                   do that here.

* subversion/svnadmin/svnadmin.c
  (subcommand_load_revprops): Update API caller.

* subversion/svnfsfs/load-index-cmd.c
  (subcommand__load_index): Update API caller.

* subversion/tests/libsvn_subr/stream-test.c
  (test_stream_buffered_wrapper): Update API caller.
</msg>
</logentry>
<logentry
   revision="1700774">
<author>stefan2</author>
<date>2015-09-02T11:55:41.730431Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/subst.c</path>
</paths>
<msg>Revert r1700305.</msg>
</logentry>
<logentry
   revision="1700740">
<author>rhuijben</author>
<date>2015-09-02T09:15:02.468965Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_auth_kwallet/kwallet.cpp</path>
</paths>
<msg>In the kwallet code: Initialize the wallet cache once, instead
of every time we get or save a password. Cache the wallet in the
parameter hash and its pool instead of the single invocation pool.

This patch is in response to an issue
Found by: James McCoy &lt;jamessan{_AT_}debian.org&gt;

* subversion/libsvn_auth_kwallet/kwallet.cpp
  (kwallet_terminate): Add forward definition.
  (get_wallet): Register pool cleanup handler once, and only when we set
    the wallet. Register cleanup on the hash pool.
  (kwallet_terminate): Completely cleanup.

  (kwallet_password_get,
   kwallet_password_set): Don't add another cleanup hook on every invocation.
</msg>
</logentry>
<logentry
   revision="1700633">
<author>brane</author>
<date>2015-09-01T18:18:34.773936Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/setenv.sh</path>
</paths>
<msg>* tools/buildbot/slaves/svn-x64-macosx/setenv.sh:
   Update docs about available environment variables.
</msg>
</logentry>
<logentry
   revision="1700629">
<author>brane</author>
<date>2015-09-01T17:58:25.889970Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/svncheck-bindings.sh</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/svnbuild-bindings.sh</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/svncheck.sh</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/svnbuild.sh</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/svnclean.sh</path>
</paths>
<msg>* tools/buildbot/slaves/svn-x64-macosx:
   Remove the svn:ignore property that's no longer needed here.

* tools/buildbot/slaves/svn-x64-macosx/svnclean.sh,
  tools/buildbot/slaves/svn-x64-macosx/svnbuild.sh,
  tools/buildbot/slaves/svn-x64-macosx/svnbuild-bindings.sh,
  tools/buildbot/slaves/svn-x64-macosx/svncheck.sh,
  tools/buildbot/slaves/svn-x64-macosx/svncheck-bindings.sh:
   Revert thinko in r1700626 ... the scripts are still (relatively)
   in the same directory.
</msg>
</logentry>
<logentry
   revision="1700626">
<author>brane</author>
<date>2015-09-01T17:36:41.939182Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/svnclean.sh</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/svncheck-bindings.sh</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/svnbuild-bindings.sh</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/setenv.sh</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/svncheck.sh</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/svnbuild.sh</path>
</paths>
<msg>Move the expected location of the svn-x64-macosx buildbot scripts
into a subdirectory, to allow for running other builders on the
same buildslave.

* tools/buildbot/slaves/svn-x64-macosx/setenv.sh
  (environment): Skip another directory level.

* tools/buildbot/slaves/svn-x64-macosx/svnclean.sh,
  tools/buildbot/slaves/svn-x64-macosx/svnbuild.sh,
  tools/buildbot/slaves/svn-x64-macosx/svnbuild-bindings.sh,
  tools/buildbot/slaves/svn-x64-macosx/svncheck.sh,
  tools/buildbot/slaves/svn-x64-macosx/svncheck-bindings.sh
  (scripts): Descend into the .../svnbot directory.
</msg>
</logentry>
<logentry
   revision="1700533">
<author>brane</author>
<date>2015-09-01T12:53:36.876849Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/templates/stable-news.ezt</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/templates/rc-release-ann.ezt</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dist/templates/rc-news.ezt</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dist/templates/stable-release-ann.ezt</path>
</paths>
<msg>Update download links in the news and release notice templates.

* tools/dist/templates/rc-news.ezt,
  tools/dist/templates/rc-release-ann.ezt,
  tools/dist/templates/stable-news.ezt,
  tools/dist/templates/stable-release-ann.ezt:
   Point to /download.cgi instead of the obsolete and nonexistent /download/.
</msg>
</logentry>
<logentry
   revision="1700532">
<author>stsp</author>
<date>2015-09-01T12:47:43.840102Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/bb-openbsd/svnbuild.sh</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/buildbot/slaves/bb-openbsd/svncheck-bindings.sh</path>
</paths>
<msg>Disable perl bindings for the bb-openbsd bot for now. There's a linking problem
where perl ends up pulling the wrong svn libs into the process. The fix is not
immediately clear but I can reproduce the problem locally. To make the bot green
after being red for a long time, we'll temporarily skip perl bindings for now.
</msg>
</logentry>
<logentry
   revision="1700305">
<author>stefan2</author>
<date>2015-08-31T19:16:06.801198Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/subst.c</path>
</paths>
<msg>[Reverted in r1700774.]

Add a function to destroy / remove a mark from a stream.

For some streams, a mark is a relatively expensive object.  Merely relying
on timely pool cleanups is not always enough because our pool usage pattern
often relies on the caller to clean up pools in a timely manner.  Having
explicit control over the lifetime of stream marks similar to what we have
with file objects will improve ease of use.

In this patch, only wrapping streams and those with "heavy" mark objects
implement svn_stream_remove_mark().  For all other streams that support
svn_stream_mark() it defaults to a no-op.

We use the new API in svn_stream_readline() to prevent long-living marks
on the new buffering read stream wrapper.  This, in turn, limits the buffer
size of that stream to 2x SVN__STREAM_CHUNK_SIZE in all non-degenerate
cases.

* subversion/include/svn_io.h
  (svn_stream_remove_mark_fn_t,
   svn_stream_set_remove_mark,
   svn_stream_remove_mark): Definition trio for the new public stream API.

* subversion/libsvn_subr/stream.c
  (svn_stream_t): Add a  function table entry for the new function. 
  (svn_stream_set_remove_mark): Implement new public API.
  (svn_stream_remove_mark): Same. Make it a no-op by default.

  (stream_readline_chunky): Use the new API to release stream marks asap.

  (remove_mark_handler_disown,
   svn_stream_disown): Explicitly implement the new API as forwarding to
                       the wrapped stream.
  (buffering_stream_wrapper_mark): Extend the mark object such that we
                                   can call the cleanup explicitly.
  (mark_handler_buffering_wrapper): Update mark constructor.
  (remove_mark_handler_buffering_wrapper,
   svn_stream_wrap_buffered_read): Explicitly implement the new API with the
                                   same effect as an explicit pool cleanup.
  (seek_handler_lazyopen,
   svn_stream_lazyopen_create): Explicitly implement the new API as
                                forwarding to the wrapped stream.

* subversion/libsvn_subr/subst.c
  (translated_stream_seek,
   stream_translated): Same.</msg>
</logentry>
<logentry
   revision="1700220">
<author>brane</author>
<date>2015-08-31T09:23:10.217689Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>* build/run_tests.py
  (TestHarness._init_c_tests): Fix reference to the memcached-server option.
</msg>
</logentry>
<logentry
   revision="1700219">
<author>brane</author>
<date>2015-08-31T09:20:46.298674Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/win-tests.py</path>
</paths>
<msg>Follow up to 1700215: Fix bugs in the Windows test driver.

* win_tests.py: Don't make tuples out of option values.
</msg>
</logentry>
<logentry
   revision="1700215">
<author>brane</author>
<date>2015-08-31T07:44:16.088349Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/win-tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
</paths>
<msg>Make sure that test suite options are initialized consistently
and in one place only. This removes code duplication between
run_tests.py and the Python tests, for example.


* build/run_tests.py
  (SVN_VER_MINOR): Remove; duplicate of svntest.main.SVN_VER_MINOR.
  (svntest): New. Placeholder for the imported svntest module.
  (TestHarness.__init__): Remove all keyword arguments that are just
   copies of program options and use the options struct instead.
   Update all references to 'self' attributes with 'self.opts'.
  (TestHarness._init_c_tests): New; construct the command line for the C tests.
  (TestHarness._init_py_tests): New; initialize the Python test options by
   constructing command-line args and using the options parser in
   svntest.main to parse them. Althgough this appears to be a roundabout
   way to set up the options structure, it removes a bunch of code
   duplication for validating and canonicalizing the test options.
  (TestHarness.run): Initialize C and Python test options exactly once
   per test run, so that individual tests don't repeat the same
   initialization and module import over and over again.
  (TestHarness._run_c_test): Use the pre-cooked command line and options.
  (TestHarness._run_py_test): Likewise.
  (TestHarness._split_nums): Remove; unused.
  (TestHarness._run_test): Use prepared test case parameters.
  (create_parser): New. Use the optparse module to construct a parser
   for the program options.
  (main): Replace getopt-based parsing with optparse-based parser from
   create_parser().

* subversion/tests/cmdline/svntest/main.py
  (create_default_options): Remove; unused.
  (_create_parser): Accept an optional usage string.
   Add a new option, --parallel-instances, to allow run_tests.py to pass
   the actual number of requested parallel test threads.
  (parse_options): Renamed from _parse_options.
  (execute_tests): Since svntest.main.options are now initialized only
   once per test run, be sure to restore the 'parallel' flag between
   individual test fixture invocations.

* win-tests.py: Update the initialization of the TestHarness class,
   using the new run_tests.create_parser function to prepare default
   options.
</msg>
</logentry>
<logentry
   revision="1700182">
<author>stefan2</author>
<date>2015-08-31T00:05:20.356179Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/load-fs-vtable.c</path>
</paths>
<msg>Further capitalize on r1700180 by simplyfing our parser implementation.

* subversion/libsvn_repos/load-fs-vtable.c
  (magic_header_record): Remove unnecessary function.
  (svn_repos_get_fs_build_parser5,
   build_revprop_parser): No longer provide a callback for info that
                          we are not interested in.
</msg>
</logentry>
<logentry
   revision="1700180">
<author>stefan2</author>
<date>2015-08-31T00:00:09.339137Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/load.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_repos.h</path>
</paths>
<msg>Enable svn_repos_parse_dumpstream3() to work with incomplete parser callback
function tables.  Replace the functions given by the caller as NULL with a
no-op dummy.

* subversion/include/svn_repos.h
  (svn_repos_parse_dumpstream3): Add comment that caller requirements are
                                 now relaxed.

* subversion/libsvn_repos/load.c
  (dummy_handler_magic_header_record,
   dummy_handler_uuid_record,
   dummy_handler_new_revision_record,
   dummy_handler_new_node_record,
   dummy_handler_set_revision_property,
   dummy_handler_set_node_property,
   dummy_handler_delete_node_property,
   dummy_handler_remove_node_props,
   dummy_handler_set_fulltext,
   dummy_handler_apply_textdelta,
   dummy_handler_close_node,
   dummy_handler_close_revision): Complete set of no-op dummy callbacks.
  (SET_VTABLE_ENTRY): A local macro to make the next function more readable
                      and easier to maintain.
  (complete_vtable): New function to patch up incomplate function tables.
  (svn_repos_parse_dumpstream3): Patch up the function table before using it.

* subversion/tests/cmdline/svnadmin_tests.py
  (load_revprops): No longer expected to fail.</msg>
</logentry>
<logentry
   revision="1700174">
<author>stefan2</author>
<date>2015-08-30T23:03:15.257678Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Add a test case for 'svnadmin load-revprops'.

* subversion/tests/cmdline/svnadmin_tests.py
  (dump_revprops): New test case.
  (test_list): Register new test.</msg>
</logentry>
<logentry
   revision="1700173">
<author>stefan2</author>
<date>2015-08-30T23:02:59.885832Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnfsfs_tests.py</path>
</paths>
<msg>svnfsfs tests don't need a working copy.

* subversion/tests/cmdline/svnfsfs_tests.py
  (test_stats,
   load_index_sharded): Don't keep a working copy in the sandbox.</msg>
</logentry>
<logentry
   revision="1700130">
<author>rhuijben</author>
<date>2015-08-30T16:02:56.062132Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/unix-build/Makefile.svn</path>
</paths>
<msg>* tools/dev/unix-build/Makefile.svn
  (SERF_URL,
   SERF_OLD_URL): Use Serf from the ASF repository now.
</msg>
</logentry>
<logentry
   revision="1700035">
<author>kotkov</author>
<date>2015-08-29T14:16:13.086699Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Add a failing test that currently triggers a segfault when executing svnadmin
load-revprops.  As it turns out, this command crashes with any normal dump
that contains something except revision properties, i.e., with a dump that
wasn't produced by svnadmin dump-revprops.

* subversion/tests/cmdline/svnadmin_tests.py
  (load_revprops): New, marked as XFail.
  (test_list): Add reference to new test.
</msg>
</logentry>
<logentry
   revision="1698382">
<author>stefan2</author>
<date>2015-08-28T17:32:17.614311Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svnserve/serve.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/cyrus_auth.c</path>
</paths>
<msg>Follow-up to r1698379: Convert more caller code.

* subversion/svnserve/cyrus_auth.c
  (try_auth): Replace all item usages with the new type.

* subversion/svnserve/serve.c
  (add_lock_tokens,
   unlock_paths,
   get_dir,
   get_mergeinfo,
   log_cmd,
   get_locations,
   lock_many,
   unlock_many,
   construct_server_baton): Same.</msg>
</logentry>
<logentry
   revision="1698381">
<author>stefan2</author>
<date>2015-08-28T17:24:05.447301Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_ra_svn.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
</paths>
<msg>Complete the migration of the ra_svn code to using a private item data type.

This patch actually makes svn_ra_svn__item_t a separate data structure.

* subversion/include/svn_ra_svn.h
  (svn_ra_svn_item_kind_t): Make the variant selector a named type such
                            that it can be reused.
  (svn_ra_svn_item_t): Update.

* subversion/include/private/svn_ra_svn_private.h
  (svn_ra_svn__item_t): This is now a verbatim copy of svn_ra_svn_item_t
                        and will diverge from it in the future.</msg>
</logentry>
<logentry
   revision="1698379">
<author>stefan2</author>
<date>2015-08-28T17:17:49.446691Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/internal_auth.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/cram.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/cyrus_auth.c</path>
</paths>
<msg>Continue migrating the ra_svn code to using a private item data type.

This patch completes the migration of the private API callers.

* subversion/libsvn_ra_svn/client.c
  (parse_prop_diffs,
   parse_iproplist, 
   ra_svn_get_file,
   ra_svn_get_dir,
   ra_svn_get_mergeinfo, 
   perform_ra_svn_log,
   ra_svn_get_locations,
   perform_get_location_segments,
   ra_svn_get_file_revs,
   ra_svn_lock,
   ra_svn_unlock,
   ra_svn_get_locks): Replace all item usages with the new type.

* subversion/libsvn_ra_svn/cram.c
  (svn_ra_svn_cram_server): Same.

* subversion/libsvn_ra_svn/cyrus_auth.c
  (svn_ra_svn__do_cyrus_auth): Same.

* subversion/libsvn_ra_svn/internal_auth.c
  (svn_ra_svn__find_mech): Same.</msg>
</logentry>
<logentry
   revision="1698376">
<author>stefan2</author>
<date>2015-08-28T17:01:38.458148Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/deprecated.c</path>
</paths>
<msg>Introduce an ra-svn private data item type and start migrating all users. 

For now, we use a simple typedef to keep both types interchangeable so we
can commit reasonable increments.

This patch introduces the new type, switches the whole private API to it
and add data conversion between private and public API.

* subversion/include/private/svn_ra_svn_private.h
  (svn_ra_svn__item_t): Introduce the new private API item type.
  (svn_ra_svn__to_public_array,
   svn_ra_svn__to_public_item,
   svn_ra_svn__to_private_array,
   svn_ra_svn__to_private_item): Declare item type conversion functions.
  (svn_ra_svn__set_capabilities,
   svn_ra_svn__read_item,
   svn_ra_svn__parse_proplist): Switch private API to the new private type.

* subversion/libsvn_ra_svn/deprecated.c
  (svn_ra_svn_read_item,
   svn_ra_svn_parse_tuple,
   svn_ra_svn_parse_proplist): Convert between public &amp; private data type.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn__to_public_array,
   svn_ra_svn__to_public_item,
   svn_ra_svn__to_private_array,
   svn_ra_svn__to_private_item): Implement new functions.
  (svn_ra_svn_set_capabilities): Convert between public &amp; private data type.
  (svn_ra_svn__set_capabilities,
   read_string,
   read_item,
   svn_ra_svn__read_item,
   vparse_tuple,
   svn_ra_svn__read_tuple,
   svn_ra_svn__parse_proplist,
   svn_ra_svn__read_string,
   svn_ra_svn__read_cstring,
   svn_ra_svn__read_word,
   svn_ra_svn__read_revision,
   svn_ra_svn__read_boolean,
   svn_ra_svn__read_list): Replace all item usages with the new type.</msg>
</logentry>
<logentry
   revision="1698367">
<author>stefan2</author>
<date>2015-08-28T16:34:31.946298Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
</paths>
<msg>Introduce svn_ra_svn__set_capabilities to further decouple our ra_svn
implementation from its public API.

The purpose is that all our internal usage of svn_ra_svn avoids public
API functions that use svn_ra_svn_item_t so we can switch to a different
item type internally.

* subversion/include/private/svn_ra_svn_private.h
  (svn_ra_svn__set_capabilities): Declare new private API, currently
                                  an exact copy of the public one.

* subversion/libsvn_ra_svn/client.c
  (open_session): Call the new private API instead the public one.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn_set_capabilities): New a simple wrapper around ...
  (svn_ra_svn__set_capabilities): ... this new function - which uses
                                  all the code of the former. </msg>
</logentry>
<logentry
   revision="1698359">
<author>stefan2</author>
<date>2015-08-28T15:53:10.066896Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/load-index-cmd.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_subr/stream-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_io.h</path>
</paths>
<msg>[Reverted in r1700797 and re-applied as part of r1700799.]
Introduce a stream wrapper object that adds mark/seek support to any
readable stream.  Use it on the stdin streams in our CL tools. 

As it turns out, parsing data from a stdin byte-by-byte incurs a
massive overhead of 100% internal and 300% system load over a buffered
stream.  'svnadmin load-revprops' sees a 5 times speedup if all data
is in OS disc caches.  This is a realistic assumption in a "final sync
and switch over to new repository" scenario.

The other 2 uses of stdin either have less data to process (svnfsfs
load-index) or parse only a small fraction of the stream (svnadmin load).
To avoid any memory usage issue due to the added buffering, svnadmin
load will not use the stream wrapper - the loader might clean up some
of the pools only once per revision.

* subversion/include/svn_io.h
  (svn_stream_wrap_buffered_read): Declare the new stream constructor API.

* subversion/libsvn_subr/stream.c
  (buffering_stream_wrapper_baton,
   buffering_stream_wrapper_mark): New data structures describing the
                                   wrapper stream and marker states.
  (read_handler_buffering_wrapper,
   decrement_mark_count,
   mark_handler_buffering_wrapper,
   seek_handler_buffering_wrapper,
   data_available_handler_buffering_wrapper,
   is_buffered_handler_buffering_wrapper,
   assert_zero_mark_count): Internal logic of the new stream object.
  (svn_stream_wrap_buffered_read): New constructor implementation.

* subversion/svnadmin/svnadmin.c
  (subcommand_load_revprops): Wrap the stdin stream.

* subversion/svnfsfs/load-index-cmd.c
  (subcommand__load_index): Same.

* subversion/tests/libsvn_subr/stream-test.c
  (struct stream_baton_t,
   read_handler,
   data_available_handler,
   create_test_read_stream): New configurable test read stream.
  (expect_line_content,
   test_stream_buffered_wrapper): New test for the new wrapper stream. 
  (test_funcs): Register the new test.</msg>
</logentry>
<logentry
   revision="1698319">
<author>stefan2</author>
<date>2015-08-28T12:30:49.805993Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnfsfs_tests.py</path>
</paths>
<msg>Add a test case for 'svnfsfs stats'.

* subversion/tests/cmdline/svnfsfs_tests.py
  (): Extend test strategy doc.
  (test_stats): The new test.
  (test_list): Register the new test.</msg>
</logentry>
<logentry
   revision="1698312">
<author>stefan2</author>
<date>2015-08-28T11:45:21.491535Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnfsfs/stats-cmd.c</path>
</paths>
<msg>Fix the lines for "length 0" in histograms produced by 'svnfsfs stats'.
They would say "-2147483648 .. &lt; 1" instead of "0 .. &lt; 1".

* subversion/svnfsfs/stats-cmd.c
  (print_two_power): Treat anything &lt; 1 as 0.  </msg>
</logentry>
<logentry
   revision="1698310">
<author>stefan2</author>
<date>2015-08-28T11:35:36.623410Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnfsfs/stats-cmd.c</path>
</paths>
<msg>Tweak 'svnfsfs stats' output.

* subversion/svnfsfs/stats-cmd.c
  (print_stats): Add an empty line to separate the "Reading revisions"
                 and "Global statistics" sections.  All other sections
                 already have these separators.</msg>
</logentry>
<logentry
   revision="1698288">
<author>stefan2</author>
<date>2015-08-28T10:06:52.902349Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/svnfsfs_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnfsfs_tests.py
  (load_index_sharded): Correct commentary. No functional change.</msg>
</logentry>
<logentry
   revision="1698276">
<author>julianfoad</author>
<date>2015-08-28T08:33:18.305810Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/client-side/bash_completion</path>
</paths>
<msg>* tools/client-side/bash_completion
  (_svn): Complete arguments to svn info --show-item.

Patch by: Andreas Stieger &lt;andreas.stieger{_AT_}gmx.de&gt;
(tweaked by me)
</msg>
</logentry>
<logentry
   revision="1698274">
<author>rhuijben</author>
<date>2015-08-28T07:52:12.213022Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnfsfs_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnfsfs_tests.py
  (load_index_sharded): Remove the skip rule added in r1698271.
</msg>
</logentry>
<logentry
   revision="1698271">
<author>rhuijben</author>
<date>2015-08-28T07:32:57.815990Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnfsfs_tests.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Fix a typo in a test framework function name.

(And temporarily skip a specific test that fails on some buildbots.
 This part is reverted in r1698274)

* subversion/tests/cmdline/svnadmin_tests.py
  (create_in_repo_subdir): Fix typo in skip rule.

* subversion/tests/cmdline/svnfsfs_tests.py
  (load_index_sharded): Apply skip rule. [Reverted in r1698274]

* subversion/tests/cmdline/svntest/main.py
  (tests_use_prepacakaged_repository): Rename to...
  (tests_use_prepackaged_repository): ... this to fix typo.
</msg>
</logentry>
<logentry
   revision="1698242">
<author>danielsh</author>
<date>2015-08-27T23:07:54.257850Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport.pl</path>
</paths>
<msg>* tools/dist/nominate.pl
  (nominate_usage): Clarify help text.

Suggested by: julianfoad</msg>
</logentry>
<logentry
   revision="1698154">
<author>julianfoad</author>
<date>2015-08-27T13:54:18.253860Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/svn.c</path>
</paths>
<msg>Tweak help text for 'svn info --show-item' following r1698153.

Suggested by: Bert

* subversion/svn/svn.c
  (svn_cl__options): Reduce line length to 79 chars to avoid blank line on
    some terminals. Delete an accidentally committed comment-out version.</msg>
</logentry>
<logentry
   revision="1698153">
<author>julianfoad</author>
<date>2015-08-27T13:43:40.928928Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
</paths>
<msg>Improve help text for 'svn info --show-item'. Following r1698108, add back
the information that was removed, but placed differently in the help text.

Suggested by: brane

* subversion/svn/svn.c
  (svn_cl__options): Add descriptions of --show-item arguments.
  (svn_cl__cmd_table): Add a note about the default peg revision.</msg>
</logentry>
<logentry
   revision="1698135">
<author>julianfoad</author>
<date>2015-08-27T12:19:08.005134Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/svn.c</path>
</paths>
<msg>Improve help text for 'svn info --show-item'. Following r1698108, remove
the verbose listing of --show-item arguments from the 'svn info' help text
body as it is rather redundant and not of primary importance relative to
other operating modes and options.

* subversion/svn/svn.c
  (svn_cl__cmd_table): Remove the verbose listing of --show-item
    arguments in the 'svn info' help text body.</msg>
</logentry>
<logentry
   revision="1698127">
<author>brane</author>
<date>2015-08-27T11:57:12.569487Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Finish entry for 1.9.1.</msg>
</logentry>
<logentry
   revision="1698106">
<author>julianfoad</author>
<date>2015-08-27T10:17:16.430744Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/svn.c</path>
</paths>
<msg>Improve help text for 'svn info --show-item'.

* subversion/svn/svn.c
  (svn_cl__options): List the possible arguments of --show-item.
  (svn_cl__cmd_table): Add a missing newline at the end of the help
    text body.</msg>
</logentry>
<logentry
   revision="1698033">
<author>brane</author>
<date>2015-08-26T22:37:51.374028Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Start populating the 1.9.1 section.</msg>
</logentry>
<logentry
   revision="1697979">
<author>stefan2</author>
<date>2015-08-26T17:42:35.647750Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnfsfs_tests.py</path>
</paths>
<msg>Document the idea behind the 'svnfsfs load-index' test.
No functional change.

* subversion/tests/cmdline/svnfsfs_tests.py
  (): Replace the global comment taken over from svnadmin_tests.py</msg>
</logentry>
<logentry
   revision="1697970">
<author>stefan2</author>
<date>2015-08-26T16:35:05.157588Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer</path>
</paths>
<msg>* tools/client-side/svn-mergeinfo-normalizer
  (svn:ignore): Set up standard ignores.</msg>
</logentry>
<logentry
   revision="1697967">
<author>stefan2</author>
<date>2015-08-26T16:19:39.291607Z</date>
<paths>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnfsfs_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/actions.py</path>
</paths>
<msg>Provide a regression test for 'svnfsfs load-index' that covers all the
issues recently fixed for that sub-command.

This introduces a separate Python test script for svnfsfs.  Coverage for
the remaining sub-commands will be added soon-ish.

* subversion/tests/cmdline/svntest/actions.py
  (run_and_verify_svnfsfs,
   run_and_verify_svnfsfs2): New functions for svnfsfs like we have them
                             for most other tools.
* subversion/tests/cmdline/svnfsfs_tests.py
  (): New test file, containing a single test atm.  The header section
      has been taken over from svnadmin_tests.py .</msg>
</logentry>
<logentry
   revision="1697953">
<author>rhuijben</author>
<date>2015-08-26T15:00:53.222367Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
</paths>
<msg>Make 'svnadmin info' report the latest revision in the repository.

For now I use 'Revisions' as the label. We can change that later if necessary.

* subversion/svnadmin/svnadmin.c
  (subcommand_info): Also print the HEAD revision.
</msg>
</logentry>
<logentry
   revision="1697914">
<author>stefan2</author>
<date>2015-08-26T12:53:13.020681Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>Revert part of r1485851. This is the alternative fix to r1694533.

* subversion/libsvn_ra_svn/marshal.c
  (read_item): Go back to using standard APR array API functions.</msg>
</logentry>
<logentry
   revision="1697912">
<author>stefan2</author>
<date>2015-08-26T12:45:12.130235Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>Revert r1694533.</msg>
</logentry>
<logentry
   revision="1697851">
<author>brane</author>
<date>2015-08-26T08:23:45.225209Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/missing-branches.c</path>
</paths>
<msg>* tools/client-side/svn-mergeinfo-normalizer/missing-branches.c: Fix -Wnewline-eof.
</msg>
</logentry>
<logentry
   revision="1697845">
<author>brane</author>
<date>2015-08-26T08:03:17.670360Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_wc/wc-queries-test.c</path>
</paths>
<msg>Fix compiler warning about empty while statement body.

* subversion/tests/libsvn_wc/wc-queries-test.c
  (SQLITE_ERR): Add the missing 'do' keyword.
</msg>
</logentry>
<logentry
   revision="1697835">
<author>brane</author>
<date>2015-08-26T07:32:58.932204Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Fix const/non-const pointer conversion warning.

* subversion/tests/libsvn_ra/ra-test.c
  (tunnel_run_checkout): svn_ra_do_update3 takes a const svn_ra_reporter3_t** parameter.
</msg>
</logentry>
<logentry
   revision="1697829">
<author>brane</author>
<date>2015-08-26T07:27:18.406671Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (conflict_walk_baton_t): Removed useless global vairable declaration.
</msg>
</logentry>
<logentry
   revision="1697828">
<author>brane</author>
<date>2015-08-26T07:14:59.450189Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Fix a 64-bit to 32-bit conversion warning on 64-bit platforms.

* subversion/libsvn_subr/cache-membuffer.c
  (prefix_pool_get_internal): Safely cast a pointer to an index, with range check.
</msg>
</logentry>
<logentry
   revision="1697824">
<author>brane</author>
<date>2015-08-26T06:45:03.319807Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/auth.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/auth.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/deprecated.c</path>
</paths>
<msg>Follow up to r1694481: Do not remove a public API implementation.

* subversion/libsvn_subr/auth.h
  (svn_auth__get_dummmy_simple_provider): New prototype.
* subversion/libsvn_subr/auth.c
  (dummy_first_creds): New.
  (svn_auth__get_dummmy_simple_provider): Implement.

* subversion/libsvn_subr/deprecated.c
  (svn_auth_get_gpg_agent_simple_provider): Always provide an implementation
   on non-Windows platforms, but return a dummy provider if GPG agent
   support is not available.
</msg>
</logentry>
<logentry
   revision="1697823">
<author>brane</author>
<date>2015-08-26T06:01:29.512229Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_atomic.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/atomic.c</path>
</paths>
<msg>Fix a thinko in the init-once implementation that caused it to
sleep for a fraction of a second after any successful initialization.

* subversion/include/private/svn_atomic.h
  (svn_atomic__err_init_func_t,
   svn_atomic__str_init_func_t): Correctly define function pointer types.

* subversion/libsvn_subr/atomic.c
  (init_baton_t, init_func_t): New.
  (init_once): Change prototype and fix implementation. Make callers
   responsible for error reporting.
  (err_init_func_wrapper, str_init_func_wrapper): New.
  (svn_atomic__init_once,
   svn_atomic__init_once_no_error): Update implementation.
</msg>
</logentry>
<logentry
   revision="1697729">
<author>rhuijben</author>
<date>2015-08-25T16:40:10.471832Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/copy.c</path>
</paths>
<msg>Following up on r1697725, assume that abspaths are passed in a few
more places.

* subversion/libsvn_client/copy.c
  (repos_to_wc_copy_locked): Assume abspath is passed.
  (repos_to_wc_copy): Rename local variable to document that it is an
    absolute path.
</msg>
</logentry>
<logentry
   revision="1697725">
<author>rhuijben</author>
<date>2015-08-25T16:32:24.953102Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/copy.c</path>
</paths>
<msg>Simplify some code by assuming that the repository is post 1.0 and
the working copy is WC-NG.

* subversion/libsvn_client/copy.c
  (repos_to_wc_copy_locked): Assume the working copy and repository do
    have uuids.
</msg>
</logentry>
<logentry
   revision="1697667">
<author>brane</author>
<date>2015-08-25T12:35:12.861390Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_base/fs_init.h</path>
</paths>
<msg>* subversion/libsvn_fs_base/fs_init.h: Fix -Wnewline-eof warning.
</msg>
</logentry>
<logentry
   revision="1697664">
<author>brane</author>
<date>2015-08-25T12:31:13.124310Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/xml.c</path>
</paths>
<msg>Fix -Wmissing-prototype warning.

* subversion/libsvn_subr/xml.c: Include svn_subr_private.h to fix
   warnings about missing prototypes for svn_xml__compiled_version
   and svn_xml__runtime_version.
</msg>
</logentry>
<logentry
   revision="1697650">
<author>rhuijben</author>
<date>2015-08-25T11:20:53.997947Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/generator/gen_vcnet_vcproj.py</path>
</paths>
<msg>Following up on r1696783, avoid some warnings in non-shared library builds on
Windows.

* generator/gen_vcnet_vcproj.py
  Don't record .lib files as to be delayloaded.
</msg>
</logentry>
<logentry
   revision="1697638">
<author>stsp</author>
<date>2015-08-25T10:07:14.960531Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/unix-build/Makefile.svn</path>
</paths>
<msg>* tools/dev/unix-build/Makefile.svn: Support new mod_authz_svn tests.
</msg>
</logentry>
<logentry
   revision="1697405">
<author>stefan2</author>
<date>2015-08-24T14:14:57.999146Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/load-index.c</path>
</paths>
<msg>Correct a pool name.

* subversion/libsvn_fs_fs/load-index.c
  (svn_fs_fs__load_index): ITERPOOL actually a mere SUBPOOL.</msg>
</logentry>
<logentry
   revision="1697403">
<author>stefan2</author>
<date>2015-08-24T14:13:14.824120Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/load-index.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-private-test.c</path>
</paths>
<msg>Make 'svnfsfs load-index' more convenient to use in case the revision
footer is corrupted or missing.  Also, as long as the footer is valid,
make sure the new index actually covers all revision contents.

* subversion/libsvn_fs_fs/load-index.c
  (get_max_covered): New utility function.
  (svn_fs_fs__load_index): In case of a footer parser error, truncate
                           the rev file where the coverage of new index
                           data ends.  Otherwise, require the coverage
                           to be the same as the old index coverage.

* subversion/tests/libsvn_fs_fs/fs-fs-private-test.c
  (load_index): Update test to pass the stricter internal checks.</msg>
</logentry>
<logentry
   revision="1697393">
<author>stefan2</author>
<date>2015-08-24T13:44:28.653508Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/load-index.c</path>
</paths>
<msg>Improve error checking in 'svnfsfs load-index'.  The input data must
have no holes or overlaps in it.

* subversion/libsvn_fs_fs/load-index.c
  (check_all_covered): New validation function.
  (svn_fs_fs__load_index): Invoke the new check.
</msg>
</logentry>
<logentry
   revision="1697387">
<author>stefan2</author>
<date>2015-08-24T13:22:05.610336Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/load-index.c</path>
</paths>
<msg>Actually implement what 'svnfsfs load-index' promises: That the input data
does not need to be pre-sorted by offset.

* subversion/libsvn_fs_fs/load-index.c
  (compare_p2l_entry_revision): Define ordering criterion.
  (svn_fs_fs__load_index): Sort the input before processing it.</msg>
</logentry>
<logentry
   revision="1697384">
<author>stefan2</author>
<date>2015-08-24T13:17:39.429624Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/load-index-cmd.c</path>
</paths>
<msg>Fix an inconsistency between 'svnfsfs dump-index' and 'svnfsfs load-index'.

While the first writes decimal item numbers, the load would interpret them
as hex.  Read them as decimal now.

* subversion/svnfsfs/load-index-cmd.c
  (token_to_i64): Make the RADIX selectable.
  (parse_index_line): Parse each column with the appropriate radix.</msg>
</logentry>
<logentry
   revision="1697381">
<author>stefan2</author>
<date>2015-08-24T13:07:07.001070Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/load-index.c</path>
</paths>
<msg>Fix a bug in FSFS format7's index rewriting code, used by svnfsfs only.

The bug will lead to invalid index data for packed revisions if the first
entry in the index data passed in from svnfsfs is not part of the revision
in that pack file.  A workaround is possible by adding a simple dummy
entry for an empty item of size 0 with the correct revision number in front
of the actual index data.

* subversion/libsvn_fs_fs/load-index.c
  (svn_fs_fs__load_index): Pass the first revision in the pack down the
                           call stack instead of a random revision within
                           the same pack.</msg>
</logentry>
<logentry
   revision="1697372">
<author>stefan2</author>
<date>2015-08-24T12:50:48.021004Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/index.c</path>
</paths>
<msg>Remove unused code.

* subversion/libsvn_fs_fs/index.c
  (svn_fs_fs__l2p_index_from_p2l_entries): Nobody uses the REVISION variable
                                           so don't calculate it.</msg>
</logentry>
<logentry
   revision="1696809">
<author>philip</author>
<date>2015-08-20T15:53:04.281153Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/notes/svnsync.txt</path>
</paths>
<msg>* notes/svnsync.txt: Update auth parameters.</msg>
</logentry>
<logentry
   revision="1696783">
<author>rhuijben</author>
<date>2015-08-20T12:56:15.081538Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/generator/gen_vcnet_vcproj.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/generator/templates/vcnet_vcxproj.ezt</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/generator/gen_base.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/generator/gen_win.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build.conf</path>
</paths>
<msg>In the Windows build mark the DLLs of libsvn_ra, libsvn_fs_base, libsvn_fs_fs,
libsvn_fx as to be delayloaded.

Without this patch these DLLs and their dependencies are always loaded from
code that references them. After this patch the code is dynamically loaded
when first necessary. (In all supported compilers this is implemented as
a per DLL load via the import table, so there is no per function call
performance penalty)

The non-shared-library build is unaffected.

* build.conf
  (libsvn_fs_base,
   libsvn_fs_fs,
   libsvn_fs_x,
   libsvn_ra): Mark as delayload.

* build/generator/gen_base.py
  (TargetLib): Load property.

* build/generator/gen_vcnet_vcproj.py
  (write): Calculate dependency dlls to be delayloaded.

* build/generator/gen_win.py
  (create_dll_target): Copy property to right target.

* build/generator/templates/vcnet_vcxproj.ezt
  Extend linker arguments.
</msg>
</logentry>
<logentry
   revision="1696758">
<author>rhuijben</author>
<date>2015-08-20T11:17:43.537904Z</date>
<paths>
<path
   kind="file"
   action="A"
   prop-mods="true"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/fs_init.h</path>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_init.h</path>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_base/fs_init.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build.conf</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
</paths>
<msg>Make libsvn_fs_util, libsvn_fs_base, libsvn_fs_fs and libsvn_fs_x proper
shared libraries on Windows when shared libraries are enabled in the build,
just like on other platforms. Before this all of them were statically
linked into libsvn_fs and any project that directly used their functions.

This patch automatically detects circular reference problems in this code,
such as the one fixed in r1696695 and will allow delay loading quite a bit
of code from svn and svnadmin in a followup patch.

The 'msvc-force-static' markers on many test projects formalizes that these
projects already depended on internal apis, which were only available because
they were statically linked.

* build.conf
  (libsvn_fs_base,
   libsvn_fs_fs,
   libsvn_fs_x,
   libsvn_fs_util): Properly declare exports of these libraries.

* subversion/libsvn_fs/fs-loader.h
  (LIBSVN_FS_FS_H): Use proper unique define.
  (svn_fs_base__init,
   svn_fs_fs__init,
   svn_fs_x__init): Move to separate header files to allow using the export
     generator.

* subversion/libsvn_fs_base/fs_init.h
* subversion/libsvn_fs_fs/fs_init.h
* subversion/libsvn_fs_x/fs_init.h
  New files containing the single entry point of these libraries.
</msg>
</logentry>
<logentry
   revision="1696742">
<author>julianfoad</author>
<date>2015-08-20T09:42:08.505501Z</date>
<paths>
<path
   action="D"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/tools/client-side/detach.py</path>
</paths>
<msg>* tools/client-side/detach.py
  Delete, as it hasn't been updated for 1.8+ and isn't trivial to update.

See the dev@ email thread "detach.py script isn't updated for 1.8/1.9"
started on 2015-08-12 at e.g.
&lt;http://svn.haxx.se/dev/archive-2015-08/0071.shtml&gt; or
&lt;http://mail-archives.apache.org/mod_mbox/subversion-dev/201508.mbox/%3C55CA829A.2080509@gmx.de%3E&gt;.

Suggested by: stsp
</msg>
</logentry>
<logentry
   revision="1696722">
<author>julianfoad</author>
<date>2015-08-20T08:07:36.220201Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/detach.py</path>
</paths>
<msg>* tools/client-side/detach.py
  Add a note about how this doesn't work with 1.8+, and link to the email thread.

Suggested by: Stefan &lt;luke1410{_AT_}gmx.de&gt;</msg>
</logentry>
<logentry
   revision="1696695">
<author>rhuijben</author>
<date>2015-08-20T01:10:22.082810Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs_id.c</path>
</paths>
<msg>Resolve a circular library reference issue in libsvn_fs_x, by using the passed
pointer to a function instead of the function by its name.

Found by: danielsh
          James McCoy &lt;jamessan@debian.org&gt;

* subversion/libsvn_fs_x/fs_id.c
  (svn_fs_x__id_context_t): Add function pointer.
  (fs_cleanup): Store open pointer to allow reopening.
  (get_fs): Use function pointer.
</msg>
</logentry>
<logentry
   revision="1696656">
<author>rhuijben</author>
<date>2015-08-19T19:40:09.361768Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/INSTALL</path>
</paths>
<msg>* INSTALL
  Update some 'serf' references, to reflect that it is now an Apache
  project. Apply some minor tweaks related to removing neon.
</msg>
</logentry>
<logentry
   revision="1696630">
<author>stefan2</author>
<date>2015-08-19T16:47:02.788844Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Fix a double L2P translation in the FSFS access logging debug feature for
format 7.  Instead of the item index, we passed the already translated offset
to the logging function in one case.  That results in "Item index FOO too
large in revision BAR" errors when running 'svn log -v'.

Note that this is an opt-in debugging feature for FSFS development only.
This does NOT solve http://subversion.tigris.org/issues/show_bug.cgi?id=4588
because the dbg_log_access function is a no-op unless explicitly activated
at compile time.

* subversion/libsvn_fs_fs/cached_data.c
  (svn_fs_fs__get_changes): Only in phys. addressing mode, pass the resolved
                            file offset to the logging function.</msg>
</logentry>
<logentry
   revision="1696628">
<author>stefan2</author>
<date>2015-08-19T16:35:10.702978Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/cached_data.c
  (dbg_log_access): Even when we are debugging, keep resource usage low
                    and close file handles asap.</msg>
</logentry>
<logentry
   revision="1696627">
<author>stefan2</author>
<date>2015-08-19T16:31:41.900688Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>In FSFS, make the access logging code compile and link again.

Note that this is an opt-in debugging feature for FSFS development only.

* subversion/libsvn_fs_fs/cached_data.c
  (SVN_FS_FS__LOG_ACCESS): Fix typos in docstring.
  (dbg_log_access): Adapt to recent internal API changes.</msg>
</logentry>
<logentry
   revision="1696626">
<author>stefan2</author>
<date>2015-08-19T16:26:05.396607Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/util.c
  (ssl_convert_serf_failures): When doing array size calculations, refer to
                               the array object only.
</msg>
</logentry>
<logentry
   revision="1696625">
<author>stefan2</author>
<date>2015-08-19T16:22:50.423156Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/x509parse.c</path>
</paths>
<msg>* subversion/libsvn_fs/fs-loader.c
  (svn_fs_lock_target_create): Take the size to allocate from the variable
                               rather than its type. That type is specified
                               in the same line anyway.
* subversion/libsvn_repos/log.c
  (store_search): Same.
* subversion/libsvn_subr/x509parse.c
  (x509_get_ext): Same.</msg>
</logentry>
<logentry
   revision="1696387">
<author>rhuijben</author>
<date>2015-08-18T10:44:18.346531Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/sysinfo.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/compress.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/xml.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_subr_private.h</path>
</paths>
<msg>Expose a few more versions of directly linked dependencies in
'svn --version --verbose', by adding ZLib and Expat versions.

* subversion/include/private/svn_subr_private.h
  (svn_xml__compiled_version,
   svn_xml__runtime_version,
   svn_zlib__compiled_version,
   svn_zlib__runtime_version): New function.

* subversion/libsvn_subr/compress.c
  (svn_zlib__compiled_version,
   svn_zlib__runtime_version): New function.

* subversion/libsvn_subr/sysinfo.c
  (includes): Add svn_subr_private.h.
  (svn_sysinfo__linked_libs): Add 2 libraries.

* subversion/libsvn_subr/xml.c
  (svn_xml__compiled_version,
   svn_xml__runtime_version): New functions.
</msg>
</logentry>
<logentry
   revision="1696225">
<author>rhuijben</author>
<date>2015-08-17T09:40:04.942964Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>Following up on r1696222, implement polling on pipes on Windows.

Note that PeekNamedPipe() also works on unnamed pipes, such as those created
by apr to hook stdin and stdout of subprocesses.

* subversion/libsvn_subr/stream.c
  (data_available_handler_apr): Implement polling on pipes for Win32.

* subversion/tests/libsvn_ra/ra-test.c
  (test_funcs): Remove Windows specific XFail marking.
</msg>
</logentry>
<logentry
   revision="1696222">
<author>rhuijben</author>
<date>2015-08-17T09:30:18.853914Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Improve tunnel callback tests to include more scenarios and to stop allocating
a baton on the stack that is referenced from cleanup functions.

This test ensures that we try to poll the connection at least once; which
currently fails on Windows.

* subversion/tests/libsvn_ra/ra-test.c
  (check_tunnel_callback_test): Allocate baton in pool. Ensure specific error.
  (tunnel_callback_test): Don't ignore some errors for FAIL reporting.
  (tunnel_run_checkout): New test.
  (test_funcs): Add new test.
</msg>
</logentry>
<logentry
   revision="1696185">
<author>stefan2</author>
<date>2015-08-17T00:04:40.408888Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/id.c</path>
</paths>
<msg>Follow-up to r1696171: Fix FSFS breakage.

* subversion/libsvn_fs_fs/id.c
  (svn_fs_fs__id_serialize): This is a case where actual data size and
                             and interface type size don't match up.</msg>
</logentry>
<logentry
   revision="1696183">
<author>stefan2</author>
<date>2015-08-16T23:33:22.027900Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/logic.c</path>
</paths>
<msg>It is possible to run the svn-mergeinfo-normalizer tool on a working copy
that refers to a path that does not exist in the repository (anymore).

Instead of erroring out, we should simply try its parent paths up to the
repository root until we find one that does exist.  Then run the log
request on that one.  We will still get error if repo does not exist.  The
"extra" log info is a mere inefficiency that does not affect functionality.

* tools/client-side/svn-mergeinfo-normalizer/logic.c
  (get_url): New utility function.
  (svn_min__run_normalize): Also open a session if we just need log access.
                            Call to new function to read the log from a
                            URL we know actually exists.</msg>
</logentry>
<logentry
   revision="1696178">
<author>stefan2</author>
<date>2015-08-16T22:30:04.106810Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/log.c</path>
</paths>
<msg>* tools/client-side/svn-mergeinfo-normalizer/logic.c
  (show_obsoletes_summary): Typo in comment. No functional change.
</msg>
</logentry>
<logentry
   revision="1696177">
<author>stefan2</author>
<date>2015-08-16T22:29:36.316710Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/logic.c</path>
</paths>
<msg>* tools/client-side/svn-mergeinfo-normalizer/log.c
  (svn_min__log): Always show all the info we have. Even if copies of a
                  branch have survived, we can still show the revision
                  in which the branch got deleted.</msg>
</logentry>
<logentry
   revision="1696171">
<author>stefan2</author>
<date>2015-08-16T22:16:39.691537Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/id.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
</paths>
<msg>In FSFS and FSX temp serialization code, avoid taking the size of types
when we have access to the actual objects.  This reduces redundancy.

* subversion/libsvn_fs_fs/id.c
  (svn_fs_fs__id_serialize): Take the item size from the variable rather
                             than the key.

* subversion/libsvn_fs_fs/temp_serializer.c
  (serialize_svn_string,
   serialize_representation,
   serialize_dir_entry,
   serialize_dir,
   serialize_txdelta_ops,
   serialize_txdeltawindow,
   svn_fs_fs__serialize_rep_header): Same.

* subversion/libsvn_fs_x/temp_serializer.c
  (serialize_dir_entry,
   svn_fs_x__serialize_changes): Same.</msg>
</logentry>
<logentry
   revision="1696168">
<author>stefan2</author>
<date>2015-08-16T22:04:17.005517Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_repos/repos-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/load_editor.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svndumpfilter/svndumpfilter.c</path>
</paths>
<msg>Follow up on r1696166: More sizeof changes when using APR hashes.

* subversion/svndumpfilter/svndumpfilter.c
  (new_node_record,
   adjust_mergeinfo): Take the key size from the key variable.

* subversion/svnrdump/load_editor.c
  (set_revision_mapping): Same.

* subversion/tests/libsvn_repos/repos-test.c
  (check_locations_info,
   test_get_file_revs): Same.</msg>
</logentry>
<logentry
   revision="1696166">
<author>stefan2</author>
<date>2015-08-16T21:30:48.538278Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/log.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/fsfs-access-map.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_repos/repos-test.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/ra.c</path>
</paths>
<msg>When accessing an APR hash with a non-string key, take the key size from
the key variable instead of its type.  This makes the code more robust in
case we want to change the key type in the future.

* subversion/libsvn_client/ra.c
  (repos_locations): Take the key size from the key variable.

* subversion/libsvn_repos/log.c
  (do_logs): Same.

* subversion/mod_dav_svn/repos.c
  (parse_querystring): Same.

* subversion/tests/libsvn_repos/repos-test.c
  (file_rev_handler,
   verify_locations,
   set_expected): Same.

* tools/dev/fsfs-access-map.c
  (open_file): Same.
</msg>
</logentry>
<logentry
   revision="1696087">
<author>stefan2</author>
<date>2015-08-15T18:46:12.973944Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/notes</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/subversion/tests/libsvn_fs_x</path>
</paths>
<msg>Time for some dog-fooding: Run 'svn-mergeinfo-normalizer normalize' on /trunk
and let it remove redundant sub-tree mergeinfo.  This is the output of
'svn-mergeinfo-normalizer analyze' for those nodes (tweak to show the
FS paths instead of working copy paths in the "Trying..." lines) :

Removing obsolete branches and redundant mergeinfo, combining revision ranges ...
Trying to elide mergeinfo at path /subversion/trunk/subversion/tests/libsvn_fs_x
    elide branch /subversion/branches/fsfs-format7/subversion/tests/libsvn_fs_x
        revisions implied in sub-node: 1507730
        revisions inoperative in sub-node: 1498103,1498155,1500054,1507729,1507731,1507735-1507736
    elide branch /subversion/branches/fsfs-improvements/subversion/tests/libsvn_fs_x
        revisions inoperative in sub-node: 1517477-1532582,1532584-1536948,1536950-1545954,1545956-1546836,1546838-1547039
    elide branch /subversion/branches/fsx/subversion/tests/libsvn_fs_x
        revisions implied in sub-node: 1508077,1509247,1509911
        revisions inoperative in sub-node: 1508078-1509246,1509248-1509910,1509912-1509914
    elide branch /subversion/branches/verify-keep-going/subversion/tests/libsvn_fs_x
        revisions inoperative in sub-node: 1492640-1546001
    elide branch /subversion/trunk/subversion/tests/libsvn_fs_x
        revisions inoperative in sub-node: 1414756-1509914
    All sub-tree mergeinfo has been elided.

Trying to elide mergeinfo at path /subversion/trunk/notes
    elide branch /subversion/branches/fsfs-improvements/notes
        revisions inoperative in sub-node: 1499981-1504850,1504852-1505659,1505661-1532582,1532584-1536948,1536950-1545954,1545956-1546836,1546838-1547039
    All sub-tree mergeinfo has been elided.

* notes
* subversion/tests/libsvn_fs_x
  remove sub-tree mergeinfo.</msg>
</logentry>
<logentry
   revision="1696086">
<author>stefan2</author>
<date>2015-08-15T18:36:29.252437Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/logic.c</path>
</paths>
<msg>Our handling of mergeinfo produces some odd entries when mergeing back
and forth between branches while adding sub-tree m/i on new nodes.

For instance, m/i on ^/subversion/trunk/subversion/tests/libsvn_fs_x
contains an entry for ^/subversion/trunk/subversion/tests/libsvn_fs_x,
i.e. itself.

This patch makes svn-mergeinfo-normalizer able to elide these if they are
actually redundant.

* tools/client-side/svn-mergeinfo-normalizer/logic.c
  (remove_lines): Even if there is no matching parent m/i, a branch entry
                  may be completely redundant or non-operative.</msg>
</logentry>
<logentry
   revision="1696085">
<author>stefan2</author>
<date>2015-08-15T18:28:55.317035Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/logic.c</path>
</paths>
<msg>* tools/client-side/svn-mergeinfo-normalizer/logic.c
  (remove_lines): Test for "unusual" ranges first. This allows us to run
                  more tricks on them later even if there is no parent m/i.</msg>
</logentry>
<logentry
   revision="1696084">
<author>stefan2</author>
<date>2015-08-15T18:25:01.091999Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/logic.c</path>
</paths>
<msg>Follow-up to r1696068: Ensure proper evaluation order.

* tools/client-side/svn-mergeinfo-normalizer/logic.c
  (show_branch_elision): Add parantheses where they are due.</msg>
</logentry>
<logentry
   revision="1696068">
<author>stefan2</author>
<date>2015-08-15T16:52:09.941478Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/logic.c</path>
</paths>
<msg>Make standard svn-mergeinfo-normalizer analysis output (i.e. without -v)
a bit more verbose.  If elision is non-trivial, always show what will be
changed to align parent and sub-tree mergeinfo.

While this somewhat blurs the "cannot elide" messages, this sort of output
is what you might want to add to a log message etc. to document why a
non-trivial mergeinfo elision has been possible.

* tools/client-side/svn-mergeinfo-normalizer/logic.c
  (show_branch_elision): Add conditions under which to print output. </msg>
</logentry>
<logentry
   revision="1696060">
<author>stefan2</author>
<date>2015-08-15T15:57:23.355045Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/notes</path>
</paths>
<msg>Complete sub-tree mergeinfo by merging revisions r1504851 and r1505660
from branches/fsfs-improvements.  This turned out to be a no-op merge.

* notes
  Update svn:mergeinfo.
</msg>
</logentry>
<logentry
   revision="1696016">
<author>brane</author>
<date>2015-08-15T05:19:53.632822Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/security/mailer.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dist/security/parser.py</path>
</paths>
<msg>Finish up message generation and signing for security notifications.

* tools/dist/security/parser.py: Import re.
  (Notification.Metadata.__CULPRITS): Renamed from __culprits; all uses updated.
  (Notification.Metadata.__init__): Sort patches using the new key member, see below.
  (Notification.base_version_keys): New.
  (__Part.__init__, __Part.__load_file): Support construction from a string.
  (Patch.base_version_key): New property; returns a sortable key for the
   base version of the patch.
  (Patch.split_version, Patch.join_version): New.

* tools/dist/security/mailer.py: Import re, uuid, hashlib, smtplib, textwrap
   and security.parser.
  (Mailer.__init__): Accept additional parameters for constructing the
   notification message from a message template.
  (Mailer.__message_content): New.
  (Mailer.__versions, Mailer.__culprits): New; helpers for __message_content.
  (Mailer.generate_message): New.
  (Mailer.send_mail): New.
  (SignedMessage.__init__): Extend comment.
  (SignedMessage.__signature): Make sure that the signed content conforms
   to requiremens set down in RFC3156 section 5. Whith this change, mail clients
   that understand PGP/MIME can actually verify the signed mail.
</msg>
</logentry>
<logentry
   revision="1696000">
<author>stefan2</author>
<date>2015-08-14T22:36:02.513189Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/notes</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/subversion/tests/libsvn_fs_x</path>
</paths>
<msg>Complete some sub-tree mergeinfo by --record-only merging revisions
r1532583, r1536949, r1545955 and r1546837 from branches/fsfs-improvements.

Those changes were syncs with /trunk and for some reason did not update
all sub-tree mergeinfo.

* notes
* subversion/libsvn_fs_x
* subversion/tests/libsvn_fs_x
  Update svn:mergeinfo.</msg>
</logentry>
<logentry
   revision="1695996">
<author>stefan2</author>
<date>2015-08-14T22:21:39.215327Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/log.c</path>
</paths>
<msg>* tools/client-side/svn-mergeinfo-normalizer/log.c
  (svn_min__log_t): Update the docstring. No functional change.</msg>
</logentry>
<logentry
   revision="1695995">
<author>stefan2</author>
<date>2015-08-14T22:19:28.338471Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/log.c</path>
</paths>
<msg>Revert a snafu introduced in r1695879 that causes a segfault.

* tools/client-side/svn-mergeinfo-normalizer/log.c
  (internalize): Re-introduce the pool argument for all path strings.
  (log_entry_receiver): Update caller.</msg>
</logentry>
<logentry
   revision="1695992">
<author>stefan2</author>
<date>2015-08-14T21:52:03.497563Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   kind="dir"
   action="M"
   prop-mods="true"
   text-mods="false">/subversion/trunk/subversion/tests/libsvn_fs_x</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="dir"
   copyfrom-path="/subversion/branches/svn-mergeinfo-normalizer/tools/client-side/svn-mergeinfo-normalizer"
   copyfrom-rev="1695991">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build.conf</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/notes</path>
</paths>
<msg>Merge the svn-mergeinfo-normalizer development branch to trunk and remove
the BRANCH-README file.  There were no conflicts.

This brings the client-side tool svn-mergeinfo-normalizer to /trunk.</msg>
</logentry>
<logentry
   revision="1695871">
<author>julianfoad</author>
<date>2015-08-14T12:04:03.337288Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/bash_completion</path>
</paths>
<msg>* tools/client-side/bash_completion
  (_svn): Suppress a trailing space when completing to a partial URL.</msg>
</logentry>
<logentry
   revision="1695681">
<author>philip</author>
<date>2015-08-13T11:39:34.990877Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_authz_svn/mod_authz_svn.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/ac-macros/apache.m4</path>
</paths>
<msg>Change the mod_authz_svn CVE reference from httpd to Subversion
as Subversion's has more detail and refers to httpd.

* build/ac-macros/apache.m4
* subversion/mod_authz_svn/mod_authz_svn.c
  Change CVE reference.
</msg>
</logentry>
<logentry
   revision="1695606">
<author>philip</author>
<date>2015-08-12T20:05:43.184711Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build/ac-macros/apache.m4</path>
</paths>
<msg>* build/ac-macros/apache.m4
  (SVN_FIND_APACHE): Typo in option help text.
</msg>
</logentry>
<logentry
   revision="1695600">
<author>philip</author>
<date>2015-08-12T19:26:10.570314Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_authz_svn/mod_authz_svn.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build/ac-macros/apache.m4</path>
</paths>
<msg>Have configure detect not-broken-but-patched httpd and override
the MMN detection in mod_authz_svn.  This allows building against
patched distribution binaries such as Debian.  The Windows build
is unchanged.

* build/ac-macros/apache.m4
  (SVN_FIND_APACHE): Detect MMN and ap_some_authn_required by
   grepping the header files and set SVN_USE_FORCE_AUTHN.

* subversion/mod_authz_svn/mod_authz_svn.c
  (USE_FORCE_AUTHN): Tweak error message, detect SVN_USE_FORCE_AUTHN.
</msg>
</logentry>
<logentry
   revision="1695384">
<author>danielsh</author>
<date>2015-08-11T22:20:14.996050Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svntest/verify.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/diff.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>diff --git: Fix mode output.  The updated value is the one used by both
git and hg.  The 010000 bit (1&lt;&lt;12) probably has a different meaning.  (In
Linux, that bit designates named pipes created by mkfifo(1).)

* subversion/libsvn_client/diff.c
  (print_git_diff_header_added, print_git_diff_header_deleted):
    Print the additional mode bits correctly.

* subversion/tests/cmdline/patch_tests.py
  (patch_git_empty_files),
* subversion/tests/cmdline/svntest/verify.py
  (make_git_diff_header):
    Update expectations.</msg>
</logentry>
<logentry
   revision="1695383">
<author>danielsh</author>
<date>2015-08-11T22:19:26.443371Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn_help_stdout</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/help-cmd.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn--help_stdout</path>
</paths>
<msg>* subversion/svn/help-cmd.c
  (svn_cl__help): Document 'svn --version --verbose' alongside --quiet.

* subversion/tests/cmdline/getopt_tests_data/svn--help_stdout,
* subversion/tests/cmdline/getopt_tests_data/svn_help_stdout: Track change.</msg>
</logentry>
<logentry
   revision="1695102">
<author>stefan2</author>
<date>2015-08-10T14:57:41.468213Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/svn-sparc-solaris/svncheck.sh</path>
</paths>
<msg>In the SPARC buildbot scripts, correct the version check for the tests
to run to cover 1.10 as well.

* tools/buildbot/slaves/svn-sparc-solaris/svncheck.sh
  Everything 1.9 *or later* shall run svnserve tests.</msg>
</logentry>
<logentry
   revision="1695044">
<author>stefan2</author>
<date>2015-08-10T12:30:00.242463Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/caching.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/pack.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.h</path>
</paths>
<msg>Remove manifest file reading and caching code from FSX - which never
used manifests in the first place.

* subversion/libsvn_fs_x/fs.h
  (svn_fs_x__data_t): Remove the packed_offset_cache.

* subversion/libsvn_fs_x/caching.c
  (svn_fs_x__initialize_caches): Remove its initialization call.

* subversion/libsvn_fs_x/temp_serializer.h
  (svn_fs_x__serialize_manifest,
   svn_fs_x__deserialize_manifest): Remove.

* subversion/libsvn_fs_x/temp_serializer.c
  (svn_fs_x__serialize_manifest,
   svn_fs_x__deserialize_manifest): Same.

* subversion/libsvn_fs_x/pack.h
  (svn_fs_x__get_packed_offset): Remove unused declaration.

* subversion/libsvn_fs_x/pack.c
  (svn_fs_x__get_packed_offset): Remove unused implementation.</msg>
</logentry>
<logentry
   revision="1695036">
<author>stefan2</author>
<date>2015-08-10T11:55:55.806437Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Fix a copy'n'pasto that may cause some inefficiency in the membuffer cache.

* subversion/libsvn_subr/cache-membuffer.c
  (find_entry): Let the surviving buffers age - not the one we are going
                to evict anyway.
</msg>
</logentry>
<logentry
   revision="1695022">
<author>stefan2</author>
<date>2015-08-10T11:27:05.586255Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Fix an assertion triggered by incomplete initialization of the membuffer 
cache.

* subversion/libsvn_subr/cache-membuffer.c
  (initialize_group): Don't prevent the initialization of spare groups.

Reported by: ivan</msg>
</logentry>
<logentry
   revision="1695019">
<author>stefan2</author>
<date>2015-08-10T11:02:13.222093Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/editorp.c</path>
</paths>
<msg>Fix segfault in editor drive on ra_svn.

* subversion/libsvn_ra_svn/editorp.c
  (remove_token): New helper function - symmetric to store_token.
  (ra_svn_handle_close_dir,
   ra_svn_handle_close_file): Not only remove the entry from the hash
                              before clearing the pool but also reset
                              the LAST_TOKEN reference.

Reported by: philip.
</msg>
</logentry>
<logentry
   revision="1694929">
<author>stefan2</author>
<date>2015-08-09T23:23:43.662442Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/svn_client.i</path>
</paths>
<msg>Fix a memory corruption in SWIG bindings' svn_client_copy_source_t
constructor.

* subversion/bindings/swig/svn_client.i
  (svn_client_copy_source_t): Allocate memory with full struct size.</msg>
</logentry>
<logentry
   revision="1694928">
<author>stefan2</author>
<date>2015-08-09T23:23:20.026213Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/batch_fsync.c</path>
</paths>
<msg>Follow-up to r1694846: One code section wasn't marked as conditional
at all before.

* subversion/libsvn_fs_x/batch_fsync.c
  (thread_pool_pre_cleanup): Exclude from compilation when there is
                             no thread pool support in APR.</msg>
</logentry>
<logentry
   revision="1694848">
<author>stefan2</author>
<date>2015-08-08T21:52:56.684015Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/batch_fsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_dep_compat.h</path>
</paths>
<msg>Where feasible, we want use simple definedness tests with our SVN_*
preprocessor flag macros.  So, make SVN_ON_POSIX comply to this policy.

* subversion/include/private/svn_dep_compat.h
  (SVN_ON_POSIX): Switch from a value-based preprocessor flag to simple
                  definedness.

* subversion/libsvn_fs_fs/util.c
  (svn_fs_fs__move_into_place): Update SVN_ON_POSIX check.

* subversion/libsvn_fs_x/batch_fsync.c
  (svn_fs_x__batch_fsync_new_path): Same.

* subversion/libsvn_subr/io.c
  (svn_io_write_atomic): Same.

Suggested by: brane</msg>
</logentry>
<logentry
   revision="1694847">
<author>stefan2</author>
<date>2015-08-08T21:45:32.932435Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/mergeinfo.c</path>
</paths>
<msg>* subversion/libsvn_subr/mergeinfo.c
  (svn_mergeinfo__catalog_to_formatted_string): Fix the check for SVN_DEBUG.
</msg>
</logentry>
<logentry
   revision="1694846">
<author>stefan2</author>
<date>2015-08-08T21:16:31.963004Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/batch_fsync.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnserve/svnserve.c</path>
</paths>
<msg>Fix build without APR thread support.

* subversion/libsvn_fs_x/batch_fsync.c
  (svn_thread_cond__t,
   svn_thread_cond__create,
   svn_thread_cond__broadcast,
   svn_thread_cond__wait,
   svn_fs_x__batch_fsync_t,
   svn_fs_x__batch_fsync_init): Instead of APR_HAS_THREADS definedness
                                we must test for its value.

* subversion/svnserve/svnserve.c
  (svnserve__options): Same.</msg>
</logentry>
<logentry
   revision="1694695">
<author>stefan2</author>
<date>2015-08-07T14:44:56.073153Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
</paths>
<msg>Fix a merge artefact (probably) in FSX found by VisualC.

* subversion/libsvn_fs_x/fs_x.c
  (check_format): Remove misplaced return statement.</msg>
</logentry>
<logentry
   revision="1694693">
<author>stefan2</author>
<date>2015-08-07T14:25:54.061923Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_temp_serializer.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/temp_serializer.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
</paths>
<msg>Fix a few const-correctness issues found by VisualC.

* include/private/svn_temp_serializer.h
  (svn_temp_deserializer__resolve): We don't modify the BUFFER, const it.
* libsvn_subr/temp_serializer.c
  (svn_temp_deserializer__resolve): Same.
* libsvn_fs_x/temp_serializer.c
  (deserialize_svn_string): Same.</msg>
</logentry>
<logentry
   revision="1694674">
<author>stefan2</author>
<date>2015-08-07T12:42:37.006949Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_x/fs-x-pack-test.c</path>
</paths>
<msg>Only test FSX's batch fsync code when we test the FSX backend.

* subversion/tests/libsvn_fs_x/fs-x-pack-test.c
  (test_batch_fsync): Skip if we are not testing the FSX backend.
</msg>
</logentry>
<logentry
   revision="1694669">
<author>stefan2</author>
<date>2015-08-07T12:36:50.203522Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/batch_fsync.c</path>
</paths>
<msg>Fix Win32 detection in FSX's batch fsync code.

* subversion/libsvn_fs_x/batch_fsync.c
  (svn_fs_x__batch_fsync_new_path): Correct check for platform - check for 
                                    the macro value not just definedness.</msg>
</logentry>
<logentry
   revision="1694668">
<author>stsp</author>
<date>2015-08-07T12:25:59.625335Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Move svnadmin --metadata-only option into the right section.

Found by: Stefan Hett
</msg>
</logentry>
<logentry
   revision="1694638">
<author>stsp</author>
<date>2015-08-07T09:42:06.083859Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Fix grammer/typos.

Found by: Stefan Hett
</msg>
</logentry>
<logentry
   revision="1694533">
<author>stefan2</author>
<date>2015-08-06T16:10:39.528566Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>[reverted in r1694533]
Fix an alignment problem on machines with 32 bit pointers but atomic 64
data access that may not be misaligned.

* subversion/libsvn_ra_svn/marshal.c
  (read_item): Ensure that the array contents are always have the APR
               default alignment.

Found by: Rainer Jung &lt;rainer.jung{_AT_}kippdata.de&gt;</msg>
</logentry>
<logentry
   revision="1694502">
<author>stefan2</author>
<date>2015-08-06T14:04:55.624592Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/tests/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/string_table.h</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/fsx-1.10/subversion/libsvn_fs_x/batch_fsync.c"
   copyfrom-rev="1694500">/subversion/trunk/subversion/libsvn_fs_x/batch_fsync.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/noderevs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/hotcopy.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/low_level.c</path>
<path
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/fsx-1.10/subversion/libsvn_fs_x/batch_fsync.h"
   copyfrom-rev="1694500"
   action="A"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/batch_fsync.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/noderevs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/hotcopy.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/dag.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/low_level.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/dag.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_x/fs-x-pack-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/reps.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/fsx-1.10/subversion/libsvn_fs_x/dag_cache.c"
   copyfrom-rev="1694500"
   action="A"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/dag_cache.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/reps.h</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/util.h</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/fsx-1.10/subversion/libsvn_fs_x/dag_cache.h"
   copyfrom-rev="1694500">/subversion/trunk/subversion/libsvn_fs_x/dag_cache.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/pack.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/revprops.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/lock.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/rev_file.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/caching.c</path>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk/notes</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/lock.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/recovery.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/rev_file.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/recovery.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/fs_x.h</path>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/tree.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/verify.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/cached_data.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/index.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/changes.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/verify.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/index.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/changes.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/string_table.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_mutex.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/mutex.c</path>
</paths>
<msg>Merge the fsx-1.10 development branch to trunk and remove the
BRANCH-README file.  There were no conflicts.

Changes brings the latest FSX changes to /trunk.
</msg>
</logentry>
<logentry
   revision="1694490">
<author>stefan2</author>
<date>2015-08-06T13:08:33.260605Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_ra_svn_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/editorp.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk</path>
</paths>
<msg>Merge the ra-svn-tuning development branch to trunk and remove the
BRANCH-README file.  There were no conflicts.

Changes brought by this branch:
- More efficient protocol command dispatch.
- Efficient string handling (svn_string_t instead of const char *).
- Throughput improvements by providing optimized code paths
- Widen the internal 32 bit item ID to 64 bit to eliminate any chance of
  overflow in the future.</msg>
</logentry>
<logentry
   revision="1694489">
<author>stefan2</author>
<date>2015-08-06T12:54:36.434835Z</date>
<paths>
<path
   kind="file"
   copyfrom-path="/subversion/branches/1.10-cache-improvements/subversion/libsvn_subr/cache-null.c"
   copyfrom-rev="1694487"
   action="A"
   prop-mods="false"
   text-mods="false">/subversion/trunk/subversion/libsvn_subr/cache-null.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/caching.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/caching.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/cache-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_cache.h</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Merge the 1.10-cache-improvements development branch to trunk and remove
the BRANCH-README file.  There were no conflicts.

Changes brought by this branch:
- Introduce a NULL cache implementation to unify / simplify cache usage
- Space and runtime efficiency improvements to the recently introduced
  full key comparison in membuffer caches.</msg>
</logentry>
<logentry
   revision="1694481">
<author>stefan2</author>
<date>2015-08-06T12:28:15.378450Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/deprecated.c</path>
</paths>
<msg>Fix UNIX build without GPG agent.

* subversion/libsvn_subr/deprecated.c
  (svn_auth_get_gpg_agent_simple_provider): Disable compilation when we
                                            don't have GPG agent support.

Patch by: Alexander Dreweke &lt;alexander{_AT_}dreweke.net&gt; </msg>
</logentry>
<logentry
   revision="1694451">
<author>stefan2</author>
<date>2015-08-06T11:03:34.248427Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/INSTALL</path>
</paths>
<msg>Update build instructions for Windows (from Source) when building with OpenSSL &gt;= 1.0.0.

* INSTALL
   (II.E.4): update note on building OpenSSL &gt;= 1.0.0

Patch by: Stefan Hett &lt;stefan{_AT_}egosoft.com&gt;</msg>
</logentry>
<logentry
   revision="1694331">
<author>stsp</author>
<date>2015-08-05T21:10:24.705258Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: List CVE-2015-3184 and CVE-2015-3187.
</msg>
</logentry>
<logentry
   revision="1694309">
<author>stsp</author>
<date>2015-08-05T20:00:12.310461Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Remove unclear reference to improved interactive conflict
   resolution menus which doesn't point out what actually did improve
   and has no link to revision or issue number.
</msg>
</logentry>
<logentry
   revision="1694298">
<author>stsp</author>
<date>2015-08-05T19:35:47.512385Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Issue #3747 is not fixed, don't list it as a change here.
</msg>
</logentry>
<logentry
   revision="1694249">
<author>stefan2</author>
<date>2015-08-05T15:28:31.068729Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>Fix a limitation in our svn_stream_skip fallback implementation found while
playing around with stream wrappers:  Some streams don't implement read_full,
others don't implement the normal read. Make the fallback code work in either
case.

Note that this is not a problem for any of our currently used stream
implementations.

* subversion/libsvn_subr/stream.c
  (svn_stream_skip): Our default implemenation for skip will work with any
                     read function.  So, fall back to any read function
                     that the stream actually implements.</msg>
</logentry>
<logentry
   revision="1694242">
<author>stefan2</author>
<date>2015-08-05T15:03:57.037615Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/svnserve.c</path>
</paths>
<msg>Follow-up to r1694236: Hopefully fix build with Visual C.

* subversion/svnserve/svnserve.c
  (ONLY_AVAILABLE_WITH_THEADS): Define a text macro.
  (svnserve__options): Use that macro instead of using conditional code.</msg>
</logentry>
<logentry
   revision="1694236">
<author>stefan2</author>
<date>2015-08-05T14:38:27.757398Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnserve/svnserve.c</path>
</paths>
<msg>Make the --min-threads and --max-threads options in svndamin available
whenever the server may be threaded.  In particular when --threads is
implied and cannot be activated via command line.

* subversion/svnserve/svnserve.c
  (svnserve__options): Enable min/max threads options whenever we
                       support APR threads. Make them reference the
                       --threads option only if that is available.
</msg>
</logentry>
<logentry
   revision="1694227">
<author>stefan2</author>
<date>2015-08-05T14:28:46.138359Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
</paths>
<msg>Code cleanup. No functional change intended.

* subversion/libsvn_repos/dump.c
  (svn_repos_dump_fs4): The SUBPOOL is actually an ITERPOOL.</msg>
</logentry>
<logentry
   revision="1694225">
<author>stefan2</author>
<date>2015-08-05T14:15:51.004153Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/deprecated.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/svn_repos.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_repos/dump-load-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/SVNRepos.cpp</path>
</paths>
<msg>Implement the new 'svnadmin dump-revprops' sub-command.

The implementation uses a bumped version of svn_repos_dump_fs that can now
be told what kind of information to include in the dump.  These new flags
are "positive" and non-restrictive, e.g. INCLUDE_REVPROPS instead of
REVPROPS_ONLY.  That way, future revisions may easily extend this scheme.

* subversion/include/svn_repos.h
  (svn_repos_dump_fs4): Declared API revision.
  (svn_repos_dump_fs3): Deprecate the old one.

* subversion/libsvn_repos/dump.c
  (write_revision_record): Make dumping revprops an option.
  (svn_repos_dump_fs3): Replaced by ...
  (svn_repos_dump_fs4): ... the new API revision. Dump contents depending on
                        the two new flag parameters.

* subversion/libsvn_repos/deprecated.c
  (svn_repos_dump_fs3): Implement here now as forwarding to the latest API.

* subversion/bindings/javahl/native/SVNRepos.cpp
  (dump): Call latest API version.

* subversion/tests/libsvn_repos/dump-load-test.c
  (test_dump_bad_props): Same.

* subversion/svnadmin/svnadmin.c
  (svn_opt_subcommand_t): Declare new sub-command.
  (cmd_table): Define its UI.
  (get_dump_range): Factored out from ...
  (subcommand_dump): ... this.
  (subcommand_dump_revprops): Implement new sub-command. Code taken from
                              subcommand_dump.
</msg>
</logentry>
<logentry
   revision="1694194">
<author>stefan2</author>
<date>2015-08-05T12:07:33.501191Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_repos.h</path>
</paths>
<msg>Make the svn_repos_get_fs_build_parser5 API declaration fit its docstring
and consistent with the older / deprecated versions of that API.
No functional change.

* subversion/include/svn_repos.h
  (svn_repos_get_fs_build_parser5): Rename CALLBACKS parameter to PARSER.</msg>
</logentry>
<logentry
   revision="1694191">
<author>stefan2</author>
<date>2015-08-05T12:01:06.979340Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/load-fs-vtable.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_repos.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
</paths>
<msg>Implement the new 'svnadmin load-revprops' sub-command.  It takes a normal
dumpfile but applies the revprop data only, and only to existing revisions.

We simply use the existing dumpfile parser infrastructure and implement
two callbacks: Starting a revision record b/c we don't create a txn here
and closing revisions - which sets the revprops.  Revprop parser and magic
header callbacks can be reused from the standard dumpfile loader.

* subversion/include/svn_repos.h
  (svn_repos_notify_action_t): Add a new notification for writing revprops.
  (svn_repos_load_fs_revprops): Declare new API. This is a variant of the
                                existing svn_repos_load_fs5.  We don't
                                trigger hooks nor do we modify the UUID.

* subversion/libsvn_repos/load-fs-vtable.c
  (revprops_new_revision_record,
   revprops_close_revision): New callback implementations.
  (build_revprop_parser): New parser setup function. Based on the preexisting
                          svn_repos_get_fs_build_parser5.
  (svn_repos_load_fs_revprops): Implement new API.

* subversion/svnadmin/svnadmin.c
  (svn_opt_subcommand_t): Declare new sub-command.
  (cmd_table): Add UI spec for the new sub-command.
  (repos_notify_handler): Handle the new notification type.
  (get_load_range): New utility, factored out from ...
  (subcommand_load): ... this.
  (subcommand_load_revprops): Implement the new sub-command.  Code taken
                              mostly from subcommand_load.</msg>
</logentry>
<logentry
   revision="1694151">
<author>stsp</author>
<date>2015-08-05T08:54:06.360499Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Add an entry for upcoming 1.7.22 release.
</msg>
</logentry>
<logentry
   revision="1694150">
<author>stsp</author>
<date>2015-08-05T08:50:50.883218Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: FIx URL to 1.7.21 tag.
</msg>
</logentry>
<logentry
   revision="1694026">
<author>danielsh</author>
<date>2015-08-04T10:45:04.800159Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>patch: Fix a layering violation.

This should enable 'svn patch', when run on platforms that do not support
symlinks, to apply patches that create symlinks.

* subversion/libsvn_client/patch.c
  (readlink_symlink, write_symlink): Call svn_subst_read_specialfile()
    and svn_subst_create_specialfile() instead of reimplementing them.
    Update a comment.
</msg>
</logentry>
<logentry
   revision="1694023">
<author>danielsh</author>
<date>2015-08-04T10:43:17.503533Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnserve/svnserve.c</path>
</paths>
<msg>* subversion/svnserve/svnserve.c
  (svnserve__options.SVN_OPT_MIN_THREADS): Fix typo in help string.
</msg>
</logentry>
<logentry
   revision="1693930">
<author>stefan2</author>
<date>2015-08-03T16:22:23.272851Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/svnserve.c</path>
</paths>
<msg>Minor simplification.

* subversion/svnserve/svnserve.c
  (svnserve__option): Combine alternative compile paths by instantiating
                      a already existing macro instead of hard-coding the
                      various alternatives. 
</msg>
</logentry>
<logentry
   revision="1693886">
<author>stefan2</author>
<date>2015-08-03T12:15:54.654443Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/verify.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/verify.c
  (verify_f7_metadata_consistency): Fix error leak.

Found by: danielsh</msg>
</logentry>
<logentry
   revision="1693670">
<author>danielsh</author>
<date>2015-07-31T23:46:37.116228Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnadmin_tests.py
  (mergeinfo_race): Document a second bug this test was found to be triggering.</msg>
</logentry>
<logentry
   revision="1693637">
<author>stsp</author>
<date>2015-07-31T18:09:49.886791Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_get_conflicted): Don't crash if no prop conflict exists.
</msg>
</logentry>
<logentry
   revision="1693631">
<author>stsp</author>
<date>2015-07-31T17:22:00.997250Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Add another convenience API function involving conflict option IDs.

This function makes it trivial to find an option object among the
set of possible resolution options. It's a simple search through an
array but why make things hard for clients...

* subversion/include/svn_client.h
  (svn_client_conflict_option_find_by_id): Declare.

* subversion/libsvn_client/resolved.c
  (match_resolution_option): Replace this helper function with...
  (svn_client_conflict_option_find_by_id): ... this implementation of new API.
  (svn_client_conflict_text_resolve_by_id,
   svn_client_conflict_prop_resolve_by_id,
   svn_client_conflict_tree_resolve_by_id): Update callers.
</msg>
</logentry>
<logentry
   revision="1693629">
<author>stsp</author>
<date>2015-07-31T16:51:27.213211Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>Make svn_client_conflict_option_merged_text usable with property conflicts.

* subversion/include/svn_client.h
  (svn_client_conflict_option_id_t): Remove outdated comment.
  (svn_client_conflict_option_set_merged_propval): Declare.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_option_t): Add new type-specific data for merged
   property value.
  (conflict_resolver_func): Make use of the merged property value if the
   option ID matches svn_client_conflict_option_merged_text. Whitespace fix.
  (svn_client_conflict_option_set_merged_propval): Implement.
</msg>
</logentry>
<logentry
   revision="1693626">
<author>stsp</author>
<date>2015-07-31T16:43:49.583215Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (conflict_option_resolve_func_t,
   svn_client_conflict_option_t): Move these defintions further up in the
    file for easy later use in future code.
</msg>
</logentry>
<logentry
   revision="1693622">
<author>stsp</author>
<date>2015-07-31T16:05:33.576773Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Introduce a private type-specific data section in svn_client_conflict_option_t.

Use this new section to store the property name an property conflict option
applies to, rather than storing the property name in a plain struct member.
More type-specific data will follow.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_option_t): Introduce a type_data section and move
   'propname' into it.
  (svn_client_conflict_prop_resolve,
   resolve_prop_conflict): Update users of svn_client_conflict_option_t.
  (text_conflict_options, binary_conflict_options, prop_conflict_options,
   tree_conflict_options): Update these static initializers as well.
</msg>
</logentry>
<logentry
   revision="1693593">
<author>stsp</author>
<date>2015-07-31T13:31:07.360973Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Add a convenience API which allows clients to resolve conflicts by
passing an option id rather than a pointer to an option object.

* subversion/include/svn_client.h
  (svn_client_conflict_tree_resolve_by_id,
   svn_client_conflict_prop_resolve_by_id,
   svn_client_conflict_text_resolve_by_id): Declare.

* subversion/libsvn_client/resolved.c
  (match_resolution_option): New helper function.
  (svn_client_conflict_tree_resolve_by_id,
   svn_client_conflict_prop_resolve_by_id,
   svn_client_conflict_text_resolve_by_id): Implement.
</msg>
</logentry>
<logentry
   revision="1693592">
<author>stsp</author>
<date>2015-07-31T13:23:29.768210Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>For a given svn_client_conflict_t, keep track of resolution per conflict type
rather than globally.

Replace svn_client_conflict_resolve() and svn_client_conflict_get_resolution()
with functions which operate on a specific type of conflict (text/prop/tree).

This is necessary since an svn_client_conflict_t represents all conflicts
on a working copy node. The former API interface made no sense.

* subversion/include/svn_client.h
  (svn_client_conflict_resolve, svn_client_conflict_get_resolution): Remove.
  (svn_client_conflict_tree_resolve,
   svn_client_conflict_tree_get_resolution,
   svn_client_conflict_prop_resolve
   svn_client_conflict_prop_get_resolution,
   svn_client_conflict_text_resolve
   svn_client_conflict_text_get_resolution) Declare.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_t): Remove 'resolution' field. Add new fields which
   keep track of resolution of each conflict separately (one text conflict,
   one tree conflict, and one property conflict per property).
  (conflict_get_internal): Initialise new fields.
  (conflict_resolver_func): Make use of the new per-conflict type fields.
  (svn_client_conflict_option_t): Add 'propname' field which indicates
   the specific property to resolve.
  (resolve_postpone): Remove. Treating 'postpone' as a special case no-op
   now gets in the way.
  (resolve_text_conflict, resolve_prop_conflict,
   resolve_tree_conflict): Update the new fields in 'conflict' as appropriate.
  (text_conflict_options, binary_conflict_options, prop_conflict_options,
   tree_conflict_options): Init new svn_client_conflict_option_t field to NULL
    and stop using resolve_postpone.
  (svn_client_conflict_resolve, svn_client_conflict_get_resolution): Remove.
  (svn_client_conflict_tree_resolve,
   svn_client_conflict_tree_get_resolution,
   svn_client_conflict_prop_resolve
   svn_client_conflict_prop_get_resolution,
   svn_client_conflict_text_resolve
   svn_client_conflict_text_get_resolution) Implement.
</msg>
</logentry>
<logentry
   revision="1693574">
<author>stsp</author>
<date>2015-07-31T11:47:06.034348Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h
  (svn_client_conflict_t, svn_client_conflict_option_t): Add docstrings.
</msg>
</logentry>
<logentry
   revision="1693570">
<author>stsp</author>
<date>2015-07-31T11:31:33.931928Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Provide an API that returns the resolution option ID of a resolved conflict.
This also allows callers to check if a conflict has been resolved already.

* subversion/include/svn_client.h
  (svn_client_conflict_get_resolution): Declare.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_get_resolution): Implement.
</msg>
</logentry>
<logentry
   revision="1693558">
<author>stsp</author>
<date>2015-07-31T09:49:02.653204Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Consistenly name local variables of type svn_client_conflict_option_id_t.

No functional change.

* subversion/libsvn_client/resolved.c
  (resolve_text_conflict, resolve_prop_conflict,
   resolve_tree_conflict): Rename 'id' variable to 'option_id' for consistency.
</msg>
</logentry>
<logentry
   revision="1693557">
<author>stsp</author>
<date>2015-07-31T09:44:10.419900Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Bring back the svn_client_conflict_walk() API, this time implemented as a
thin wrapper on top of libsvn_wc's legacy conflict resolver, rather than
on top of the status walker. This avoids having to re-implement detection
of delayed or nested conflicts caused by tree conflict resolution.

The intention is to start using more svn_client_conflict APIs in the command
line client, which requires a conflict walk to implement its interactive mode.

Eventually, libsvn_wc will grow new conflict resolution abilities and we will
stop depending on legacy conflict resolution APIs within the new system.

* subversion/include/svn_client.h
  (svn_client_conflict_walk_func_t, svn_client_conflict_walk): Declare.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_t): Add a 'resolution' field which stores the resolution
   option chosen by the user.
  (conflict_option_id_to_wc_conflict_choice): Move this helper function further
   up in the file to make it usable from more functions.
  (conflict_get_internal): Initialise conflict-&gt;resolution.
  (conflict_resolver_baton_t, conflict_resolver_func): New helper callback.
  (svn_client_conflict_walk): Implement on top of svn_wc__resolve_conflicts().
  (resolve_postpone, resolve_text_conflict, resolve_prop_conflict,
   resolve_tree_conflict): Store chosen resolution in conflict-&gt;resolution.
</msg>
</logentry>
<logentry
   revision="1693547">
<author>brane</author>
<date>2015-07-31T08:58:19.976684Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/security/mailer.py</path>
</paths>
<msg>Add code to generate PGP/MIME signed messages for advisories.

* tools/dist/security/mailer.py: Import e-mail and GPG modules.
  (Mailer.__subject): Add an article to the subject in singular mode.
  (Mailer.__attachments): New; generate attachments from advisories.
  (SignedMessage): New; construct a PGP/MIME signed message.
</msg>
</logentry>
<logentry
   revision="1693545">
<author>stsp</author>
<date>2015-07-31T08:50:13.118146Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Add a new helper function which converts from new libsvn_client conflict
object IDs to legacy libsvn_wc conflict choice values.

Use this new helper function to silence a compiler warning with clang.
The enum values are currently identical but clang will still complain about
an assignment of incompatible enum types. So I can't be lazy :-(

* subversion/libsvn_client/resolved.c
  (conflict_option_id_to_wc_conflict_choice): New helper function.
  (resolve_conflict): Use the new helper function.
</msg>
</logentry>
<logentry
   revision="1693543">
<author>brane</author>
<date>2015-07-31T08:49:12.057366Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/dist/security/parser.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/security/adviser.py</path>
</paths>
<msg>Minor tweaks to the tools/dist/security module.

* tools/dist/security/parser.py
  (Notification.Metadata): Tweak docstring.
  (Notification.Metadata.__init__): Put attributes into the private namespace.
  (Notification.Metadata.tracking_id,
   Notification.Metadata.title,
   Notification.Metadata.culprit,
   Notification.Metadata.advisory,
   Notification.Metadata.patches): New accessor properties.
  (__Part.text): New property; replaces __Part.get_text().
  (__Part.quoted_printable): New property; replaces __Part.get_quoted_printable().
  (__Part.base64): New property; replaces __Part.get_base64().
  (Text): Renamed from Advisory.
  (Patch.__init__): Put the base version into the private namespace.
  (Patch.base_version): New accessor property.
  (Patch.quoted_printable): New property; replaces __Part.get_quoted_printable().

* tools/dist/security/adviser.py
  (__write_advisory): Update Notification property access.
</msg>
</logentry>
<logentry
   revision="1693510">
<author>brane</author>
<date>2015-07-30T22:35:07.185860Z</date>
<paths>
<path
   action="D"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/tools/dist/_gnupg.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/release.py</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/trunk/tools/dist/_gnupg.py"
   copyfrom-rev="1693509">/subversion/trunk/tools/dist/security/_gnupg.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dist/rat-excludes</path>
</paths>
<msg>Move the GPG wrapper script to the security module.

* tools/dist/security/_gnupg.py: Moved here from tools/dist/_gnupg.py.

* tools/dist/rat-excludes: Update reference to _gnupg.py.
* tools/dist/release.py (get_siginfo): Update import statement.
</msg>
</logentry>
<logentry
   revision="1693509">
<author>brane</author>
<date>2015-07-30T22:24:59.052814Z</date>
<paths>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/security/mailer.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dist/security/parser.py</path>
</paths>
<msg>Start writing the PGP/MIME mail generator for security advisories.

* tools/dist/security/mailer.py: New.

* tools/dist/security/parser.py
  (Notification.Metadata): Renamed from Notification.__Metadata.
  (Notification.Metadata.__init__): Correctly convert the culprit(s) to a set.
  (Notification.Metadata.__len__): New.
  (Notification.Metadata.__parse_advisory): Update reference to the Metadata class.
</msg>
</logentry>
<logentry
   revision="1693504">
<author>brane</author>
<date>2015-07-30T21:17:27.729800Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dist/security/parser.py</path>
</paths>
<msg>Simplify culprit accusation for security notifications.

* tools/dist/security/parser.py
  (Notification.__Metadata.CULPRIT_BOTH): Remove.
  (Notification.__Metadata.__culprits): Change to tuple and list all possible values.
  (Notification.__Metadata.__init__):
   - Construct a better error message listing possible culprits.
   - Make self.culprit a set to simplify member checks.
</msg>
</logentry>
<logentry
   revision="1693501">
<author>brane</author>
<date>2015-07-30T20:57:04.730381Z</date>
<paths>
<path
   action="A"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/tools/dist/security</path>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/security/parser.py</path>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/security/adviser.py</path>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/tools/dist/security/__init__.py</path>
</paths>
<msg>Begin writing better scripting support for generating advisory mails
and text files for our web site.

* tools/dist/security: New directory.
* tools/dist/security/__init__.py: New; makes this directory a Python module.
* tools/dist/security/parser.py: New; parser for notifications and patches.
* tools/dist/security/adviser.py: New; text-based advisory file generator.
</msg>
</logentry>
<logentry
   revision="1693472">
<author>stsp</author>
<date>2015-07-30T18:50:50.011897Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (resolve_conflict): Use local variable 'err' as intended.
</msg>
</logentry>
<logentry
   revision="1693470">
<author>stsp</author>
<date>2015-07-30T18:46:31.861785Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Ensure that working copy locks are acquired correctly when resolving conflicts
through svn_client_conflict_resolve(). Add a missing sleep for timestamps, too.

* subversion/libsvn_client/resolved.c
  (resolve_conflict): New helper function. Applies the same working copy
   locking as svn_client_resolve() during resolution and sleeps for timestamps.
  (resolve_text_conflict, resolve_prop_conflict, resolve_tree_conflict): Use
   the new helper function.
</msg>
</logentry>
<logentry
   revision="1693457">
<author>stsp</author>
<date>2015-07-30T17:03:24.544785Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h
  (svn_client_conflict_get_conflicted): Fix typo in docstring.
</msg>
</logentry>
<logentry
   revision="1693454">
<author>stsp</author>
<date>2015-07-30T16:39:52.581834Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Revert the addition of the svnn_client_conflict_walk() API for now.

The claimed deficiencies of the existing libsvn_wc conflict walker are
actually not present in its current implementation.

* subversion/libsvn_wc/conflicts.c,
  subversion/include/svn_client.c
  (svn_client_conflict_walk_conflicts,
   svn_client_conflict_walk_func_t): Remove.
</msg>
</logentry>
<logentry
   revision="1693452">
<author>stsp</author>
<date>2015-07-30T16:20:22.528482Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>Move two identical blocks of code into a helper function and document it.

* subversion/libsvn_wc/conflicts.c
  (handle_tree_conflict_resolution_failure): New helper function.
  (resolve_tree_conflict_on_node): Call new helper function instead of
   inlining an identical block of code twice.
</msg>
</logentry>
<logentry
   revision="1693447">
<author>stsp</author>
<date>2015-07-30T15:56:43.650300Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (resolve_tree_conflict_on_node): Improve documentation of resolve_later
   argument in docstring.
</msg>
</logentry>
<logentry
   revision="1693159">
<author>philip</author>
<date>2015-07-28T20:53:04.926352Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/ac-macros/apache.m4</path>
</paths>
<msg>* build/ac-macros/apache.m4 (SVN_FIND_APACHE): Extract version with two
   simpler sed commands to support Solaris and OSX sed.
</msg>
</logentry>
<logentry
   revision="1693138">
<author>philip</author>
<date>2015-07-28T17:43:32.542473Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build/ac-macros/apache.m4</path>
</paths>
<msg>* build/ac-macros/apache.m4 (SVN_FIND_APACHE): Use the version
   extracted from the header in the blacklist check, sanity check
   the extracted version, add detected versions to error strings.
</msg>
</logentry>
<logentry
   revision="1693135">
<author>philip</author>
<date>2015-07-28T17:27:21.023346Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/ac-macros/apache.m4</path>
</paths>
<msg>* build/ac-macros/apache.m4 (SVN_FIND_APACHE): Extract the httpd version
   from the header file rather than the executable output as the form of
   the executable output is hard to predict.
</msg>
</logentry>
<logentry
   revision="1692882">
<author>stsp</author>
<date>2015-07-27T13:45:56.063174Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/davautocheck.sh</path>
</paths>
<msg>* subversion/tests/cmdline/davautocheck.sh: Remove duplicate &lt;Location&gt; block.
</msg>
</logentry>
<logentry
   revision="1692880">
<author>stsp</author>
<date>2015-07-27T13:36:14.041403Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/davautocheck.sh</path>
</paths>
<msg>* subversion/tests/cmdline/davautocheck.sh: Fix typo.
</msg>
</logentry>
<logentry
   revision="1692799">
<author>brane</author>
<date>2015-07-26T23:51:47.125680Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_repos/repos-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/authz_tests.py</path>
</paths>
<msg>Fix CVE-2015-3187: Adjust when svn_repos_trace_node_locations() makes the authz checks.

* subversion/libsvn_repos/rev_hunt.c
  (svn_repos_trace_node_locations): Check authz later.

* subversion/tests/libsvn_repos/repos-test.c
  (struct authz_read_baton_t): New.
  (mkdir_delete_copy, authz_read_func, verify_locations,
   set_expected): New helpers.
  (trace_node_locations_authz): New test.
  (test_funcs): Add new test.

* subversion/tests/cmdline/authz_tests.py
  (authz_log_and_tracing_test): Expect different error for cat, and
   different behaviour for diff.
</msg>
</logentry>
<logentry
   revision="1692798">
<author>brane</author>
<date>2015-07-26T23:47:12.885538Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_authz_svn/mod_authz_svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/ac-macros/apache.m4</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/win-tests.py</path>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/mod_authz_svn_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/davautocheck.sh</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/README</path>
</paths>
<msg>Fix CVE-2015-3184: Have mod_authz_svn use ap_hook_force_authn where available.

* subversion/mod_authz_svn/mod_authz_svn.c
  (access_checker): Support ap_force_authn_hook.
  (force_authn): New.
  (register_hooks): Register force_authn.

* build/ac-macros/apache.m4: Add --enable-broken-httpd-auth.

* subversion/tests/cmdline/mod_authz_svn_tests.py: New.

* subversion/tests/cmdline/svntest/main.py
  (is_httpd_authz_provider_enabled): New.

* subversion/tests/cmdline/davautocheck.sh,
  subversion/tests/cmdline/README,
  win_tests.py: Add configuration for new tests.
</msg>
</logentry>
<logentry
   revision="1692793">
<author>brane</author>
<date>2015-07-26T23:20:42.152078Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Update for 1.7.21, 1.8.14 and 1.9.0.
</msg>
</logentry>
<logentry
   revision="1692716">
<author>danielsh</author>
<date>2015-07-26T11:58:42.667400Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Whitespace changes only.

* subversion/libsvn_diff/parse-diff.c
  (transitions): Group the state machine's states.</msg>
</logentry>
<logentry
   revision="1692659">
<author>stefan2</author>
<date>2015-07-25T21:31:06.366265Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnsync/svnsync.c</path>
</paths>
<msg>* subversion/svnsync/svnsync.c
  (svnsync_cmd_table): Tell users to use --skip-unchanged with
                       copy-revprops. No functional change intended. 
</msg>
</logentry>
<logentry
   revision="1692655">
<author>stefan2</author>
<date>2015-07-25T21:23:02.281911Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnsync/svnsync.c</path>
</paths>
<msg>Add a '--skip-unchanged' option to 'svnsync copy-revprops'.

Most of this patch is concerned with passing the extra flag down
to the revprop sending function.  Since the original revprop list
of the target are already available, that function only needs to
skip no-ops.

* subversion/svnsync/svnsync.c
  (svnsync__opt.svnsync_opt_skip_unchanged): Declare new option. 
  (svnsync_cmd_table): Enable it for the copy-revprops sub-command.
  (svnsync_options): Add UI documentation for the new option.
  (opt_baton_t,
   subcommand_baton_t): Add the new option as a flag to our batons.
  (write_revprops): Optionally pass in the current revprop list and
                    only send changes over the RA layer.
  (copy_revprops): Add the option as a parameter and enable the filtering
                   depending on it.
  (make_subcommand_baton): Copy the new option flag.
  (do_initialize,
   replay_rev_finished,
   do_synchronize,
   do_copy_revprops): Update callers.
  (sub_main): Handle new CL option.</msg>
</logentry>
<logentry
   revision="1692650">
<author>stefan2</author>
<date>2015-07-25T20:29:10.294957Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_base/revs-txns.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
</paths>
<msg>At the FS level, optimize no-op revprop changes for all backends.

This eliminates the expensive file writes and fsync calls in the "no
actual change" case.  However, we must do that late in the process
when we already acquired the repo write lock.  Only that will guarantee
out-of-dateness checks to always kick in.

* subversion/libsvn_fs_fs/fs_fs.c
  (change_rev_prop_body): Don't actually write the new revprop list
                          if it is the same as the old.

* subversion/libsvn_fs_x/fs_x.c
  (change_rev_prop_body): Same for FSX.

* subversion/libsvn_fs_base/revs-txns.c
  (svn_fs_base__set_rev_prop): Same for BDB.</msg>
</logentry>
<logentry
   revision="1692470">
<author>rhuijben</author>
<date>2015-07-24T09:20:05.096391Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/include/svn_types.swg</path>
</paths>
<msg>In the swig ruby binding: Make the digest typemap match the arguments of
svn_md5_digest_to_cstring and svn_md5_digest_to_cstring. This fixes a
usage of an uninitialized variable on Windows in the swig generated code.

* subversion/bindings/swig/include/svn_types.swg
  (const unsigned char *digest): Add note to python mapping. Fix ruby mapping.
</msg>
</logentry>
<logentry
   revision="1692469">
<author>rhuijben</author>
<date>2015-07-24T09:04:02.761365Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/ruby/libsvn_swig_ruby/swigutil_rb__pre_ruby.h</path>
</paths>
<msg>Fix compiling the ruby bindings on Visual Studio 2015+

* subversion/bindings/swig/ruby/libsvn_swig_ruby/swigutil_rb__pre_ruby.h
  (HAVE_STRUCT_TIMESPEC): Declare, to avoid duplicate definition.
</msg>
</logentry>
<logentry
   revision="1692449">
<author>danielsh</author>
<date>2015-07-23T21:45:09.538882Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/scramble-tree.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/release.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/python/svn/core.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/transform_sql.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/generator/gen_win.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/ctypes-python/csvn/ext/callback_receiver.py</path>
</paths>
<msg>Require Python ≥2.7 for Subversion 1.9, part 2: coding simplifications.

* build/generator/gen_win.py (hashlib_md5),
* build/transform_sql.py (operator.methodcaller),
* subversion/bindings/swig/python/svn/core.py (SubversionException.message),
* tools/dev/scramble-tree.py (hashlib_md5)
* tools/dist/release.py (__future__.with_statement):
    Remove conditional code for now-unsupported Python versions.

* subversion/bindings/ctypes-python/csvn/ext/callback_receiver.py
    Note a possible code simplification.</msg>
</logentry>
<logentry
   revision="1692448">
<author>danielsh</author>
<date>2015-07-23T21:44:46.234945Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/find_python.sh</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/README</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/autogen.sh</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/INSTALL</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/Makefile.in</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/configure.ac</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/INSTALL</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/__init__.py</path>
</paths>
<msg>Require Python ≥2.7 for Subversion 1.9, part 1: documentation and dependency
version checks.

* INSTALL
  (I.C. Dependencies in Detail):
    Document that Python 2.7 is required.
    Add statement about Python 3.x.

* subversion/tests/cmdline/README,
* subversion/bindings/swig/INSTALL:
    Document that Python 2.7 is required.

* autogen.sh,
* build/find_python.sh,
* configure.ac,
* Makefile.in (check),
* subversion/tests/cmdline/svntest/__init__.py:
    Update comments, version number checks, and error messages.</msg>
</logentry>
<logentry
   revision="1692298">
<author>rhuijben</author>
<date>2015-07-22T16:11:59.824220Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build/generator/templates/vcnet_vcxproj.ezt</path>
</paths>
<msg>* generator/templates/vcnet_vcxproj.ezt
  Turn the following warnings in errors in Visual Studio:
   C4700 - Use of an uninitialized local variable.
   C4789 - Buffer overrun when specific C run-time (CRT) functions are used.

   Note that potentially unitialized variables trigger a different warning.</msg>
</logentry>
<logentry
   revision="1692294">
<author>rhuijben</author>
<date>2015-07-22T15:53:21.223898Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/generator/templates/vcnet_vcxproj.ezt</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build/generator/templates/vcnet_vcxproj_filters.ezt</path>
</paths>
<msg>* generator/templates/vcnet_vcxproj.ezt
  Use standard ordering for configurations. Add some labels like how
  current VS versions would add these.

* generator/templates/vcnet_vcxproj_filters.ezt
  Use proper comment syntax.
</msg>
</logentry>
<logentry
   revision="1692286">
<author>rhuijben</author>
<date>2015-07-22T14:57:12.092337Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/generator/templates/vcnet_vcxproj.ezt</path>
</paths>
<msg>* generator/templates/vcnet_vcxproj.ezt
  Pass resource compiler include directories and defines globally instead of
  per .rc file. This makes the generated file more closely match that of
  a normal user created project file.
</msg>
</logentry>
<logentry
   revision="1692273">
<author>rhuijben</author>
<date>2015-07-22T13:44:50.577337Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/dirent_uri-test.c</path>
</paths>
<msg>Fix a few more test assumptions for not Windows.

* subversion/tests/libsvn_subr/dirent_uri-test.c
  (uri_canonical_tests,
   test_dirent_from_file_url): Fix assumptions.
</msg>
</logentry>
<logentry
   revision="1692271">
<author>rhuijben</author>
<date>2015-07-22T13:18:45.472933Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/libsvn_subr/dirent_uri-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_subr/dirent_uri-test.c
  (uri_canonical_tests): Following up on r1692269, fix compilation
    on !Windows platforms.
</msg>
</logentry>
<logentry
   revision="1692270">
<author>rhuijben</author>
<date>2015-07-22T13:16:54.810916Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/dirent_uri-test.c</path>
</paths>
<msg>Following up on r1692259 and r1692264 fix another !Windows assumption
in a regression test.

* subversion/tests/libsvn_subr/dirent_uri-test.c
  (test_dirent_from_file_url): Don't expect the '\' to be handled as on Windows
    on all platforms.
</msg>
</logentry>
<logentry
   revision="1692269">
<author>rhuijben</author>
<date>2015-07-22T13:13:17.931216Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_subr/dirent_uri-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/dirent_uri.c</path>
</paths>
<msg>Following up on r1692262, fix canonicalizing the separator directly behind
a windows drive letter usage.

If the separator in this location was %2F it wouldn't be converted to '/',
unlike in other locations of the url... instead it would be converted to %25,
which is the escaped version of '%'.

* subversion/libsvn_subr/dirent_uri.c
  (canonicalize): Handle a final '/' in the same way as the generic code.

* subversion/tests/libsvn_subr/dirent_uri-test.c
  (uri_canonical_tests): Extend testcase.
</msg>
</logentry>
<logentry
   revision="1692264">
<author>rhuijben</author>
<date>2015-07-22T12:36:54.349649Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_subr/dirent_uri-test.c</path>
</paths>
<msg>Following up on r1692259, fix some !Windows test assumptions in
the dirent from url regression tests. Add a few more tests.

* subversion/tests/libsvn_subr/dirent_uri-test.c
  (test_dirent_from_file_url): Stop assuming that '|' is converted to ':'
    on not Windows platforms.
</msg>
</logentry>
<logentry
   revision="1692262">
<author>rhuijben</author>
<date>2015-07-22T12:32:39.423751Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_subr/dirent_uri-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/dirent_uri.c</path>
</paths>
<msg>Fix an ugly case where svn_uri_canonicalize() returned a not canonical
uri when invoked with a Window specific drive relative url.

Using repository urls like 'file:///c:hi' or 'file:///c:hi/repos' would
raise not-canonical assertions even though they got through the canonicalize
function.

* subversion/libsvn_subr/dirent_uri.c
  (canonicalize): Canonicalize drive relative file urls to a canonical form
    instead of leaving them not canonical.

* subversion/tests/libsvn_subr/dirent_uri-test.c
  (uri_canonical_tests): Extend testset.
</msg>
</logentry>
<logentry
   revision="1692259">
<author>rhuijben</author>
<date>2015-07-22T12:10:24.441014Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_subr/dirent_uri-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/dirent_uri.c</path>
</paths>
<msg>In the file:/// to dirent conversion code, handle a '\' directly after a
Windows drive letter at the start of a path like a '/' dirent separator.

This avoids handling these dirents as (drive) relative paths, which
causes unexpected behavior in functions that typically expect to only
see rooted paths.

'\' characters further on in the path are kept as-is, because the '\'
character is valid inside some repository paths, even though not all
ra implementations might handle these.

Note that this change explicitly doesn't change the uri canonicalization
rules, as that would require a working copy format bump. And therefore
it still allows file://A:repos/dir style paths, but this form causes far
less confusion than file://A:\repos\dir being handled as a single component.

* subversion/libsvn_subr/dirent_uri.c
  (svn_uri_get_dirent_from_file_url): Handle '\' characters directly
    after a drive reference as '/'.

* subversion/tests/libsvn_subr/dirent_uri-test.c
  (test_dirent_from_file_url): Add regression tests.
</msg>
</logentry>
<logentry
   revision="1692098">
<author>rhuijben</author>
<date>2015-07-21T12:42:56.799620Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/generator/gen_win.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/generator/gen_win_dependencies.py</path>
</paths>
<msg>Following up on r1692093, also drop optional dependencies when fetching
the dependencies via a different route.

* build/generator/gen_win.py
  (get_win_depends): Combine two code paths.

* build/generator/gen_win_dependencies.py
  Stop setting unused self.bdb_lib.
</msg>
</logentry>
<logentry
   revision="1692093">
<author>rhuijben</author>
<date>2015-07-21T12:07:57.874663Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/generator/gen_win.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/generator/gen_win_dependencies.py</path>
</paths>
<msg>On Windows: drop BDB not found warning, if building without BDB-support.
This makes this code match the *nix configure code.

* build/generator/gen_win.py
   (__init__): Remove BDB-warning, if optional 'db' library not found in
               self._libraries

* build/generator/gen_win_dependencies.py
   (parse_options): initialize self.bdb_path to None.
   (_find_bdb): introduce local variable to determine bdb_path taking 
                either a specified path (via --with-berkeley-db) or
                attempting the legacy default path ('db4-win32')
                Only issue the warning, if failing to locate the BDB path
                AND the user having explicitly specified the bdb-path.

Patch by: Stefan Hett &lt;stefan{_AT_}egosoft.com&gt;
</msg>
</logentry>
<logentry
   revision="1692091">
<author>rhuijben</author>
<date>2015-07-21T11:44:52.900057Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/generator/gen_win.py</path>
</paths>
<msg>In the windows project file generator: Stop adding references to optional
libraries that are hardcoded in build.conf, if the library itself is not
detected.

* build/generator/gen_win.py
  (get_win_depends): Don't add optional dependency libraries, unless the
    optional library is actually found.
</msg>
</logentry>
<logentry
   revision="1692025">
<author>julianfoad</author>
<date>2015-07-20T21:14:01.370621Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_string.h</path>
</paths>
<msg>Fully document our svn_cstring_atoi family of functions.

* subversion/include/svn_string.h
  (svn_cstring_strtoi64,
  (svn_cstring_atoi64,
  (svn_cstring_atoi): Document the input format
  (svn_cstring_strtoui64,
  (svn_cstring_atoui64,
  (svn_cstring_atoui): Document the input format and the numeric range
    restriction.
</msg>
</logentry>
<logentry
   revision="1691952">
<author>julianfoad</author>
<date>2015-07-20T14:25:00.995028Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/gpg_agent.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/user.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_user.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/config_file.c</path>
</paths>
<msg>Fix issue #4584, "Non-canonical $HOME crashes GPG-agent support code", in a
better way than r1691928.

* subversion/include/svn_user.h,
  subversion/libsvn_subr/user.c
  (svn_user_get_homedir): Always return a canonical path.

* subversion/libsvn_subr/config_file.c
  (svn_config_get_user_config_path): No longer canonicalize the result here.

* subversion/libsvn_subr/gpg_agent.c
  (find_running_gpg_agent): No longer canonicalize the result here.
</msg>
</logentry>
<logentry
   revision="1691928">
<author>julianfoad</author>
<date>2015-07-20T13:21:19.135801Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/gpg_agent.c</path>
</paths>
<msg>Fix issue #4584, "Non-canonical $HOME crashes GPG-agent support code".

This is a minimal fix, suitable for back-porting. The issue was introduced in 1.8.11.

* subversion/libsvn_subr/gpg_agent.c
  (find_running_gpg_agent): Canonicalize the home directory before using it.</msg>
</logentry>
<logentry
   revision="1691924">
<author>rhuijben</author>
<date>2015-07-20T12:40:06.918327Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/generator/gen_win_dependencies.py</path>
</paths>
<msg>* build/generator/gen_win_dependencies.py
  (_optional_libraries):  Mark OpenSSL as optional and
    move memcache in the detected dependencies.
</msg>
</logentry>
<logentry
   revision="1691713">
<author>rhuijben</author>
<date>2015-07-18T10:15:11.814018Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/INSTALL</path>
</paths>
<msg>* INSTALL: Following up on r1691712, my minor tweaks.</msg>
</logentry>
<logentry
   revision="1691712">
<author>rhuijben</author>
<date>2015-07-18T10:14:12.335398Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/INSTALL</path>
</paths>
<msg>Several updates/corrections to the INSTALL file:
- updated compatibility statements for Visual Studio (dropping 2002/2003 
support, adding support for 2008+ versions)
- case-correction for February
- replaced dead-link to Platform SDK for VC6 with link to still 
available instructions
- replaced redirection URL zlib.org with direct URL zlib.net
- update VS build instructions to be suitable for VS &gt;= 2010
- libmagic marked as optional dependency
- made URLs consistently use a trailing /
- corrected minimum Serf version (1.2.1 -&gt; 1.3.4)
- corrected section numbering and referencing in several cases
- clarify that Python is required for Windows as well
- specify Python &gt;= 3.0 being unsupported atm
- dropping explicit mentioning of Subversion version 1.8 (since the 
documentation always applies to the current version)
- added missing prerequisite an install step instruction for SQLite 3.7.12
- added optional-markers to steps which are not required in all cases
- clarified when serf is required
- replaced DRIVE-variable with BUILD_ROOT-variable to make things a bit 
easier to understand
- added missing required quotes around SDK-paths which contain spaces
- added sections about building APR, ZLib, and Serf to give some leads 
how to build these from source (serf: only TODO-markers)

* INSTALL
     documentation updated

Patch by: Stefan Hett &lt;stefan{_AT_}egosoft.com&gt;
</msg>
</logentry>
<logentry
   revision="1690626">
<author>jorton</author>
<date>2015-07-13T10:43:45.694555Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/include/proxy.swg</path>
</paths>
<msg>Revert r1690591 which broke SWIG &lt; 3.0.6.

https://ci.apache.org/builders/svn-x64-ubuntu-gcc/builds/317

</msg>
</logentry>
<logentry
   revision="1690591">
<author>jorton</author>
<date>2015-07-13T09:04:13.192583Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/include/proxy.swg</path>
</paths>
<msg>* subversion/bindings/swig/include/proxy.swg:
  Use %{ %} with %pythoncode so comments avoid the SWIG preprocessor,
  fixing the bindings with SWIG 3.0.6.
</msg>
</logentry>
<logentry
   revision="1690288">
<author>danielsh</author>
<date>2015-07-10T16:55:00.154397Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>* build/run_tests.py
  (ioctl_GWINSZ): Rewrite to work on systems where sizeof(short) != 2.</msg>
</logentry>
<logentry
   revision="1689824">
<author>philip</author>
<date>2015-07-08T09:09:38.990999Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/ac-macros/serf.m4</path>
</paths>
<msg>* build/ac-macros/serf.m4
  (SVN_SERF_PKG_CONFIG): Tweak sed regex.  The regex was too simple, it
   mangled any "-D", for example, a path "My-Demo" was removed. Improve
   the regex to only delete the -D after a space or at start of the line.

Patch by: &lt;Kai.Kang{_AT_}windriver.com&gt;
</msg>
</logentry>
<logentry
   revision="1689729">
<author>brane</author>
<date>2015-07-07T19:52:54.062396Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/generator/gen_win_dependencies.py</path>
</paths>
<msg>Make Ruby bindings build on Windows with Visual Studio 2015.

* build/generator/gen_win_dependencies.py
  (SVNCommonLibrary._find_ruby): Do not define snprintf for VS2015+ because
   it's a proper function in that (and presumably newer) versions.
</msg>
</logentry>
<logentry
   revision="1689721">
<author>brane</author>
<date>2015-07-07T18:26:58.276649Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build/generator/gen_win_dependencies.py</path>
</paths>
<msg>Fix detection of Ruby on Windows for Ruby 2.2+.

* build/generator/gen_win_dependencies.py
  (SVNCommonLibrary._find_ruby): Use the RbConfig module, not the deprecated Config
   module; this aligns Ruby detection on Windows with the way it's done in swig.m4.
</msg>
</logentry>
<logentry
   revision="1689494">
<author>philip</author>
<date>2015-07-06T20:34:13.387312Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Fix svnadmin_tests.py tests 34 and 35 to pass when sharded, skip
tests 32, 33 and 34 when packed.

* subversion/tests/cmdline/svnadmin_tests.py
  (verify_keep_going, verify_keep_going_quiet): Skip when packed.
  (verify_invalid_path_changes): Adjust expected output for sharding,
   skip when packed.
  (verify_denormalized_names): Adjust expected output for sharding.
</msg>
</logentry>
<logentry
   revision="1689366">
<author>philip</author>
<date>2015-07-06T11:12:03.769338Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dist/release.py</path>
</paths>
<msg>* tools/dist/release.py
  (tool_versions): Update to libtool 2.4.6 for trunk/1.9.
  (LibtoolDep.build): New, create glibtool symlinks.
</msg>
</logentry>
<logentry
   revision="1689216">
<author>brane</author>
<date>2015-07-05T05:42:04.759624Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Fix wrong change description.
</msg>
</logentry>
<logentry
   revision="1689214">
<author>brane</author>
<date>2015-07-05T05:06:14.685056Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Update for 1.9.0-RC3
</msg>
</logentry>
<logentry
   revision="1688511">
<author>stefan2</author>
<date>2015-06-30T19:50:46.063548Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Fix svnadmin_tests.py 52 failures with pre-cooked repositories.

Reported by: brane

* subversion/tests/cmdline/svnadmin_tests.py
  (is_sharded): New utility function.
  (fsfs_pack_non_sharded): Skip test if the repo is sharded after all.
                           Also get rid of the useless patch_format call.</msg>
</logentry>
<logentry
   revision="1688426">
<author>stefan2</author>
<date>2015-06-30T11:13:29.253432Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Follow-up to r1688270:
Prefix the warning with "svnadmin: " as we do everywhere else.

Suggested by: danielsh

* subversion/svnadmin/svnadmin.c
  (repos_notify_handler): Prefix warning output.

* subversion/tests/cmdline/svnadmin_tests.py
  (fsfs_pack_non_sharded): Update expectation.</msg>
</logentry>
<logentry
   revision="1688425">
<author>ivan</author>
<date>2015-06-30T11:10:40.818676Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Don't flush transaction property changes to disk in FSFS. We don't do this
for all other txn data changes. This is similar to r1680528 change in FSX.

* subversion/libsvn_fs_fs/transaction.c
  (set_txn_proplist): Use svn_stream_open_unique() and svn_io_file_rename()
   instead of svn_io_write_atomic().
</msg>
</logentry>
<logentry
   revision="1688395">
<author>brane</author>
<date>2015-06-30T08:26:59.507345Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/ReposVerifyCallback.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/callback/ReposVerifyCallback.java</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNReposTests.java</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/ReposVerifyCallback.cpp</path>
</paths>
<msg>Follow up to r1688273:
Minor spelling and documentation fixes, no functional change.

[in subversion/bindings/javahl]

* src/org/apache/subversion/javahl/callback/ReposVerifyCallback.java
  (ReposVerifyCallback.onVerifyError): Fix typo in docstring.

* native/ReposVerifyCallback.h
  (ReposVerifyCallback::m_jverify_cb): Renamed from m_verify_cb.
  (ReposVerifyCallback::ReposVerifyCallback): Add docstring and rename parameter.
  (ReposVerifyCallback::callback): Fix docstring.
* native/ReposVerifyCallback.cpp
  (ReposVerifyCallback::ReposVerifyCallback): Remove docstring. Rename variables.
  (ReposVerifyCallback::onVerifyError): Rename variables.

* tests/org/apache/subversion/javahl/SVNReposTests.java
  (SVNReposTests.VerifyCallback.onVerifyError): Add braces to compound conditional.
  (SVNReposTests.tryToBreakRepo): Renamed from trytobreakrepo. Update callers.
  (SVNReposTests.testVerifyBrokenRepo,
   SVNReposTests.testVerifyBrokenRepo_KeepGoing): Make the test setup more explicit.
</msg>
</logentry>
<logentry
   revision="1688273">
<author>brane</author>
<date>2015-06-29T17:48:10.736144Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/JNIUtil.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/ReposNotifyInformation.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/SVNRepos.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/ISVNRepos.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNReposTests.java</path>
<path
   text-mods="true"
   kind="file"
   action="A"
   prop-mods="true">/subversion/trunk/subversion/bindings/javahl/native/ReposVerifyCallback.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/org_apache_subversion_javahl_SVNRepos.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/SVNRepos.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/JNIUtil.cpp</path>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/ReposVerifyCallback.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/bindings/javahl/native/SVNRepos.cpp</path>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/callback/ReposVerifyCallback.java</path>
</paths>
<msg>Follow up to r1687769: Implement semantics equivalent to the new
svn_repos_verify_fs3 in JavaHL.

[in subversion/bindings/javahl]

* src/org/apache/subversion/javahl/callback/ReposVerifyCallback.java
  (ReposVerifyCallback): New callback interface.
* src/org/apache/subversion/javahl/ISVNRepos.java
  (ISVNRepos.verify): Add the verification callback and update the
   documentation of both versions of this method.
* src/org/apache/subversion/javahl/SVNRepos.java
  (ISVNRepos.verify): Update native method signature and wrapper
   method implementation.
* src/org/apache/subversion/javahl/ReposNotifyInformation.java
  (ReposNotifyInformation): Update serial version UID after 1.9 API change.


* native/ReposVerifyCallback.h,
  native/ReposVerifyCallback.cpp: New files.

* native/JNIUtil.h
  (JNIUtil::createClientException): New.
  (JNIUtil::wrappedCreateClientException): Renamed from wrappedHandleSVNError
   and changed the the return type.

* native/JNIUtil.cpp
  (JNIUtil::wrappedCreateClientException): Return the created exception
   instead of throwing it.
  (JNIUtil::createClientException): Implement.
  (JNIUtil::handleSVNError): Reimplement to call createClientException.

* native/SVNRepos.h: Include ReposVerifyCallback.h.
  (SVNRepos::Verify): Add the repository verification callback.
* native/SVNRepos.cpp: Do not include ReposNotifyCallback.h.
  (SVNRepos::Verify): Use the repository verification callback.
* native/org_apache_subversion_javahl_SVNRepos.cpp
  (Java_org_apache_subversion_javahl_SVNRepos_verify): Add the
   repository verification callback and update the implementation.

* tests/org/apache/subversion/javahl/SVNReposTests.java
  (SVNReposTests.testVerify): Tweak repository creation.
  (SVNReposTests.VerifyCallback, SVNReposTests.trytobreakrepo): New helpers.
  (SVNReposTests.testVerifyBrokenRepo,
   SVNReposTests.testVerifyBrokenRepo_KeepGoing): New test cases.
</msg>
</logentry>
<logentry
   revision="1688270">
<author>stefan2</author>
<date>2015-06-29T17:34:28.510875Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_repos.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/fs-wrap.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Add a notification if an svn_fs_pack call is a no-op.  Use that to warn
users if they try to pack a non-sharded FSFS repo.

Extending the svn_fs_pack_notify_action_t enum seems to be the only way
to implement this without bumping the svn_fs_pack API:  We can't use the
warning function because the svn_fs_t instance is created temporarily
inside the API function such that the user can't set warning function.
No-op packs are not an error condition either, therefore returning an
svn_error_t would be inappropriate.

To get the most milage out of this feature, we also notify if there is
no complete shard that can be packed.  'svnadmin pack' does not report
that condition to minimize UI changes.  Other API users might be interested
in that information, though.

* subversion/include/svn_fs.h
  (svn_fs_pack_notify_action_t): Add notification for no-op "action".

* subversion/include/svn_repos.h
  (svn_repos_notify_action_t): Same in outer API layer.

* subversion/libsvn_fs_fs/pack.c
  (pack_body): Notify if there was no shard to be packed.
  (svn_fs_fs__pack): Same.  Also warn if the repo is non-sharded.

* subversion/libsvn_repos/fs-wrap.c
  (pack_notify_func): Translate the new notification as well.

* subversion/svnadmin/svnadmin.c
  (repos_notify_handler): Print a warning if the repo is non-sharded.

* subversion/tests/cmdline/svnadmin_tests.py
  (fsfs_pack_non_sharded): New test case.
  (test_list): Register the new test.</msg>
</logentry>
<logentry
   revision="1688258">
<author>julianfoad</author>
<date>2015-06-29T16:04:00.943082Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/merge.c</path>
</paths>
<msg>Simplify the previous fix for issue #4582 "reintegrate complains about
missing ranges from node unrelated to branch". A follow-up to r1686175.

The first hunk removed here originated in r1666690.

* subversion/libsvn_client/merge.c
  (merge_dir_opened): For a path conflicted by an add or obstruction, no
    longer record the path as 'skipped', and so allow it to inherit the
    updated mergeinfo as usual.
  (record_skips_in_mergeinfo): No longer ignore skipped paths that also have
    a tree conflict.
</msg>
</logentry>
<logentry
   revision="1688032">
<author>stefan2</author>
<date>2015-06-28T17:54:28.468443Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>* subversion/libsvn_subr/cache-membuffer.c
  (membuffer_cache_get_internal): Fix commentary. No functional change.</msg>
</logentry>
<logentry
   revision="1688028">
<author>stefan2</author>
<date>2015-06-28T17:50:20.408850Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/config-test.cfg</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/config-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/config.c</path>
</paths>
<msg>Fix issue #4543:
Recursive configuration value definitions shall not segfault.
They are still unsupported but now result in defined behavior.

To prevent stack overflow or OOM errors, we need to detect cycles in
configuration value definitions.  This patch replaces the boolean
"expanded" state with a enum that allows us to e.g. mark a value as
"being in the process of being expanded", thus enables us to detect
cycles.  We also use it to mark a value as "cyclic" after detection.

Because the public API does not provide any means of error return,
we must implement a defined, deterministic answer for recursive value
definitions.  With this patch, all values that depend on a recursive
definition are normalized to empty strings.  That increases the chance
of users actually noticing their mistake.

* subversion/libsvn_subr/config.c
  (option_state_t): New value resolution state type.
  (cfg_option_t): Replace the binary resolution state.
  (rmex_callback): Update the reset logic.
  (make_string_from_option): Detect and propagate cycles using the
                             refined state machine.
  (expand_option_value): Return whether the expansion was successful.
  (svn_config_create_option): Update constructor.
  (svn_config__is_expanded): Update state check.
  (svn_config_get): Default values need also be checked for references
                    to recursive definitions.
  (svn_config_set): Update initial state.
  (svn_config_dup): Update element access.

* subversion/tests/libsvn_subr/config-test.cfg
  (section1): Add recursive value definitions.

* subversion/tests/libsvn_subr/config-test.c
  (test_expand): Extend to check the recursive definitions as well.</msg>
</logentry>
<logentry
   revision="1687913">
<author>stsp</author>
<date>2015-06-27T12:02:26.183403Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_walk): Fix silly bug (potential infinite loop): Reset
   conflicts_found counter during each iteration, not just before first one.
</msg>
</logentry>
<logentry
   revision="1687906">
<author>stsp</author>
<date>2015-06-27T10:35:42.509446Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Add a conflict walker to the new svn_client_conflict API.

Contrary to our current libsvn_wc conflict walker, this walker guarantees
that new conflicts created during conflict resolution (which can happen
when resolving tree conflicts) are visited as well. The libsvn_wc walker
will visit such new conflicts only if they happen to be created in parts
of the working copy which the walker has not yet visited.

* subversion/include/svn_client.h
  (svn_client_conflict_walk_func_t, svn_client_conflict_walk): Declare.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_walk): Implement.
</msg>
</logentry>
<logentry
   revision="1687893">
<author>stsp</author>
<date>2015-06-27T09:15:24.480923Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Remove planned support for setting the merged text in svn_client_conflict API.

This option cannot be implemented without using the existing conflict
callback since libsvn_wc does not offer this functionality elsewhere.
I'm unsure if this functionality will ever be needed, since resolvers can
create a merged version from the file contents provided, and external merge
tools might as well modify the working file directly.

* subversion/include/svn_client.h
  (svn_client_conflict_option_merged_text): Mark as unsupported.
  (svn_client_conflict_option_set_merged_text): Remove declaration.

* subversion/libsvn_client/resolved.c
  (text_conflict_options): Remove svn_client_conflict_option_merged_text.
  (svn_client_conflict_option_set_merged_text): Remove implementation stub.
</msg>
</logentry>
<logentry
   revision="1687891">
<author>stsp</author>
<date>2015-06-27T09:08:58.624822Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (tree_conflict_options): Fix description for '--acccept working'.
</msg>
</logentry>
<logentry
   revision="1687821">
<author>stsp</author>
<date>2015-06-26T17:26:55.479356Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Initial implementation of new conflict APIs added in r1687702.

Supports most resolution options available in the interactive resolver today.
Does not yet support special tree conflict options such as update-move.

* subversion/libsvn_client/resolved.c
  (ARRAY_LEN): New helper macro.
  (conflict_option_resolve_func_t): New function pointer type.
  (svn_client_conflict_option_t): Define basic contents of this structure.
   The idea is to later extend this struct with type-specific data so that
   conflict options can store additional information here.
  (resolve_postpone, resolve_text_conflict, resolve_prop_conflict,
   resolve_tree_conflict): Basic resolver functions currently forwarding
   to svn_wc_resolved_conflict5().
  (text_conflict_options, binary_conflict_options, prop_conflict_options,
   tree_conflict_options): Basic options for text, prop, and tree conflicts.
  (assert_text_conflict, assert_prop_conflict, assert_tree_conflict): Helpers
   for asserting conflict data passed in corresponds to expected conflict type.
  (svn_client_conflict_text_get_resolution_options,
   svn_client_conflict_prop_get_resolution_options,
   svn_client_conflict_tree_get_resolution_options,
   svn_client_conflict_option_get_id,
   svn_client_conflict_option_describe,
   svn_client_conflict_resolve): Implement.
</msg>
</logentry>
<logentry
   revision="1687812">
<author>ivan</author>
<date>2015-06-26T17:10:04.997640Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
</paths>
<msg>mod_dav_svn: Use LimitXMLRequestBody httpd directive to control maximum
length of skel-encoded request bodies.

* subversion/mod_dav_svn/util.c
  (request_body_to_string): Call ap_get_limit_xml_body() instead of
   ap_get_limit_req_body() to get maximum skel-encoded request body size.
</msg>
</logentry>
<logentry
   revision="1687776">
<author>kotkov</author>
<date>2015-06-26T14:17:53.883895Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_repos.h</path>
</paths>
<msg>Following up on r1687769, extend the documentation about the lifetime of
the error passed to the new verify callback, and about who is responsible
for clearing it.

No functional changes.

* subversion/include/svn_repos.h
  (svn_repos_verify_callback_t): Document the lifetime of 'verify_err'.
  (svn_repos_verify_fs3): Include a @see link to svn_repos_verify_callback_t
   for the convenience of a person crawling through the documentation.
</msg>
</logentry>
<logentry
   revision="1687769">
<author>kotkov</author>
<date>2015-06-26T12:44:26.526854Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-fuzzy-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-private-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/org_apache_subversion_javahl_SVNRepos.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/SVNRepos.java</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_error_codes.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/deprecated.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_repos.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/SVNRepos.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/ReposNotifyInformation.java</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/SVNRepos.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/ISVNRepos.java</path>
</paths>
<msg>Reimplement svn_repos_verify_fs3() to support an arbitrary callback that
receives the information about an encountered problem and lets the caller
decide on what happens next.  This supersedes the keep_going argument for
this API.  A callback is optional; the behavior of this API if the callback
is not provided is equivalent to how svn_repos_verify_fs2() deals with
encountered errors.  This allows seamless migration to the new API, if the
callback is not necessary.  The idea is partly taken from how our existing
svn_fs_lock_many() API works with a svn_fs_lock_callback_t and passes error
information to the caller.

Immediately use the new API to provide an alternative solution for the
encountered problem with 'svnadmin verify --keep-going -q' (see r1684940)
being useless in terms that it was only giving an indication of whether a
particular repository passes the verification or not, without providing a
root cause (details) of what's wrong.

Discussion can be found in http://svn.haxx.se/dev/archive-2015-05/0141.shtml
(Subject: "Possible incompatibility of svn_repos_verify_fs2() in 1.9.0-rc1")

* subversion/include/svn_error_codes.h
  (SVN_ERR_REPOS_VERIFY_FAILED): Remove this error code, as we no longer
   need to send a specific error from within svn_repos_verify_fs3().
  (SVN_ERR_CL_REPOS_VERIFY_FAILED): New.

* subversion/include/svn_repos.h
  (svn_repos_notify_action_t): Remove svn_repos_notify_failure.
  (svn_repos_notify_t): Remove 'err' field, as it is no longer needed.
  (svn_repos_verify_callback_t): New optional callback type to be used with
   svn_repos_verify_fs3().
  (svn_repos_verify_fs3): Drop 'keep_going' argument in favor of accepting a
   svn_repos_verify_callback_t.  Update the docstring accordingly.
  (svn_repos_verify_fs2): Update the docstring for this deprecated function.

* subversion/libsvn_repos/deprecated.c
  (svn_repos_verify_fs2): Update the call to svn_repos_verify_fs3() in this
   compatibility wrapper.  Don't pass the verify callback.

* subversion/libsvn_repos/dump.c
  (notify_verification_error): Remove; this function is no longer required.
  (report_error): New helper function.
  (svn_repos_verify_fs3): In case we've got a svn_repos_verify_callback_t,
   call it upon receiving an FS-specific structure failure or a revision
   verification failure.  Delegate this action to the new report_error()
   helper function.  Doing so makes the caller responsible for what's going
   to happen with the error.  The caller can choose to store the error,
   ignore it or use it in any other necessary way.  If a callback returns an
   error, stop the verification process and immediately return that error.
   If no callback is provided, mimic the behavior of svn_repos_verify_fs2()
   and return the first encountered error.  Drop the logic related to error
   formatting, as we no longer need it at this layer.  We are going to make
   a simpler replacement for it is the UI code (svnadmin.c), where it is
   supposed to live.

* subversion/svnadmin/svnadmin.c
  (struct repos_verify_callback_baton): New.  Contains the fields that are
   required to track the --keep-going errors taken from ...
  (struct repos_notify_handler_baton): ...this baton.  After the previous
   step, this baton only contains the 'feedback_stream' field, so inline it
   into every calling site.
  (repos_notify_handler): Baton is now simply an svn_stream_t.  Remove the
   boolean-based filtering logic from this handler and drop the handling of
   svn_repos_notify_failure.  The latter is moved, with a bit of tweaking,
   into ...
  (repos_verify_callback): ...this new function, that implements a callback
   for svn_repos_verify_fs3().  Depending on whether we are in --keep-going
   mode or not, either dump the failure details to stderr and track them to
   produce a summary, or immediately return it through the callback, thus
   ending the verification process.  Remember all errors in the --keep-going
   mode, not only those that are associated with a particular revision.
   Prior to handling the error itself, tell that we failed to verify the
   revision or metadata by writing corresponding messages to stderr.
  (subcommand_dump, subcommand_load, subcommand_recover, subcommand_upgrade,
   subcommand_hotcopy, subcommand_pack): Inline repos_notify_handler_baton
   here, as it now contains a single svn_stream_t field.
  (subcommand_verify): Inline repos_notify_handler_baton here, as it now
   contains a single svn_stream_t field.  Avoid manipulations with boolean
   fields like b-&gt;silent_errors and b-&gt;silent_running, because we no longer
   need them, and the fields themselves are gone.  Create a feedback stream
   only in non-quiet mode, as we do in other subcommand implementations.
   Create a baton for repos_verify_callback() and adjust the calling site of
   svn_repos_verify_fs3(), that now needs a callback.  Adjust --keep-going
   summary printing to the new approach with the verification callback.
   Finally, provide a simple error if we encountered at least one failure
   in the --keep-going mode.

* subversion/tests/cmdline/svnadmin_tests.py
  (verify_keep_going, verify_keep_going_quiet, verify_invalid_path_changes):
   Adjust the expectations, because now errors go straight to stderr in both
   --keep-going and ordinary modes.  Where possible, make the expectations a
   bit stricter by extending the lines that we check with RegexListOutput().

* subversion/tests/libsvn_fs_fs/fs-fs-private-test.c
  (load_index, load_index_keep_going): Squash two tests into one; basically,
   undo the corresponding hunk from r1683311.  As we no longer have separate
   keep_going mode in svn_repos_verify_fs3(), and the caller decides if the
   verification continues or not, we don't have to check two different
   scenarios.
  (test_funcs): Track the test changes.

* subversion/tests/libsvn_fs_fs/fs-fs-fuzzy-test.c
  (fuzzing_1_byte_1_rev): Adjust the call to svn_repos_verify_fs3().

[in subversion/bindings]

* javahl/src/org/apache/subversion/javahl/ReposNotifyInformation.java
  (ReposNotifyInformation.Action): Remove value that used to correspond
   to svn_repos_notify_failure.

* javahl/src/org/apache/subversion/javahl/ISVNRepos.java
  (ISVNRepos.verify): Remove 'keepGoing' argument from the newest overload
   of this method and update the docstring.  This patch does not expose
   the ability to have control over verification failures through a custom
   callback in JavaHL bindings, but we're going to address this separately.

* javahl/src/org/apache/subversion/javahl/SVNRepos.java
  (SVNRepos.verify): Adjust two overloads of this method in the ISVNRepos
   interface implementation.

* javahl/native/SVNRepos.h
  (SVNRepos::verify): Remove 'keepGoing' argument from declaration.

* javahl/native/SVNRepos.cpp
  (SVNRepos::verify): Remove 'keepGoing' argument.  Do not pass a verify
   callback when calling svn_repos_verify_fs3().

* javahl/native/org_apache_subversion_javahl_SVNRepos.cpp
  (Java_org_apache_subversion_javahl_SVNRepos_verify): Remove 'jkeepGoing'
   argument from this JNI wrapper.
</msg>
</logentry>
<logentry
   revision="1687708">
<author>stsp</author>
<date>2015-06-26T08:02:58.408602Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Follow-up to r1687702:

Attempt to make the Windows build working again by adding stub implementations
for public functions.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_text_get_resolution_options,
   svn_client_conflict_prop_get_resolution_options,
   svn_client_conflict_tree_get_resolution_options,
   svn_client_conflict_option_get_id,
   svn_client_conflict_option_describe,
   svn_client_conflict_option_set_merged_text,
   svn_client_conflict_resolve): Implement as stubs.
</msg>
</logentry>
<logentry
   revision="1687702">
<author>stsp</author>
<date>2015-06-26T07:50:20.736204Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>Declare additional elements of the svn_client_conflict API.

This shows how the new resolution mechanism is intended to work. 
There is no implementation of these APIs yet.

* subversion/include/svn_client.h
  (svn_client_conflict_option_t,
   svn_client_conflict_option_id_t,
   svn_client_conflict_text_get_resolution_options,
   svn_client_conflict_prop_get_resolution_options,
   svn_client_conflict_tree_get_resolution_options,
   svn_client_conflict_option_get_id,
   svn_client_conflict_option_describe,
   svn_client_conflict_option_set_merged_text,
   svn_client_conflict_resolve): Declare.
</msg>
</logentry>
<logentry
   revision="1687583">
<author>ivan</author>
<date>2015-06-25T17:13:05.415716Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>Add workaround for APR problem that apr_file_rename() performs cross-volume
renames non-atomically on Windows.

* subversion/libsvn_subr/io.c
  (win32_file_rename): New. Windows specific re-implementation of
   apr_file_rename().
  (svn_io_file_rename): Use win32_file_rename() on Windows and keep the 
   code for other platforms unchanged
</msg>
</logentry>
<logentry
   revision="1687574">
<author>stsp</author>
<date>2015-06-25T16:28:17.317632Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Add new svn_client_conflict_get_conflicted() API function.

* subversion/include/svn_client.h
  (svn_client_conflict_get_conflicted): Declare.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_get_conflicted): Implement.
</msg>
</logentry>
<logentry
   revision="1687568">
<author>stsp</author>
<date>2015-06-25T16:08:07.358059Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_wc_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/info-cmd.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/status.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>Start representing multiple conflicts on a path in svn_client_conflict_t.

Add a private libsvn_wc API to obtain all conflicts at a path and use this
API in libsvn_client to store information about all conflicts in
svn_client_conflict_t.

* subversion/include/private/svn_wc_private.h
  (svn_wc__read_conflict_descriptions2_t): Declare.

* subversion/include/svn_client.h
  (svn_client_conflict_get, svn_client_conflict_from_wc_description2_t):
   Change return value to svn_error_t * and add output argument 'conflict'.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_t): Add 'prop_conflicts', and replace desc2 with
   three pointers legacy_text_conflict, legacy_prop_conflict, and
   legacy_tree_conflict.
  (add_legacy_desc_to_conflict, get_conflict_desc2_t): New helper functions.
  (conflict_get_internal): New helper function derived from the former
   svn_client_conflict_get() function.
  (svn_client_conflict_get, svn_client_conflict_from_wc_description2_t):
   Re-implement as wrappers around conflict_get_internal().
  (svn_client_conflict_get_kind, svn_client_conflict_get_operation,
   svn_client_conflict_get_incoming_change,
   svn_client_conflict_get_local_change,
   svn_client_conflict_get_repos_info,
   svn_client_conflict_get_incoming_old_repos_location,
   svn_client_conflict_get_incoming_new_repos_location,
   svn_client_conflict_tree_get_victim_node_kind,
   svn_client_conflict_prop_get_propname,
   svn_client_conflict_prop_get_propvals,
   svn_client_conflict_prop_get_reject_abspath,
   svn_client_conflict_text_get_mime_type,
   svn_client_conflict_text_get_contents): Use get_conflict_desc2_t() helper.

* subversion/libsvn_wc/conflicts.c
  (svn_wc__read_conflict_descriptions2_t): Implement as wrapper around the
   svn_wc__read_conflicts() function.

* subversion/svn/conflict-callbacks.c
  (svn_cl__conflict_func_interactive): Update this caller of
   svn_client_conflict_from_wc_description2_t().

* subversion/svn/info-cmd.c
  (print_info_xml, print_info): Update these callers of 
   svn_client_conflict_from_wc_description2_t().

* subversion/svn/status.c
  (print_status): Update this caller of
   svn_client_conflict_from_wc_description2_t().
</msg>
</logentry>
<logentry
   revision="1687562">
<author>stsp</author>
<date>2015-06-25T15:39:25.656194Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/info-cmd.c</path>
</paths>
<msg>Fix another shadowed local variable introduced in r1687498.

* subversion/svn/info-cmd.c
  (print_info): Don't shadow 'desc'.

Found by: philip
</msg>
</logentry>
<logentry
   revision="1687530">
<author>stsp</author>
<date>2015-06-25T14:18:50.004053Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/status.c</path>
</paths>
<msg>Follow-up to r1687520:

* subversion/svn/status.c
  (print_status): Check the correct variable in assertion.
</msg>
</logentry>
<logentry
   revision="1687529">
<author>stsp</author>
<date>2015-06-25T14:16:14.432010Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/cl-conflicts.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Add an svn_client_conflict API to obtain the legacy property reject path.

* subversion/include/svn_client.h
  (svn_client_conflict_prop_get_reject_abspath): Declare.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_prop_get_reject_abspath): Implement.

* subversion/svn/cl-conflicts.c
  (svn_cl__append_conflict_info_xml): Restore XML output to working condition.
</msg>
</logentry>
<logentry
   revision="1687520">
<author>stsp</author>
<date>2015-06-25T13:54:50.702190Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/status.c</path>
</paths>
<msg>* subversion/svn/status.c
  (print_status): Fix a shadowed local variable introduced in r1687498.
</msg>
</logentry>
<logentry
   revision="1687498">
<author>stsp</author>
<date>2015-06-25T12:48:48.626429Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Add a client context parameter to svn_client_conflict_get().

* subversion/include/svn_client.h
  (svn_client_conflict_get): Add client context parameter.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_t): Add client context.
  (svn_client_conflict_get): Add client context parameter.
  (svn_client_conflict_from_wc_description2_t): Pass NULL for client context.
</msg>
</logentry>
<logentry
   revision="1687496">
<author>stsp</author>
<date>2015-06-25T12:45:53.560794Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h,
  subversion/libsvn_client/resolved.c: Intendation fixes. No functional change.
</msg>
</logentry>
<logentry
   revision="1687489">
<author>stsp</author>
<date>2015-06-25T12:19:09.080793Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/cl-conflicts.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svn/status.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/cl-conflicts.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/info-cmd.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Introduce svn_client_conflict_t and start making use of it in the resolver.

Right now, this new opaque type simply wraps the old struct. This is required
to keep the current resolver implementation working for now.

The plan is to develop new resolver functionality using the new type and
eventually phase out the old struct entirely.

* subversion/include/svn_client.h
  (svn_client_conflict_t, svn_client_conflict_get,
   svn_client_conflict_from_wc_description2_t): Declare.
  (svn_client_conflict_get_kind,
   svn_client_conflict_get_local_abspath,
   svn_client_conflict_get_operation,
   svn_client_conflict_get_incoming_change,
   svn_client_conflict_get_local_change,
   svn_client_conflict_get_repos_info,
   svn_client_conflict_get_incoming_old_repos_location,
   svn_client_conflict_get_incoming_new_repos_location,
   svn_client_conflict_tree_get_victim_node_kind,
   svn_client_conflict_prop_get_propname,
   svn_client_conflict_text_get_mime_type,
   svn_client_conflict_text_get_contents): Expect svn_client_conflict_t.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_t, svn_client_conflict_get,
   svn_client_conflict_from_wc_description2_t): Implement.
  (svn_client_conflict_get_kind,
   svn_client_conflict_get_local_abspath,
   svn_client_conflict_get_operation,
   svn_client_conflict_get_incoming_change,
   svn_client_conflict_get_local_change,
   svn_client_conflict_get_repos_info,
   svn_client_conflict_get_incoming_old_repos_location,
   svn_client_conflict_get_incoming_new_repos_location,
   svn_client_conflict_tree_get_victim_node_kind,
   svn_client_conflict_prop_get_propname,
   svn_client_conflict_text_get_mime_type,
   svn_client_conflict_text_get_contents): Use svn_client_conflict_t.

* subversion/svn/cl-conflicts.h
  (svn_cl__get_human_readable_prop_conflict_description,
   svn_cl__get_human_readable_tree_conflict_description,
   svn_cl__append_conflict_info_xml): Expect svn_client_conflict_t.

* subversion/svn/cl-conflicts.c
  (svn_cl__get_human_readable_prop_conflict_description,
   svn_cl__get_human_readable_tree_conflict_description,
   append_tree_conflict_info_xml,
   svn_cl__append_conflict_info_xml): Expect svn_client_conflict_t.

* subversion/svn/conflict-callbacks.c
  (show_diff, show_conflicts, handle_text_conflict, handle_prop_conflict,
   handle_tree_conflict, conflict_func_interactive): Use svn_client_conflict_t.
 (svn_cl__conflict_func_interactive): Convert svn_wc_conflict_description2_t
  to svn_client_conflict_t and use that.

* subversion/svn/info-cmd.c
  (print_info_xml, print_info): Convert svn_wc_conflict_description2_t to
  svn_client_conflict_t and use that.
   
* subversion/svn/status.c
  (print_status): Convert svn_wc_conflict_description2_t to
   svn_client_conflict_t and use that.
</msg>
</logentry>
<logentry
   revision="1687456">
<author>stsp</author>
<date>2015-06-25T09:20:54.718685Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Remove the svn_client_conflict_get_merged_file() macro.

The merged file is now only used for text conflicts, where it always equals
the local_abspath of the conflicted file. So the resolver can use the file's
local_abspath instead.

* subversion/include/svn_client.h
  (svn_client_conflict_get_merged_file): Remove.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict, conflict_func_interactive): Use file's local_abspath
   instead of merged_file.
</msg>
</logentry>
<logentry
   revision="1687450">
<author>stsp</author>
<date>2015-06-25T09:06:41.042085Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (conflict_func_interactive): Remove a check that's now redundant since
   merged property values are not communicated via file paths anymore.
</msg>
</logentry>
<logentry
   revision="1687449">
<author>stsp</author>
<date>2015-06-25T09:02:42.630300Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (edit_prop_conflict): Stop returning the edited file's path.
  (handle_prop_conflict): Return the merged property in result-&gt;merged_value
   rather than via the temporary file's path.
</msg>
</logentry>
<logentry
   revision="1687443">
<author>stsp</author>
<date>2015-06-25T08:44:04.600820Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (handle_text_conflict): Avoid dereferencing a NULL mime-type string.

Found by: philip
</msg>
</logentry>
<logentry
   revision="1687438">
<author>stsp</author>
<date>2015-06-25T08:23:27.310101Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (conflict_func_interactive): Rename 'merged_file' to 'merged_abspath'.
</msg>
</logentry>
<logentry
   revision="1687435">
<author>stsp</author>
<date>2015-06-25T08:21:35.553742Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (handle_text_conflict): Rename 'merged_file' to 'merged_abspath'.
</msg>
</logentry>
<logentry
   revision="1687432">
<author>stsp</author>
<date>2015-06-25T08:19:46.160825Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (handle_prop_conflict): Rename 'merged_file_path' to 'merged_abspath'.
</msg>
</logentry>
<logentry
   revision="1687426">
<author>stsp</author>
<date>2015-06-25T08:12:10.510721Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (edit_prop_conflict): Rename 'merged_file_path' to 'merged_abspath'.
</msg>
</logentry>
<logentry
   revision="1687425">
<author>stsp</author>
<date>2015-06-25T08:07:01.404438Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (open_editor): Rename 'merged_file' to 'merged_abspath' for consistency.
</msg>
</logentry>
<logentry
   revision="1687424">
<author>stsp</author>
<date>2015-06-25T08:05:19.117484Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (show_diff): Rename 'merged_file' to 'merged_abspath' for consistency.
</msg>
</logentry>
<logentry
   revision="1687423">
<author>stsp</author>
<date>2015-06-25T08:03:46.555693Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (show_diff): Add a merged_file argument and stop pulling the merged file
   path out of the conflict descriptor.
  (handle_text_conflict): Pass the merged file path to show_diff() explicitly.
</msg>
</logentry>
<logentry
   revision="1687415">
<author>stsp</author>
<date>2015-06-25T07:32:25.105237Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/info-cmd.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/cl-conflicts.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/cl.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Replace macros svn_client_conflict_get_src_left_version() and
svn_client_conflict_get_src_right_version() with a new set of
functions returning the same information. Replace some use of
the svn_wc_conflict_version_t structure with a few individual
parameters and variables.

* subversion/include/svn_client.h
  (svn_client_conflict_get_repos_info,
   svn_client_conflict_get_incoming_old_repos_location,
   svn_client_conflict_get_incoming_new_repos_location): Declare.
  (svn_client_conflict_get_src_left_version,
   svn_client_conflict_get_src_right_version): Delete.
   
* subversion/libsvn_client/resolved.c
  (svn_client_conflict_get_repos_info,
   svn_client_conflict_get_incoming_old_repos_location,
   svn_client_conflict_get_incoming_new_repos_location): Implement.

* subversion/svn/cl-conflicts.c
  (svn_cl__get_human_readable_tree_conflict_description,
   add_conflict_version_xml, append_tree_conflict_info_xml): Update callers.

* subversion/svn/cl.h
  (svn_cl__node_description): Expect several input parameters instead of
   a single svn_wc_conflict_version_t struct. Otherwise, callers would now
   have to create a temporary struct containing the same information.

* subversion/svn/conflict-callbacks.c
  (handle_tree_conflict): Update caller.

* subversion/svn/info-cmd.c
  (print_info): Update caller.

* subversion/svn/util.c
  (svn_cl__node_description): Use several input parameters instead of struct.
</msg>
</logentry>
<logentry
   revision="1687389">
<author>philip</author>
<date>2015-06-24T22:44:04.220588Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/ac-macros/apache.m4</path>
</paths>
<msg>* build/ac-macros/apache.m4 (SVN_FIND_APACHE): Further attempt to make
   sed command work on Solaris, remove () grouping to avoid $ inside ()
   and change delimiter from @ to / to avoid $@.
</msg>
</logentry>
<logentry
   revision="1687320">
<author>stsp</author>
<date>2015-06-24T16:07:21.746277Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svn/cl-conflicts.c</path>
</paths>
<msg>Follow-up to r1687290: Fix even more test fallout.

* subversion/svn/cl-conflicts.c
  (svn_cl__append_conflict_info_xml): Don't call
   svn_client_conflict_text_get_contents() with non-text conflicts.
</msg>
</logentry>
<logentry
   revision="1687318">
<author>stsp</author>
<date>2015-06-24T16:04:19.510478Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/info-cmd.c</path>
</paths>
<msg>Follow-up to r1687290: Fix more test fallout.

* subversion/svn/info-cmd.c
  (print_info) Don't use svn_client_conflict_text_get_contents() with non-text
   conflicts.
</msg>
</logentry>
<logentry
   revision="1687304">
<author>philip</author>
<date>2015-06-24T15:18:57.605991Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/ac-macros/apache.m4</path>
</paths>
<msg>* build/ac-macros/apache.m4 (SVN_FIND_APACHE): Use two separate -e as some
   platforms (e.g Solaris) do not support separating with a semi-colon.
</msg>
</logentry>
<logentry
   revision="1687302">
<author>stsp</author>
<date>2015-06-24T14:57:26.312904Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Follow-up to r1687290: Fix test fallout.

* subversion/svn/conflict-callbacks.c
  (conflict_func_interactive): Don't call a function specific to text conflicts
   unless the conflict is in fact a text conflict.
</msg>
</logentry>
<logentry
   revision="1687293">
<author>stsp</author>
<date>2015-06-24T14:16:44.657154Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h
  (svn_client_conflict_text_get_mime_type): Document open questions.
</msg>
</logentry>
<logentry
   revision="1687290">
<author>stsp</author>
<date>2015-06-24T14:09:13.512339Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/info-cmd.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/cl-conflicts.c</path>
</paths>
<msg>Replace conflicted file content accessor macros with a single function.

The accessors svn_client_conflict_get_base_abspath(),
svn_client_conflict_get_my_abspath(), and
svn_client_conflict_get_their_abspath() are replaced by a new function
called svn_client_conflict_text_get_contents(). For now, this function
returns the same outputs (absolute paths) but this may change in future.

* subversion/include/svn_client.h
  (svn_client_conflict_text_get_contents): Declare.
  (svn_client_conflict_get_base_abspath, svn_client_conflict_get_my_abspath,
   svn_client_conflict_get_their_abspath): Remove.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_text_get_contents): Implement. This implementation
   is not complete yet since the WC base content it could return is not
   always available in the svn_wc_conflict_description2_t struct.
  
* subversion/svn/cl-conflicts.c
  (svn_cl__append_conflict_info_xml): Update caller.

* subversion/svn/conflict-callbacks.c
  (show_diff, show_conflicts, handle_text_conflict,
   conflict_func_interactive): Update callers.

* subversion/svn/info-cmd.c
  (print_info): Update caller. 
</msg>
</logentry>
<logentry
   revision="1687266">
<author>stsp</author>
<date>2015-06-24T13:37:28.321612Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Replace the svn_client_conflict_get_mime_type() macro with a new function
called svn_client_conflict_text_get_mime_type().

* subversion/include/svn_client.h
  (svn_client_conflict_text_get_mime_type): Declare new function.
  (svn_client_conflict_get_mime_type): Remove macro.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_text_get_mime_type): Implement.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict): Update caller.
</msg>
</logentry>
<logentry
   revision="1687257">
<author>stsp</author>
<date>2015-06-24T13:04:30.248806Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/info-cmd.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/merge_tree_conflict_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/prop_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/update_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/move_tests.py</path>
</paths>
<msg>Stop exposing the property reject file path in the API and in 'svn info'. 
Make 'svn info' show the names of conflicted properties instead.

* subversion/include/svn_client.h
  (svn_client_conflict_get_prop_reject_abspath): Remove, now unused.

* subversion/svn/info-cmd.c
  (print_info): Show a list of conflicted property names instead of
   the path to the property reject file.
  
* subversion/tests/cmdline/merge_tree_conflict_tests.py
  (merge_conflict_details): Adjust expected info output.

* subversion/tests/cmdline/move_tests.py
  (move_conflict_details): Adjust expected info output.

* subversion/tests/cmdline/prop_tests.py
  (dir_prop_conflict_details): Adjust expected info output.

* subversion/tests/cmdline/update_tests.py
  (update_conflict_details): Adjust expected info output.
</msg>
</logentry>
<logentry
   revision="1687254">
<author>stsp</author>
<date>2015-06-24T12:37:19.133627Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h
  (svn_client_conflict_get_prop_value_working,
   svn_client_conflict_get_prop_value_incoming_old,
   svn_client_conflict_get_prop_value_incoming_new): Remove these unused macros.
</msg>
</logentry>
<logentry
   revision="1687249">
<author>stsp</author>
<date>2015-06-24T12:32:44.885945Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Make the conflict API use property values in svn_wc_conflict_description2_t 
which are provided since 1.9, rather than using temporary files.

Suggested by: rhuijben

* subversion/include/svn_client.h
  (svn_client_conflict_prop_get_propvals): Rename the output parameters and
   add a 4th one: the working copy base property value. Remove scratch_pool.

* subversion/libsvn_client/resolved.c
  (get_propval_from_filepath): Remove, now unused.
  (svn_client_conflict_prop_get_propvals): Copy property values directly
   from svn_wc_conflict_description2_t.

* subversion/svn/conflict-callbacks.c
  (handle_prop_conflict): Update caller. The working copy base value is not
   used yet (except during updates and switch where it equals incoming-old).
</msg>
</logentry>
<logentry
   revision="1687244">
<author>stsp</author>
<date>2015-06-24T12:04:08.354274Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h
  (svn_client_conflict_prop_get_propvals): Document how to generate diffs
   and merged versions of property values.
</msg>
</logentry>
<logentry
   revision="1687243">
<author>stsp</author>
<date>2015-06-24T12:01:29.440416Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Remove svn_client_conflict_get_is_binary(). Conflict resolvers can
simply run svn_mime_type_is_binary() on the mime-type themselves.

* subversion/include/svn_client.h
  (svn_client_conflict_get_is_binary): Remove.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict): Use svn_mime_type_is_binary() directly.
</msg>
</logentry>
<logentry
   revision="1687241">
<author>stsp</author>
<date>2015-06-24T11:39:26.894345Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Introduce a new conflict API function: svn_client_conflict_prop_get_propvals()

Make use of this function in the conflict resolver. The biggest change is that
the resolver now has to deal with property values in terms of svn_string_t
rather than paths to temporary files.

Until the svn_wc_conflict_description2_t structure is fully phased out,
however, the client library must still read temporary files into svn_string_t
behind the scenes, and the resolver must still return merged property values
via temporary files.

* subversion/include/svn_client.h
  (svn_client_conflict_prop_get_propvals): Declare.

* subversion/libsvn_client/resolved.c
  (get_propval_from_filepath): New helper function.
  (svn_client_conflict_prop_get_propvals): Implement.

* subversion/svn/conflict-callbacks.c
  (merge_prop_conflict, show_prop_conflict, edit_prop_conflict,
   handle_prop_conflict): Handle all property values as svn_string_t.
</msg>
</logentry>
<logentry
   revision="1687079">
<author>kotkov</author>
<date>2015-06-23T14:34:05.656136Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/hotcopy.c</path>
</paths>
<msg>Only lock the hotcopy destination (by taking db/write-lock, db/pack-lock
and db/txn-current-lock) when we are running in the incremental mode.  We
don't have to do this in a non-incremental mode, because the destination
is not openable until we are done with the hotcopy.  If it cannot be opened,
concurrency is not an issue.

* subversion/libsvn_fs_fs/hotcopy.c
  (svn_fs_fs__hotcopy): Lock the hotcopy destination only if we're running
   in incremental mode (and a fallback to the non-incremental mode didn't
   happen).
</msg>
</logentry>
<logentry
   revision="1687078">
<author>kotkov</author>
<date>2015-06-23T14:31:05.451938Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/hotcopy.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/hotcopy.h</path>
</paths>
<msg>Properly initialize shared data for a hotcopy destination instead of
reusing the shared data of the hotcopy source.  Nothing prevents us from
performing this part of the initialization in an ordinary way, instead of
sharing the same pointer between two separate fs_fs_data_t objects.

* subversion/libsvn_fs_fs/fs_fs.h
  (svn_fs_fs__initialize_shared_data): Declare the new function.

* subversion/libsvn_fs_fs/fs.c
  (svn_fs_fs__initialize_shared_data): New.  Wraps fs_serialized_init()
   and serializes a call to it using the passed-in COMMON_POOL_LOCK mutex.
  (fs_hotcopy): Adjust the calling site of svn_fs_fs__hotcopy() that now
   accepts COMMON_POOL_LOCK and COMMON_POOL arguments.

* subversion/libsvn_fs_fs/hotcopy.h
  (svn_fs_fs__hotcopy): Add COMMON_POOL_LOCK and COMMON_POOL arguments to
   the declaration of this function.  Tweak the docstring.

* subversion/libsvn_fs_fs/hotcopy.c
  (svn_fs_fs__hotcopy): Call the new svn_fs_fs__initialize_shared_data()
   function instead of making the shared data of the hotcopy destination
   point to the shared data of the source.  That's what ...
  (hotcopy_setup_shared_fs_data): ...we were doing previously in this
   function.  As a consequence, this function is no longer necessary, so
   remove it.
</msg>
</logentry>
<logentry
   revision="1687074">
<author>kotkov</author>
<date>2015-06-23T14:24:46.433126Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/hotcopy.c</path>
</paths>
<msg>Inline the hotcopy_create_empty_dest() function into the only place where
it is being called.  This allows us to get rid of unnecessary indirection
and have the incremental and non-incremental hotcopy initialization in one
place, as these operations belong to the same level of abstraction.

* subversion/libsvn_fs_fs/hotcopy.c
  (hotcopy_create_empty_dest): Inline this function ...
  (svn_fs_fs__hotcopy): ...here.
</msg>
</logentry>
<logentry
   revision="1687071">
<author>kotkov</author>
<date>2015-06-23T14:21:31.191852Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/hotcopy.c</path>
</paths>
<msg>Rework the initialization step in svn_fs_fs__hotcopy() in order to only
have a single call to hotcopy_create_empty_dest() and to emphasize how
an incremental hotcopy fallbacks to non-incremental mode if there is no
destination filesystem.

* subversion/libsvn_fs_fs/hotcopy.c
  (svn_fs_fs__hotcopy): Check whether db/format exists in the destination
   as the very first step of the incremental hotcopy.  If it doesn't exist,
   emphasize that we are performing a fallback to the non-incremental mode
   by setting INCREMENTAL to FALSE.  In the case of the fallback, passing
   this value (FALSE) to lower levels, apart from being logical, allows us
   to skip certain logic that's only required in a true incremental mode,
   such as removing unnecessary non-packed revision files after replacing
   them with a packed shard.
</msg>
</logentry>
<logentry
   revision="1687070">
<author>kotkov</author>
<date>2015-06-23T14:14:36.325155Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/hotcopy.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/hotcopy.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/fs.c</path>
</paths>
<msg>Following up on r1686554, revert the remaining parts of r1589284.  As we no
longer lock the db/pack-lock in the source repository when hotcopying it,
other relevant changes from r1589284 are no longer necessary.  Doing so
prevents making the non-incremental hotcopy destination openable through
svn_fs_open2() until hotcopy finishes, and that's consistent with how
svn_repos_hotcopy3() currently works.

This changeset restores the hotcopy initialization code to its state in
/branches/1.8.x.  Please note that doing so is going to reintroduce a slight
problem — in 1.8.x hotcopy initialization used to share fs_fs_shared_data_t
instances between the source and the destination.  We actually have a better
way of initializing the shared data (that doesn't reuse it and also doesn't
require writing db/format prior to the moment when a non-incremental hotcopy
is complete), and I am going to implement it in the following commits.

Discussion can be found in http://svn.haxx.se/dev/archive-2015-06/0168.shtml
(Subject: "Re: FSFS7: 'svnadmin hotcopy' requires write access to the
source") and in http://svn.haxx.se/dev/archive-2014-07/0124.shtml
(Subject: "Re: svn commit: r1589284 - [...]").
</msg>
</logentry>
<logentry
   revision="1687064">
<author>ivan</author>
<date>2015-06-23T13:56:39.235063Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Remove code that become unused since r1687061.

* subversion/libsvn_fs_fs/fs.h
  (PATH_TXN_PROPS_FINAL): Remove.

* subversion/libsvn_fs_fs/transaction.c
  (path_txn_props_final): Remove.
  (set_txn_proplist): Remove FINAL argument and relevant code.
  (svn_fs_fs__change_txn_props, svn_fs_fs__begin_txn): Adapt calls to
   set_txn_proplist().
</msg>
</logentry>
<logentry
   revision="1687061">
<author>ivan</author>
<date>2015-06-23T13:48:10.401255Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>FSFS: Write revision properties directly to final destination without 
creating temporary file and moving them in-place.

* subversion/libsvn_fs_fs/transaction.c
  (write_final_revprop): Accept path to final revision properties file.
   Write revision properties to it and flush changes to disk before close.
  (commit_body): Adapt call to write_final_revprop() and remove
   call to svn_fs_fs__move_into_place().
</msg>
</logentry>
<logentry
   revision="1687043">
<author>stsp</author>
<date>2015-06-23T12:49:34.702227Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Replace temporary macro svn_client_conflict_get_property_name() with a
new function called svn_client_conflict_prop_get_propname().

* subversion/include/svn_client.h
  (svn_client_conflict_prop_get_propname): Declare.
  (svn_client_conflict_get_property_name): Remove.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_prop_get_propname): Implement.

* subversion/svn/conflict-callbacks.c
  (handle_prop_conflict): Update only caller.
</msg>
</logentry>
<logentry
   revision="1687029">
<author>stsp</author>
<date>2015-06-23T11:18:15.927163Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/mergeinfo_tests.py</path>
</paths>
<msg>Add a regression test for issue #4582, "reintegrate complains about missing
ranges from node unrelated to branch"

* subversion/tests/cmdline/mergeinfo_tests.py
  (no_mergeinfo_on_tree_conflict_victim, test_list): New test.
</msg>
</logentry>
<logentry
   revision="1686992">
<author>julianfoad</author>
<date>2015-06-23T08:50:27.483954Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/update_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/update_tests.py
  (update_keywords_on_shortcut): Remove debug prints.</msg>
</logentry>
<logentry
   revision="1686988">
<author>julianfoad</author>
<date>2015-06-23T08:37:31.428427Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/update_tests.py</path>
</paths>
<msg>Add a regression test for update failing to update keywords when the incoming
change is equal to the local change.

Found by: Vincent Lefevre &lt;vincent-svn{_AT_}vinc17.net&gt;

See the email thread "keywords not updated after an update that doesn't
change the file due to local changes" started on 2015-06-17, e.g.
&lt;http://svn.haxx.se/dev/archive-2015-06/0147.shtml&gt;.

* subversion/tests/cmdline/update_tests.py
  (update_keywords_on_shortcut): New test, marked as XFail.
  (test_list): Run it.</msg>
</logentry>
<logentry
   revision="1686984">
<author>brane</author>
<date>2015-06-23T07:56:03.897421Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
</paths>
<msg>* subversion/libsvn_repos/rev_hunt.c (send_path_revision):
   Mark todo comment with our traditional ### triple hash.
   No functional change.
</msg>
</logentry>
<logentry
   revision="1686902">
<author>stefan2</author>
<date>2015-06-22T17:09:52.813216Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>* subversion/libsvn_subr/io.c
  (svn_io_file_flush_to_disk): Make the error handling consistent to other
                               functions by including the file name in the
                               error message.
</msg>
</logentry>
<logentry
   revision="1686893">
<author>stsp</author>
<date>2015-06-22T16:26:29.491576Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/info-cmd.c</path>
</paths>
<msg>Follow-up to r1686880:

* subversion/svn/info-cmd.c
  (print_info): Fix a couple of test failures introduced by r1686880. Avoid
   calling a now tree-conflict-specific function on non-tree conflicts.
</msg>
</logentry>
<logentry
   revision="1686888">
<author>stefan2</author>
<date>2015-06-22T16:06:33.850478Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_client/mtcc-test.c</path>
</paths>
<msg>Improve upon r1686478:
We only need to apply the path comparison hack for 'svn blame' in -g mode;
standard blame does the Right Thing even when mixing renames and changes.

Therefore, inform the hack when it needs to be applied and when not.

* subversion/libsvn_repos/rev_hunt.c
  (send_baton): Add a flag for the -g mode.
  (send_path_revision): Only apply the hack in -g mode.
  (get_file_revs_backwards,
   svn_repos_get_file_revs2): Initialize the new baton field.

* subversion/tests/libsvn_client/mtcc-test.c
  (handle_rev): Adapt - reverting the r1686478 change here.</msg>
</logentry>
<logentry
   revision="1686880">
<author>stsp</author>
<date>2015-06-22T14:42:56.745550Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_tree_get_victim_node_kind): Assert that the conflict
   passed in is in fact a tree conflict.
</msg>
</logentry>
<logentry
   revision="1686878">
<author>stsp</author>
<date>2015-06-22T14:36:13.108810Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Reduce passing around of svn_wc_conflict_description2_t for property conflicts.

* subversion/svn/conflict-callbacks.c
  (merge_prop_conflict): Rather than expecting a conflict descriptor and then
   pulling just 3 paths out of it, expect the required paths directly.
  (show_prop_conflict, edit_prop_conflict): Likewise for these callers of
   merge_prop_conflict().
  (handle_prop_conflict): Extract the 3 required paths from the descriptor
   and then pass them down to show_prop_conflict() and edit_prop_conflict().
</msg>
</logentry>
<logentry
   revision="1686875">
<author>stsp</author>
<date>2015-06-22T14:18:38.640407Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Replace the temporary svn_client_conflict_get_kind() macro with a C function.

* subversion/include/svn_client.h
  (svn_client_conflict_get_kind): Declare as function.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_get_kind): Implement.
</msg>
</logentry>
<logentry
   revision="1686874">
<author>stsp</author>
<date>2015-06-22T14:09:52.604321Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h
  (svn_client_conflict_tree_get_victim_node_kind): Remove a misleading
   claim from API docs.
</msg>
</logentry>
<logentry
   revision="1686873">
<author>stsp</author>
<date>2015-06-22T14:07:37.480331Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/info-cmd.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svn/cl-conflicts.c</path>
</paths>
<msg>Replace the temporary svn_client_conflict_get_node_kind() macro with a new
function called svn_client_conflict_tree_get_victim_node_kind().

This functionality moves into the svn_client_conflict_tree_* namespace because
in our current resolver implementation the node kind is only ever requested in
the context of tree conflicts.

* subversion/include/svn_client.h
  (svn_client_conflict_tree_get_victim_node_kind): Declare.
  (svn_client_conflict_get_node_kind): Remove.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_tree_get_victim_node_kind): Implement.

* subversion/svn/cl-conflicts.c
  (svn_cl__get_human_readable_tree_conflict_description,
   append_tree_conflict_info_xml): Update callers.

* subversion/svn/conflict-callbacks.c
  (handle_tree_conflict): Update caller.

* subversion/svn/info-cmd.c
  (print_info): Update caller.
</msg>
</logentry>
<logentry
   revision="1686867">
<author>danielsh</author>
<date>2015-06-22T13:23:03.459302Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
</paths>
<msg>Follow-up to r1686541: document the confusing interface.

* subversion/tests/cmdline/svntest/main.py
  (chmod_tree): Document.</msg>
</logentry>
<logentry
   revision="1686802">
<author>stefan2</author>
<date>2015-06-22T08:14:01.161255Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Follow-up to r1686239:
Turns out BDB repositories can't be hotcopied from r/o locations.

* subversion/tests/cmdline/svnadmin_tests.py
  (hotcopy_read_only): Skip for BDB.</msg>
</logentry>
<logentry
   revision="1686557">
<author>stefan2</author>
<date>2015-06-20T10:51:46.675308Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/hotcopy.c</path>
</paths>
<msg>Fix hotcopying read-only FSFS repositories with rep-sharing support.

If the source repository has r/o attributes set on the rep-cache.db,
the copying process will carry them over.  We need to reset them in the
destination before we attempt to trim "records from the future".

* subversion/libsvn_fs_fs/hotcopy.c
  (hotcopy_body): Make sure the rep-cache.db copy is writable.
</msg>
</logentry>
<logentry
   revision="1686554">
<author>stefan2</author>
<date>2015-06-20T10:48:24.452523Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/hotcopy.c</path>
</paths>
<msg>In FSFS format 7, no longer prevent packing while hotcopying the same repo.
If there is a race, error out as we would with older formats.

* subversion/libsvn_fs_fs/hotcopy.c
  (hotcopy_locking_src_body): Remove locking intermediate.
  (svn_fs_fs__hotcopy): Skip source repository locking. </msg>
</logentry>
<logentry
   revision="1686546">
<author>stefan2</author>
<date>2015-06-20T10:24:39.245982Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/hotcopy.c</path>
</paths>
<msg>Revert r1686232 as it turned out ineffective on some platforms
and on all systems that use ACLs.</msg>
</logentry>
<logentry
   revision="1686543">
<author>stefan2</author>
<date>2015-06-20T10:12:21.834085Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnadmin_tests.py
  (hotcopy_read_only): Add svnadmin's stderr output to the error message.</msg>
</logentry>
<logentry
   revision="1686542">
<author>stefan2</author>
<date>2015-06-20T10:00:10.578803Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>For FSFS, make 'svnadmin pack' lock the repo only if there is a shard
to pack.

This is more a refactoring job than an actual scalability improvement.
As long as a pack is running, any additional pack requests will pile up
waiting for the first one to complete.  Only when that one is done, no
additional ones will queue while the already waiting ones are being
served as no-ops.

* subversion/libsvn_fs_fs/pack.c
  (get_pack_status): Logic factored out of pack_body.
  (pack_body): Call new function, remove pre-condition check here.
  (svn_fs_fs__pack): Check preconditions before acquiring the lock.
                     Also have an early out if there is nothing to do.</msg>
</logentry>
<logentry
   revision="1686541">
<author>stefan2</author>
<date>2015-06-20T09:45:58.614039Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Follow-up to r1686239: Make the source repo actually read-only.

* subversion/tests/cmdline/svnadmin_tests.py
  (hotcopy_read_only): Correct the chmod_tree parameters and
                       revert back to "deletable" afterwards.</msg>
</logentry>
<logentry
   revision="1686478">
<author>stefan2</author>
<date>2015-06-19T18:29:01.311415Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_client/mtcc-test.c</path>
</paths>
<msg>Workaround for 'svn blame' -g with old clients.

Old clients rely on receiving a callback whenever the path changes, e.g.
when switching from one branch to another.  So, for now, we unconditionally
send a text delta in that case.  Future releases should make that backward
compatibility behavior an option that will be controlled be e.g. client
capabilities.

Found by: philip

* subversion/libsvn_repos/rev_hunt.c
  (send_path_revision): Always send a text delta when the path changes.

* subversion/tests/libsvn_client/mtcc-test.c
  (handle_rev): Update the expectations.
</msg>
</logentry>
<logentry
   revision="1686239">
<author>stefan2</author>
<date>2015-06-18T14:48:43.075289Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Follow-up on r1686232: Provide a test case for hotcopy from r/o repo.

* subversion/tests/cmdline/svnadmin_tests.py
  (hotcopy_read_only): New test.
  (test_list): Register new test.</msg>
</logentry>
<logentry
   revision="1686232">
<author>stefan2</author>
<date>2015-06-18T14:23:23.454452Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/hotcopy.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
</paths>
<msg>[reverted in r1686546]
Re-enable hotcopying of FSFS format 7+ repositories for users that
don't have write access to them. 

Taking out an exclusive lock on a file requires write access. Therefore,
it is not possible to acquire the pack lock on an r/o repository.  We
shall only prevent packing for writable repositories and fall back to
pre-format7 behavior otherwise.

This patch introduces a general test function that will tell us whether
a repo is writable.  We test this by requiring write access to all locks
and assume that access rights have been set consistently.  Inconsistent
access rights may still lead to various file error messages - which is o.k.
because the user made a mistake.

Inconsistent write access to lock files results in the whole repo being
considered r/o.  This prevents accidental features like "disabling pack"
or "no new transactions allowed".

* subversion/libsvn_fs_fs/fs_fs.h
  (svn_fs_fs__is_read_only): Declare the internal API.

* subversion/libsvn_fs_fs/fs_fs.c
  (is_read_only): New utility function, handling missing lock files, too.
  (svn_fs_fs__is_read_only): Implement the new API.

* subversion/libsvn_fs_fs/hotcopy.c
  (hotcopy_locking_src_body): Only prevent simultaneous packing if we can.

Reported by: kotkov</msg>
</logentry>
<logentry
   revision="1686194">
<author>philip</author>
<date>2015-06-18T11:48:59.144316Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/dav_svn.h</path>
</paths>
<msg>* subversion/mod_dav_svn/dav_svn.h
  (dav_svn__new_error_svn, dav_svn__new_error): Tweak documentation.
</msg>
</logentry>
<logentry
   revision="1686181">
<author>philip</author>
<date>2015-06-18T11:02:24.813504Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/version.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/reports/get-locks.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/lock.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/reports/replay.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/reports/file-revs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/activity.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/reports/deleted-rev.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/merge.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/dav_svn.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/reports/get-locations.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/reports/get-location-segments.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/reports/mergeinfo.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/reports/dated-rev.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/reports/inherited-props.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/reports/log.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/reports/update.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/deadprops.c</path>
</paths>
<msg>Add an apr_status_t parameter to dav_svn__new_error() and
dav_svn__new_error_svn().  This allows us to avoid dropping the
status when ap_fflush() and ap_pass_brigade() calls fail, and a
few other calls as well.  Most calls currently pass zero.

dav_svn__new_error() was originally modelled on dav_new_error() in
httpd 2.0 which did not support passing an apr_status_t but in 2.4
an apr_status_t parameter was added.

* subversion/mod_dav_svn/dav_svn.h
  (dav_svn__new_error_svn, dav_svn__new_error): Add APR status parameter.

* subversion/mod_dav_svn/util.c
  (dav_svn__new_error, dav_svn__new_error_svn): Add APR status parameter.
  (dav_svn__final_flush_or_error): Pass status.
  (build_error_chain, dav_svn__test_canonical): Pass zero.

* subversion/mod_dav_svn/repos.c
  (deliver): Pass status or zero.
  (prep_working, prep_activity, prep_private, prep_resource,
   dav_svn_split_uri2, get_parentpath_resource, parse_querystring,
   get_resource, get_parent_resource, open_stream, seek_stream,
   create_collection, copy_resource, remove_resource, move_resource,
   do_walk, dav_svn__create_version_resource, handle_post_request,
   dav_svn__method_post): Pass zero.

* subversion/mod_dav_svn/lock.c
  (unescape_xml): Pass status.
  (dav_lock_to_svn_lock, get_locks, find_lock, has_locks,
   append_locks, remove_lock, refresh_locks): Pass zero.

* subversion/mod_dav_svn/merge.c
  (dav_svn__merge_response): Pass status or zero.

* subversion/mod_dav_svn/activity.c
  (dav_svn__delete_activity): Pass zero.

* subversion/mod_dav_svn/deadprops.c
  (save_value, db_open, decode_property_value, db_store): Pass zero.

* subversion/mod_dav_svn/reports/dated-rev.c
  (dav_svn__dated_rev_report): Pass zero.

* subversion/mod_dav_svn/reports/deleted-rev.c
  (dav_svn__get_deleted_rev_report): Pass zero.

* subversion/mod_dav_svn/reports/file-revs.c
  (dav_svn__file_revs_report): Pass zero.

* subversion/mod_dav_svn/reports/get-location-segments.c
  (dav_svn__get_location_segments_report): Pass zero.

* subversion/mod_dav_svn/reports/get-locations.c
  (dav_svn__get_locations_report): Pass zero.

* subversion/mod_dav_svn/reports/get-locks.c
  (dav_svn__get_locks_report): Pass zero.

* subversion/mod_dav_svn/reports/inherited-props.c
  (dav_svn__get_inherited_props_report): Pass zero.

* subversion/mod_dav_svn/reports/log.c
  (dav_svn__log_report): Pass zero.

* subversion/mod_dav_svn/reports/mergeinfo.c
  (dav_svn__get_mergeinfo_report): Pass zero.

* subversion/mod_dav_svn/reports/replay.c
  (make_editor, dav_svn__replay_report): Pass zero.

* subversion/mod_dav_svn/reports/update.c
  (malformed_element_error, dav_svn__update_report): Pass zero.

* subversion/mod_dav_svn/version.c
  (set_auto_revprops, vsn_control, dav_svn__checkout, uncheckout,
   dav_svn__checkin, deliver_report, make_activity, merge): Pass zero.
</msg>
</logentry>
<logentry
   revision="1686175">
<author>stsp</author>
<date>2015-06-18T10:37:34.570897Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/merge_tree_conflict_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/merge.c</path>
</paths>
<msg>For issue #4582, "reintegrate complains about missing ranges from node
unrelated to branch", stop overriding svn:mergeinfo on tree conflict
victims. This fixes the immediate problem but may not be the final fix,
pending further investigation.

Discussed with: julianfoad
                rhuijen
                brane
http://colabti.org/irclogger/irclogger_log/svn-dev?date=2015-06-18#l24

* subversion/libsvn_client/merge.c
  (record_skips_in_mergeinfo): Don't override mergeinfo on tree-
   conflicted paths.

* subversion/tests/cmdline/merge_tree_conflict_tests.py
  (merge_obstruction_recording): Adjust test expectations accordingly.
</msg>
</logentry>
<logentry
   revision="1685793">
<author>ivan</author>
<date>2015-06-16T12:26:18.616484Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>Remove unnecessary code in svn_io_file_move().

* subversion/libsvn_subr/io.c
  (svn_io_file_move): Do not copy to temporary file for cross-volume moves,
   because svn_io_copy_file() already performs atomic copy via temporary
   file.
</msg>
</logentry>
<logentry
   revision="1685288">
<author>ivan</author>
<date>2015-06-13T16:49:55.527980Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/svndiff.c</path>
</paths>
<msg>Use standard pool handling in svndiff encoding code.

* subversion/libsvn_delta/svndiff.c
  (encoder_baton): Rename POOL to SCRATCH_POOL.
  (window_handler): Use EB-&gt;SCRATCH_POOL instead of creating new subpool
   on each invocation. Close EB-&gt;OUTPUT stream first and then destroy
   SCRATCH_POOL removing outdated comment.
  (svn_txdelta_to_svndiff3): Allocate handler baton in provided pool
   instead of creating new subpool just to allocate small structure.
   Create EB-&gt;SCRATCH_POOL here.
</msg>
</logentry>
<logentry
   revision="1685282">
<author>ivan</author>
<date>2015-06-13T16:12:02.291860Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/svndiff.c</path>
</paths>
<msg>* subversion/libsvn_delta/svndiff.c
  (encode_window): Reduce scope of I1 variable and rename it to
   COMPRESSED_INSTRUCTION for clarity.
</msg>
</logentry>
<logentry
   revision="1685280">
<author>ivan</author>
<date>2015-06-13T16:06:15.390962Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/svndiff.c</path>
</paths>
<msg>Refactor svndiff encoding code.

* subversion/libsvn_delta/svndiff.c
  (encode_window): New function, extracted from window_handler().
  (window_handler): Call encode_window().
</msg>
</logentry>
<logentry
   revision="1685085">
<author>stsp</author>
<date>2015-06-12T13:20:36.478517Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build.conf</path>
</paths>
<msg>* build.conf
  (svnbench): Install svnbench as part of 'make install'. svnbench moved from
   tools/ to subversion/ so it should be installed by default.

Found by: me
Patch by: danielsh
</msg>
</logentry>
<logentry
   revision="1685063">
<author>ivan</author>
<date>2015-06-12T11:09:45.864303Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/svndiff.c</path>
</paths>
<msg>Optimize svndiff parser a bit: do not parse delta window header on every
chunk written to svndiff parser write handler.

While this change may look like micro-optimization, in reality parsing delta
window header consume significant time of 'svnbench null-export' execution
over http: data received from network/base64 parser in small chunks. This
makes parsing one delta window header 1000 times until all delta window
received.

* subversion/libsvn_delta/svndiff.c
  (decode_baton): Add fields to hold length and five integer fields of 
   parsed delta window header.
  (write_handler): Reduce scope of local variables. Store parsed delta window
   header fields and length in DECODE_BATON and used on later invocations.
   Reset WINDOW_HEADER_LEN to zero once delta window is processed.
  (svn_txdelta_parse_svndiff): Initialize WINDOW_HEADER_LEN to zero.
</msg>
</logentry>
<logentry
   revision="1685034">
<author>brane</author>
<date>2015-06-12T04:33:29.897038Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Follow up to r1684940: Fix svnadmin tests with FSFS versions prior to v7.

* subversion/tests/cmdline/svnadmin_tests.py
  (verify_keep_going_quiet): FSFSv7 has more checksum validations than
   previous versions, so make the expected error list conditional on that.
</msg>
</logentry>
<logentry
   revision="1684940">
<author>brane</author>
<date>2015-06-11T16:28:03.405480Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Make 'svnadmin verify --keep-going --quiet' print errors to stderr,
as promised by the documentation.

* subversion/svnadmin/svnadmin.c
  (repos_notify_handler_baton): New member 'silent_running'.
  (repos_notify_handler): Implement silent running mode:
   only send notifications for warnings and errors.
  (subcommand_verify): With --quiet, print errors to stderr
   but do not print any other notifications and do not print
   the --keep-going error summary.

* subversion/tests/cmdline/svnadmin_tests.py
  (verify_keep_going_quiet): New test case for 'svnadmin verify --keep-going'.
  (test_list): Added verify_keep_going_quiet.
</msg>
</logentry>
<logentry
   revision="1684938">
<author>ivan</author>
<date>2015-06-11T16:14:46.889423Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
</paths>
<msg>* subversion/mod_dav_svn/util.c
  (request_body_to_string): APR_OFF_FMT to log variable of apr_off_t, instead
   of casting to unsigned long.
</msg>
</logentry>
<logentry
   revision="1684921">
<author>ivan</author>
<date>2015-06-11T15:33:32.041599Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
</paths>
<msg>* subversion/mod_dav_svn/util.c
  (): Include svn_string_private.h.
  (request_body_to_string): Use svn_stringbuf__morph_into_string() to
   convert svn_stringbuf_t to svn_string_t.
</msg>
</logentry>
<logentry
   revision="1684854">
<author>danielsh</author>
<date>2015-06-11T11:10:42.606466Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_config.h</path>
</paths>
<msg>* subversion/include/svn_config.h
  (Client configuration files strings): Document the need to re-run gen-make.py
    until issue #4581 is fixed.</msg>
</logentry>
<logentry
   revision="1684678">
<author>kotkov</author>
<date>2015-06-10T14:09:39.699958Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_delta/svndiff.c</path>
</paths>
<msg>* subversion/libsvn_delta/svndiff.c
  (write_handler): Fix a small typo in the comment.
</msg>
</logentry>
<logentry
   revision="1684649">
<author>philip</author>
<date>2015-06-10T12:04:21.038506Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/davautocheck.sh</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnserveautocheck.sh</path>
</paths>
<msg>Support modern network utilities for finding free ports for tests

* subversion/tests/cmdline/davautocheck.sh:
  Check for presence of ss, netstat and fail if neither is found.
  Prefer ss to find a free port, fall back to netstat.
* subversion/tests/cmdline/svnserveautocheck.sh:
  Same, and augment $PATH to include /usr/{,local/}sbin.

Patch by:  Andreas Stieger &lt;andreas.stieger{_AT_}gmx.de&gt;
</msg>
</logentry>
<logentry
   revision="1684452">
<author>philip</author>
<date>2015-06-09T15:36:11.534060Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/version.c</path>
</paths>
<msg>* subversion/libsvn_subr/version.c
  (svn_ver_check_list2): Followup to r1502267, force more relaxed rules
   when --disable-strict-version-match is in use.
  (svn_ver_compatible): Tweak comment.
</msg>
</logentry>
<logentry
   revision="1684412">
<author>brane</author>
<date>2015-06-09T13:15:07.735731Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/MessageReceiver.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/PatchCallback.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/JNIUtil.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/CopySources.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/SVNRepos.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/ClientContext.cpp</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/bindings/javahl/native/EditorCallbacks.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/EditorProxy.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/ProplistCallback.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/PropertyTable.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/BlameCallback.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/CommitMessage.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/org_apache_subversion_javahl_util_ConfigImpl_Category.cpp</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/ImportFilterCallback.cpp</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/ReposNotifyCallback.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/RemoteSession.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/StatusCallback.cpp</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/org_apache_subversion_javahl_util_SubstLib.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/LogMessageCallback.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/OperationContext.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/SVNClient.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/RevisionRangeList.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/InfoCallback.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/EnumMapper.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/Credential.cpp</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/bindings/javahl/native/DiffSummaryReceiver.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/RevisionRange.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/CreateJ.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/SubversionException.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/JNIUtil.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/ReposFreezeAction.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/ListCallback.cpp</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/AuthnCallback.cpp</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/ChangelistCallback.cpp</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/Revision.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/CommitEditor.cpp</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/LockTokenTable.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/ExternalItem.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/NativeStream.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/StateReporter.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/RemoteSessionContext.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/CommitCallback.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/VersionExtended.cpp</path>
</paths>
<msg>Make JavaHL native code compile with a C++11 compiler.

The C++11 language introduces a feature called user-defined literals
(see: http://en.cppreference.com/w/cpp/language/user_literal). The
effect of this in JavaHL is that string literal concatenation where
there is no space between the literals no longer works as in C or older
versions of C++; the C++11 compiler interprets them as a user-defined
literal instaed of concatenated string literals.

The solution is to always put spaces between string literals where
concatenation is intended. JavaHL uses string literal concatenation
in many places to construct JNI class and argument type names.

* subversion/bindings/javahl/native/JNIUtil.h
  (JAVAHL_PACKAGE): Renamed from JAVA_PACKAGE.
  (JAVAHL_CLASS, JAVAHL_ARG): New.

* subversion/bindings/javahl/native/org_apache_subversion_javahl_util_SubstLib.cpp:
  (build_keywords_common): Add a space between "%" and APR_UINT64_T_FMT.

* subversion/bindings/javahl/native/AuthnCallback.cpp,
  subversion/bindings/javahl/native/BlameCallback.cpp,
  subversion/bindings/javahl/native/ChangelistCallback.cpp,
  subversion/bindings/javahl/native/ClientContext.cpp,
  subversion/bindings/javahl/native/CommitCallback.cpp,
  subversion/bindings/javahl/native/CommitEditor.cpp,
  subversion/bindings/javahl/native/CommitMessage.cpp,
  subversion/bindings/javahl/native/CopySources.cpp,
  subversion/bindings/javahl/native/CreateJ.cpp,
  subversion/bindings/javahl/native/Credential.cpp,
  subversion/bindings/javahl/native/DiffSummaryReceiver.cpp,
  subversion/bindings/javahl/native/EditorCallbacks.cpp,
  subversion/bindings/javahl/native/EditorProxy.cpp,
  subversion/bindings/javahl/native/EnumMapper.cpp,
  subversion/bindings/javahl/native/ExternalItem.cpp,
  subversion/bindings/javahl/native/ImportFilterCallback.cpp,
  subversion/bindings/javahl/native/InfoCallback.cpp,
  subversion/bindings/javahl/native/JNIUtil.cpp,
  subversion/bindings/javahl/native/JNIUtil.h,
  subversion/bindings/javahl/native/ListCallback.cpp,
  subversion/bindings/javahl/native/LockTokenTable.cpp,
  subversion/bindings/javahl/native/LogMessageCallback.cpp,
  subversion/bindings/javahl/native/MessageReceiver.cpp,
  subversion/bindings/javahl/native/NativeStream.cpp,
  subversion/bindings/javahl/native/OperationContext.cpp,
  subversion/bindings/javahl/native/PatchCallback.cpp,
  subversion/bindings/javahl/native/PropertyTable.cpp,
  subversion/bindings/javahl/native/ProplistCallback.cpp,
  subversion/bindings/javahl/native/RemoteSession.cpp,
  subversion/bindings/javahl/native/RemoteSessionContext.cpp,
  subversion/bindings/javahl/native/ReposFreezeAction.cpp,
  subversion/bindings/javahl/native/ReposNotifyCallback.cpp,
  subversion/bindings/javahl/native/Revision.cpp,
  subversion/bindings/javahl/native/RevisionRange.cpp,
  subversion/bindings/javahl/native/RevisionRangeList.cpp,
  subversion/bindings/javahl/native/SVNClient.cpp,
  subversion/bindings/javahl/native/SVNRepos.cpp,
  subversion/bindings/javahl/native/StateReporter.cpp,
  subversion/bindings/javahl/native/StatusCallback.cpp,
  subversion/bindings/javahl/native/SubversionException.cpp,
  subversion/bindings/javahl/native/VersionExtended.cpp,
  subversion/bindings/javahl/native/org_apache_subversion_javahl_util_ConfigImpl_Category.cpp:
   Replace all uses of JAVA_PACKAGE with either JAVAHL_CLASS or JAVAHL_ARG, as appropriate.
</msg>
</logentry>
<logentry
   revision="1684344">
<author>brane</author>
<date>2015-06-09T07:47:55.770366Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
</paths>
<msg>Follow up to r1684325: Move the "fix" from libsvn_repos to svnadmin,
because it was responsible for the double error notification.

* subversion/libsvn_repos/dump.c: Revert r1684325.
  (svn_repos_verify_fs3): Revert to always sending error notifications.

* subversion/svnadmin/svnadmin.c
  (repos_notify_handler_baton): New member silent_errors.
  (repos_notify_handler): I the svn_repos_notify_failure case,
   always print the notification but print the error itself
   only if the baton's silent_errors member is FALSE.
  (subcommand_verify): Silence errors in the notificaiton handler
   if --keep-going was not used.
</msg>
</logentry>
<logentry
   revision="1684325">
<author>brane</author>
<date>2015-06-09T06:47:06.790530Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
</paths>
<msg>Follow up to r1683311: Fix an unintended doubling of error messages
in 'svnadmin verify' without the --keep-going flag.

* subversion/libsvn_subr/dump.c
  (svn_repos_verify_fs3): If keep_going is false, do not send notifications
   about errors but just return the error instead.
</msg>
</logentry>
<logentry
   revision="1684322">
<author>brane</author>
<date>2015-06-09T06:18:21.821488Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/VersionExtended.cpp</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/org_apache_subversion_javahl_types_VersionExtended.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/types/VersionExtended.java</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/VersionExtended.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java</path>
</paths>
<msg>Fix a minor omission in JavaHL's VersionExtended class:
the dispose() and finalize() methods were missing.

[in subversion/bindings/javahl]
* src/org/apache/subversion/javahl/types/VersionExtended.java
  (VersionExtended.dispose, VersionExtended.finalize): Add methods.

* VersionExtended.h
  (VersionExtended::getCppObject): Return a non-const pointer;
   the implementation of dispose() cannot use an immutable object.
* VersionExtended.cpp
  (VersionExtended::getCppObject): Update implementation.

* org_apache_subversion_javahl_types_VersionExtended.cpp:
   Include svn_private_config.h
  (Java_org_apache_subversion_javahl_types_VersionExtended_dispose):
   Implement native method.

* tests/org/apache/subversion/javahl/BasicTests.java
  (BasicTests.testVersionExtendedQuiet,
   BasicTests.testVersionExtendedVerbose): Dispose the VersionExtended object.
</msg>
</logentry>
<logentry
   revision="1684211">
<author>ivan</author>
<date>2015-06-08T15:54:33.943907Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnbench/svnbench.c</path>
</paths>
<msg>Formatting fix.

* subversion/svnbench/svnbench.c
  (sub_main): Remove space before parenthesis.
</msg>
</logentry>
<logentry
   revision="1684077">
<author>ivan</author>
<date>2015-06-07T20:34:11.640469Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/svndiff.c</path>
</paths>
<msg>Detect invalid svndiff data earlier.

* subversion/libsvn_delta/svndiff.c
  (write_handler): Check that unprocessed data is not larger that
   theoretical maximum window header size.
</msg>
</logentry>
<logentry
   revision="1684054">
<author>ivan</author>
<date>2015-06-07T18:11:00.008568Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/svndiff.c</path>
</paths>
<msg>Refactor svndiff encoding code.

* subversion/libsvn_delta/svndiff.c
  (SVNDIFF_V0, SVNDIFF_V1, SVNDIFF_HEADER_SIZE): Move to top of the 
   file.
  (get_svndiff_header): New helper, returns SVNDIFF_V0 or SVNDIFF_V1
   depending of svndiff version requested.
  (send_simple_insertion_window, window_handler): Use 
   get_svndiff_header() helper and use SVNDIFF_HEADER_SIZE constant.
</msg>
</logentry>
<logentry
   revision="1684047">
<author>ivan</author>
<date>2015-06-07T17:07:30.542944Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/private/svn_subr_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/compress.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/svndiff.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/packed_data.c</path>
</paths>
<msg>Avoid callers of svn__compress() and svn__decompress() construct fake
svn_stringbuf_t instance.

* subversion/include/private/svn_subr_private.h
* subversion/libsvn_subr/compress.c
  (svn__compress, svn__decompress): Replace IN parameter of type 
   svn_stringbuf_t with DATA/LEN.

* subversion/libsvn_delta/svndiff.c
  (zlib_decode): Remove.
  (window_handler): Just pass DATA/LEN to svn__compress() instead of
   construction fake svn_stringbuf_t.
  (decode_window): Call svn__decompress() directly without zlib_decode()
   helper.

* subversion/libsvn_fs_fs/revprops.c
  (parse_packed_revprops, repack_revprops, svn_fs_fs__copy_revprops):
   Adapt calls to svn__compress() and svn__decompress().
* subversion/libsvn_fs_x/revprops.c
  (parse_packed_revprops, repack_revprops, svn_fs_fs__copy_revprops):
   Adapt calls to svn__compress() and svn__decompress().
* subversion/libsvn_subr/packed_data.c
  (write_stream_data, read_stream_data): Adapt calls to
   svn__compress() and svn__decompress().
</msg>
</logentry>
<logentry
   revision="1684034">
<author>ivan</author>
<date>2015-06-07T14:31:56.529289Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/prop_tests.py</path>
</paths>
<msg>Fix prop_tests.py#42 test failures with non-US default locale on
Windows [1].

[1] http://svn.haxx.se/dev/archive-2015-02/0098.shtml

* subversion/tests/cmdline/prop_tests.py
  (xml_unsafe_author2):Use 'svn ls' with --xml flag to test locale 
   independent output.
</msg>
</logentry>
<logentry
   revision="1684014">
<author>ivan</author>
<date>2015-06-07T09:53:54.170517Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/svndiff.c</path>
</paths>
<msg>Use existing API to construct svn_string_t.

* subversion/libsvn_delta/svndiff.c
  (decode_window): Use svn_stringbuf__morph_into_string() and
   svn_string_ncreate() to construct svn_string_t.
</msg>
</logentry>
<logentry
   revision="1684012">
<author>ivan</author>
<date>2015-06-07T09:48:17.165979Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/liveprops.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/text_delta.c</path>
</paths>
<msg>Small code cleanup.

* subversion/libsvn_delta/text_delta.c
  (svn_txdelta_window_dup): Use apr_pmemdup() instead of apr_palloc()
   followed by memcpy().
* subversion/mod_dav_svn/liveprops.c
  (get_last_modified_time): Do not use memcpy to copy apr_time_t value.
</msg>
</logentry>
<logentry
   revision="1683899">
<author>ivan</author>
<date>2015-06-06T12:06:19.605470Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/svndiff.c</path>
</paths>
<msg>* subversion/libsvn_delta/svndiff.c
  (svn_txdelta_parse_svndiff): Do not allocate stream baton if 
   HANDLER==svn_delta_noop_window_handler.
</msg>
</logentry>
<logentry
   revision="1683898">
<author>rschupp</author>
<date>2015-06-06T12:04:43.465105Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/swig/core.i</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/svn_client.i</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/include/svn_types.swg</path>
</paths>
<msg>* in subversion/bindings/swig: core.i, svn_client.i, include/svn_types.swg:
  revert r1683270, r1683271. It is not necessary to call SPAGAIN here,
  as helper functions svn_swig_pl_thunk_* are only referenced, but
  not actully called.
</msg>
</logentry>
<logentry
   revision="1683895">
<author>ivan</author>
<date>2015-06-06T11:42:31.418629Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/svndiff.c</path>
</paths>
<msg>Simplify code and avoid multiple buffer reallocation for every delta
window in SVNDIFF stream processing.

* subversion/libsvn_delta/svndiff.c
  (write_handler): Use svn_stringbuf_remove() to remove processed 
   window data from buffer. Clear subpool on every window procesing 
   instead of creating new subpool and destroy old one.
  (svn_txdelta_parse_svndiff): Allocate DB-&gt;BUFFER in DB-&gt;POOL instead of
   DB-&gt;SUBPOOL.
</msg>
</logentry>
<logentry
   revision="1683553">
<author>ivan</author>
<date>2015-06-04T14:08:42.699458Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/verify.c</path>
</paths>
<msg>Follow-up to r1683544: Fix svn_fs_verify(0, SVN_INVALID_REVNUM) for FSFS
repositories.

* subversion/libsvn_fs_fs/verify.c
  (svn_fs_fs__verify): Read current file to obtain youngest revision
   instead of relying that ffd-&gt;youngest_rev_cache contains actual value.
</msg>
</logentry>
<logentry
   revision="1683544">
<author>ivan</author>
<date>2015-06-04T13:25:21.230469Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
</paths>
<msg>Minor FSFS optimization: do not read 'current' file on FS open to save
cached youngest revision. Current API users often call 
svn_fs_youngest() right after svn_fs_open() which cause 'current' file 
read again.

* subversion/libsvn_fs_fs/fs_fs.c
  (svn_fs_fs__open): Do not call get_youngest(). Just initialize
   ffd-&gt;youngest_rev_cache to zero.
</msg>
</logentry>
<logentry
   revision="1683505">
<author>julianfoad</author>
<date>2015-06-04T10:18:23.741376Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_ra.h</path>
</paths>
<msg>* subversion/include/svn_ra.h
  (svn_ra_replay_range): Document that the rev range is inclusive.</msg>
</logentry>
<logentry
   revision="1683387">
<author>ivan</author>
<date>2015-06-03T16:31:08.354566Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/status.c</path>
</paths>
<msg>Fix abort() in svn-status handler on platforms that doesn't support C99
format specifiers for strftime(): %F and %z are new in C99 and C89
compiler/runtime doesn't support them [1]:
[[[
Those listed here are supported by the latest C and C++ standards (both 
published in 2011), but those in yellow were introduced in C99 (only 
required for C++ implementations since C++11), and may not be supported by 
libraries that comply with older standards.
]]]

[1] http://www.cplusplus.com/reference/ctime/strftime/

* subversion/mod_dav_svn/status.c
  (DEFAULT_TIME_FORMAT): Use '%Y-%m-%d' instead of '%F' and '%Z instead of
   '%z'.
</msg>
</logentry>
<logentry
   revision="1683378">
<author>ivan</author>
<date>2015-06-03T15:48:35.999841Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
</paths>
<msg>Prevent a possible FSFS repository corruption with power or network disk
failures during 'svnadmin pack'.

* subversion/libsvn_fs_fs/pack.c
  (close_pack_context): Call svn_io_file_flush_to_disk() for pack file.
  (pack_phys_addressed): Use svn_io_file_open() to open pack and manifest 
   file and call svn_io_file_flush_to_disk() before closing them.

* subversion/libsvn_fs_fs/revprops.c
  (svn_fs_fs__copy_revprops): Use apr_file_t to write pack file and flush
   changes to disk before close.
  (svn_fs_fs__pack_revprops_shard): Use svn_io_file_open() to packed revision
   properties manifest file and call svn_io_file_flush_to_disk()
   before closing it.
</msg>
</logentry>
<logentry
   revision="1683330">
<author>ivan</author>
<date>2015-06-03T13:40:13.311415Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
</paths>
<msg>Use stream API to write packed revision properties manifest file during
property modification, while still use apr_file_t for flush to disk
operations.

This slightly increase memory usage since svn_stream_printf() copies string 
in provided pool, but revision properties manifest files usually not that
big to cause out of memory issues.

* subversion/libsvn_fs_fs/revprops.c
  (write_packed_revprop): Wrap stream around apr_file_t and use
   svn_stream_printf() to generate revision properties manifest file.
</msg>
</logentry>
<logentry
   revision="1683311">
<author>brane</author>
<date>2015-06-03T12:31:38.904922Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-private-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_error_codes.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
</paths>
<msg>Fix the behaviour of 'svnadmin verify' alias svn_repos_verify_fs3.

Without --keep-going, 'svnadmin verify' must not obscure the error
returned by the FS implementation. With --keep-going, it should not
assume that a reported error implies repository corruption, only
that the verificaton process failed.

See: http://s.apache.org/j9Z

Patch by: kotkov
          me


* subversion/include/svn_error_codes.h
  (SVN_ERR_REPOS_VERIFY_FAILED): Replaces SVN_ERR_REPOS_CORRUPTED.

* subversion/libsvn_fs_fs/cached_data.c (svn_fs_fs__check_rep),
  subversion/libsvn_fs_x/cached_data.c (svn_fs_x__check_rep):
   Return SVN_ERR_FS_CORRUPT instead of the incorrect and
   obsolete SVN_ERR_REPOS_CORRUPTED.

* subversion/libsvn_repos/dump.c
  (verify_fs_notify_func_baton_t): Renamed from verify_fs2_notify_func_baton_t.
   There's no need to 'version' file-local symbols. All uses updated.
  (verify_fs_notify_func): Renamed from verify_fs2_notify_func; see above.
  (svn_repos_verify_fs3): Track metadata and revision verification failures
   separately and, in keep-going mode, summarize them separately, too.
   Do not obscure FS backend errors in normal mode and do not ignore
   cancellations in keep-going mode.

* subversion/tests/cmdline/svnadmin_tests.py
  (verify_keep_going, verify_invalid_path_changes, verify_quickly):
   Adjust test case expectations.

* subversion/tests/libsvn_fs_fs/fs-fs-private-test.c
  (load_index_test): Renamed from load_index.
   Parametrize the test to check both normal and keep-going verification
   and adjust test case expectations.
  (load_index, load_index_keep_going): New test cases.
  (test_funcs): Add load_index_keep_going.
</msg>
</logentry>
<logentry
   revision="1683305">
<author>stsp</author>
<date>2015-06-03T12:01:39.881500Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>Follow-up r1683257: Fix constness inconsistencies.

* subversion/include/svn_client.h
  (svn_client_conflict_get_local_abspath,
   svn_client_conflict_get_operation,
   svn_client_conflict_get_incoming_change,
   svn_client_conflict_get_local_change): Declare conflict param as const.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_get_local_abspath,
   svn_client_conflict_get_operation,
   svn_client_conflict_get_incoming_change,
   svn_client_conflict_get_local_change): Likewise for implementation.

Found by: brane
</msg>
</logentry>
<logentry
   revision="1683303">
<author>rhuijben</author>
<date>2015-06-03T11:58:49.028665Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnrdump_tests.py</path>
</paths>
<msg>* subversion/cmdline/svnrdump_tests.py
  (dont_drop_valid_mergeinfo_during_incremental_svnrdump_loads):
    Explicitly delete repository 'with retry' to work around a race
    condition when running the tests on bdb via svnserve.
</msg>
</logentry>
<logentry
   revision="1683290">
<author>philip</author>
<date>2015-06-03T11:29:31.391921Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
</paths>
<msg>* subversion/libsvn_fs_x/cached_data.c
  (read_dir_entries): Revert the other part of r1683126 and use the FSFS
   approach from r1572049.
</msg>
</logentry>
<logentry
   revision="1683271">
<author>rschupp</author>
<date>2015-06-03T10:06:44.458390Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/svn_client.i</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/include/svn_types.swg</path>
</paths>
<msg>* subversion/bindings/swig/svn_client.i,
  subversion/bindings/swig/include/svn_types.swg:
  Bracket calls with PUTBACK/SPAGAIN to helper functions 
  that call back into Perl:
  - svn_swig_pl_thunk_commit_callback
  - svn_swig_pl_thunk_commit_callback2
  - svn_swig_pl_thunk_client_diff_summarize_func
  Note: calls in typemaps need only SPAGAIN.
</msg>
</logentry>
<logentry
   revision="1683270">
<author>rschupp</author>
<date>2015-06-03T10:04:25.840703Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/include/svn_types.swg</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/core.i</path>
</paths>
<msg>* subversion/bindings/swig/core.i, 
  subversion/bindings/swig/include/svn_types.swg:
  Bracket calls with PUTBACK/SPAGAIN to helper functions 
  that call back into Perl in the following Swig macros:
  - %callback_typemap
  - %callback_typemap_maybenull
  - %authprompt_callback_typemap
  Note: calls in in typemaps need only SPAGAIN.
</msg>
</logentry>
<logentry
   revision="1683269">
<author>rschupp</author>
<date>2015-06-03T09:59:38.323942Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/include/svn_types.swg</path>
</paths>
<msg>* subversion/bindings/swig/include/svn_types.swg:
  Bracket calls with PUTBACK/SPAGAIN to helper function 
  svn_swig_pl_callback_thunk as it calls back into Perl.
</msg>
</logentry>
<logentry
   revision="1683267">
<author>rschupp</author>
<date>2015-06-03T09:56:16.551651Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/svn_client.i</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/include/svn_types.swg</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/bindings/swig/include/svn_containers.swg</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/include/svn_string.swg</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/core.i</path>
</paths>
<msg>* subversion/bindings/swig/core.i, subversion/bindings/swig/svn_client.i,
  subversion/bindings/swig/include/svn_containers.swg,
  subversion/bindings/swig/include/svn_string.swg,
  subversion/bindings/swig/include/svn_types.swg:
  Bracket calls with PUTBACK/SPAGAIN to helper function svn_swig_pl_make_pool
  as it calls back into Perl.
  Note: calls in typemaps need only SPAGAIN.
</msg>
</logentry>
<logentry
   revision="1683266">
<author>rschupp</author>
<date>2015-06-03T09:50:59.599696Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/include/svn_types.swg</path>
</paths>
<msg>* subversion/bindings/swig/include/svn_types.swg:
  Bracket calls with PUTBACK/SPAGAIN to helper functions 
  that call back into Perl:
  - svn_swig_pl_make_stream
  - svn_swig_pl_from_stream
  - svn_swig_pl_from_md5
  Note: calls in typemaps need only SPAGAIN.
</msg>
</logentry>
<logentry
   revision="1683265">
<author>rschupp</author>
<date>2015-06-03T09:44:28.424035Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/perl/libsvn_swig_perl/swigutil_pl.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/perl/libsvn_swig_perl/swigutil_pl.h</path>
</paths>
<msg>* subversion/bindings/swig/perl/libsvn_swig_perl/swigutil_pl.c,
  subversion/bindings/swig/perl/libsvn_swig_perl/swigutil_pl.h:
  Remove unused function svn_swig_pl_wrap_window_handler.
</msg>
</logentry>
<logentry
   revision="1683264">
<author>rschupp</author>
<date>2015-06-03T09:43:13.972000Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/perl/libsvn_swig_perl/swigutil_pl.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/perl/libsvn_swig_perl/swigutil_pl.h</path>
</paths>
<msg>* subversion/bindings/swig/perl/libsvn_swig_perl/swigutil_pl.c,
  subversion/bindings/swig/perl/libsvn_swig_perl/swigutil_pl.h:
  Make thunk_get_wc_prop static - it's not used outside of swigutil_pl.c.
</msg>
</logentry>
<logentry
   revision="1683261">
<author>rschupp</author>
<date>2015-06-03T09:39:23.924173Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/perl/libsvn_swig_perl/swigutil_pl.c</path>
</paths>
<msg>* subversion/bindings/swig/perl/libsvn_swig_perl/swigutil_pl.c:
  Annotate functions that (transitively) call back into Perl. 
  This information is helpful when deciding whether a call to 
  a helper function in a Swig rule must be bracketed with
  PUTBACK/SPAGAIN.
</msg>
</logentry>
<logentry
   revision="1683258">
<author>stsp</author>
<date>2015-06-03T08:58:19.818046Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c: Fix a typo in comment.
</msg>
</logentry>
<logentry
   revision="1683257">
<author>stsp</author>
<date>2015-06-03T08:56:46.081903Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/cl-conflicts.c</path>
</paths>
<msg>Start introducing some actual svn_client_conflict API functions.

The API functions introduced with this commit are very trivial ones.

* subversion/include/svn_client.h
  (svn_client_conflict_get_local_abspath,
   svn_client_conflict_get_operation,
   svn_client_conflict_get_incoming_change,
   svn_client_conflict_get_local_change): Declare. These function replace the
   macros called svn_client_conflict_get_local_abspath,
   svn_client_conflict_get_operation, svn_client_conflict_get_action, and
   svn_client_conflict_get_reason.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_get_local_abspath,
   svn_client_conflict_get_operation,
   svn_client_conflict_get_incoming_change,
   svn_client_conflict_get_local_change): Implement.

* subversion/svn/cl-conflicts.c
  (svn_cl__get_human_readable_prop_conflict_description,
  (svn_cl__get_human_readable_tree_conflict_description,
   append_tree_conflict_info_xml): Switch to new functions replacing macros.

* subversion/svn/conflict-callbacks.c
  (handle_tree_conflict, conflict_func_interactive): Likewise.
</msg>
</logentry>
<logentry
   revision="1683196">
<author>philip</author>
<date>2015-06-02T22:28:13.817682Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_fs/fs-test.c
  (check_txn_related): Use unique name for filesystem, this fixes
   a spurious FAIL when running the tests in parallel.
</msg>
</logentry>
<logentry
   revision="1683161">
<author>cmpilato</author>
<date>2015-06-02T19:11:03.640793Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/python/libsvn_swig_py/swigutil_py.c</path>
</paths>
<msg>Actually use some helpful error messaging that we bother to create in
the SWIG Python bindings.

* subversion/bindings/swig/python/libsvn_swig_py/swigutil_py.c
  (callback_bad_return_error): Include 'message' in the generated
    Subversion error.
</msg>
</logentry>
<logentry
   revision="1683135">
<author>philip</author>
<date>2015-06-02T16:43:19.875387Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
</paths>
<msg>* subversion/libsvn_fs_x/cached_data.c
  (read_dir_entries): Revert part of r1683126, no need to duplicate the
   key when deleting a hash entry.
</msg>
</logentry>
<logentry
   revision="1683126">
<author>philip</author>
<date>2015-06-02T15:19:26.097434Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
</paths>
<msg>Avoid using pool memory after clear in FSX.

* subversion/libsvn_fs_x/cached_data.c
  (read_dir_entries): Copy hashed values into hash pool.
</msg>
</logentry>
<logentry
   revision="1683071">
<author>danielsh</author>
<date>2015-06-02T10:42:29.430221Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/INSTALL</path>
</paths>
<msg>Document the meaning of "XFAIL" for users.

This is not a replacement for the developer-facing description in
&lt;subversion/tests/README&gt;, but a summary of it for users building from source.

* INSTALL (II.A.1): Describe the normal and abnormal test run output.</msg>
</logentry>
<logentry
   revision="1682864">
<author>stefan2</author>
<date>2015-06-01T10:25:02.532963Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/structure-indexes</path>
</paths>
<msg>Improve wording of the FSFS index format documentation.
No functional change.

* subversion/libsvn_fs_fs/structure-indexes
  (Proto index file format): Say "zero or more" instead of "zero to many".

Suggested by: danielsh</msg>
</logentry>
<logentry
   revision="1682854">
<author>stefan2</author>
<date>2015-06-01T09:59:33.844517Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
</paths>
<msg>Follow-up to r1595277:
Fix logic broken by manual conflict resolution.

* subversion/libsvn_fs_x/tree.c
  (compare_dir_structure): Don't reset the *CHANGED flag after we found
                           the mismatch and terminated our search. 

Found by: danielsh</msg>
</logentry>
<logentry
   revision="1682838">
<author>stsp</author>
<date>2015-06-01T08:53:15.558413Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/unix-build/Makefile.svn</path>
</paths>
<msg>* tools/dev/unix-build/Makefile.svn: Always regenerate htpasswd file with
   the htpasswd tool before running tests over http (like davautocheck does).
</msg>
</logentry>
<logentry
   revision="1682836">
<author>rschupp</author>
<date>2015-06-01T08:49:03.227928Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/swig/perl/native/Delta.pm</path>
</paths>
<msg>Fix off-by-one error in compatibility wrapper for svn_txdelta_apply()

* subversion/bindings/swig/perl/native/Delta.pm
  (apply): The "md5" argument (nowadays called "resultstring") that
  is to be ignored is at index 2, not 3. Also drop the note that the
  returned "md5" isn't working - it is.
</msg>
</logentry>
<logentry
   revision="1682739">
<author>stefan2</author>
<date>2015-05-31T14:21:39.933231Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/structure-indexes</path>
</paths>
<msg>Update and correct FSFS index format documentation.
No functional change.

* subversion/libsvn_fs_fs/structure-indexes
  (Design): Remove outdated comment about proto-indexes not having
            a stable format.
  (FNV checksum): Describe how exactly the partical checksums gets
                  folded into the final one and why.

Found by: danielsh</msg>
</logentry>
<logentry
   revision="1682714">
<author>stefan2</author>
<date>2015-05-31T10:49:00.156581Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
</paths>
<msg>Follow-up to r1595277:
Restore logic that got accidentally removed during conflict resolution.

* subversion/libsvn_fs_x/tree.c
  (compare_dir_structure): Re-introduce shortcut condition. This ensures
                           that the following iteration is valid on both
                           arrays.</msg>
</logentry>
<logentry
   revision="1682506">
<author>stsp</author>
<date>2015-05-29T15:44:49.324963Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/info-cmd.c</path>
</paths>
<msg>More use of transitional accessor API for svn_wc_conflict_description2_t. 

* subversion/svn/info-cmd.c
  (print_info): Use the svn_client_conflict_get_* accessor macros.
</msg>
</logentry>
<logentry
   revision="1682504">
<author>stsp</author>
<date>2015-05-29T15:33:16.810386Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>More use of transitional accessor API for svn_wc_conflict_description2_t. 

* subversion/svn/conflict-callbacks.c
  (show_diff, show_conflicts, merge_prop_conflict, handle_text_conflict,
   handle_prop_conflict, handle_tree_conflict, conflict_func_interactive):
   Use the svn_client_conflict_get_* accessor macros. The only place left
   untouched is the fixup of desc-&gt;their_abspath in handle_prop_conflict().
</msg>
</logentry>
<logentry
   revision="1682484">
<author>stsp</author>
<date>2015-05-29T14:23:20.992900Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/cl-conflicts.c</path>
</paths>
<msg>Start using transitional accessor API for svn_wc_conflict_description2_t. 

* subversion/svn/cl-conflicts.c
  (svn_cl__get_human_readable_prop_conflict_description,
   svn_cl__get_human_readable_tree_conflict_description,
   append_tree_conflict_info_xml,
   svn_cl__append_conflict_info_xml): Use svn_client_conflict_* to access
    fields of svn_wc_conflict_description2_t.
</msg>
</logentry>
<logentry
   revision="1682472">
<author>stsp</author>
<date>2015-05-29T14:01:23.750255Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Resolve a compile time warning:

patch.c: In function 'write_symlink':
patch.c:914: warning: declaration of 'link' shadows a global declaration

* subversion/libsvn_client/patch.c
  (write_symlink): Rename local variable 'link' to 'sym_link' (the name
   'symlink' produces the same warning as 'link').
</msg>
</logentry>
<logentry
   revision="1682470">
<author>stsp</author>
<date>2015-05-29T13:56:55.528550Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h
  (svn_client_conflict_get_local_abspath,
   svn_client_conflict_get_node_kind,
   svn_client_conflict_get_kind,
   svn_client_conflict_get_property_name,
   svn_client_conflict_get_is_binary,
   svn_client_conflict_get_mime_type,
   svn_client_conflict_get_action,
   svn_client_conflict_get_reason,
   svn_client_conflict_get_base_abspath,
   svn_client_conflict_get_their_abspath,
   svn_client_conflict_get_my_abspath,
   svn_client_conflict_get_merged_file,
   svn_client_conflict_get_operation,
   svn_client_conflict_get_src_left_version,
   svn_client_conflict_get_src_right_version,
   svn_client_conflict_get_prop_reject_abspath,
   svn_client_conflict_get_prop_value_working,
   svn_client_conflict_get_prop_value_incoming_old,
   svn_client_conflict_get_prop_value_incoming_new): Put parentheses around
     macro arguments for correctness reasons.

Pointed out by: danielsh
</msg>
</logentry>
<logentry
   revision="1682464">
<author>stsp</author>
<date>2015-05-29T13:41:02.198942Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>Introduce a temporary client API which makes it possible to treat the
svn_wc_conflict_description2_t struct as an opaque type in 'svn'.

This transitional API is not meant to be released with 1.10.

* subversion/include/svn_client.h
  (svn_client_conflict_get_local_abspath,
   svn_client_conflict_get_node_kind,
   svn_client_conflict_get_kind,
   svn_client_conflict_get_property_name,
   svn_client_conflict_get_is_binary,
   svn_client_conflict_get_mime_type,
   svn_client_conflict_get_action,
   svn_client_conflict_get_reason,
   svn_client_conflict_get_base_abspath,
   svn_client_conflict_get_their_abspath,
   svn_client_conflict_get_my_abspath,
   svn_client_conflict_get_merged_file,
   svn_client_conflict_get_operation,
   svn_client_conflict_get_src_left_version,
   svn_client_conflict_get_src_right_version,
   svn_client_conflict_get_prop_reject_abspath,
   svn_client_conflict_get_prop_value_working,
   svn_client_conflict_get_prop_value_incoming_old,
   svn_client_conflict_get_prop_value_incoming_new): New macros.
</msg>
</logentry>
<logentry
   revision="1682265">
<author>stefan2</author>
<date>2015-05-28T15:45:55.372145Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/util.c</path>
</paths>
<msg>Correctly fsync() after renames in FSFS on Win32.  We must flush the disk
buffers after the rename, otherwise the metadata may not be persistent.
Moreover, if the rename is degraded to a copy by Win32, we won't even have
the complete file contents on disk without a buffer flush.

* subversion/libsvn_fs_fs/util.c
  (svn_fs_fs__move_into_place): On Win32, always flush after rename.</msg>
</logentry>
<logentry
   revision="1682259">
<author>stefan2</author>
<date>2015-05-28T15:23:30.439950Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_dep_compat.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>Fix our usage of fsync usage on non-Linux POSIX platforms.
They all share the "directory contains the file name" property.

* subversion/include/private/svn_dep_compat.h
  (SVN_ON_POSIX): New define.

* subversion/libsvn_fs_fs/util.c
  (svn_fs_fs__move_into_place): Always sync the parent directory when
                                we are on POSIX - not just for Linux.

* subversion/libsvn_subr/io.c
  (svn_io_write_atomic): Same.</msg>
</logentry>
<logentry
   revision="1682199">
<author>philip</author>
<date>2015-05-28T10:39:07.809205Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Apply FSFS revprop flush change, r1680819, to FSX.

* subversion/libsvn_fs_x/revprops.c
  (repack_stream_open): Rename the function ...
  (repack_file_open): ...to this. Rework it to return files (apr_file_t)
   instead of streams.
  (repack_revprops): Work with a file instead of a stream. Flush any
   unwritten data to disk before returning.
  (write_non_packed_revprop): Flush any unwritten data to disk after
   serializing the revision property list.
  (write_packed_revprop): Cope with the changes in repack_file_open() and
   repack_revprops() that now work with files. Flush the data to disk when
   done writing to a temporary manifest file.
</msg>
</logentry>
<logentry
   revision="1682093">
<author>philip</author>
<date>2015-05-27T18:23:58.648869Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/pack.c
  (copy_node_to_temp): Check error from svn_stream_close().
</msg>
</logentry>
<logentry
   revision="1682086">
<author>ivan</author>
<date>2015-05-27T17:32:32.478310Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/pack.c
  (copy_rep_to_temp): Check error from svn_stream_close().
</msg>
</logentry>
<logentry
   revision="1682076">
<author>ivan</author>
<date>2015-05-27T16:51:55.806902Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/upgrade.c</path>
</paths>
<msg>Use consistent form for cancel callback invocation. No functional changes
intended.

* subversion/libsvn_fs_fs/revprops.c
* subversion/libsvn_fs_x/revprops.c
* subversion/libsvn_subr/io.c
* subversion/libsvn_wc/upgrade.c
  (svn_fs_fs__delete_revprops_shard, svn_fs_x__delete_revprops_shard,
   svn_io_remove_dir2, svn_wc__wipe_postupgrade): Use "cancel_func(baton)"
   form instead of "(*cancel_func)(baton)" like we in all other code.
</msg>
</logentry>
<logentry
   revision="1682008">
<author>ivan</author>
<date>2015-05-27T13:06:30.517129Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Follow-up to r1679921: obtain in-txn directory representation file size
via already open file handle instead of accessing file information by
filename. It saves some I/O operation.

* subversion/libsvn_fs_fs/cached_data.c
  (get_txn_dir_info): Do not return FILENAME since callers don't need it.
   Also remove RESULT_POOL argument.
  (get_dir_contents): Use svn_io_file_size_get() to obtain in-txn directory 
   representation file size.
  (svn_fs_fs__rep_contents_dir, svn_fs_fs__rep_contents_dir_entry): Adapt
   calls to get_txn_dir_info().
</msg>
</logentry>
<logentry
   revision="1682005">
<author>julianfoad</author>
<date>2015-05-27T12:52:09.506021Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_x509.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_error.h</path>
</paths>
<msg>Fix Doxygen mark-up.

* subversion/include/svn_error.h
  (svn_error_quick_wrap): Use '@a ' not just '@' to refer to a parameter.

* subversion/include/svn_x509.h
  (svn_x509_oid_to_string): Same.</msg>
</logentry>
<logentry
   revision="1681995">
<author>philip</author>
<date>2015-05-27T12:00:45.411174Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/lock.c</path>
</paths>
<msg>Apply FSFS lock change r1659217 to FSX.

* subversion/libsvn_fs_x/lock.c
  (lock_expired): New helper function.
  (get_lock): Use the new function.
  (struct walk_locks_baton,
   walk_digests_callback_t,
   locks_walker,
   walk_digest_files): Remove.
  (walk_locks): Inline code from locks_walker() and walk_digest_files() with
    use of new helper function.
</msg>
</logentry>
<logentry
   revision="1681994">
<author>ivan</author>
<date>2015-05-27T11:55:05.756808Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/mergeinfo.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/x509parse.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/x509info.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/temp_serializer.c
* subversion/libsvn_subr/mergeinfo.c
* subversion/libsvn_subr/x509info.c
* subversion/libsvn_subr/x509parse.c
  (svn_fs_fs__serialize_manifest, svn_fs_fs__extract_dir_entry,
   svn_x509_name_attr_dup, x509_name_to_certinfo): Use apr_pmemdup()
   instead of apr_palloc() following memcpy().
</msg>
</logentry>
<logentry
   revision="1681990">
<author>philip</author>
<date>2015-05-27T11:38:54.650569Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/lock.c</path>
</paths>
<msg>Apply FSFS lock change r1659212 to FSX.

* subversion/subversion/libsvn_fs_x/lock.c:
  (schedule_index_update): New helper function.
  (struct lock_info_t,
   struct unlock_info_t): Drop the unused fields.
  (lock_body,
   unlock_body): Rework the algorithm.
</msg>
</logentry>
<logentry
   revision="1681975">
<author>philip</author>
<date>2015-05-27T11:11:30.322208Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/locks-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/lock.c</path>
</paths>
<msg>Apply FSFS lock change r1657525 to FSX.

* subversion/subversion/libsvn_fs_x/lock.c:
  (lock_body): Move allocation from here ...
  (svn_fs_fs__lock): ... to here.
  (unlock_body): Move allocation from here ...
  (unlock_single, svn_fs_fs__unlock): ... to here.

* subversion/subversion/tests/libsvn_fs/locks-test.c
  (obtain_write_lock_failure_test): Enable for FSX.
</msg>
</logentry>
<logentry
   revision="1681974">
<author>ivan</author>
<date>2015-05-27T11:09:58.976813Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Avoid double cache lookup in FSFS in some cases.

Discussion: http://svn.haxx.se/dev/archive-2015-05/0172.shtml

* subversion/libsvn_fs_fs/cached_data.c
  (svn_fs_fs__rep_contents_dir_entry): Use get_dir_contents() function
   to read directory entries on cache miss instead of
   svn_fs_fs__rep_contents_dir() because it performs cache lookup before
   reading data from disk.
</msg>
</logentry>
<logentry
   revision="1681966">
<author>ivan</author>
<date>2015-05-27T10:57:47.892347Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/stats.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/diff_file.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/binary_diff.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/libsvn_subr/spillbuf-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/dump_editor.c</path>
</paths>
<msg>Replace some calls to svn_io_file_info_get() with svn_io_file_size_get()
where it makes sense.

* subversion/libsvn_diff/binary_diff.c
  (create_compressed): Use svn_io_file_size_get() and remove now unused
   local variable FINFO.

* subversion/libsvn_diff/diff_file.c
  (datasources_open): Use svn_io_file_size_get().

* subversion/libsvn_fs_fs/stats.c
  (get_file_size): Remove.
  (read_phys_pack_file, read_phys_revision_file): Use svn_io_file_size_get()
   instead of local helper get_file_size().

* subversion/svnrdump/dump_editor.c
  (close_file): Use svn_io_file_size_get() instead of apr_file_info_get()
   and remove some legacy error handling.

* subversion/tests/libsvn_subr/spillbuf-test.c
  (test_spillbuf__file_attrs): Use svn_io_file_size_get() instead of
   svn_io_file_info_get().
</msg>
</logentry>
<logentry
   revision="1681960">
<author>stefan2</author>
<date>2015-05-27T10:40:45.202091Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>* subversion/libsvn_subr/cache-membuffer.c
  (combine_key): Explain the rationale behind scrambling keys reversibly.
                 No functional change.

Suggested by: stsp</msg>
</logentry>
<logentry
   revision="1681954">
<author>ivan</author>
<date>2015-05-27T10:14:21.402148Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>Add new svn_io_file_size_get() function: lightweight variant of
svn_io_file_info_get() that returns only filesize of opened file.

* subversion/libsvn_subr/io.c
* subversion/include/svn_io.h
  (svn_io_file_size_get): New.

* subversion/tests/libsvn_subr/io-test.c
  (test_file_size_get): New test for svn_io_file_size_get() function.
  (test_funcs): Add test_file_size_get to test list.
</msg>
</logentry>
<logentry
   revision="1681949">
<author>stefan2</author>
<date>2015-05-27T10:07:42.144243Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/transaction.c
  (get_shared_rep): Fix typo in comment. No functional change.

Found by: julianfoad</msg>
</logentry>
<logentry
   revision="1681897">
<author>breser</author>
<date>2015-05-27T01:10:34.549634Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Fix mismatched quotes.

Found by: danielsh
</msg>
</logentry>
<logentry
   revision="1681806">
<author>ivan</author>
<date>2015-05-26T18:19:31.029378Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/diff_file.c</path>
</paths>
<msg>* subversion/libsvn_diff/diff_file.c
  (datasources_open): Reduce scope of local variable -- we don't have to
   store apr_finfo_t structure for every open datasource.
</msg>
</logentry>
<logentry
   revision="1681798">
<author>ivan</author>
<date>2015-05-26T17:42:19.450650Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_diff/binary_diff.c</path>
</paths>
<msg>* subversion/libsvn_diff/binary_diff.c
  (create_compressed): Use SVN__STREAM_CHUNK_SIZE instead of deprecated
   SVN_STREAM_CHUNK_SIZE.
</msg>
</logentry>
<logentry
   revision="1681786">
<author>breser</author>
<date>2015-05-26T16:15:04.627341Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Remove some entries from 1.9.0 that are merged on 1.8.x
</msg>
</logentry>
<logentry
   revision="1681780">
<author>breser</author>
<date>2015-05-26T15:38:50.300172Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Bring 1.9.0 entries up to date to r1681318.
</msg>
</logentry>
<logentry
   revision="1681317">
<author>danielsh</author>
<date>2015-05-23T10:52:27.241939Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
</paths>
<msg>Clarify 'svn help' output for --show-inherited-properties.

* subversion/svn/svn.c
  (svn_cl__options."show-inherited-props"): Avoid circular language.
</msg>
</logentry>
<logentry
   revision="1680819">
<author>ivan</author>
<date>2015-05-21T11:00:43.171598Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
</paths>
<msg>Prevent a possible FSFS repository corruption with power or network disk
failures when changing revision properties. Perform a hardware flush
after we finished writing to a temporary revprop file and before moving
it into place. The change doesn't affect commit operation behavior.

The corruption can be easily reproduced by triggering a power loss while
performing svnsync.

This change is somewhat similar to what we did in r1483781, but covers how
we write revision property files. See related discussion in dev@s.a.o
(Subject: "FSFS Repository corruption on high load on Windows [...] ") [1].

Patch by: me
          kotkov

[1] http://svn.haxx.se/dev/archive-2013-05/0245.shtml

* subversion/libsvn_fs_fs/revprops.c
  (repack_stream_open): Rename the function ...
  (repack_file_open): ...to this. Rework it to return files (apr_file_t)
   instead of streams.
  (repack_revprops): Work with a file instead of a stream. Flush any
   unwritten data to disk before returning.
  (write_non_packed_revprop): Flush any unwritten data to disk after
   serializing the revision property list.
  (write_packed_revprop): Cope with the changes in repack_file_open() and
   repack_revprops() that now work with files. Flush the data to disk when
   done writing to a temporary manifest file.
</msg>
</logentry>
<logentry
   revision="1680705">
<author>danielsh</author>
<date>2015-05-20T23:47:21.038859Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
</paths>
<msg>* subversion/svn/svn.c
  (svn_cl__cmd_table."propset"): Tweak the text added in r1680495.

Text by: stsp
         me
</msg>
</logentry>
<logentry
   revision="1680526">
<author>stsp</author>
<date>2015-05-20T11:28:17.483678Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Follow-up to r1680523:

* subversion/svn/conflict-callbacks.c
  (handle_tree_conflict): Output caret notation ("^/") when displaying
   source left and source right URLs. Previous code resulted in full URLs.
</msg>
</logentry>
<logentry
   revision="1680523">
<author>stsp</author>
<date>2015-05-20T11:19:56.569688Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (handle_tree_conflict): In the tree conflict menu prompt, show the
   source left and source right URLs, as shown by 'svn info'.

</msg>
</logentry>
<logentry
   revision="1680495">
<author>stsp</author>
<date>2015-05-20T09:14:41.140641Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/svn.c</path>
</paths>
<msg>Follow-up to r1678494:

* subversion/svn/svn.c
  (svn_cl__cmd_table): Extend documentation of svn:auto-props.
   Now contains all basic information neccessary for using this property
   without consulting additional documentation. Based on text from svnbook.
</msg>
</logentry>
<logentry
   revision="1680481">
<author>stefan2</author>
<date>2015-05-20T08:15:26.931475Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/svn_test_fs.c</path>
</paths>
<msg>Reduce peak memory consumption during FS-related tests, in particular
during parallel execution.

Nothing major here; just follow the common pool usage patterns.  This
also improves the signal-to-noise ratio when using the test suite to
check for pool usage issues in the FS implementations.

* subversion/tests/svn_test_fs.c
  (get_dir_entries): Properly name the pool argument and use an ITERPOOL
                     for iteration and recursion.
  (svn_test__validate_tree): Allocate everything from temporary pools as
                             we don't return anything.  Use an ITERPOOL.
  (svn_test__txn_script_exec,
   svn_test__check_greek_tree,
   svn_test__create_greek_tree_at): Use an ITERPOOL for iteration.
</msg>
</logentry>
<logentry
   revision="1680479">
<author>stefan2</author>
<date>2015-05-20T08:04:05.646623Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/svn_test_fs.c</path>
</paths>
<msg>Revert part of r1680476 that got committed accidentally.

* subversion/tests/svn_test_fs.c: revert changes.</msg>
</logentry>
<logentry
   revision="1680476">
<author>stefan2</author>
<date>2015-05-20T07:53:12.176069Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_fs.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/low_level.c</path>
</paths>
<msg>Include the revision number into FSFS format 7 footer error messages.

Contains accidental changes to subversion/tests/svn_test_fs.c, which
got reverted by 1680479.

* subversion/libsvn_fs_fs/low_level.c
  (wrap_footer_error): New utility function, replacing SVN_ERR_W in ...
  (svn_fs_fs__parse_footer): ... this one. Include the REV in the other
                             error messages as well.

* subversion/tests/svn_test_fs.c: [accidental changes].</msg>
</logentry>
<logentry
   revision="1680464">
<author>stefan2</author>
<date>2015-05-20T07:15:01.324652Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/low_level.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/low_level.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/rev_file.c</path>
</paths>
<msg>Put stricter bounds on the index offset values read by the FSFS format7
footer parser.

* subversion/libsvn_fs_fs/low_level.h
  (svn_fs_fs__parse_footer): Take the footer offset instead of the filesize.

* subversion/libsvn_fs_fs/low_level.c
  (svn_fs_fs__parse_footer): Indexes must begin before the footer and L2P
                             must precede P2L.

* subversion/libsvn_fs_fs/rev_file.c
  (svn_fs_fs__auto_read_footer): Provide footer offset.</msg>
</logentry>
<logentry
   revision="1680460">
<author>stefan2</author>
<date>2015-05-20T06:59:24.435746Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/low_level.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/rev_file.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/low_level.h</path>
</paths>
<msg>fsfs7: Validate index offsets in rev file footer.

* subversion/libsvn_fs_fs/low_level.c
  (svn_fs_fs__parse_footer): Take FILESIZE argument, use it for validation.

* subversion/libsvn_fs_fs/low_level.h
  (svn_fs_fs__parse_footer): Take FILESIZE argument.

* subversion/libsvn_fs_fs/rev_file.c
  (svn_fs_fs__auto_read_footer): Pass FILESIZE.

Patch by: danielsh</msg>
</logentry>
<logentry
   revision="1680347">
<author>ivan</author>
<date>2015-05-19T17:06:10.094436Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
</paths>
<msg>Remove unused constant definition.

* subversion/libsvn_fs_fs/revprops.c
  (REVPROP_CHANGE_TIMEOUT): Remove.
</msg>
</logentry>
<logentry
   revision="1680346">
<author>ivan</author>
<date>2015-05-19T17:00:56.561761Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Revert r1679228: using non-canonical FS path in test  was intentional for 
better test coverage.

Discussion:
http://mail-archives.apache.org/mod_mbox/subversion-dev/201505.mbox/%3C20150
517232520.GD2214%40tarsus.local2%3E
</msg>
</logentry>
<logentry
   revision="1680289">
<author>stsp</author>
<date>2015-05-19T13:44:16.740999Z</date>
<paths>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/tests/libsvn_fs</path>
</paths>
<msg>* subversion/tests/libsvn_fs: Make ignore pattern match fs-sequential-test.
</msg>
</logentry>
<logentry
   revision="1680264">
<author>rhuijben</author>
<date>2015-05-19T12:07:35.147263Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/externals_tests.py</path>
</paths>
<msg>Following up on r1680242, add regression test for issue #4580 and
the conflict url recording issue fixed in this same patch.

* subversion/tests/cmdline/externals_tests.py
  (file_external_recorded_info): New function.
  (test_list): Add file_external_recorded_info.
</msg>
</logentry>
<logentry
   revision="1680245">
<author>rhuijben</author>
<date>2015-05-19T10:59:21.634698Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_wc_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/externals.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/externals.c</path>
</paths>
<msg>Make text conflicts in file externals during update properly invoke the
interactive conflict resolver. This patch reverts r1618864 (removing the
callback arguments) and starts using the conflict resolver callback.

libsvn_client uses this callback to record that the file is conflicted
and then invokes the resolver after the update.

* subversion/include/private/svn_wc_private.h
  (svn_wc__get_file_external_editor): Revert removing arguments.

* subversion/libsvn_client/externals.c
  (svn_wc__get_file_external_editor): Update caller.

* subversion/libsvn_wc/externals.c
  (edit_baton): Re-add callback.
  (close_file): Call conflict callback, if set, and if conflicted.
  (svn_wc__get_file_external_editor): Store callback in baton.
</msg>
</logentry>
<logentry
   revision="1680242">
<author>rhuijben</author>
<date>2015-05-19T10:47:15.960242Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/externals.c</path>
</paths>
<msg>Following up on r1625522, revert the change to adding a replacement
file external and pass the proper new revision and url to the bump function
instead. Fix a few more url calculations to fix recording in conflict.

* subversion/libsvn_wc/externals.c
  (edit_baton): Store old and new repos_relpath instead of url.
  (open_file): Read old repos_relpath.
  (close_file): Record old repos_relpath in the conflict.
    Update caller.
  (close_edit): Bump the revision as pre r1625522, but pass the
    new repository info.
  (svn_wc__get_file_external_editor): Update baton init.
</msg>
</logentry>
<logentry
   revision="1679926">
<author>stefan2</author>
<date>2015-05-18T03:57:42.611888Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Complete work on the fs-test 44 issue in FSFS:
Make the last accessor - single dir entry read - handle / check the in-txn
filesize.  No access function should ever return stale dir cache entries nor
try to update them.  They may or may not get eventually overwritten with
current data or mey just be dropped.

* subversion/libsvn_fs_fs/temp_serializer.h
  (extract_dir_entry_baton_t): Declare new parameter type.
  (svn_fs_fs__extract_dir_entry): Update docstring requiring that the caller
                                  now provides a baton of the new type.

* subversion/libsvn_fs_fs/temp_serializer.c
  (svn_fs_fs__extract_dir_entry): Update. Cause a NULL / "not found" return
                                  when the cached data is stale as indicated
                                  by the file size.

* subversion/libsvn_fs_fs/cached_data.c
  (svn_fs_fs__rep_contents_dir_entry): Pass the expected filesize alongside
                                       the wanted direntry name to the getter.</msg>
</logentry>
<logentry
   revision="1679924">
<author>stefan2</author>
<date>2015-05-18T03:50:57.009298Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Continue work on the fs-test 44 issue in FSFS:
When updating the in-txn directory representation on disk, i.e. appending
to the file, update the filesize in the respective cache entry as well,
if such an entry exists.

* subversion/libsvn_fs_fs/temp_serializer.h
  (replace_baton_t): Add field to pass the new filesize to the cache
                     updater function.

* subversion/libsvn_fs_fs/temp_serializer.c
  (svn_fs_fs__replace_dir_entry): Update additional data field.

* subversion/libsvn_fs_fs/transaction.c
  (svn_fs_fs__set_entry): Provide the new file size to the updater.</msg>
</logentry>
<logentry
   revision="1679923">
<author>stefan2</author>
<date>2015-05-18T03:46:58.470081Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Continue work on the fs-test 44 issue in FSFS:
Begin work on the cache updater code.  Remove stale cache entries from cache,
i.e. those who got changed on disk by 3rd parties, from cache instead of
"updating" them.

At this point, only the updater code needs to be completed (write new file
size to cache) and the partial reader for single entries must be updated
to check for the file size by further patches.

* subversion/libsvn_fs_fs/temp_serializer.h
  (svn_fs_fs__extract_dir_filesize): Declare accessor function that reads
                                     the txn-filesize of a cached directory.

* subversion/libsvn_fs_fs/temp_serializer.c
  (svn_fs_fs__extract_dir_filesize): Implement.

* subversion/libsvn_fs_fs/transaction.c
  (svn_fs_fs__set_entry): Detect stale cache entries and remove them.</msg>
</logentry>
<logentry
   revision="1679922">
<author>stefan2</author>
<date>2015-05-18T03:36:54.663759Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>In FSFS in-txn directory update code, reorder operations to make the
next patch slightly smaller.

* subversion/libsvn_fs_fs/transaction.c
  (svn_fs_fs__set_entry): First update the on-disk representation and
                          then the cache. This will allow us to update
                          the filesize as well in later patches.
</msg>
</logentry>
<logentry
   revision="1679921">
<author>stefan2</author>
<date>2015-05-18T03:16:31.181008Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-sequential-test.c</path>
</paths>
<msg>Continue work on the fs-test 44 issue:
For full-dir access, record the in-txn filesize and check it upon access.

Later commits will address the partial read and write access.  This patch
is already enough to fix the XFAIL.

* subversion/libsvn_fs_fs/cached_data.c
  (get_txn_dir_info): New utility function.
  (get_dir_contents): Use the new function to store the filesize info
                      alongside the dir contents.
  (svn_fs_fs__rep_contents_dir): Check that the cached filesize still
                                 matches the actual.

* subversion/tests/libsvn_fs/fs-sequential-test.c
  (test_funcs): Our only test here is no longer XFAIL but should pass now.</msg>
</logentry>
<logentry
   revision="1679920">
<author>stefan2</author>
<date>2015-05-18T03:06:07.562905Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.h</path>
</paths>
<msg>Begin working on the fs-test 44 issue with FSFS:
Add an in-txn file size info to cached directories.  For that,
we simply wrap the entries array into a new struct at the cache
interface.

This patch only introduces the struct and updates the cache
access functions.  The filesize value is neither being set nor
checked at this point.

* subversion/libsvn_fs_fs/fs.h
  (svn_fs_fs__dir_data_t): New data structure.

* subversion/libsvn_fs_fs/cached_data.c
  (get_dir_contents): Return the new struct instead of the plain
                      entries array.
  (svn_fs_fs__rep_contents_dir): Update caller. Use the new struct
                                 at the cache interface.

* subversion/libsvn_fs_fs/temp_serializer.c
  (dir_data_t): Add TXN_FILESIZE element such that we can store
                all parts of the new svn_fs_fs__dir_data_t.
  (serialize_dir,
   deserialize_dir): Expect and return the new struct instead of
                     a plain dir entries array.
  (svn_fs_fs__serialize_dir_entries,
   slowly_replace_dir_entry): Update caller.

* subversion/libsvn_fs_fs/temp_serializer.h
  (svn_fs_fs__serialize_dir_entries,
   svn_fs_fs__deserialize_dir_entries): Update type in docstrings.</msg>
</logentry>
<logentry
   revision="1679909">
<author>danielsh</author>
<date>2015-05-17T23:22:03.143096Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Follow-up to r1679169: Further extend the unit test.

* subversion/tests/libsvn_fs/fs-test.c
  (noop_freeze_func): Transform into..
  (freeze_func): .. this.
  (freeze_and_commit): Incorporate a failed freeze into the test scenario.
</msg>
</logentry>
<logentry
   revision="1679908">
<author>danielsh</author>
<date>2015-05-17T23:21:39.793333Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>Relax a promise that has never been implemented.

* subversion/include/svn_fs.h
  (svn_fs_directories doxygen docstring):
    Update documentation on non-directory nodes' paths having trailing slashes.
</msg>
</logentry>
<logentry
   revision="1679907">
<author>danielsh</author>
<date>2015-05-17T23:15:22.674138Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/structure</path>
</paths>
<msg>* subversion/libsvn_fs_fs/structure:
    Restore an overview bullet that had been lost and add a brief summary
    of the indexes' interface.</msg>
</logentry>
<logentry
   revision="1679866">
<author>stefan2</author>
<date>2015-05-17T14:43:53.424319Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>* subversion/libsvn_subr/cache-membuffer.c
  (find_entry): Document mutex requirements. No functional change.

Suggested by: ivan</msg>
</logentry>
<logentry
   revision="1679864">
<author>stefan2</author>
<date>2015-05-17T14:41:10.242776Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/fnv1a.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/checksum-test.c</path>
<path
   prop-mods="false"
   text-mods="false"
   kind="file"
   action="D">/subversion/trunk/subversion/include/private/svn_pseudo_md5.h</path>
<path
   text-mods="false"
   kind="file"
   action="D"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/pseudo_md5.c</path>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/fnv1a.c</path>
</paths>
<msg>Merge the 1.9-cache-improvements branch to /trunk
with votes from Bert, Brane and Stefan2.

There were no conflicts to resolve.</msg>
</logentry>
<logentry
   revision="1679381">
<author>danielsh</author>
<date>2015-05-14T14:24:58.864657Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_cmdline_private.h</path>
</paths>
<msg>* subversion/include/private/svn_cmdline_private.h
  (svn_cmdline__parse_config_option): Update docstring to reflect merge
     of r1674301 to 1.9.x in 1679307.</msg>
</logentry>
<logentry
   revision="1679287">
<author>philip</author>
<date>2015-05-13T22:22:21.371752Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/rep-cache-db.sql</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/rep-cache.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/rep-cache.h</path>
</paths>
<msg>Followup to r1679169: port FSFS changes to FSX, skip test for BDB.

* subversion/tests/libsvn_fs/fs-test.c
  (freeze_and_commit): Skip for BDB.

* subversion/libsvn_fs_x/rep-cache.h
  (svn_fs_x__lock_rep_cache): Remove declaration.
  (svn_fs_x__with_rep_cache_lock): New declaration.

* subversion/libsvn_fs_x/rep-cache-db.sql
  (STMT_UNLOCK_REP): New statement.

* subversion/libsvn_fs_x/fs.c
  (fs_freeze_body): Unlock the rep cache after calling freeze_func().

* subversion/libsvn_fs_x/rep-cache.c
  (svn_fs_x__lock_rep_cache): Demote to a static function, renaming to..
  (lock_rep_cache): .. this.
  (unlock_rep_cache): New static function.
  (svn_fs_x__with_rep_cache_lock): New function.
</msg>
</logentry>
<logentry
   revision="1679240">
<author>kotkov</author>
<date>2015-05-13T16:54:30.833194Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnmucc_tests.py</path>
</paths>
<msg>Following up on r1658406, rework the recently added svnmucc tests.

There is a behavior change in how svnmucc processes actions, and this change
happened between 1.8.13 and 1.9.0-rc1.  Some action sequences with deletes
and moves that used to work in 1.8.13 will trigger an error in 1.9.0-rc1 and
later versions.  Based on the discussion in &lt;dev@subversion.apache.org&gt;, they
probably indicate a mistake and could lead to unexpected results for the end
user.  We now prohibit them and accept the possible incompatibility outcomes.

I turned the corresponding XFail() tests into a single passing test that
specifies the current behavior, i.e., svnmucc returning errors.  Related
discussion can be found in http://svn.haxx.se/dev/archive-2015-05/0038.shtml
(Subject: "Re: Issue 4579 / svnmucc fails to process certain deletes").

* subversion/tests/cmdline/svnmucc_tests.py:
  (modify_and_delete_file, propset_and_delete_file, delete_and_delete_file):
   Remove.  Take all the interesting command sequences and consolidate them
   in ...
  (prohibited_deletes_and_moves): ...this new test.  Populate it with a
   couple of move action sequences that we currently disallow.
  (test_list): Track the test changes.
</msg>
</logentry>
<logentry
   revision="1679230">
<author>ivan</author>
<date>2015-05-13T15:41:40.197075Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Follow-up to r1679169: Extend 'fs-test 63' test.

* subversion/tests/libsvn_fs/fs-test.c
  (freeze_and_commit): Re-open FS and make another commit.
</msg>
</logentry>
<logentry
   revision="1679228">
<author>ivan</author>
<date>2015-05-13T15:37:17.941639Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>[ Note from the future: Reverted in r1680346 ]

Follow-up to r1679269: Use canonical FS path in test.

* subversion/tests/libsvn_fs/fs-test.c
  (freeze_and_commit): Use "/" instead of "" as PATH argument for
   svn_fs_change_node_prop().
</msg>
</logentry>
<logentry
   revision="1679169">
<author>danielsh</author>
<date>2015-05-13T09:47:51.929127Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/rep-cache.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/rep-cache-db.sql</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/rep-cache.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs.c</path>
</paths>
<msg>fsfs freeze: Unlock rep-cache.db as part of unfreezing.

Without this, after calling svn_fs_freeze(fs), calling svn_fs_commit_txn() or
svn_fs_freeze() on that svn_fs_t object would fail with an SQLite error:

    subversion/tests/libsvn_fs/fs-test.c:124: (apr_err=SVN_ERR_SQLITE_ERROR)
    svn_tests: E200030: commit succeeded but something else failed
    ...
    subversion/libsvn_subr/sqlite.c:360: (apr_err=SVN_ERR_SQLITE_ERROR)
    svn_tests: E200030: sqlite[S1]: cannot start a transaction within a transaction

* subversion/tests/libsvn_fs/fs-test.c
  (freeze_and_commit): New test.
  (noop_freeze_func): New helper function.

* subversion/libsvn_fs_fs/rep-cache.h
  (svn_fs_fs__lock_rep_cache): Remove declaration.
  (svn_fs_fs__with_rep_cache_lock): New declaration.

* subversion/libsvn_fs_fs/rep-cache-db.sql
  (STMT_UNLOCK_REP): New statement.

* subversion/libsvn_fs_fs/fs.c
  (fs_freeze_body): Unlock the rep cache after calling freeze_func().

* subversion/libsvn_fs_fs/rep-cache.c
  (svn_fs_fs__lock_rep_cache): Demote to a static function, renaming to..
  (lock_rep_cache): .. this.
  (unlock_rep_cache): New static function.
  (svn_fs_fs__with_rep_cache_lock): New function.
</msg>
</logentry>
<logentry
   revision="1679166">
<author>danielsh</author>
<date>2015-05-13T09:43:28.380298Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnsync/svnsync.c</path>
</paths>
<msg>svnsync: Split --trust-server-cert-failures into separate options for the source
and destination repositories.

Suggested by: philip

* subversion/svnsync/svnsync.c
  (svnsync_opt_trust_server_cert_failures,
   svnsync_options."trust-server-cert-failures): Removed option.
  (svnsync_opt_trust_server_cert_failures_src,
   svnsync_opt_trust_server_cert_failures_dst,
   svnsync_options."source-trust-server-cert-failures",
   svnsync_options."sync-trust-server-cert-failures"): New options.
     Reflow the help text (due to the longer option name).
  (SVNSYNC_OPTS_DEFAULT, svnsync_options."trust-server-cert-failures"):
    Track option split.
  (opt_baton_t.src_trust, opt_baton_t.dst_trust): New struct members.
  (sub_main): Parse new options, use them when creating the two auth batons.
</msg>
</logentry>
<logentry
   revision="1678970">
<author>ivan</author>
<date>2015-05-12T15:13:05.065289Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Follow-up to r1564217: Remove unused constant and outdated docstring.

* subversion/libsvn_subr/cache-membuffer.c
  (ALLOCATIONS_PER_POOL_CLEAR): Remove.
</msg>
</logentry>
<logentry
   revision="1678963">
<author>ivan</author>
<date>2015-05-12T14:49:54.267876Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Follow-up to r1678950.

* subversion/libsvn_subr/cache-membuffer.c
  (combine_key): Fix condition for using key as is: combine_long_key() 
   doesn't handle 16 byte length keys.
</msg>
</logentry>
<logentry
   revision="1678950">
<author>ivan</author>
<date>2015-05-12T14:10:49.096581Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Attempt to fix cache-test#8 test failures on platforms that doesn't allow
unaligned access.

* subversion/libsvn_subr/cache-membuffer.c
  (combine_key): Do not access caller provided KEY as apr_uint64_t*. Use
   memcpy instead.
</msg>
</logentry>
<logentry
   revision="1678944">
<author>ivan</author>
<date>2015-05-12T13:32:33.677061Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/cache-test.c</path>
</paths>
<msg>Add test for accessing membuffer cache with unaligned fixed keys. The
current implementation seems to assume that fixed keys are aligned, so
the test may fail on platforms that don't allow unaligned access.

* subversion/tests/libsvn_subr/cache-test.c
  (test_membuffer_unaligned_fixed_keys): New test.
  (test_funcs): Add test_membuffer_unaligned_fixed_keys to test list.
</msg>
</logentry>
<logentry
   revision="1678933">
<author>ivan</author>
<date>2015-05-12T13:13:12.458594Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/cache-test.c</path>
</paths>
<msg>Follow-up to r1678927: Extend the test case with additional check.

* subversion/tests/libsvn_subr/cache-test.c
  (test_membuffer_unaligned_string_keys): Also check that we get proper
   result when providing aligned key.
</msg>
</logentry>
<logentry
   revision="1678927">
<author>ivan</author>
<date>2015-05-12T12:58:34.236451Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_subr/cache-test.c</path>
</paths>
<msg>Add test for accessing membuffer cache with unaligned string keys. The
current implementation doesn't seem have problems with this scenario.

* subversion/tests/libsvn_subr/cache-test.c
  (test_membuffer_unaligned_string_keys): New test.
  (test_funcs): Add test_membuffer_unaligned_string_keys to test list.
</msg>
</logentry>
<logentry
   revision="1678910">
<author>philip</author>
<date>2015-05-12T10:42:12.508916Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/basic_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_main.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/lock_tests.py</path>
</paths>
<msg>Some of the regression tests did not trust the self-signed cert
used by davautocheck when USE_SSL=1 is set.  Make the C tests
and the python httplib tests accept self-signed certs so all the
regression tests PASS.

* subversion/tests/svn_test_main.c
  (svn_test__init_auth_baton): Trust unknown-ca.

* subversion/tests/cmdline/basic_tests.py
  (plaintext_password_storage_disabled): Trust unknown-ca.

* subversion/tests/cmdline/lock_tests.py
  (http_connection): New, create connection that does not verify certs.
  (create_dav_lock_timeout, dav_lock_refresh): Use http_connection.
</msg>
</logentry>
<logentry
   revision="1678894">
<author>rhuijben</author>
<date>2015-05-12T08:39:02.686333Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cmdline.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnmucc/svnmucc.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_cmdline_private.h</path>
</paths>
<msg>Following up on r1678734, remove unneeded prefix from error message.

* subversion/include/private/svn_cmdline_private.h
* subversion/libsvn_subr/cmdline.c
  (svn_cmdline__parse_trust_options): Remove unneeded argument and usage.

* subversion/svn/svn.c
* subversion/svnbench/svnbench.c
* subversion/svnmucc/svnmucc.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (sub_main): Update caller.
</msg>
</logentry>
<logentry
   revision="1678846">
<author>danielsh</author>
<date>2015-05-12T00:42:35.267758Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/checksum.c</path>
</paths>
<msg>* subversion/libsvn_subr/checksum.c
  (svn_checksum_deserialize): Change an assertion to an error.</msg>
</logentry>
<logentry
   revision="1678839">
<author>danielsh</author>
<date>2015-05-12T00:38:34.011617Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnmucc/svnmucc.c</path>
</paths>
<msg>* subversion/svnmucc/svnmucc.c
  (help): Add missing sentence.</msg>
</logentry>
<logentry
   revision="1678755">
<author>kotkov</author>
<date>2015-05-11T13:46:28.254384Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnmucc_tests.py</path>
</paths>
<msg>Add a couple of failing tests for issue 4579: svnmucc fails to process
certain deletes.

* subversion/tests/cmdline/svnmucc_tests.py:
  (modify_and_delete_file, propset_and_delete_file, delete_and_delete_file):
   New tests, marked as XFail().
  (test_list): Add reference to new tests.
</msg>
</logentry>
<logentry
   revision="1678746">
<author>rhuijben</author>
<date>2015-05-11T12:53:08.542733Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn_help_log_switch_stdout</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svnmucc/svnmucc.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
</paths>
<msg>Following up on r1630117 and r1678734, extend --trust-server-cert-failures.

Suggested by:
  stsp
  brane

* subversion/svn/svn.c
  (svn_cl__options): Extend docs.

* subversion/svnbench/svnbench.c
  (svn_cl__options): Extend docs.

* subversion/svnmucc/svnmucc.c
  (help): Extend docs.

* subversion/svnrdump/svnrdump.c
  (svnrdump__options): Extend docs.

* subversion/svnsync/svnsync.c
  (svnsync_options): Extend docs.

* subversion/tests/cmdline/getopt_tests_data/svn_help_log_switch_stdout
  Update expected result.
</msg>
</logentry>
<logentry
   revision="1678745">
<author>philip</author>
<date>2015-05-11T12:51:49.015927Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/bash_completion</path>
</paths>
<msg>* tools/client-side/bash_completion (_svn): Update trust options.
</msg>
</logentry>
<logentry
   revision="1678742">
<author>rhuijben</author>
<date>2015-05-11T12:35:49.377093Z</date>
<paths>
<path
   text-mods="false"
   kind="file"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn--version_stdout</path>
<path
   text-mods="false"
   kind="file"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn_stdout</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn--version--verbose_stderr</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn--version--quiet_stdout</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn--help_stdout</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn_help_stdout</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn_help_bogus-cmd_stdout</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn_help--version_stdout</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn_help_log_switch_stderr</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn--version--verbose_stdout</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn--version_stderr</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn_stderr</path>
<path
   text-mods="false"
   kind="file"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn--version--quiet_stderr</path>
<path
   text-mods="false"
   kind="file"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn--help_stderr</path>
<path
   text-mods="false"
   kind="file"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn_help_stderr</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn_help_bogus-cmd_stderr</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn_help--version_stderr</path>
<path
   kind="file"
   action="M"
   prop-mods="true"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn_help_log_switch_stdout</path>
</paths>
<msg>* getopt_tests_data/svn--help_stderr
* getopt_tests_data/svn--help_stdout
* getopt_tests_data/svn--version--quiet_stderr
* getopt_tests_data/svn--version--quiet_stdout
* getopt_tests_data/svn--version--verbose_stderr
* getopt_tests_data/svn--version--verbose_stdout
* getopt_tests_data/svn--version_stderr
* getopt_tests_data/svn--version_stdout
* getopt_tests_data/svn_help--version_stderr
* getopt_tests_data/svn_help--version_stdout
* getopt_tests_data/svn_help_bogus-cmd_stderr
* getopt_tests_data/svn_help_bogus-cmd_stdout
* getopt_tests_data/svn_help_log_switch_stderr
* getopt_tests_data/svn_help_log_switch_stdout
* getopt_tests_data/svn_help_stderr
* getopt_tests_data/svn_help_stdout
* getopt_tests_data/svn_stderr
* getopt_tests_data/svn_stdout
  (svn:eol-style): Set to LF to avoid problems like r1678734.</msg>
</logentry>
<logentry
   revision="1678740">
<author>rhuijben</author>
<date>2015-05-11T12:22:33.720836Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/config_file.c</path>
</paths>
<msg>* subversion/libsvn_subr/config_file.c
  (svn_config_ensure):
     Following up on r1678739, remove more references to neon.
</msg>
</logentry>
<logentry
   revision="1678739">
<author>rhuijben</author>
<date>2015-05-11T12:19:58.766142Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/config_file.c</path>
</paths>
<msg>* subversion/libsvn_subr/config_file.c
  (svn_config_ensure): Remove long outdated comment line.
</msg>
</logentry>
<logentry
   revision="1678734">
<author>rhuijben</author>
<date>2015-05-11T11:56:46.407442Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/getopt_tests_data/svn_help_log_switch_stdout</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnmucc/svnmucc.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_cmdline_private.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/cmdline.c</path>
</paths>
<msg>Following up on an irc discussion integrate the --trust-unknown-ca,
--trust-cn-mismatch, --trust-expired, --trust-not-yet-valid and
--trust-other-failure commandline options of svn, svnbench, svnmucc,
svnrdump and svnsync into a new --trust-server-cert-failures option
with arguments that specify which error will be ignored.

This patch is based on an initial (much smaller)
Patch by: danielsh

This patch should be released in 1.9.0 or at least partially reverted.

* subversion/include/private/svn_cmdline_private.h
  (svn_cmdline__parse_trust_options): New function.

* subversion/libsvn_subr/cmdline.c
  (svn_cmdline__parse_trust_options): New function.

* subversion/svn/svn.c
  (svn_cl__longopt_t): Tweak options.
  (svn_cl__options): Update definition and documentation.
  (svn_cl__global_options): Update.
  (sub_main): Use new api. Tweak error.

* subversion/svnbench/svnbench.c
  (svn_cl__longopt_t): Tweak options.
  (svn_cl__options): Update definition and documentation.
  (svn_cl__global_options): Update.
  (sub_main): Use new api. Tweak error.

* subversion/svnmucc/svnmucc.c
  (help): Update documentation.
  (sub_main): Tweak options, definition and usage.

* subversion/svnrdump/svnrdump.c
  (svn_svnrdump__longopt_t,
   SVN_SVNRDUMP__BASE_OPTIONS): Tweak options.
  (svnrdump__options): Update definition and documentation.
  (sub_main): Use new api. Tweak error.

* subversion/svnsync/svnsync.c
  (svnsync__opt,
   SVNSYNC_OPTS_DEFAULT): Tweak options.
  (svnsync_options): Update definition and documentation.
  (sub_main): Use new api. Tweak error.

* subversion/tests/cmdline/getopt_tests_data/svn_help_log_switch_stdout
  Update expected output.
</msg>
</logentry>
<logentry
   revision="1678728">
<author>stsp</author>
<date>2015-05-11T11:30:39.611436Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/svn_error.h</path>
</paths>
<msg>* subversion/include/svn_error.h
  (svn_error_quick_wrap): Document behaviour if child is SVN_NO_ERROR.

Suggested by: rhuijben
</msg>
</logentry>
<logentry
   revision="1678726">
<author>stsp</author>
<date>2015-05-11T11:19:15.456244Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_error.h</path>
</paths>
<msg>* subversion/include/svn_error.h
  (svn_error_quick_wrap, svn_error_quick_wrapf): Fix misleading docstrings.
</msg>
</logentry>
<logentry
   revision="1678725">
<author>stsp</author>
<date>2015-05-11T11:13:59.449576Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/recovery.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Revert r1678151. I misunderstood the quick_wrap API, believing it
simply replaced the original error's message, but in fact it creates
a new error chained with the error passed in.

Found by: rhuijben
</msg>
</logentry>
<logentry
   revision="1678718">
<author>rhuijben</author>
<date>2015-05-11T10:42:33.711588Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/lock.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/recovery.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>In fsfs: compose some possible errors in cases where we return an error
anyway, instead of just clearing errors for the recovery code path.

* subversion/libsvn_fs_fs/cached_data.c
  (svn_fs_fs__get_proplist): Compose errors.

* subversion/libsvn_fs_fs/lock.c
  (write_digest_file): Compose errors.

* subversion/libsvn_fs_fs/recovery.c
  (recover_find_max_ids): Compose errors.

* subversion/libsvn_fs_fs/transaction.c
  (get_txn_proplist): Compose errors.
</msg>
</logentry>
<logentry
   revision="1678571">
<author>danielsh</author>
<date>2015-05-10T15:54:22.590885Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cmdline.c</path>
</paths>
<msg>* subversion/libsvn_subr/cmdline.c
  (trust_server_cert_non_interactive): Fix false-positive acceptance of
    certificates with multiple failures of which some but not all were
    designated acceptable.</msg>
</logentry>
<logentry
   revision="1678497">
<author>danielsh</author>
<date>2015-05-09T15:11:59.828900Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cmdline.c</path>
</paths>
<msg>* subversion/libsvn_subr/cmdline.c
  (validate_config_option): Fix docstring.  No functional change.</msg>
</logentry>
<logentry
   revision="1678494">
<author>danielsh</author>
<date>2015-05-09T15:06:50.958129Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
</paths>
<msg>* subversion/svn/svn.c
  (svn_cl__cmd_table."propset"): Document svn:auto-props.</msg>
</logentry>
<logentry
   revision="1678151">
<author>stsp</author>
<date>2015-05-07T09:48:25.218705Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/recovery.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
</paths>
<msg>[ Note from the future: Reverted in r1678725 ]

Follow-up to r1678150:

* subversion/libsvn_fs_fs/cached_data.c
  (svn_fs_fs__get_proplist): Don't quick-wrap hash parsing errors but add an
   error to the chain. This way, the hash parser's error message is preserved.

* subversion/libsvn_fs_fs/fs_fs.c
  (get_node_origins_from_file): Likewise.

* subversion/libsvn_fs_fs/recovery.c
  (recover_find_max_ids): Likewise.

* subversion/libsvn_fs_fs/transaction.c
  (get_txn_proplist): Likewise.
</msg>
</logentry>
<logentry
   revision="1678149">
<author>stsp</author>
<date>2015-05-07T09:22:50.583303Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/recovery.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
</paths>
<msg>Provide more detailed error messages when FSFS fails to parse a hash.

These error conditions used to return generic hash parsing failure
messages which makes it hard to see what's going on.

* subversion/libsvn_fs_fs/cached_data.c
  (svn_fs_fs__get_proplist): Wrap errors returned by svn_hash_read2().
   Show parsed file name and/or node-revision id if applicable.

* subversion/libsvn_fs_fs/fs_fs.c
  (get_node_origins_from_file): Likewise.

* subversion/libsvn_fs_fs/recovery.c
  (recover_find_max_ids): Likewise.

* subversion/libsvn_fs_fs/transaction.c
  (get_txn_proplist): Likewise.
</msg>
</logentry>
<logentry
   revision="1678147">
<author>stsp</author>
<date>2015-05-07T08:54:59.461043Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/hash.c</path>
</paths>
<msg>Provide slightly more specific error messages when parsing hashes.

* subversion/libsvn_subr/hash.c
  (svn_hash__read_entry): In error messages, hint at which part of the
   serialized hash failed to parse, rather than using the same error
   message in all failure cases. Fix typo in comment while here.
</msg>
</logentry>
<logentry
   revision="1678004">
<author>philip</author>
<date>2015-05-06T14:22:51.856626Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build.conf</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   copyfrom-path="/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c"
   copyfrom-rev="1677901"
   action="A">/subversion/trunk/subversion/tests/libsvn_fs/fs-sequential-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Move the XFAIL reopen_modify test to a separate executable where it
can be run sequentially so that other tests do not affect its use of
the FSFS cache.

* build.conf
  (fs-test): Tweak description.
  (fs-sequential-test): New.
  (__ALL_TESTS__): Add fs-sequential-test.

* subversion/tests/libsvn_fs/fs-sequential-test.c: New.

* subversion/tests/libsvn_fs/fs-test.c
  (struct reopen_modify_baton_t,
   reopen_modify_child, reopen_modify): Remove.
</msg>
</logentry>
<logentry
   revision="1677440">
<author>stefan2</author>
<date>2015-05-03T16:28:27.505992Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/checksum-test.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/checksum.c</path>
</paths>
<msg>Add checksum (de-)serialization support for the new FVN1* checksums
types introduced in 1.9.  Also, provide a test case for those APIs.

Right now, we don't use these functions within SVN but they are part
of our public API.  We want them to be functionally complete.

* subversion/libsvn_subr/checksum.c
  (ckind_str): New array of constants.
  (svn_checksum_serialize,
   svn_checksum_deserialize): Use the new array to generically
                              de-/serialize checksums.

* subversion/tests/libsvn_subr/checksum-test.c
  (test_serialization): New test case.
  (test_funcs): Register new test.</msg>
</logentry>
<logentry
   revision="1677431">
<author>stefan2</author>
<date>2015-05-03T16:03:13.489267Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Follow-up to r1674673: Correct commentary.  No functional change.

* subversion/libsvn_fs_fs/transaction.c
  (get_shared_rep): Erroring out does only terminate the request
                    not the whole server process.</msg>
</logentry>
<logentry
   revision="1677364">
<author>brane</author>
<date>2015-05-03T02:51:46.007960Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/jniwrapper/jni_base.cpp</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/jniwrapper/jni_globalref.hpp</path>
</paths>
<msg>Make the JavaHL global reference wrapper self-contained.

[in subversion/bindings/javahl/native]
* jniwrapper/jni_base.cpp
  (GlobalObject::operator=,
   GlobalObject::~GlobalObject,
   GlobalClass::operator=): Remove out-of-line implementations.
* jniwrapper/jni_globalref.hpp: Include &lt;memory&gt;.
  (GlobalObject::operator=,
   GlobalObject::~GlobalObject,
   GlobalClass::operator=): Add inline implementations.
  (GlobalObject::get, GlobalClass::get): Tag as nothrow.
</msg>
</logentry>
<logentry
   revision="1677275">
<author>brane</author>
<date>2015-05-02T06:01:23.309571Z</date>
<paths>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk</path>
</paths>
<msg>Ignore IntelliJ IDEA and PyCharm turds.

* .: Update the svn:ignore property to ignore the .idea directory.
</msg>
</logentry>
<logentry
   revision="1677273">
<author>brane</author>
<date>2015-05-02T04:25:36.335084Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/configure.ac</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra/ra_loader.c</path>
</paths>
<msg>Support the --enable-runtime-module-search configure option on Mac OS X.

OSX shared libraries have a MAJOR.SOVERSION.dylib suffix instead of the
MAJOR.so.SOVERSION more common on ELF platforms.

* configure.ac (SVN_DSO_SUFFIX_FMT): New platform-specific variable.

* subversion/libsvn_fs/fs-loader.c (load_module),
* subversion/libsvn_ra/ra_loader.c (load_ra_module):
   Use SVN_DSO_SUFFIX_FMT to construct the library name.
</msg>
</logentry>
<logentry
   revision="1677267">
<author>stefan2</author>
<date>2015-05-02T02:01:29.051150Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c</path>
</paths>
<msg>Provide a regression test for issue #4577.

* subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c
  (delta_chain_with_plain): New test.
  (test_funcs): Register new test.</msg>
</logentry>
<logentry
   revision="1677191">
<author>philip</author>
<date>2015-05-01T17:26:06.057767Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_local/ra_plugin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_subr_private.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/dso.c</path>
</paths>
<msg>Fix a client SEGV with ra-local and --enable-runtime-module-search.
When DSO loading is enabled ra-local must pass a pool with an
appropriate lifetime to svn_fs_initialize.

* subversion/include/private/svn_subr_private.h
  (svn_dso__pool): New.

* subversion/libsvn_subr/dso.c
  (svn_dso__pool): New.

* subversion/libsvn_ra_local/ra_plugin.c
  (svn_ra_local__init): Use svn_dso__pool.
</msg>
</logentry>
<logentry
   revision="1677003">
<author>brane</author>
<date>2015-04-30T14:23:36.419474Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/bindings/javahl/README</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/configure.ac</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/ac-macros/java.m4</path>
</paths>
<msg>Bump required JDK version for JavaHL to 1.6.

* configure.ac (JAVA_OLDEST_WORKING_VER): Set to 1.6.
* build/ac-macros/java.m4 (SVN_FIND_JDK): Set Java source version to 1.6.
* subversion/bindings/javahl/README:
   Update JDK and C++ version requirements. Update the rest of the
   doc to match the current state of JavaHL.
</msg>
</logentry>
<logentry
   revision="1676875">
<author>danielsh</author>
<date>2015-04-29T22:35:57.743838Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES (1.9.0): Typo fix.</msg>
</logentry>
<logentry
   revision="1676769">
<author>brane</author>
<date>2015-04-29T15:30:54.548179Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/CreateJ.cpp</path>
</paths>
<msg>Fix another silly memory leak in JavaHL.
This time, we forgot to close off a JNI frame.

* subversion/bindings/javahl/native/CreateJ.cpp
  (fill_property_map): Delete the local reference to the object
   returned from HashMap.put and pop the local JNI frame at the
   end of the function.
</msg>
</logentry>
<logentry
   revision="1676680">
<author>brane</author>
<date>2015-04-29T06:57:35.014715Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/ac-macros/java.m4</path>
</paths>
<msg>Drop support for using Jikes to compile JavaHL.
The Jikes project is essentially dead.

* build/ac-macros/java.m4
  (SVN_FIND_JDK): Remove the code that handled Jikes support,
   but keep the --with-jikes option for backward compatiblity.
</msg>
</logentry>
<logentry
   revision="1676667">
<author>stefan2</author>
<date>2015-04-29T04:51:46.183033Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>In FSFS, fix the delta combining code for the case that the delta chain
starts with a PLAIN rep and some DELTA rep in the chain has 0 source ops,
i.e. is "all new contents".

From 1.7 and earlier, we carried over an optimization that stops walking
the delta chain when a delta window would use any string from the older
delta window.  If the delta chain starts with an PLAIN rep, the new 1.8
code assumed that not having read a base rep implies that we need to read
said PLAIN rep.  However, in case of the short-cut kicking in, it would
wrongly read the omitted DELTA rep as PLAIN rep of fulltext window size.
The result would not be used (SCR_OPS=0) but the read may be beyond EOF,
triggering an I/O error.

So, this fixes a data re-construction bug, not a repo corruption.

* subversion/libsvn_fs_fs/cached_data.c
  (get_combined_window): Don't attempt to read the source window if we
                         already decided that we don't need it.

Reported by: rschupp</msg>
</logentry>
<logentry
   revision="1676665">
<author>brane</author>
<date>2015-04-29T04:39:19.206291Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/ISVNClient.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/SVNClient.java</path>
</paths>
<msg>Fix issue #4575: Wrong default for 1.8-compatilble wrapper of ISVNClient#cleanup(String)

This change makes the JavaHL compatibility wrapper for
svn_client_cleanup behave in the same way as the native function.

[in subversion/bindings/javahl/src/org/apache/subversion/javahl]
* ISVNClient.java
  (ISVNClient.cleanup): Fix documentation of the compatibility wrapper.
* SVNClient.java
  (SVNClient.cleanup): Default is to break locks.
</msg>
</logentry>
<logentry
   revision="1676570">
<author>brane</author>
<date>2015-04-28T15:47:19.193126Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/copy.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_client/client-test.c</path>
</paths>
<msg>Follow up to r1676538: Instead of comparing property values before and
after pinning, which may be prone to false positives due to whitespace
-only changes, track what we actually pinned to decide if an externals
property needs changing.

* subversion/libsvn_client/copy.c
  (pin_externals_prop): Return NULL instead of a property value if
   none of the externals definitions were changed in this function.
   Update docstring accordingly.
  (resolve_pinned_externals): Use the hint from pin_externals_prop
   to avoid making no-op property changes.

* subversion/tests/libsvn_client/client-test.c
  (test_copy_pin_externals_select_subtree): Tweak the test to check
   that we're not making any whitespace-only changes to unpinned
   externals.
</msg>
</logentry>
<logentry
   revision="1676564">
<author>brane</author>
<date>2015-04-28T15:26:27.007976Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/remote/StatusEditor.java</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/NativeStream.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/NativeStream.hpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/EditorProxy.cpp</path>
</paths>
<msg>Make JNI reference handling more robust in RA status callbacks.

This is a follow-up to r1675771.

* subversion/bindings/javahl/native/EditorProxy.cpp
  (EditorProxy::cb_add_directory,
   EditorProxy::cb_add_file,
   EditorProxy::cb_add_symlink,
   EditorProxy::cb_add_absent,
   EditorProxy::cb_alter_directory,
   EditorProxy::cb_alter_file,
   EditorProxy::cb_alter_symlink,
   EditorProxy::cb_delete,
   EditorProxy::cb_copy,
   EditorProxy::cb_move,
   EditorProxy::cb_complete,
   EditorProxy::cb_abort): Use a managed local JNI frame in callbacks.

* subversion/bindings/javahl/native/NativeStream.hpp
  (NativeInputStream::get_self_unsafe,
   NativeOutputStream::get_self_unsafe): New.
* subversion/bindings/javahl/native/NativeStream.cpp
  (NativeInputStream::get_self_unsafe,
   NativeOutputStream::get_self_unsafe): Implement.
  (Java_org_apache_subversion_javahl_types_NativeInputStream_finalize,
   Java_org_apache_subversion_javahl_types_NativeOutputStream_finalize):
   Implement missing finalizer methods.
* subversion/bindings/javahl/src/org/apache/subversion/javahl/remote/StatusEditor.java
  (StatusEditor.addFile): Check contents stream for null before closing.
</msg>
</logentry>
<logentry
   revision="1676555">
<author>philip</author>
<date>2015-04-28T15:02:00.982875Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/remote/StatusEditor.java</path>
</paths>
<msg>[in subversion/bindings/javahl]
* src/org/apache/subversion/javahl/remote/StatusEditor.java
  (StatusEditor.alterFile): Avoid null pointer exception when content is null.
</msg>
</logentry>
<logentry
   revision="1676538">
<author>stsp</author>
<date>2015-04-28T14:05:24.731994Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/copy.c</path>
</paths>
<msg>Prevent no-op property changes during svn copy --pin-externals.

Externals properties were reported as changed in 'svn log -v' even if their
content didn't change during pinning.

* subversion/libsvn_client/copy.c
  (resolve_pinned_externals): Return only pinned externals, rather than
   returning a full list of new externals including non-pinned ones.

Found by: Marc Strapetz &lt;marc.strapetz@syntevo.com&gt;
</msg>
</logentry>
<logentry
   revision="1676535">
<author>ivan</author>
<date>2015-04-28T13:45:42.437238Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
</paths>
<msg>Follow-up to r1676526: Close install_stream in test.

* subversion/tests/libsvn_subr/io-test.c
  (test_install_stream_to_longpath): Close stream before calling
   svn_stream__install_stream().
</msg>
</logentry>
<logentry
   revision="1676526">
<author>ivan</author>
<date>2015-04-28T13:01:21.519083Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
</paths>
<msg>Fix working copy operations (checkout, update) with very long path names 
on Windows.

* subversion/libsvn_subr/stream.c
  (svn_stream__install_stream): Use svn_io__utf8_to_unicode_longpath()
   instead of svn_utf__win32_utf8_to_utf16 to get Windows path.

* subversion/tests/libsvn_subr/io-test.c
  (): Include svn_io.h and svn_io_private.h.
  (test_install_stream_to_longpath): New test for svn_stream__install_* with
   very long path names.
  (test_funcs): Add new test.
</msg>
</logentry>
<logentry
   revision="1675774">
<author>brane</author>
<date>2015-04-24T04:43:37.439831Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/ac-macros/java.m4</path>
</paths>
<msg>Be smarter about finding the JDK on OSX.

Without this change, we'll tend to find original 1.6 JDK on newer
versions of OSX instead of the latest and/or default.

* build/ac-macros/java.m4
  (SVN_FIND_JDK): Check the output of the /usr/libexec/java_home
   program that's the canonical way of locating the JDK on OSX.
</msg>
</logentry>
<logentry
   revision="1675771">
<author>brane</author>
<date>2015-04-24T04:29:50.320080Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/remote/StatusEditor.java</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/ISVNEditor.java</path>
</paths>
<msg>Fix a really nifty native memory leak in the JavaHL status editor.

[in subversion/bindings/javahl/src]
* org/apache/subversion/javahl/ISVNEditor.java
  (ISVNEditor.addFile, ISVNEditor.alterFile): Document that the contents
   stream must be closed by the implementation.
* org/apache/subversion/javahl/remote/StatusEditor.java
  (StatusEditor.addFile, StatusEditor.alterFile): Close the contents
   stream, otherwise the Java object will be garbage-collected, but
   the underlying native C++ object will never be destroyed.
</msg>
</logentry>
<logentry
   revision="1675604">
<author>ivan</author>
<date>2015-04-23T13:08:13.578441Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/config_win.c</path>
</paths>
<msg>Small refactoring. No functional changes.

* subversion/libsvn_subr/config_win.c
  (svn_config__parse_registry): Use separate if statement instead of nested
   ternary operator.
</msg>
</logentry>
<logentry
   revision="1675396">
<author>brane</author>
<date>2015-04-22T15:56:07.933602Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/transaction.c
  (get_shared_rep): Fix invalid printf format.
</msg>
</logentry>
<logentry
   revision="1675146">
<author>breser</author>
<date>2015-04-21T16:06:15.215222Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Bring 1.9.0 changes up to date with 1.9.x branch.
</msg>
</logentry>
<logentry
   revision="1675117">
<author>rhuijben</author>
<date>2015-04-21T13:35:08.688409Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/win-tests.py</path>
</paths>
<msg>* win-tests.py
  Add support for optionally starting and stopping memcached, like how
  win-test already supports this for httpd.
</msg>
</logentry>
<logentry
   revision="1675099">
<author>rhuijben</author>
<date>2015-04-21T11:47:33.634835Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/win-tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/cache-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_main.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test.h</path>
</paths>
<msg>Make it a bit easier to test the memcached support from the cache C tests
and fix a few Windows testsuite runner problems in recent changes.

* build/run_tests.py
  (_run_c_test): Pass --memcached-server if available.

* subversion/tests/libsvn_subr/cache-test.c
  (create_memcache): New function.
  (test_memcache_basic,
   test_memcache_long_key): Use create_memcache.

* subversion/tests/svn_test.h
  (svn_test_opts_t): Add option.

* subversion/tests/svn_test_main.c
  (test_options_e): Add value.
  (cl_options): Declare option.
  (svn_test_main): Parse option.

* win-tests.py
  (): Following up on r1674783, add missing ',' to separate arguments
      and parse the right argument names.
</msg>
</logentry>
<logentry
   revision="1674894">
<author>julianfoad</author>
<date>2015-04-20T14:48:04.639034Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/ac-macros/swig.m4</path>
</paths>
<msg>* build/ac-macros/swig.m4
  (SVN_FIND_SWIG): In a comment, remove a mention of obsolete files.</msg>
</logentry>
<logentry
   revision="1674891">
<author>breser</author>
<date>2015-04-20T14:46:12.824805Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/INSTALL</path>
</paths>
<msg>* subversion/bindings/swig/INSTALL: Update to mention not to use 3.0.0 or newer.
</msg>
</logentry>
<logentry
   revision="1674785">
<author>rhuijben</author>
<date>2015-04-20T10:34:52.445456Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/generator/gen_win_dependencies.py</path>
</paths>
<msg>* build/generator/gen_win_dependencies.py
  (_find_apr_util_etc): Following up on r1674626, remove unneeded libname
    definition. Users already depend on apr-util.
</msg>
</logentry>
<logentry
   revision="1674783">
<author>rhuijben</author>
<date>2015-04-20T10:28:19.165161Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/win-tests.py</path>
</paths>
<msg>* win-tests.py
  Add support for the --exclusive-wc-locks, --memcached-server, --skip-c-tests
  and --dump-load-cross-check arguments to the Windows test runner. This just
  handles the arguments as the testrunner already implemented support for all
  of these.
</msg>
</logentry>
<logentry
   revision="1674673">
<author>stefan2</author>
<date>2015-04-19T19:10:39.082521Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Issue a warning when we had a rep-cache hit on SHA1 but
the fulltext sizes don't match (likely corruption).

Completely halting service by returning an error seems
inappropriate b/c we know how to handle the situation
gracefully and an admin may not always be available to
fix the problem in a timely manner.  Repeated attempts
on committing the "offending" change would likely tigger
the error over and over again.

* subversion/libsvn_fs_fs/transaction.c
  (get_shared_rep): Log the details of the mismatch.

Suggested by: julianfoad</msg>
</logentry>
<logentry
   revision="1674669">
<author>stefan2</author>
<date>2015-04-19T19:02:59.336623Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Follow-up on r1674341:
Make sure the new REPs have already been sufficiently initialized before
comparing them with rep-cache.db contents.  Moreover, the fixup code needs
to handle missing MD5 digests in reps because the rep cache does not store
those.

* subversion/libsvn_fs_fs/cached_data.c
  (svn_fs_fs__fixup_expanded_size): Only claim a MD5 mismatch if the digest
                                    was acually given.  Fall back to SHA1
                                    if available.

* subversion/libsvn_fs_fs/transaction.c
  (write_container_rep,
   write_container_delta_rep): Make sure the EXPANDED_SIZE element has been
                               initialized before comparing it.
</msg>
</logentry>
<logentry
   revision="1674631">
<author>stefan2</author>
<date>2015-04-19T15:26:43.992410Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Fix a handful of docco issues. No functional change.

* subversion/libsvn_fs_fs/cached_data.c
  (get_combined_window): Reference the right parameter in docstring.

* subversion/libsvn_fs_fs/transaction.c
  (rep_write_get_baton): Use the correct variable name in docstring.
  (get_shared_rep): Typo in comment.

Found by: julianfoad</msg>
</logentry>
<logentry
   revision="1674627">
<author>stsp</author>
<date>2015-04-19T14:58:57.782526Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
</paths>
<msg>Put jcorvel's workaround for issue #4531 into mod_dav_svn's implementation.

* subversion/mod_dav_svn/repos.c
  (get_resource): Set a Depth header with value "0" on copy requests.
   This prevents mod_dav's precondition check from recursing over the copy
   source tree and thus restores O(1) behaviour for 'svn copy' with current
   httpd releases.
   The alternative of patching mod_dav was also considered but has been
   dismissed. Ideally, there would be an API between mod_dav and its
   providers to enable/disable the precondition tree walk.

Patch by: me
          gstein
</msg>
</logentry>
<logentry
   revision="1674626">
<author>rhuijben</author>
<date>2015-04-19T14:31:48.600632Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/generator/gen_win_dependencies.py</path>
</paths>
<msg>On Windows: enable detecting memcache support from apr-util 1.3 or later.

* build/generator/gen_win_dependencies.py
  (find_libraries): Update caller.
  (_find_apr_util_and_expat): Rename to...
  (_find_apr_util_etc): ... this. Declare availability of memcache support
    when we have apr-util 1.3 or later.
</msg>
</logentry>
<logentry
   revision="1674624">
<author>rhuijben</author>
<date>2015-04-19T13:22:15.848419Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/win-tests.py</path>
</paths>
<msg>* win-tests.py
  (start): Add an stdout, stderr fflush to avoid the output of htpasswd being
    shown sometime after starting the first test.
</msg>
</logentry>
<logentry
   revision="1674621">
<author>rhuijben</author>
<date>2015-04-19T13:10:30.073034Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/generator/templates/vcnet_vcxproj.ezt</path>
</paths>
<msg>Following up on r1674615, turn warning C4133
'type' : incompatible types - from 'type1' to 'type2'
into an error when compiling with Visual C++.

* generator/templates/vcnet_vcxproj.ezt
  (TreatSpecificWarningsAsErrors): Add 4133.
</msg>
</logentry>
<logentry
   revision="1674615">
<author>rhuijben</author>
<date>2015-04-19T12:16:05.042278Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/diff_editor.c</path>
</paths>
<msg>* subversion/libsvn_wc/diff_editor.c
  (open_directory): Following up on r1674607, pass wc_db instead of dir baton.
</msg>
</logentry>
<logentry
   revision="1674613">
<author>rhuijben</author>
<date>2015-04-19T12:09:55.331920Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/switch_tests.py</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/update_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/checkout_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnsync_authz_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Avoid raising skip exceptions without description in the python tests.

* subversion/tests/cmdline/checkout_tests.py
  (checkout_wc_from_drive): Use @SkipUnless instead of code.
    Add explanation.

* subversion/tests/cmdline/svnadmin_tests.py
  (verify_incremental_fsfs): Add explanation.

* subversion/tests/cmdline/svnsync_authz_tests.py
  (identity_copy): Add explanation.

* subversion/tests/cmdline/switch_tests.py
  (refresh_read_only_attribute): Add explanation.

* subversion/tests/cmdline/update_tests.py
  (update_wc_on_windows_drive): Use @SkipUnless instead of code.
    Add explanation.
  (skip_access_denied): Add explanation.
</msg>
</logentry>
<logentry
   revision="1674607">
<author>rhuijben</author>
<date>2015-04-19T11:48:39.521424Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/diff_tests.py</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_wc/diff_editor.c</path>
</paths>
<msg>Make svn diff -r HEAD path use the right set of properties when the local
directory is marked incomplete.

* subversion/libsvn_wc/diff_editor.c
  (dir_baton): Add is_incomplete.
  (open_directory): Initialize is_incomplete.
  (close_directory): Only use provided properties if is_incomplete.

* subversion/tests/cmdline/diff_tests.py
  (diff_incomplete_props): New test.
  (test_list): Add diff_incomplete_props.
</msg>
</logentry>
<logentry
   revision="1674602">
<author>rhuijben</author>
<date>2015-04-19T10:40:17.376803Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/diff_tests.py</path>
</paths>
<msg>Following up on r1674600, avoid testing the same thing twice and
add a few more edge cases.

* subversion/tests/cmdline/diff_tests.py
  (diff_incomplete): Extend test.
</msg>
</logentry>
<logentry
   revision="1674600">
<author>rhuijben</author>
<date>2015-04-19T10:24:15.036993Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/diff_local.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/diff_tests.py</path>
</paths>
<msg>Following up on r1674413 and a few more recent incomplete fixes, handle
incomplete like status normal in a few more local diff cases.

Note that this patch depends on the copy fix in r1674455, because that fixes
the issue I found while writing the original version of this test.

* subversion/libsvn_wc/diff_local.c
  (diff_status_callback): Handle db status incomplete like db status normal.

* subversion/tests/cmdline/diff_tests.py
  (diff_incomplete): New regression test.
  (test_list): Add diff_incomplete.
</msg>
</logentry>
<logentry
   revision="1674582">
<author>breser</author>
<date>2015-04-18T20:42:27.593705Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dist/release.py</path>
</paths>
<msg>* tools/dist/release.py
  (tool_versions): Lower SWIG back to 2.0.12.
</msg>
</logentry>
<logentry
   revision="1674580">
<author>breser</author>
<date>2015-04-18T20:40:45.251677Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/ac-macros/swig.m4</path>
</paths>
<msg>* build/ac-macros/swig.m4:
  (SVN_FIND_SWIG): Update version warning on SWIG to complain about 3.0.0 and
    newer.
</msg>
</logentry>
<logentry
   revision="1674541">
<author>brane</author>
<date>2015-04-18T17:01:48.042175Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/StateReporter.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/StateReporter.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/EditorProxy.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/RemoteSession.cpp</path>
</paths>
<msg>In JavaHL, use a standard smart pointer to control the status editor proxy
instead of relying on manual cleanup.

[in subversion/bindings/javahl/native]
* EditorProxy.h: Include &lt;memory&gt;.
  (EditorProxy::UniquePtr): New typedef.
* RemoteSession.cpp
  (RemoteSession::status): Use the new typedef instead of std:auto_ptr.
* StateReporter.h
  (StateReporter): Use the new typedef instead of a raw pointer.
  (StateReporter::set_reporter_data): Likewise.
* StateReporter.cpp
  (StateReporter::~StateReporter): Remove raw pointer deletion.
  (StateReporter::set_reporter_data): Update.
</msg>
</logentry>
<logentry
   revision="1674522">
<author>rhuijben</author>
<date>2015-04-18T14:54:33.294284Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/upgrade_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/wc.py</path>
</paths>
<msg>Make pythons linked against an old sqlite3 version skip the tests that would
fail because python can't read wc.db.

* subversion/tests/cmdline/svntest/wc.py
  (python_sqlite_can_read_wc): Add test function.

* subversion/tests/cmdline/upgrade_tests.py
  (auto_analyze): Add annotation.
</msg>
</logentry>
<logentry
   revision="1674508">
<author>rhuijben</author>
<date>2015-04-18T13:29:52.396796Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/win-tests.py</path>
</paths>
<msg>* win-tests.py
  (_create_users_file): Following up on r1657307, add new standard user.
</msg>
</logentry>
<logentry
   revision="1674487">
<author>brane</author>
<date>2015-04-18T12:14:34.129286Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Follow up to r1667699 and r1667700: Revert to using a stack-based array
instead of a heap-allocated array, but do make sure that the calculated
array size is both sufficiently large and a compile-time constant.

* subversion/svn/conflict-callbacks.c
  (MAX_ARRAY_LEN): New macro; expands to a compile-time constant
   whose value is the larger of two array sizes.
  (handle_text_conflict): Allocate the 'options' array on the stack.
</msg>
</logentry>
<logentry
   revision="1674475">
<author>rhuijben</author>
<date>2015-04-18T09:57:40.851357Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnsync/svnsync.c</path>
</paths>
<msg>Following up on r1674301, improve the warning message produced on passing
an invalid configuration option for svnbench and svnsync.

Patch by: danielsh

* subversion/svnbench/svnbench.c
* subversion/svnsync/svnsync.c
  (sub_main): Update application name prefix.
</msg>
</logentry>
<logentry
   revision="1674456">
<author>rhuijben</author>
<date>2015-04-18T08:39:07.743138Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/copy_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/copy_tests.py
  (resurrect_at_root): Following up on r1674455, fix indentation.
</msg>
</logentry>
<logentry
   revision="1674455">
<author>rhuijben</author>
<date>2015-04-18T08:37:22.827407Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/copy.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/copy_tests.py</path>
</paths>
<msg>Fix a long-time issue where the operation
$ svn rm ^/A -m ""
$ svn cp ^/A/D/H@1 ^/A -m ""
fails with an error noting that the path above the repository root is not in
the same repository as the paths inside because the common root is calculated
in the wrong way.

* subversion/libsvn_client/copy.c
  (repos_to_repos_copy): Properly calculate the new top_directory instead
    of taking the ancestor of whatever we already have.

* subversion/tests/cmdline/copy_tests.py
  (resurrect_at_root): New regression test.
  (test_list): Add resurrect_at_root.
</msg>
</logentry>
<logentry
   revision="1674415">
<author>stsp</author>
<date>2015-04-17T23:04:41.679499Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_client/client-test.c</path>
</paths>
<msg>Add a C regression test for issue #4560.

* subversion/tests/libsvn_client/client-test.c
  (test_copy_pin_externals_select_subtree, test_funcs): New test.
</msg>
</logentry>
<logentry
   revision="1674413">
<author>rhuijben</author>
<date>2015-04-17T22:44:26.825976Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/diff_editor.c</path>
</paths>
<msg>Allow diff to complete without asserting in a few more cases where the
working copy is incomplete caused by an incomplete update.

In this case you can't really trust the diff to properly show all changes,
as the working copy is out of sync with the repository but showing a
diff of the data is better than just asserting.

* subversion/libsvn_wc/diff_editor.c
  (handle_local_only,
   open_directory,
   open_file): Handle incomplete like normal.
</msg>
</logentry>
<logentry
   revision="1674406">
<author>brane</author>
<date>2015-04-17T21:21:57.834466Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/copy.c</path>
</paths>
<msg>Fix issue #4560.

* subversion/libsvn_client/copy.c
  (pin_externals_prop): When the externals_to_pin hash is not NULL,
   do not pin externals that are not mentioned in that hash.

* subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java
  (BasicTests.setupPinExternalsTest,
   BasicTests.testCopyPinExternals_wc2wc,
   BasicTests.testCopyPinExternals_wc2repo,
   BasicTests.testCopyPinExternals_repo2wc,
   BasicTests.testCopyPinExternals_repo2repo,
   BasicTests.testCopyPinExternals_repo2repo_explicit): Update test cases.
  (BasicTests.testCopyPinExternals_repo2repo_corkscrew): New test case.


Patch by: stsp
          (Test fixes by me)
</msg>
</logentry>
<logentry
   revision="1674404">
<author>stefan2</author>
<date>2015-04-17T21:10:17.724788Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs.h</path>
</paths>
<msg>Docstring improvement.  No functional change.

* subversion/libsvn_fs_fs/fs.h
  (representation_t): Clarify the EXPANDED_SIZE==0 case.

Found by: julianfoad.</msg>
</logentry>
<logentry
   revision="1674400">
<author>stefan2</author>
<date>2015-04-17T20:55:44.262565Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/dag.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/recovery.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/stats.c</path>
</paths>
<msg>Since EXPANDED_SIZE always contains the actual value now, remove all
the code that tries to patch it.

* subversion/libsvn_fs_fs/cached_data.c
  (create_rep_state_body): Use the value as-is.
  (build_rep_list): Remove the expanded_size parameter &amp; calculation.
  (rep_read_contents): Update caller; assign the LEN directly.
  (svn_fs_fs__get_contents,
   get_dir_contents): Use the value as-is.

* subversion/libsvn_fs_fs/dag.c
  (svn_fs_fs__dag_has_props): Same.

* subversion/libsvn_fs_fs/fs_fs.c
  (svn_fs_fs__file_length): Same.

* subversion/libsvn_fs_fs/pack.c
  (copy_node_to_temp): Same.

* subversion/libsvn_fs_fs/recovery.c
  (recover_find_max_ids): Same.

* subversion/libsvn_fs_fs/stats.c
  (parse_representation): Same.

* subversion/libsvn_fs_fs/transaction.c
  (choose_delta_base,
   get_shared_rep): Same.</msg>
</logentry>
<logentry
   revision="1674354">
<author>philip</author>
<date>2015-04-17T17:14:16.655812Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_wc/op-depth-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_wc/op-depth-test.c
  (revert_file_externals): Extend with another update.
</msg>
</logentry>
<logentry
   revision="1674341">
<author>stefan2</author>
<date>2015-04-17T15:56:12.084662Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/rep-cache.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Extend the EXPANDED_SIZE fixup in FSFS to data read from the rep_cache.db.

To make that easier, teach the fixup code to open the rev / pack file on
demand (virtually never happens) because we don't have a open one available
in the rep-cache reader.

* subversion/libsvn_fs_fs/cached_data.c
  (fixup_expanded_size): Open revisison file on demand and rename to ...
  (svn_fs_fs__fixup_expanded_size): ... this non-static func.
  (fixup_node_revision): Update caller. Lose rev file argument as well.
  (get_node_revision_body,
   block_read_noderev): Update caller.

* subversion/libsvn_fs_fs/cached_data.h
  (svn_fs_fs__fixup_expanded_size): Declare as private API.

* subversion/libsvn_fs_fs/rep-cache.c
  (svn_fs_fs__get_rep_reference): Call the fixup for any representation
                                  read from the rep-cache.db.</msg>
</logentry>
<logentry
   revision="1674340">
<author>rhuijben</author>
<date>2015-04-17T15:55:57.434927Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/getopt_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/getopt_tests.py
  (getopt_config_option): Expect the exitcode to be 0, instead of to be one
     caused by the --config-dir, --password, --no-auth-cache and --username
     passed after the '--'.
</msg>
</logentry>
<logentry
   revision="1674339">
<author>danielsh</author>
<date>2015-04-17T15:44:57.035735Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/build/generator/gen_base.py</path>
</paths>
<msg>Fix a compiler warning.

* build/generator/gen_base.py
  (GeneratorBase.write_config_keys): Mark config_keys.inc variables as static.</msg>
</logentry>
<logentry
   revision="1674308">
<author>rhuijben</author>
<date>2015-04-17T14:01:51.632431Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_subr</path>
</paths>
<msg>* subversion/libsvn_subr
  (svn:ignore): Add config_keys.inc.
</msg>
</logentry>
<logentry
   revision="1674305">
<author>rhuijben</author>
<date>2015-04-17T13:48:12.172875Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cmdline.c</path>
</paths>
<msg>* subversion/libsvn_subr/cmdline.c
  (validate_config_option): Remove SVN_DBG() call to unbreak compilation in
    release mode.</msg>
</logentry>
<logentry
   revision="1674301">
<author>danielsh</author>
<date>2015-04-17T13:30:25.376914Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/generator/gen_base.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/cmdline.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/getopt_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/generator/templates/build-outputs.mk.ezt</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/gen-make.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/similarity.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnmucc/svnmucc.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_cmdline_private.h</path>
</paths>
<msg>--config-option: Warn when the FILE:SECTION:OPTION combination may be invalid.

Currently there are false negatives: if each component is individually known,
then there won't be a warning, even if the tuple as a whole is invalid.

The implementation is as follows: first, parse svn_config.h to generate a list
of valid file/section/option names:

* subversion/libsvn_subr/config_keys.inc:
    Not a versioned file, but will be generated by gen-make.py.

* build/generator/gen_base.py
  (collections): Import.
  (GeneratorBase.FileSectionOptionEnum): New class.
  (GeneratorBase._client_configuration_defines): New method.
  (GeneratorBase.write_config_keys): New method.
  (IncludeDependencyInfo._scan_for_includes):
    Exempt config_keys.inc from dependency scanning.

* build/generator/templates/build-outputs.mk.ezt
  (EXTRACLEAN_FILES): Clean config_keys.inc.

* gen-make.py
  (main): Generate config_keys.inc.

Second, have the --config-option parser warn to stderr about unknown values:

* subversion/include/private/svn_cmdline_private.h
  (svn_cmdline__parse_config_option): Add PREFIX argument, document new
    functionality.

* subversion/libsvn_subr/cmdline.c
  (config_keys.inc): Include.
  (most_similar, string_in_array, validate_config_option): New functions.
  (svn_cmdline__parse_config_option): Validate the config option's coordinates
    and warn if they may be invalid.

* subversion/svn/similarity.c
  (svn_cl__similarity_check): Cross-reference most_similar().
    No functional change.

Third, add a unit test:

* subversion/tests/cmdline/getopt_tests.py
  (getopt_config_option): New test.

Finally, update callers for the trivial signature change:

* subversion/svn/svn.c           (sub_main),
* subversion/svnbench/svnbench.c (sub_main),
* subversion/svnmucc/svnmucc.c   (sub_main),
* subversion/svnrdump/svnrdump.c (sub_main):
      Pass new PREFIX argument.

* subversion/svnsync/svnsync.c
  (sub_main): Ditto, in two places.
</msg>
</logentry>
<logentry
   revision="1674170">
<author>danielsh</author>
<date>2015-04-16T23:40:13.272949Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_ra.h</path>
</paths>
<msg>* subversion/include/svn_ra.h
  (svn_ra_get_dir2): Improve the docstring of PROPS.</msg>
</logentry>
<logentry
   revision="1674168">
<author>danielsh</author>
<date>2015-04-16T23:36:00.395015Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_ra_serf/stat.c</path>
</paths>
<msg>Follow-up to r1673692:

* subversion/libsvn_ra_serf/stat.c
  (fill_dirent_propfunc): Document the deadprop-count semantics change.</msg>
</logentry>
<logentry
   revision="1674165">
<author>stefan2</author>
<date>2015-04-16T23:05:57.208952Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/cached_data.c
  (fixup_expanded_size): Clarify ambiguous commentary.

Suggested by: julianfoad</msg>
</logentry>
<logentry
   revision="1674032">
<author>philip</author>
<date>2015-04-16T09:35:37.862658Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_wc/op-depth-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_wc/op-depth-test.c
  (test_funcs): Make test description unique.
</msg>
</logentry>
<logentry
   revision="1674015">
<author>jcorvel</author>
<date>2015-04-16T08:20:34.404090Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnbench/svnbench.c</path>
</paths>
<msg>Let 'svnbench null-blame' accept a revision range. This will make it possible
to benchmark 'prospective blame' (needs a reverse revision range).

* subversion/svnbench/svnbench.c
  (sub_main): Allow svn_cl__null_blame to accept a revision range.
</msg>
</logentry>
<logentry
   revision="1673875">
<author>stefan2</author>
<date>2015-04-15T17:04:00.002329Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Provide a central and complete implementation for handling FSFS quirks
in committed node revisions.

At the moment, there are two: a workaround issue #4031 and the fact that
the fulltext size may be missing for PLAIN representations.

This patch does not remove all the local workarounds for these problems.
We should also add specific tests for these quirks.

DO NOT BACKPORT.

* subversion/libsvn_fs_fs/cached_data.c
  (fixup_expanded_size,
   fixup_node_revision): New helper functions.
  (get_node_revision_body,
   block_read_noderev): Let the new helpers do the fixup.</msg>
</logentry>
<logentry
   revision="1673803">
<author>rhuijben</author>
<date>2015-04-15T14:59:06.052731Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnbench/null-blame-cmd.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/cl.h</path>
</paths>
<msg>Following up on r1673785, remove unneeded diff options support from
svnbench. This unbreaks the Windows shared library build.

* subversion/svnbench/cl.h
  (svn_cl__opt_state_t): Remove unneeded variable.

* subversion/svnbench/null-blame-cmd.c
  (svn_cl__null_blame): Remove only initialized variable.

* subversion/svnbench/svnbench.c
  (svn_cl__cmd_table,
   sub_main): Remove 'x' argument handling.
</msg>
</logentry>
<logentry
   revision="1673785">
<author>rhuijben</author>
<date>2015-04-15T14:37:04.565095Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/cl.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/client.h</path>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/null-blame-cmd.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_client_private.h</path>
</paths>
<msg>Introduce a 'null-blame' command in svnbench.

Suggested by: jcorvel

* subversion/include/private/svn_client_private.h
  (svn_client__get_revision_number): Declare function here.

* subversion/libsvn_client/client.h
  (svn_client__get_revision_number): ... instead of here.

* subversion/svnbench/cl.h
  (svn_cl__null_blame): New function.

* subversion/svnbench/null-blame-cmd.c
  New file.

* subversion/svnbench/svnbench.c
  (svn_cl__cmd_table): Declare null-blame.
</msg>
</logentry>
<logentry
   revision="1673780">
<author>stefan2</author>
<date>2015-04-15T14:16:22.471550Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/export.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/org_apache_subversion_javahl_util_ConfigImpl_Category.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_base/fs.c</path>
</paths>
<msg>Coding nanny: Remove duplicate ";" at the end of statements.
No functional change.

* subversion/bindings/javahl/native/org_apache_subversion_javahl_util_ConfigImpl_Category.cpp
  (Java_org_apache_subversion_javahl_util_ConfigImpl_00024Category_enumerate): Here.

* subversion/libsvn_client/export.c
  (svn_client_export5): And here.

* subversion/libsvn_fs_base/fs.c
  (base_create): And here.

* subversion/libsvn_subr/io.c
  (io_win_file_attrs_set): And here.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict): And here.</msg>
</logentry>
<logentry
   revision="1673746">
<author>stefan2</author>
<date>2015-04-15T12:54:12.972931Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/repos.c</path>
</paths>
<msg>Follow-up to r1673170: Fix compiler warning.

* subversion/libsvn_repos/repos.c
  (svn_repos_stat): Remove unused variable.</msg>
</logentry>
<logentry
   revision="1673733">
<author>rhuijben</author>
<date>2015-04-15T11:52:23.609761Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>* subversion/include/svn_fs.h
  (SVN_FS_CONFIG_FSFS_CACHE_REVPROPS): Fix typo.
</msg>
</logentry>
<logentry
   revision="1673692">
<author>rhuijben</author>
<date>2015-04-15T09:34:03.442407Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/liveprops.c</path>
</paths>
<msg>Following up on r1673170, update the subversion specific deadprop-count
property in mod_dav to only report "0" (no props) and "1" values (has props).

* subversion/mod_dav_svn/liveprops.c
  (insert_prop_internal): Integrate specialized svn client behavior with
    standard code. Use "1" as exists value instead of 99.

Suggested by: ivan
</msg>
</logentry>
<logentry
   revision="1673691">
<author>rhuijben</author>
<date>2015-04-15T09:30:04.931501Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc-metadata.sql</path>
</paths>
<msg>* subversion/libsvn_wc/wc-metadata.sql
  (STMT_INSTALL_SCHEMA_STATISTICS): Delete existing sqlite_stat1 rows for
    the externals table before installing new rows to avoid duplicate entries.
    Remove unneeded 'OR REPLACE' from all inserts.
</msg>
</logentry>
<logentry
   revision="1673689">
<author>rhuijben</author>
<date>2015-04-15T09:20:05.939328Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/structure</path>
</paths>
<msg>* subversion/libsvn_fs_fs/structure
  Revert accidental change in r1673685.

Found by: julian
</msg>
</logentry>
<logentry
   revision="1673685">
<author>rhuijben</author>
<date>2015-04-15T09:08:35.643427Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/structure</path>
</paths>
<msg>* subversion/libsvn_fs_fs/structure
  Format 7 didn't completely drop support for physical adressing. It is now
  configurable and no longer default for new repositories.
</msg>
</logentry>
<logentry
   revision="1673454">
<author>stefan2</author>
<date>2015-04-14T15:55:29.949512Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.h</path>
</paths>
<msg>Remove unused function declaration.

* subversion/libsvn_fs_fs/cached_data.h
  (svn_fs_fs__has_props): Remove.

Found by: danielsh</msg>
</logentry>
<logentry
   revision="1673445">
<author>stefan2</author>
<date>2015-04-14T15:36:13.212179Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/structure</path>
</paths>
<msg>Clarify wording in our FSFS structure document. No functional change.

* subversion/libsvn_fs_fs/structure
  (Revision file format): The special treatment of empty reps did
                          never apply to DELTA reps.

Found by: julianfoad</msg>
</logentry>
<logentry
   revision="1673289">
<author>danielsh</author>
<date>2015-04-13T21:34:15.729882Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport.pl</path>
</paths>
<msg>* tools/dist/backport.pl
  (vote),
* tools/dist/nominate.pl
  (nominate_main): Always prefix "* STATUS: " to log messages.</msg>
</logentry>
<logentry
   revision="1673282">
<author>stefan2</author>
<date>2015-04-13T21:11:50.635853Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_dirent_uri.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/dirent_uri.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/wc_db_update_move.c</path>
</paths>
<msg>Rename public API svn_relpath_limit() to svn_relpath_prefix().
No functional change intended.

* subversion/include/svn_dirent_uri.h
  (svn_relpath_limit): Rename to ...
  (svn_relpath_prefix): ... this.

* subversion/libsvn_subr/dirent_uri.c
  (svn_relpath_limit,
   svn_relpath_prefix): Sync. implementation with declaration.

* subversion/libsvn_wc/wc_db.c
  (read_children_info,
   read_single_info,
   scan_addition,
   svn_wc__db_scan_moved,
   svn_wc__db_scan_moved_to_internal): Update callers.

* subversion/libsvn_wc/wc_db_update_move.c
  (create_node_tree_conflict,
   bump_moved_layer,
   svn_wc__db_op_raise_moved_away_internal): Same.</msg>
</logentry>
<logentry
   revision="1673228">
<author>philip</author>
<date>2015-04-13T15:36:56.056681Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/client-side/bash_completion</path>
</paths>
<msg>tools/client-side/bash_completion (_svn): Add -r to status</msg>
</logentry>
<logentry
   revision="1673204">
<author>rhuijben</author>
<date>2015-04-13T14:28:39.131096Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/dag.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/dag.c
  (svn_fs_fs__dag_has_props): Following up on r1673202, apply another
    check for a case where expanded_size is 0.

Found by: stefan2
</msg>
</logentry>
<logentry
   revision="1673202">
<author>rhuijben</author>
<date>2015-04-13T14:22:33.961427Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/dag.c</path>
</paths>
<msg>Following up on r1673197, use another optimization suggested by stefan2.

* subversion/libsvn_fs_fs/dag.c
  (svn_fs_fs__dag_has_props): Use expanded size to determine if the
    representation stores properties vs just an empty list.
</msg>
</logentry>
<logentry
   revision="1673197">
<author>rhuijben</author>
<date>2015-04-13T13:58:29.075038Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/dag.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/dag.c</path>
</paths>
<msg>Following up on r1673170, add the first fsfs tweaks to optimize obtaining the
boolean whether there are properties on a node.

* subversion/libsvn_fs_fs/cached_data.h
  (svn_fs_fs__has_props): New function.

* subversion/libsvn_fs_fs/dag.c
  (svn_fs_fs__dag_has_props): New function.

* subversion/libsvn_fs_fs/dag.h
  (svn_fs_fs__dag_has_props): New function.

* subversion/libsvn_fs_fs/tree.c
  (fs_node_has_props): Use svn_fs_fs__dag_has_props.
</msg>
</logentry>
<logentry
   revision="1673172">
<author>rhuijben</author>
<date>2015-04-13T12:31:24.944626Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_ra/ra-test.c
  (ra_list_has_props): Following up on r1673170, remove call to SVN_DBG().
</msg>
</logentry>
<logentry
   revision="1673170">
<author>rhuijben</author>
<date>2015-04-13T12:23:20.771705Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_local/ra_plugin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/repos.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_base/tree.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnserve/serve.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/liveprops.c</path>
</paths>
<msg>Add an fs layer api that allows obtaining just a boolean indicating whether
properties exist on a node, instead of always obtaining the properties and
checking their count.

This is by far the most expensive operation on 'svn ls -v' in Subversion &lt;=
1.8.x on huge directories as it requires fetching much 'new' data, and has
the risk of trashing the node cache.

r1673153 made new 'svn' clients stop asking for this information for this
scenario but existing clients do ask and so will most likely many third
party clients (confirmed for TortoiseSVN), will keep asking for this
information.

This function introduces the FS api and updates callers, but doesn't provide
optimized implementations yet, so the result is that this doesn't change
runtime behaviour yet, but just moves the implementation into the fs layer.

I hope this patch will be accepted for 1.9.0 to allow further improvements
in later patches, potentially after 1.9.0.

* subversion/include/svn_fs.h
  (svn_fs_node_has_props): New function.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_node_has_props): New function.

* subversion/libsvn_fs/fs-loader.h
  (root_vtable_t): Add node_has_props.

* subversion/libsvn_fs_base/tree.c
  (base_node_has_props): New function.
  (root_vtable): Add function.

* subversion/libsvn_fs_fs/tree.c
  (fs_node_has_props): New function.
  (root_vtable): Add function.

* subversion/libsvn_fs_x/tree.c
  (x_node_has_props): New function.
  (root_vtable): Add function.

* subversion/libsvn_ra_local/ra_plugin.c
  (svn_ra_local__get_dir): Use new optimized fs call. Rename subpool
    to iterpool.

* subversion/libsvn_repos/repos.c
  (svn_repos_stat): Use new optimized fs call.

* subversion/mod_dav_svn/liveprops.c
  (insert_prop_internal): Use optimized code for svn clients.

* subversion/svnserve/serve.c
  (get_dir): Use optimized fs code.

* subversion/tests/libsvn_ra/ra-test.c
  (ra_list_has_props): New function.
  (test_funcs): Add ra_list_has_props.
</msg>
</logentry>
<logentry
   revision="1673153">
<author>rhuijben</author>
<date>2015-04-13T10:47:33.758653Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/list-cmd.c</path>
</paths>
<msg>Make 'svn ls -v file:///my/repos/tags' and 'svn ls --xml file:///my/repos/tags'
about 20 times faster on tags directories containing far too many tags
(like 8000), by simply avoiding a lot of unneeded work. (Removes 95% of the
time from profile runs). The same code is also used by svnserve, and I think
serf/mod_dav should be faster as well.

This patch simply makes the code just ask for the dirent fields that
it really cares about, thereby skipping the request for 'has_props'
which takes 95% of the time, because it fetches all properties on
all the created tags (which are stored in many different revision, thereby
getting very bad caching behavior).

Measurements on a repository that contains a repository with an
empty /trunk dir, copied as /trunk@1 to /tags/T00001 ... /tags/T08000/
each as their own revision.

The results appear to vary by the number of tags (and probably some cache
size), but for 8000 revisions this changes the processing time on a
ramdrive from 1 minute 11 to just 3 seconds.

I think we need a separate patch which allows filesystem implementations
to answer 'has props' in a cheaper way, that doesn't trash the entire
memory cache.

* subversion/svn/list-cmd.c
  (print_dirent_fields,
   print_dirent_fields_verbose,
   print_dirent_xml_fields): New constant variables.
  (svn_cl__list): Only request the required fields.
</msg>
</logentry>
<logentry
   revision="1673065">
<author>breser</author>
<date>2015-04-12T21:39:26.793513Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/auth-cmd.c</path>
</paths>
<msg>Follow up r1673044, avoid parsing certificates multiple times.

* subversion/svn/auth-cmd.c
  (match_certificate): pass the certinfo back to the caller and
    allocate it in a result_pool.
  (match_credential): Add parameters to pass into match_certificate()
    and adjust the match_certificate() calls.
  (show_cert): Add a certinfo argument and shortcut parsing if the
    certinfo is already filled.
  (list_credential): Add a certinfo argument to pass into show_cert()
    and adjust show_cert() call.
  (walk_credentials): Adjust calls to match_credential() and 
    list_credential() accordingly.
</msg>
</logentry>
<logentry
   revision="1673063">
<author>breser</author>
<date>2015-04-12T21:32:02.125920Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/auth-cmd.c</path>
</paths>
<msg>Follow up r1673044, fix segfault when cert has no hostnames.

* subversion/svn/auth-cmd.c
  (match_certificate): hostnames can be NULL if the cert doesn't have
    a CN that looks like a hostname and has no Subject Alt Names.
</msg>
</logentry>
<logentry
   revision="1673062">
<author>breser</author>
<date>2015-04-12T21:24:07.230112Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/x509parse.c</path>
</paths>
<msg>Fix two error leaks in X.509 parser.

* subversion/libsvn_subr/x509parse.c
  (x509_get_ext): when handling subject alt names, properly return
    unexpected errors.
  (svn_x509_parse_cert): correctly add a child error that was inadvertently
    being discarded.
</msg>
</logentry>
<logentry
   revision="1673044">
<author>breser</author>
<date>2015-04-12T19:23:49.047955Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/auth-cmd.c</path>
</paths>
<msg>Allow the auth command to match on certificate subjects, issuers, digests
and hostnames.  We had this functionality and I unintentionally removed it
when converting to using the X.509 parser rather than storing the details
separately.

* subversion/svn/auth-cmd.c
  (parse_certificate, match_certificate): New functions.
  (match_credential): Call match_certificate() instead of
    ignoring the certificate.
  (show_cert): Use parse_certificate() which was factored out
    of this function.

</msg>
</logentry>
<logentry
   revision="1672728">
<author>astieger</author>
<date>2015-04-10T18:58:32.519660Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/po/de.po</path>
</paths>
<msg>German translations for 1.9.0

* subversion/po/de.po: Add 11 strings
</msg>
</logentry>
<logentry
   revision="1672578">
<author>rhuijben</author>
<date>2015-04-10T07:58:19.214950Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/status-cmd.c</path>
</paths>
<msg>Following up on r1671164, make passing '-r' to 'svn status' without also
passing '-u' produce a proper error.

* subversion/svn/status-cmd.c
  (svn_cl__status): Check for explicit revision in no update mode.

Suggested by: brane
</msg>
</logentry>
<logentry
   revision="1672512">
<author>stefan2</author>
<date>2015-04-09T22:38:58.940501Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_wc.h</path>
</paths>
<msg>Incorporate svn_wc 1.9 API review feedback.  No functional change.

* subversion/include/svn_wc.h
  (svn_wc_conflict_description2_dup): Correct @since.
  (svn_wc_add_from_disk3,
   svn_wc_cleanup4): Document notification mechanism.</msg>
</logentry>
<logentry
   revision="1672511">
<author>stefan2</author>
<date>2015-04-09T22:38:44.235329Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_repos.h</path>
</paths>
<msg>Incorporate svn_repos 1.9 API review feedback.  No functional change.

* subversion/include/svn_repos.h
  (svn_repos_notify_warning_t): Correct docstring.
</msg>
</logentry>
<logentry
   revision="1672404">
<author>rhuijben</author>
<date>2015-04-09T16:08:15.261712Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/commit_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/commit_tests.py
  (commit_xml): Following up on r1672372, set the right property on
    the right file.
</msg>
</logentry>
<logentry
   revision="1672372">
<author>rhuijben</author>
<date>2015-04-09T14:49:35.847289Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/commit_tests.py</path>
</paths>
<msg>Stop trying to process the results of a PUT request during commit
as an error just because it happens to have a content type 'text/xml'.

(I'm still trying to find out why it has this header, but it is
 certainly not an error case for our client)

* subversion/libsvn_ra_serf/util.c
  (svn_ra_serf__expect_empty_body): Stop trying to parse the bodies of requests of
    success results as a server generated error.

* subversion/tests/cmdline/commit_tests.py
  (commit_xml): New test.
</msg>
</logentry>
<logentry
   revision="1672322">
<author>rhuijben</author>
<date>2015-04-09T12:48:41.937880Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_wc.h</path>
</paths>
<msg>* subversion/include/svn_wc.h
  (svn_wc_conflict_description_t): Tweak node_kind documentation.
  (svn_wc_conflict_description_create_tree2): Update references to field and
    argument name to match implementation.
  (svn_wc_conflict_choice_t): Tweak comment.
</msg>
</logentry>
<logentry
   revision="1672311">
<author>rhuijben</author>
<date>2015-04-09T12:33:30.700344Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/deprecated.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_wc.h</path>
</paths>
<msg>Fix two minor api issues on the now deprecated svn_wc_add_from_disk2.

* subversion/include/svn_wc.h
  (svn_wc_add_from_disk2): Fix documentation reference.

* subversion/libsvn_wc/deprecated.c
  (svn_wc_add_from_disk2): Pass props to svn_wc_add_from_disk3() instead
    of ignoring them.
</msg>
</logentry>
<logentry
   revision="1672295">
<author>rhuijben</author>
<date>2015-04-09T11:31:12.848835Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_wc/wc-queries-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/wc-metadata.sql</path>
</paths>
<msg>Optimize STMT_SELECT_EXTERNALS_DEFINED when using Sqlite 3.8.9, by
adding two more rows to the sqlite_stat1 table.

This fixes a test failure in wc-queries-test.c, but actual users most
likely don't notice a difference as a tablescan on an EXTERNALS tables
index is not that expensive, given that most working copies don't have
many externals.

* subversion/libsvn_wc/wc-metadata.sql
  (STMT_INSTALL_SCHEMA_STATISTICS): Add two rows.

* subversion/tests/libsvn_wc/wc-queries-test.c
  (test_schema_statistics): Add a dummy externals row to allow
    verifying schema.
</msg>
</logentry>
<logentry
   revision="1671525">
<author>rhuijben</author>
<date>2015-04-06T12:38:22.309460Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>* subversion/libsvn_subr/io.c
  (svn_io_file_move): Compose errors instead of dropping them. Add tracing.
</msg>
</logentry>
<logentry
   revision="1671388">
<author>rschupp</author>
<date>2015-04-05T12:48:45.435307Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/include/apr.swg</path>
</paths>
<msg>* subversion/bindings/swig/include/svn_types.swg: Following r1668618
   fix two more instances where the Perl argument stack pointer 
   was bumped without checking if there's enough space allocated.
   While we're at it, reduce the size of the temp array - 30 bytes
   are more than enough to hold a decimal representation of a 64-bit integer.
</msg>
</logentry>
<logentry
   revision="1671166">
<author>brane</author>
<date>2015-04-03T21:31:01.603652Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/svncheck-bindings.sh</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/mkramdisk.sh</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/setenv.sh</path>
</paths>
<msg>Minor tweaks to the Mac OS X buildbot scripts.

* tools/buildbot/slaves/svn-x64-macosx/mkramdisk.sh:
   Increase the size of the RAM disk by about a tenth.
* tools/buildbot/slaves/svn-x64-macosx/setenv.sh:
   Do not export the LIBTOOL_CONFIG variable any more.
* tools/buildbot/slaves/svn-x64-macosx/svncheck-bindings.sh
   Tell the JavaHL bindings to clean up after themselves.
</msg>
</logentry>
<logentry
   revision="1671164">
<author>rhuijben</author>
<date>2015-04-03T21:27:46.669394Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/status-cmd.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
</paths>
<msg>Allow passing a revision to 'svn status', to allow retrieving a remote
status against a revision different than HEAD.

This exposes a feature we have had at the api level since &lt;= 1.0.

* subversion/svn/status-cmd.c
  (svn_cl__status): Use revision when passed.

* subversion/svn/svn.c
  (svn_cl__cmd_table): Allow passing 'r' to svn status.
</msg>
</logentry>
<logentry
   revision="1671162">
<author>rhuijben</author>
<date>2015-04-03T21:10:15.176911Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/win-tests.py</path>
</paths>
<msg>* win-tests.py
  Following up on r1671113, pass the cleanup flag to the JavaHL test runner.
</msg>
</logentry>
<logentry
   revision="1671113">
<author>brane</author>
<date>2015-04-03T17:57:25.222829Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNTests.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNReposTests.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/tests/org/tigris/subversion/javahl/SVNAdminTests.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/Makefile.in</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNRemoteTests.java</path>
</paths>
<msg>Teach the JavaHL tests to optionally clean up after themselves
when given the JAVAHL_CLEAN option on the make command line
(or with the system property test.cleanup set to a non-empty string).

* Makefile.in
  (check-tigris-javahl, check-apache-javahl, check-deprecated-authn-javahl):
   Define the test.cleanup property when running JavaHL tests.

[in subversion/bindings/javahl/tests]
* org/apache/subversion/javahl/SVNTests.java
  (SVNTest.cleanupAfterTests, SVNTest.testDirs): New fields.
  (SVNTest.init): Initialize SVNTest.cleanupAfterTests from properties.
  (SVNTest.tearDown): Optionally remove test directories.
  (SVNTest.trackDir): New.
  (SVNTest.OneTest.createInitialRepository,
   SVNTest.OneTest.createInitialWorkingCopy): Track created directories.

* org/apache/subversion/javahl/SVNRemoteTests.java,
* org/apache/subversion/javahl/SVNReposTests.java,
* org/tigris/subversion/javahl/SVNAdminTests.java:
  (&lt;test-class&gt;.testName): Declare the base name for test directories.
  (&lt;test-class&gt;.&lt;init&gt;): Call init().
  (&lt;test-class&gt;.init): Initialize the global test name.
</msg>
</logentry>
<logentry
   revision="1670953">
<author>breser</author>
<date>2015-04-02T19:05:44.747129Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/fs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_mutex.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/dso.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cache-inprocess.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/pool.c</path>
</paths>
<msg>Fix building with apr trunk by removing unnecessary header includes.

apr_thread_mutex.h is included by apr_allocator.h which is included
by apr_pools.h.  This header is prone to circular references because
it also includes apr_pools.h and despite efforts to prevent this
it's blowing up clang pretty bad with apr trunk.  However, we don't
need it at all because we always have apr_pools.h.

* subversion/include/private/svn_mutex.h,
  subversion/libsvn_fs/fs-loader.c,
  subversion/libsvn_fs_fs/fs.c,
  subversion/libsvn_fs_x/fs.c,
  subversion/libsvn_subr/cache-inprocess.c,
  subversion/libsvn_subr/dso.c,
  subversion/libsvn_subr/pool.c:  Remove apr_thread_mutex.h include.
</msg>
</logentry>
<logentry
   revision="1670532">
<author>breser</author>
<date>2015-04-01T01:06:29.708407Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
</paths>
<msg>Followup to r1668323: Unbreak trunk with serf trunk.

* subversion/libsvn_ra_serf/serf.c
  (load_config): Update an argument to use the new dual pools.
</msg>
</logentry>
<logentry
   revision="1670353">
<author>julianfoad</author>
<date>2015-03-31T14:30:24.561697Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_types.h</path>
</paths>
<msg>In the SVN_VA_NULL macro, make the implementation type private.

* subversion/include/svn_types.h
  (svn__null_pointer_constant_stdarg_sentinel_t): Renamed from
    svn_null_pointer_constant_stdarg_sentinel_t. Update the doc string.
  (SVN_VA_NULL): Update.</msg>
</logentry>
<logentry
   revision="1670347">
<author>stefan2</author>
<date>2015-03-31T14:14:56.156236Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_repos.h</path>
</paths>
<msg>Extend the documentation for new 1.9 FS and Repos (un-)lock-many API.

* subversion/include/svn_fs.h
  (svn_fs_lock_many,
   svn_fs_unlock_many): Note that these don't process the list of targets
                        atomically.

* subversion/include/svn_repos.h
  (svn_repos_fs_lock_many,
   svn_repos_fs_unlock_many): Same as in FS API.</msg>
</logentry>
<logentry
   revision="1670337">
<author>stefan2</author>
<date>2015-03-31T13:36:21.846699Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_diff.h</path>
</paths>
<msg>Documentation fixes to the 1.9 svn_diff API.  No functional change.

* subversion/include/svn_diff.h
  (svn_diff_output2,
   svn_diff_file_output_unified4): Document cancelation functionality.
  (svn_diff_file_output_unified3): Fix reference to bumped API.
  (svn_diff_file_output_merge3: Document cancelation functionality.
  (svn_diff_output_binary): Same. Fix a typo.
  (svn_diff_mem_string_output_unified3,
   svn_diff_mem_string_output_merge3): Document cancelation functionality.</msg>
</logentry>
<logentry
   revision="1670329">
<author>stefan2</author>
<date>2015-03-31T13:15:05.632935Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>Add missing parameter documentation in svn_client.h for 1.9.
No functional change.

* subversion/include/svn_client.h
  (svn_client_vacuum): Document fix_recorded_timestamps and
                                       vacuum_pristines.
</msg>
</logentry>
<logentry
   revision="1670167">
<author>danielsh</author>
<date>2015-03-30T18:29:03.440351Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport/merger.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport/status.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/merge-approved-backports.py</path>
</paths>
<msg>backport.py: Make StatusFile know its repository and StatusEntry know its
StatusFile.  No new functionality.

* tools/dist/backport/merger.py
  (TRUNK, BRANCHES): Moved away from here.
  (merge): Remove keyword argument 'sf', now implied by 'entry'.
    Track rename.
  (validate_branch_contains_named_revisions): Track rename.

* tools/dist/backport/status.py
  (StatusFile.TRUNK, StatusFile.BRANCHES): Moved here.
  (__init__, _parse): Rename 'status_file' to 'status_fp', since 'status_file'
    is now conventionally reserved for StatusFile instances.
  (_parse): Pass 'status_file' argument to StatusEntry() constructor.
  (Test_StatusFile.test_parse_unparse): Test StatusEntry.status_file.
  (StatusEntry.__init__): Add 'status_file' optional argument.

* tools/dist/merge-approved-backports.py,
    Track API change of merge().</msg>
</logentry>
<logentry
   revision="1670166">
<author>danielsh</author>
<date>2015-03-30T18:28:19.524829Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/tools/dist/backport_tests_py.py</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/tools/dist/backport_tests_pl.py</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="file"
   action="M">/subversion/trunk/tools/dist/merge-approved-backports.py</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="file"
   action="M">/subversion/trunk/tools/dist/detect-conflicting-backports.py</path>
</paths>
<msg>Add missing svn:executable properties.

* tools/dist/backport_tests_pl.py,
* tools/dist/backport_tests_py.py,
* tools/dist/merge-approved-backports.py,
* tools/dist/detect-conflicting-backports.py:
    Mark as executable.</msg>
</logentry>
<logentry
   revision="1670152">
<author>philip</author>
<date>2015-03-30T17:36:14.078584Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_repos.h</path>
</paths>
<msg>Documentation points raised by API review, no code changes.

* subversion/include/svn_fs.h
  (svn_repos_fs_lock_many, svn_repos_fs_unlock_many): Tweak docstring.
</msg>
</logentry>
<logentry
   revision="1670149">
<author>philip</author>
<date>2015-03-30T17:28:42.274082Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_repos.h</path>
</paths>
<msg>Documentation points raised by API review, no code changes.

* subversion/include/svn_fs.h
  (svn_fs_lock_target_create,
   svn_fs_lock_many, svn_fs_unlock_many): Tweak docstring.

* subversion/include/svn_fs.h
  (svn_repos_fs_lock_many, svn_repos_fs_unlock_many): Tweak docstring.
</msg>
</logentry>
<logentry
   revision="1670139">
<author>philip</author>
<date>2015-03-30T16:43:23.743159Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/lock.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/lock.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_base/lock.c</path>
</paths>
<msg>Address points raised by API review.

* subversion/include/svn_fs.h
  (svn_fs_lock_target_create): Rename pool parameter to result_pool.
  (svn_fs_lock_callback_t): Rename pool parameter to scratch_pool.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_lock_target_create): Rename pool parameter to result_pool.

* subversion/libsvn_fs_fs/lock.c
  (svn_fs_fs__lock, svn_fs_fs__unlock): Use iterpool.

* subversion/libsvn_fs_base/lock.c
  (svn_fs_base__lock, svn_fs_base__unlock): Use iterpool.

* subversion/libsvn_fs_x/lock.c
  (svn_fs_fs__lock, svn_fs_fs__unlock): Use iterpool.
</msg>
</logentry>
<logentry
   revision="1669945">
<author>stefan2</author>
<date>2015-03-29T18:05:02.081937Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c</path>
</paths>
<msg>Follow-up to r1669743:
Fix sub-condition and provide a test for rep-sharing in general.

* subversion/libsvn_fs_fs/transaction.c
  (get_shared_rep): Actually check what the comment says.

* subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c
  (count_substring,
   count_representations,
   multiply_string): New utility functions.
  (rep_sharing_effectiveness): New test.
  (test_funcs): Register new test.

Found by: danielsh</msg>
</logentry>
<logentry
   revision="1669868">
<author>danielsh</author>
<date>2015-03-29T07:25:08.269579Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/dist/backport.pl</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport/status.py</path>
</paths>
<msg>backport STATUS parser: Fix parsing of logsummary in an edge case.

* tools/dist/backport/status.py
  (StatusEntry._is_subheader): Require first letter to be a capital.
  (Test_StatusEntry.test___init__): Regression test this.

* tools/dist/backport.pl
  (parse_entry): Apply the same fix.  No new test.</msg>
</logentry>
<logentry
   revision="1669867">
<author>danielsh</author>
<date>2015-03-29T07:24:55.408526Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dist/backport/merger.py</path>
</paths>
<msg>* tools/dist/backport/merger.py
  (Test_invoking_cmdline_client.test_run_svn):
    Fix a testsuite bug that caused a validation call to become dead code.</msg>
</logentry>
<logentry
   revision="1669866">
<author>danielsh</author>
<date>2015-03-29T07:23:45.252308Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dist/backport_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dist/detect-conflicting-backports.py</path>
</paths>
<msg>backport.py conflicts mode: Bugfix.

* tools/dist/detect-conflicting-backports.py:
    Iterate all entries, not just approved ones.

* tools/dist/backport_tests.py
  (backport_conflicts_detection): Tweak regression test to catch this.
  (serialize_STATUS): Change signature, adding an optional argument.</msg>
</logentry>
<logentry
   revision="1669864">
<author>danielsh</author>
<date>2015-03-29T07:17:37.683981Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dist/merge-approved-backports.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport/merger.py</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/dist/backport_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/detect-conflicting-backports.py</path>
</paths>
<msg>backport: Port another feature to backport.py.  Add a regression test.

* tools/dist/detect-conflicting-backports.py,
* tools/dist/merge-approved-backports.py:
    Check for local mods to STATUS.

* tools/dist/backport/merger.py
  (no_local_mods): New function.

* tools/dist/backport_tests.py
  (backport_STATUS_mods): New test.</msg>
</logentry>
<logentry
   revision="1669863">
<author>danielsh</author>
<date>2015-03-29T07:15:17.506682Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/dist/backport/merger.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport_tests.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dist/backport.pl</path>
</paths>
<msg>backport: Fix an svn:mergeinfo validation.

* tools/dist/backport.pl
  (merge): Fix the validation added in r1471467.

* tools/dist/backport_tests.py
  (backport_otherproject_change): New regression test.

* tools/dist/backport/merger.py
  (_includes_only_svn_mergeinfo_changes): New helper.
  (merge): Add the validation here, too.</msg>
</logentry>
<logentry
   revision="1669862">
<author>danielsh</author>
<date>2015-03-29T07:13:28.947641Z</date>
<paths>
<path
   kind="file"
   action="A"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/dist/README.backport</path>
</paths>
<msg>* tools/dist/README.backport: New file.</msg>
</logentry>
<logentry
   revision="1669860">
<author>danielsh</author>
<date>2015-03-29T07:12:00.309897Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="A"
   prop-mods="false">/subversion/trunk/tools/dist/backport_tests_py.py</path>
<path
   text-mods="true"
   kind="file"
   action="A"
   prop-mods="false">/subversion/trunk/tools/dist/backport_tests_pl.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport/merger.py</path>
<path
   kind="file"
   action="M"
   prop-mods="true"
   text-mods="true">/subversion/trunk/tools/dist/backport_tests.py</path>
</paths>
<msg>backport: Enable testing the Python implementations.

First, adjust output of backport.py to byte-for-byte match backport.pl's output:

* tools/dist/backport/merger.py
  (merge):
    Add a temporary one-byte munging to make the dump files match the
    expectations exactly.

Second, invent a way to reuse the existing regression tests against either the
old or new implementation:

* tools/dist/backport_tests_py.py: New driver script.
  (run_backport, run_conflicter): New functions.
  (APPROVED_PY, CONFLICTER_PY): New constants.

* tools/dist/backport_tests_pl.py: New driver script.
  (BACKPORT_PL, run_backport):
     Moved here from backport_tests.py.
  (run_conflicter): New function.

* tools/dist/backport_tests.py
  (svn:executable): Remove.  This file is now invoked only by the two driver
    scripts.
  (BACKPORT_PL, run_backport):
    Move the existing implementations to backport_tests_pl.py.
  (run_backport, run_conflicter):
    Expect these functions to have been defined by the invoker of this script.

Third, miscellaneous related changes:

* tools/dist/backport_tests.py
  (backport_conflicts_detection, backport_double_conflict):
    Use run_conflicter().
  (backport_double_conflict): Update expectations.</msg>
</logentry>
<logentry
   revision="1669859">
<author>danielsh</author>
<date>2015-03-29T07:08:45.254665Z</date>
<paths>
<path
   action="A"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/merge-approved-backports.py</path>
<path
   kind="file"
   action="A"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/dist/backport/__init__.py</path>
<path
   action="A"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport/merger.py</path>
<path
   action="A"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport/status.py</path>
<path
   action="A"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/detect-conflicting-backports.py</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="dir">/subversion/trunk/tools/dist/backport</path>
</paths>
<msg>backport.py: New set of scripts.

Reimplement backport.pl in Python.  For now, only the two interactive modes
— the nightly mergebot and the hourly conflicts bot — are implemented.  The
other two modes — the interactive review and nomination modes — have not yet
been ported.

* tools/dist/backport/__init__.py: New module marker.

* tools/dist/backport/merger.py,
* tools/dist/backport/status_file.py.
    New submodules.  A reimplementation of backport.pl.

* tools/dist/merge-approved-backports.py:
    New script, implements backport.pl's nightly mergebot mode.

* tools/dist/detect-conflicting-backports.py
    New script, implements backport.pl's hourly conflicts bot mode.</msg>
</logentry>
<logentry
   revision="1669858">
<author>danielsh</author>
<date>2015-03-29T07:02:45.619056Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport_tests.py</path>
</paths>
<msg>* tools/dist/backport_tests.py
  (verify_backport): Correct order of arguments (actual v. expected).</msg>
</logentry>
<logentry
   revision="1669749">
<author>stefan2</author>
<date>2015-03-28T12:02:28.832760Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_base/tree.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/pack.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/pack.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
</paths>
<msg>FS API change:
The new svn_fs_dir_optimal_order shall follow the two pool paradigm.

* subversion/include/svn_fs.h
  (svn_fs_dir_optimal_order): Switch to the appropriate new paradigm.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_dir_optimal_order): Update API implementation.

* subversion/libsvn_fs/fs-loader.h
  (root_vtable_t): Update v-table.

* subversion/libsvn_fs_base/tree.c
  (base_dir_optimal_order): Update BDB implementation.

* subversion/libsvn_fs_fs/tree.c
  (fs_dir_optimal_order): Update FSFS vtable implementation.

* subversion/libsvn_fs_fs/pack.h
  (svn_fs_fs__order_dir_entries): Update internal function signature.

* subversion/libsvn_fs_fs/pack.c
  (svn_fs_fs__order_dir_entries): Update "actual" FSFS implmenentation.

* subversion/libsvn_fs_x/tree.c
  (x_dir_optimal_order): Update FSX vtable implementation.

* subversion/libsvn_fs_x/pack.h
  (svn_fs_x__order_dir_entries): Update internal function signature.

* subversion/libsvn_fs_x/pack.c
  (svn_fs_x__order_dir_entries): Update "actual" FSX implmenentation. 

* subversion/libsvn_repos/reporter.c
  (delta_dirs): Update caller to provide a scratch pool as well.

* subversion/tests/libsvn_fs/fs-test.c
  (test_dir_optimal_order): Same.</msg>
</logentry>
<logentry
   revision="1669746">
<author>stefan2</author>
<date>2015-03-28T11:40:46.626744Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/version.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/id.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs/editor.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_base/id.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_base/tree.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/delta.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs_id.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
</paths>
<msg>FS API change: Rename svn_fs_node_same to svn_fs_node_unchanged.

Note that we currently (ab-)use the same enum in the FS implementation for
ID relationships but this is a mere convenience.  They don't have the same
semantics wrt. to edge cases and don't expose their use of the enum through
the FS API.

* subversion/include/svn_fs.h
  (svn_fs_node_relation_t): Rename said element and document the semantics
                            of all elements in terms of (root, path) pairs
                            other FS API concepts.  Be as strict as feasible.
                            Remove references to #svn_fs_compare_ids as it
                            does _not_ have the same strictness guarantees.

* subversion/libsvn_fs_base/id.c
  (svn_fs_base__id_compare): Update enum element name.

* subversion/libsvn_fs_base/tree.c
  (txn_body_copy): Same.

* subversion/libsvn_fs/editor.c
  (can_modify): Same.

* subversion/libsvn_fs_fs/id.c
  (svn_fs_fs__id_compare): Same.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_compare_ids): Same.

* subversion/libsvn_fs_fs/tree.c
  (fs_node_relation): Same.

* subversion/libsvn_fs_x/fs_id.c
  (id_compare): Same.

* subversion/libsvn_fs_x/tree.c
  (x_node_relation): Same.

* subversion/libsvn_repos/delta.c
  (svn_repos_dir_delta2): Same.

* subversion/mod_dav_svn/repos.c
  (do_out_of_date_check): Same.

* subversion/mod_dav_svn/util.c
  (dav_svn__get_safe_cr): Same.

* subversion/mod_dav_svn/version.c
  (dav_svn__checkout): Same.

* subversion/tests/libsvn_fs/fs-test.c
  (check_related,
   check_txn_related): Same.</msg>
</logentry>
<logentry
   revision="1669743">
<author>stefan2</author>
<date>2015-03-28T10:58:13.199322Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Follow-up to r1654934:
Relax the size check in the FSFS representation sharing code to make it as
effective as in earlier releases.

The size check has been to strict and would not allow two matching reps to
have a different base representation, e.g. mod on /trunk and add-without-
history on a branch.  Mainly depending on the merge policy (catch-up vs.
cherry-pick), this resulted in detecting and eliding fewer instances of
redundant representations.  Hence, larger repositories.

* subversion/libsvn_fs_fs/transaction.c
  (get_shared_rep): Care about the on-disk size only if the fulltext /
                    expanded size is not known - which would be the case
                    for e.g. PLAIN representations.</msg>
</logentry>
<logentry
   revision="1669564">
<author>ivan</author>
<date>2015-03-27T12:35:13.594980Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
</paths>
<msg>* subversion/svnadmin/svnadmin.c
  (sub_main): Add missing break statement.
</msg>
</logentry>
<logentry
   revision="1668999">
<author>rhuijben</author>
<date>2015-03-24T21:45:23.985822Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_ra.h</path>
</paths>
<msg>* subversion/include/svn_ra.h
  (svn_ra_get_log2): Following up on r1668883, fix comment syntax.
</msg>
</logentry>
<logentry
   revision="1668883">
<author>rhuijben</author>
<date>2015-03-24T13:14:11.120687Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/log_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_ra.h</path>
</paths>
<msg>Fix a long standing documentation bug with how all ra layers behave. Add
regression test to use quite a few code paths that weren't touched in
the log tests before, more specifically combinations of ranges and a peg
revision.

* subversion/include/svn_ra.h
  (svn_ra_get_log2): Fix documentation, with how this function always behaved.

* subversion/tests/cmdline/log_tests.py
  (log_on_deleted_deep): Add new regression test.
  (test_list): Add log_on_deleted_deep.
</msg>
</logentry>
<logentry
   revision="1668625">
<author>stsp</author>
<date>2015-03-23T13:06:05.468653Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/diff_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/diff-cmd.c</path>
</paths>
<msg>Implement initial support for 'svn diff --summarize --ignore-properties'.

This is part of issue #4567.

We filter property changes, and paths which only have property changes, in the
svn client during diff display. This is not ideal because we want this feature
to be available in the API and we want to avoid adding further special cases
for different diff modes.
However, this simple patch makes a potential 1.9.x backport easier.
An implementation in libsvn_client is planned for later on trunk (1.10-dev)
and will supersede this patch.

See http://colabti.org/irclogger/irclogger_log/svn-dev?date=2015-03-23#l35
for IRC discussion.

Suggested by: julianfoad
              Chris &lt;devnullaccount@yahoo.se&gt;
http://mail-archives.apache.org/mod_mbox/subversion-dev/201503.mbox/%3C1427103800.22413.YahooMailBasic%40web121602.mail.ne1.yahoo.com%3E

* subversion/svn/diff-cmd.c
  (summarize_baton_t): Add ignore_properties flag.
  (summarize_xml): Filter paths with no text/tree (i.e. property-only) changes.
   Always show property modification status as "none".
  (summarize_regular): Filter paths with no text/tree (i.e. property-only) changes.
   Always show a blank property modification column.
  (svn_cl__diff): Set ignore_properties flag in summarize baton.

* subversion/tests/cmdline/diff_tests.py
  (diff_summarize_ignore_properties, test_list): New test.
</msg>
</logentry>
<logentry
   revision="1668618">
<author>philip</author>
<date>2015-03-23T12:33:22.444057Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/include/svn_types.swg</path>
</paths>
<msg>* subversion/bindings/swig/include/svn_types.swg: Change the
   SWIG Perl binding code that was marked "clearly buggy" so
   that svn_swig_pl_from_md5 follows the same pattern as
   svn_swig_pl_from_stream.  This may fix a SEGV reported
   via Debian: https://bugs.debian.org/780246
</msg>
</logentry>
<logentry
   revision="1668617">
<author>stefan2</author>
<date>2015-03-23T12:30:58.741070Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/mod_dav_svn.h</path>
</paths>
<msg>Revert r1668597.</msg>
</logentry>
<logentry
   revision="1668608">
<author>stefan2</author>
<date>2015-03-23T12:00:08.574335Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
</paths>
<msg>Update pool argument names in functions added to the svn_io.h API in 1.9.
No functional change intended.

* subversion/include/svn_io.h
  (svn_io_file_create_bytes,
   svn_io_file_create_empty): The pool argument is actually a SCRATCH_POOL.
  (svn_stringbuf_from_stream): The pool argument is a pure RESULT_POOL.
  (svn_io_file_aligned_seek): The pool argument is actually a SCRATCH_POOL.

* subversion/libsvn_subr/io.c
  (svn_io_file_create_bytes, 
   svn_io_file_create_empty,
   svn_io_file_aligned_seek): Update implementation. 

* subversion/libsvn_subr/stream.c
  (svn_stringbuf_from_stream): Same.</msg>
</logentry>
<logentry
   revision="1668607">
<author>stefan2</author>
<date>2015-03-23T11:59:28.105636Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/diff_file.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/diff_memory.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_diff.h</path>
</paths>
<msg>Update pool argument names in functions added to the svn_diff.h API in 1.9.
No functional change intended.

* subversion/include/svn_diff.h
  (svn_diff_file_output_merge3,
   svn_diff_mem_string_output_unified3,
   svn_diff_mem_string_output_merge3): The pool argument is a SCRATCH_POOL.
                                       Also, document it.

* subversion/libsvn_diff/diff_file.c
  (svn_diff_file_output_merge3): Update implementation.

* subversion/libsvn_diff/diff_memory.c
  (svn_diff_mem_string_output_unified3,
   svn_diff_mem_string_output_merge3): Same.</msg>
</logentry>
<logentry
   revision="1668604">
<author>rhuijben</author>
<date>2015-03-23T11:40:58.675092Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/diff-cmd.c</path>
</paths>
<msg>Following up on r1668595, fix textual argument reference.

Found by: julianfoad

* subversion/svn/diff-cmd.c
  (svn_cl__diff): Pass right argument name to error function.
</msg>
</logentry>
<logentry
   revision="1668603">
<author>stefan2</author>
<date>2015-03-23T11:39:50.216387Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_wc.h</path>
</paths>
<msg>Fix docstring issues in svn_wc.h found during 1.9 API review.
No functional change.

* subversion/include/svn_wc.h
  (svn_wc_conflict_description2_t): Make Doxygen recognize element
                                    descriptions.
  (svn_wc_status3_t): Use Doxygen links for xrefs.
</msg>
</logentry>
<logentry
   revision="1668602">
<author>stefan2</author>
<date>2015-03-23T11:39:32.650840Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_string.h</path>
</paths>
<msg>Fix docstring issues in svn_string.h found during 1.9 API review.
No functional change.

* subversion/include/svn_string.h
  (svn_stringbuf_appendbyte,
   svn_stringbuf_appendbytes,
   svn_stringbuf_appendfill,
   svn_stringbuf_appendstr,
   svn_stringbuf_appendcstr): Capitalization fix.</msg>
</logentry>
<logentry
   revision="1668600">
<author>stefan2</author>
<date>2015-03-23T11:39:17.458629Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_ra.h</path>
</paths>
<msg>Fix docstring issues in svn_ra.h found during 1.9 API review.
No functional change.

* subversion/include/svn_ra.h
  (svn_ra_close_tunnel_func_t): Refer to the correct correct parameter.
  (svn_ra_get_file_revs2): Clarify wording; bring it in line with svn_repos.</msg>
</logentry>
<logentry
   revision="1668599">
<author>stefan2</author>
<date>2015-03-23T11:39:00.119225Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_io.h</path>
</paths>
<msg>Fix docstring issues in svn_io.h found during 1.9 API review.
No functional change.

* subversion/include/svn_io.h
  (svn_io_file_create): Remove incomplete @since statement.
                        This function has been available since 1.0.
                        Say 'NULL' when referring to a NULL pointer.
  (svn_io_file_create_bytes): Say 'NULL' when referring to a NULL pointer.
  (svn_io_file_seek): Remove reference to pre-1.3 APR as it is no longer
                      supported. Simplify sentence.</msg>
</logentry>
<logentry
   revision="1668598">
<author>stefan2</author>
<date>2015-03-23T11:38:54.118292Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_config.h</path>
</paths>
<msg>Fix docstring issues in svn_config.h found during 1.9 API review.
No functional change.

* subversion/include/svn_config.h
  (svn_config_auth_walk_func_t): Document the walk_baton parameter.</msg>
</logentry>
<logentry
   revision="1668597">
<author>stefan2</author>
<date>2015-03-23T11:38:04.170459Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/mod_dav_svn.h</path>
</paths>
<msg>[Reverted in r1668617]
Fix docstring issues in mod_dav_svn.h found during 1.9 API review.
No functional change.

* subversion/include/mod_dav_svn.h
  (dav_svn_split_uri,
   dav_svn_get_repos_path): Add Doxygen deprecation info.  We can't use
                            SVN_DEPRECATED here due to header restrictions.</msg>
</logentry>
<logentry
   revision="1668595">
<author>rhuijben</author>
<date>2015-03-23T11:33:14.259873Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/diff-cmd.c</path>
</paths>
<msg>* subversion/svn/diff-cmd.c
  (svn_cl__diff): Return an error on using many ignored arguments.
</msg>
</logentry>
<logentry
   revision="1668340">
<author>breser</author>
<date>2015-03-22T04:17:04.701734Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/perl/native/Core.pm</path>
</paths>
<msg>Add missing POD directives to resolve pod2man warnings

* subversion/bindings/swig/perl/native/Core.pm
  (svn_log_entry_t): Add missing "=over 4" and "=back" directives

Patch by: James McCoy &lt;jamessan{_AT_}debian.org&gt;
</msg>
</logentry>
<logentry
   revision="1668329">
<author>rhuijben</author>
<date>2015-03-21T23:32:24.474518Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
</paths>
<msg>Following up on r1668323, revert regression that the session url is
allocated in the wrong pool.

* subversion/libsvn_ra_serf/serf.c
  (svn_ra_serf__open): Allocate uri result in session pool.
</msg>
</logentry>
<logentry
   revision="1668323">
<author>rhuijben</author>
<date>2015-03-21T21:32:36.129510Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
</paths>
<msg>Use scratch pool for a few allocations during construction of ra session
in ra-serf.

* subversion/libsvn_ra_serf/serf.c
  (load_config): Use dual pools.
  (svn_ra_serf__open): Pass uri to scratch pool. Update caller.
  (ra_serf_dup_session): Update caller.
</msg>
</logentry>
<logentry
   revision="1668320">
<author>rhuijben</author>
<date>2015-03-21T21:09:42.912626Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/update.c</path>
</paths>
<msg>Resolve a minor memory leak against pre 1.5 servers when running update
like operations using ra-serf.

* subversion/libsvn_ra_serf/update.c
  (make_update_reporter): Allocate depth filter in the result pool instead
    of the session pool.
</msg>
</logentry>
<logentry
   revision="1668117">
<author>stefan2</author>
<date>2015-03-20T19:01:42.170302Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Partially undo r1667524.  One of the tests is hard-coded to always use FSFS.

* subversion/tests/libsvn_fs/fs-test.c
  (test_create_with_config_opts): Rename to ...
  (test_fsfs_config_opts): ... this. Execute for FSFS only.
  (test_funcs): Update function name and test description.</msg>
</logentry>
<logentry
   revision="1668107">
<author>stefan2</author>
<date>2015-03-20T18:02:07.522039Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_fs/fs-test.c
  (unordered_txn_dirprops,
   dir_prop_merge,
   test_paths_changed,
   test_print_modules): In the FS tests, use symbolic FS constants
                        instead of hard-coded literals.</msg>
</logentry>
<logentry
   revision="1668052">
<author>brane</author>
<date>2015-03-20T15:28:43.858780Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/dist/release.py</path>
</paths>
<msg>Follow up to r1667990, make the copyright year check more
complete and a bit faster.

* tools/dist/release.py
  (_current_year, _copyright_re): New.
  (check_copyright_year):
   Search the whole file contents in one go; no need to split it
   into separate lines first. Look at subversion/libsvn_subr/version.c
   as well as the NOTICE file.
</msg>
</logentry>
<logentry
   revision="1667990">
<author>philip</author>
<date>2015-03-20T12:01:47.384569Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/dist/release.py</path>
</paths>
<msg>* tools/dist/release.py
  (check_copyright_year): New.
  (roll_tarballs): Warn if NOTICE does not contain the current year.
</msg>
</logentry>
<logentry
   revision="1667976">
<author>brane</author>
<date>2015-03-20T10:22:22.677722Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/NOTICE</path>
</paths>
<msg>* NOTICE: Bump copyright year.</msg>
</logentry>
<logentry
   revision="1667941">
<author>brane</author>
<date>2015-03-20T07:08:17.892702Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/version.c</path>
</paths>
<msg>* subversion/libsvn_subr/version.c
  (svn_version_extended): Bump copyright year.
</msg>
</logentry>
<logentry
   revision="1667917">
<author>rhuijben</author>
<date>2015-03-20T01:29:31.143178Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/properties.c</path>
</paths>
<msg>* subversion/libsvn_subr/properties.c
  (svn_prop_has_svn_prop): Simplify code. Remove unneeded cast.
</msg>
</logentry>
<logentry
   revision="1667738">
<author>rhuijben</author>
<date>2015-03-19T13:15:42.001017Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/RemoteSession.cpp</path>
</paths>
<msg>* subversion/bindings/javahl/native/RemoteSession.cpp
  (RemoteSession::RemoteSession): Add ### comment.
</msg>
</logentry>
<logentry
   revision="1667737">
<author>rhuijben</author>
<date>2015-03-19T13:10:49.768453Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/RemoteSession.h</path>
</paths>
<msg>Tweak some comments. There should be no functional changes.

* subversion/bindings/javahl/native/RemoteSession.h
  (~RemoteSession): Add virtual... Unneeded (because already on base class),
    but makes this class similar to the other classes.
  (getFileRevisions): Remove already resolved TODO.
</msg>
</logentry>
<logentry
   revision="1667715">
<author>rhuijben</author>
<date>2015-03-19T12:02:54.337049Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/config_win.c</path>
</paths>
<msg>* subversion/libsvn_subr/config_win.c
  (svn_config__parse_registry): Properly handle ERROR_INVALID_HANDLE,
     every once in a while returned when running from a Windows service
     without a user profile loaded.

Found by: SharpSvn buildbot
</msg>
</logentry>
<logentry
   revision="1667700">
<author>stsp</author>
<date>2015-03-19T11:05:39.928284Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Follow-up to r1667699:

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict): Properly calculate options array size.

Found by: rhuijben
</msg>
</logentry>
<logentry
   revision="1667699">
<author>stsp</author>
<date>2015-03-19T10:56:50.608259Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Follow-up to r1667692:

Blind attempt to fix a build failure with Windows compilers:
conflict-callbacks.c(746): error C2466: cannot allocate an array of
constant size 0

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict): Allocate options dynamically.
</msg>
</logentry>
<logentry
   revision="1667693">
<author>stsp</author>
<date>2015-03-19T10:29:53.055166Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (text_conflict_options): Indicate the --accept option which corresponds to
   the 'r' option, as already done for other options.
</msg>
</logentry>
<logentry
   revision="1667692">
<author>stsp</author>
<date>2015-03-19T10:27:05.153121Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>In the interactive conflict resolver, offer a reduced set of resolution
options for binary files. Not all text conflict options are valid for
binary files.

* subversion/svn/conflict-callbacks.c
  (binary_conflict_options): New table of options for binary files.
  (handle_text_conflict): Offer binary file options for binaries.
    Don't recommend the 'mine-full' option if desc-&gt;my_abspath is NULL since
    libsvn_wc will error out (or, before r1667691, assert) in this case.
</msg>
</logentry>
<logentry
   revision="1667691">
<author>stsp</author>
<date>2015-03-19T10:21:57.952144Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>Replace an assertion which is triggerable from the conflict resolver
with a proper error message.

* subversion/libsvn_wc/conflicts.c
  (build_text_conflict_resolve_items): If no path to install from was found
   raise an error explaining the problem instead of asserting.
</msg>
</logentry>
<logentry
   revision="1667684">
<author>stsp</author>
<date>2015-03-19T09:47:47.220168Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/update_tests.py</path>
</paths>
<msg>Revert r1667283 as well. Should have been reverted with r1667280 in r1667682.
</msg>
</logentry>
<logentry
   revision="1667682">
<author>stsp</author>
<date>2015-03-19T09:30:47.317412Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/merge_tests.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/merge.c</path>
</paths>
<msg>Revert r1667280.

As Bert pointed out historical behaviour and the svnbook disagree with the
change. We'll need some other way to fix the 'mine-full' binary file problem.

Discussion:
http://mail-archives.apache.org/mod_mbox/subversion-dev/201503.mbox/%3C01fd01d060f6%24f0d1ffa0%24d275fee0%24%40qqmail.nl%3E
</msg>
</logentry>
<logentry
   revision="1667538">
<author>stefan2</author>
<date>2015-03-18T13:20:08.078492Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/verify.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_fs_fs_private.h</path>
</paths>
<msg>Formatting fixes.  No functional change.

* subversion/include/private/svn_fs_fs_private.h
  (svn_fs_fs__large_change_i,
   svn_fs_fs__id_part_t): Wrap around before 80 colums.

* subversion/libsvn_fs_fs/verify.c
  (expect_buffer_nul): Same.</msg>
</logentry>
<logentry
   revision="1667535">
<author>stsp</author>
<date>2015-03-18T13:18:21.362656Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Declare 1.8.12 as unreleased. Move related changes to 1.8.13.
   1.8.12 has diff_test assertion failures fixed in 1.8.x since r1667533.
</msg>
</logentry>
<logentry
   revision="1667530">
<author>julianfoad</author>
<date>2015-03-18T13:10:29.089882Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_fs/fs-test.c
  (check_txn_related): Fix comments.</msg>
</logentry>
<logentry
   revision="1667524">
<author>stefan2</author>
<date>2015-03-18T12:33:03.948029Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>A few FSFS-only tests apply to FSX just as well.  So, run them for
any non-BDB repo.

* subversion/tests/libsvn_fs/fs-test.c
  (test_fsfs_config_opts): Rename to ...
  (test_create_with_config_opts): ... this. Skip for BDB only.
  (test_modify_txn_being_written): Skip for BDB only.
  (test_funcs): Update function name and test descriptions.

Suggested by: julianfoad</msg>
</logentry>
<logentry
   revision="1667516">
<author>brane</author>
<date>2015-03-18T12:00:49.426966Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/svn-x64-macosx/svnbuild.sh</path>
</paths>
<msg>* tools/buildbot/slaves/svn-x64-macosx/svnbuild.sh: Configure test builds
   with --enable-debug so that assertions make it to the compiled binaries;
   otherwise the builders won't catch a large class of errors.
</msg>
</logentry>
<logentry
   revision="1667503">
<author>philip</author>
<date>2015-03-18T11:24:15.276488Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/Makefile.in</path>
</paths>
<msg>* Makefile.in
  (swig-pl): Avoid creating a '*.c' symbolic link when there are
   no .c files in the source directory.
</msg>
</logentry>
<logentry
   revision="1667485">
<author>stsp</author>
<date>2015-03-18T10:41:30.329216Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: List more changes for 1.7.20. Add prospected 1.7.20 release date.
</msg>
</logentry>
<logentry
   revision="1667482">
<author>julianfoad</author>
<date>2015-03-18T10:29:13.329130Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/load_editor.c</path>
</paths>
<msg>* subversion/svnrdump/load_editor.c
  (new_node_record,
  close_revision): For clarity, introduce a variable 'head_rev_before_commit'
    to hold the expression 'rb-&gt;rev - rb-&gt;rev_offset - 1'.

Inspired by r1664684.</msg>
</logentry>
<logentry
   revision="1667481">
<author>stsp</author>
<date>2015-03-18T10:26:50.434822Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: List additional changes merged in time for 1.8.12.
   Add a prospected release date for 1.8.12.
</msg>
</logentry>
<logentry
   revision="1667478">
<author>julianfoad</author>
<date>2015-03-18T10:16:04.041207Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/load_editor.c</path>
</paths>
<msg>* subversion/svnrdump/load_editor.c
  (new_revision_record): Simplify.</msg>
</logentry>
<logentry
   revision="1667477">
<author>julianfoad</author>
<date>2015-03-18T10:13:13.136667Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/load_editor.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/fsfs-access-map.c</path>
</paths>
<msg>Never use atoi() for converting rev nums; use SVN_STR_TO_REV() instead,
which is a wrapper around atol().

* subversion/svnrdump/load_editor.c
  (new_revision_record,
   new_node_record): s/atoi/SVN_STR_TO_REV/

* tools/dev/fsfs-access-map.c
  (open_file): s/atoi/SVN_STR_TO_REV/
</msg>
</logentry>
<logentry
   revision="1667476">
<author>julianfoad</author>
<date>2015-03-18T10:03:00.385778Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_fs_fs_private.h</path>
</paths>
<msg>* subversion/include/private/svn_fs_fs_private.h
  (svn_fs_fs__id_part_t): Fix and clarify commentary.</msg>
</logentry>
<logentry
   revision="1667471">
<author>rhuijben</author>
<date>2015-03-18T09:02:38.510778Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/diff_editor.c</path>
</paths>
<msg>Fix a bad assertion in the diff callback wrappers that tried to check that
a node wasn't added and existed at the same time.

This function will be called for adds, simple-changes and deletes, and
as such determines what happens based on these arguments. Because these
old diff callbacks didn't pass all information on their users the converted
drivers sometimes just forgot to pass information (such as copyfrom). One
of the drivers was recently fixed on 1.8.x and uncovered this problem.

* subversion/libsvn_wc/diff_editor.c
  (wrap_dir_opened): Fix bad assertion.
</msg>
</logentry>
<logentry
   revision="1667315">
<author>rhuijben</author>
<date>2015-03-17T14:38:06.093024Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/reports/get-location-segments.c</path>
</paths>
<msg>Following up on r1667233, provide an APR error code for Subversion
clients in mod_dav_svn.

* subversion/mod_dav_svn/reports/get-location-segments.c
  (dav_svn__get_location_segments_report): Pass the apr error
    the other ra layers return for a similar error.
</msg>
</logentry>
<logentry
   revision="1667301">
<author>rhuijben</author>
<date>2015-03-17T13:30:24.345695Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/serve.c</path>
</paths>
<msg>Following up on r1667233, report errors from svnserve's get_location_segments
function in a way that the caller doesn't get a protocol error. Change the
error values to match what get_location_segments would return.

* subversion/svnserve/serve.c
  (get_location_segments): Write done before writing the error.
</msg>
</logentry>
<logentry
   revision="1667290">
<author>rhuijben</author>
<date>2015-03-17T12:31:42.495189Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/wc_db.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_wc/conflict-data-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/workqueue.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/questions.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/info.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_wc/op-depth-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/delete.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/tree_conflicts.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/props.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/wc_db_update_move.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/entries.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/copy.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/wc_db_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc.h</path>
</paths>
<msg>When obtaining conflicts from wc-db, also allow directly obtaining properties.
We already read from the records that have the data, so this doesn't have a
real cost, while reading them separately (introduced in r1667228) does.

The final result after the combination of these patches is that we provide
better information using less database transactions, so this provides an
overall performance improvement.

This patch also makes the resolver avoid creating temporary files during
resolves where the code already knows that nobody is using these files,
because there is no resolver callback.

* subversion/libsvn_wc/conflicts.c
  (read_prop_conflict_descs): Stop abusing no tempfile flag for not showing
    details. Only read base properties if we don't already have them.
  (svn_wc__read_conflicts): Allow obtaining skel in one step, and not reading
    not-tree conflicts.
  (resolve_tree_conflict_on_node,
   svn_wc__mark_resolved_text_conflict,
   svn_wc__mark_resolved_prop_conflicts): Update caller.
  (conflict_status_walker): Use one db operation instead of two.

* subversion/libsvn_wc/copy.c
  (copy_versioned_file,
   remove_node_conflict_markers): Update caller.

* subversion/libsvn_wc/delete.c
  (create_delete_wq_items): Update caller.

* subversion/libsvn_wc/entries.c
  (read_one_entry): Update caller.

* subversion/libsvn_wc/info.c
  (build_info_for_node): Update caller.
  (svn_wc__get_info): Update caller.

* subversion/libsvn_wc/props.c
  (svn_wc__create_prejfile): Update caller.

* subversion/libsvn_wc/questions.c
  (internal_conflicted_p): Update caller.

* subversion/libsvn_wc/tree_conflicts.c
  (svn_wc__get_tree_conflict): Update caller.

* subversion/libsvn_wc/wc.h
  (svn_wc__read_conflicts): Add two arguments.

* subversion/libsvn_wc/wc_db.c
  (op_revert_txn): Update caller.
  (svn_wc__db_read_conflict,
   svn_wc__db_read_conflict_internal): Handle properties.

* subversion/libsvn_wc/wc_db.h
  (svn_wc__db_read_conflict): Add optional properties argument.

* subversion/libsvn_wc/wc_db_private.h
  (svn_wc__db_read_conflict_internal): Add optional properties argument.

* subversion/libsvn_wc/wc_db_update_move.c
  (create_tree_conflict,
   bump_moved_layer,
   svn_wc__db_op_raise_moved_away): Update caller.

* subversion/libsvn_wc/workqueue.c
  (run_prej_install,
   run_set_text_conflict_markers,
   run_set_property_conflict_marker): Update caller.

* subversion/tests/libsvn_wc/conflict-data-test.c
  (test_prop_conflict_resolving,
   test_binary_file_conflict): Update caller.

* subversion/tests/libsvn_wc/op-depth-test.c
  (check_db_conflicts): Update caller.
</msg>
</logentry>
<logentry
   revision="1667283">
<author>stsp</author>
<date>2015-03-17T12:23:54.493241Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/update_tests.py</path>
</paths>
<msg>Follow-up to r1667280: Fix a test failure.

* subversion/tests/cmdline/update_tests.py
  (update_binary_file): Add 'theta.mine' to extra on-disk files.
</msg>
</logentry>
<logentry
   revision="1667280">
<author>stsp</author>
<date>2015-03-17T12:05:10.897649Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/merge_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/merge.c</path>
</paths>
<msg>Always install a .mine file for conflicted binary files, not just in
case the binary file was detranslated.

This makes the 'mine-full' option work again from the conflict prompt.
Before this change, an assertion in libsvn_wc failed when the 'mine-full'
option was used since no path for 'mine' was recorded in conflict storage.

* subversion/libsvn_wc/merge.c
  (merge_binary_file): Always create .mine, if necessary as a copy
   of the conflicted working file. Update docstring.

* subversion/tests/cmdline/merge_tests.py
  (dry_run_merge_conflicting_binary): Update on-disk test expectations.
</msg>
</logentry>
<logentry
   revision="1667261">
<author>kotkov</author>
<date>2015-03-17T11:00:55.102024Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Use the correct tag for 1.7.20.
</msg>
</logentry>
<logentry
   revision="1667260">
<author>kotkov</author>
<date>2015-03-17T10:58:22.354721Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Update 1.8.12 and 1.7.20 entries.
</msg>
</logentry>
<logentry
   revision="1667258">
<author>rhuijben</author>
<date>2015-03-17T10:55:45.696235Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/update_editor.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/conflicts.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/merge.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/props.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>Avoid a db operation for each property conflict in some invocations of
the interactive conflict resolver.

* subversion/libsvn_wc/conflicts.c
  (generate_propconflict): Add kind argument.
  (svn_wc__conflict_invoke_resolver): Update caller. Add argument.

* subversion/libsvn_wc/conflicts.h
  (svn_wc__conflict_invoke_resolver): Add kind argument.

* subversion/libsvn_wc/merge.c
  (svn_wc_merge5): Extend scope of variable. Update caller.

* subversion/libsvn_wc/props.c
  (svn_wc_merge_props3): Update caller.

* subversion/libsvn_wc/update_editor.c
  (delete_entry,
   close_directory,
   absent_node,
   close_file): Update caller.
</msg>
</logentry>
<logentry
   revision="1667250">
<author>stsp</author>
<date>2015-03-17T10:46:53.535733Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (handle_text_conflict): Clearly identify a binary file as 'binary' in the
   conflict menu prompt.
</msg>
</logentry>
<logentry
   revision="1667249">
<author>stsp</author>
<date>2015-03-17T10:42:24.238047Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (handle_text_conflict): Don't allow diffs for binary files.
   This restores the 'mine-full' and 'theirs-full' options for binary files,
   which since r1667228 had no options other than 'edit' and 'postpone'.
</msg>
</logentry>
<logentry
   revision="1667237">
<author>stsp</author>
<date>2015-03-17T10:22:40.045514Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_main.c</path>
</paths>
<msg>Revert r1667199, which a disable-sleep-for-timestamps API for C tests.
These API was added for a new test committed in r1667228.
As of r1667234 the test does not need to disable sleep for timestamps anymore.
It uses a better workaround: Ensure the file's size changes, too.
</msg>
</logentry>
<logentry
   revision="1667235">
<author>kotkov</author>
<date>2015-03-17T10:18:42.865093Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/deadprops.c</path>
</paths>
<msg>mod_dav_svn: Reject invalid transaction property change requests.

* subversion/mod_dav_svn/deadprops.c
  (change_txn_prop): New helper function that performs sanity checking.
  (save_value, db_remove): Use new helper.
</msg>
</logentry>
<logentry
   revision="1667234">
<author>stsp</author>
<date>2015-03-17T10:17:27.097652Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_wc/conflict-data-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_wc/conflict-data-test.c
  (test_binary_file_conflict): Ensure that file size changes when
   the binary file is changed. Makes sleep for timestamp unnecessary.

Suggested by: rhuijben
</msg>
</logentry>
<logentry
   revision="1667233">
<author>kotkov</author>
<date>2015-03-17T10:17:01.172785Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/reports/get-location-segments.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/serve.c</path>
</paths>
<msg>Reject invalid get-location-segments requests in mod_dav_svn and svnserve.

* subversion/mod_dav_svn/reports/get-location-segments.c
  (dav_svn__get_location_segments_report): Extend the sanity check.

* subversion/svnserve/serve.c
  (get_location_segments): Extend the sanity check.
</msg>
</logentry>
<logentry
   revision="1667228">
<author>stsp</author>
<date>2015-03-17T10:05:53.755808Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_wc/conflict-data-test.c</path>
</paths>
<msg>Fix text conflict description for binary files.

The is_binary flag in conflict description was set to zero even
for binary files. As a result, 'svn resolve' offered 'mine-conflict'
and 'theirs-conflict' options which don't make any sense for binaries.

Add a regression test to catch this problem in the future.

* subversion/libsvn_wc/conflicts.c
  (read_text_conflict_desc): Drop is_binary paramter. Use the mime type to
   detemine whether the conflicted file is binary.
  (svn_wc__conflict_invoke_resolver): Stop passing FALSE for is_binary.
   Let read_text_conflict_desc figure it out based on the mime type.
  (svn_wc__read_conflicts): Read WORKING properties for text-conflicted files
   and pass the mime type to read_text_conflict_desc().

* subversion/tests/libsvn_wc/conflict-data-test.c
  (test_binary_file_conflict, test_funcs): New test.
</msg>
</logentry>
<logentry
   revision="1667199">
<author>stsp</author>
<date>2015-03-17T09:17:47.003353Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/svn_test_main.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/svn_test.h</path>
</paths>
<msg>[ Note from the future: Reverted in r1667237 ]

Provide a way for C tests to enable sleep for timestamps.

Needed for an upcoming new test. No functional change.

* subversion/tests/svn_test.h
  (svn_test__enable_sleep_for_timestamps,
   svn_test__disable_sleep_for_timestamps): Declare.

* subversion/tests/svn_test_main.c
  (svn_test__enable_sleep_for_timestamps,
   svn_test__disable_sleep_for_timestamps): New.
  (svn_test_main): Use svn_test__disable_sleep_for_timestamps() rather
   than calling apr_env_set directly.
</msg>
</logentry>
<logentry
   revision="1667120">
<author>rhuijben</author>
<date>2015-03-16T20:19:38.950855Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/reports/log.c</path>
</paths>
<msg>Following up on r1666965, reduce the maximum number of extra flushes to
just four and update most comments, to explain the brigade behavior it
uses.

This keeps the algorithm very simple, while it should resolve most of the
compaints on adding too many flushes to the existing code.

* subversion/mod_dav_svn/reports/log.c
  (log_receiver): Make next flush interval 4 times bigger and stop
    earlier. Don't check if we just flushed, as we still want to make
    output filters flush as well.
  (dav_svn__log_report): Update initial value.
</msg>
</logentry>
<logentry
   revision="1667107">
<author>stefan2</author>
<date>2015-03-16T19:14:37.318331Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_repos.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/repos.c</path>
</paths>
<msg>Explicitly rename pools to scratch_pool / result_pool for new 1.9
declarations in the SVN Repos API after 1.9 review.  Update the
implementatation.  No functional change intended.

* subversion/include/svn_repos.h
  (svn_repos_fs_type): The pool parameter is a pure RESULT_POOL.
                       Have each argument on a separate line.
  (svn_repos_hotcopy3): The pool parameter is mere SCRATCH_POOL.
                        Mention it in the docstring. 

* subversion/libsvn_repos/repos.c
  (svn_repos_fs_type,
   svn_repos_hotcopy3): Reflect header changes in the implementation.</msg>
</logentry>
<logentry
   revision="1667106">
<author>stefan2</author>
<date>2015-03-16T19:03:02.967682Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
</paths>
<msg>Explicitly rename pools to scratch_pools for new 1.9 declarations in the
FS API after 1.9 review.  Update the implementatation outside the actual
FS modules.  No functional change intended.

* subversion/include/svn_fs.h
  (svn_fs_upgrade_notify_t,
   svn_fs_upgrade2,
   svn_fs_hotcopy_notify_t,
   svn_fs_node_relation,
   svn_fs_props_different, 
   svn_fs_contents_different): The POOL is actually a mere SCRATCH_POOL.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_upgrade2,
   svn_fs_node_relation,
   svn_fs_props_different,
   svn_fs_contents_different): Reflect API pool name changes in the
                               implementation.

* subversion/libsvn_fs/fs-loader.h
  (fs_library_vtable_t.upgrade_fs,
   root_vtable_t.node_relation,
   root_vtable_t.props_changed,
   root_vtable_t.contents_changed): Do the same in our vtables.</msg>
</logentry>
<logentry
   revision="1667102">
<author>stefan2</author>
<date>2015-03-16T18:31:01.927889Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_fs/fs-test.c
  (check_txn_related): Test root nodes and copies thereof as well.

Suggested by: julianfoad</msg>
</logentry>
<logentry
   revision="1667101">
<author>stefan2</author>
<date>2015-03-16T18:28:38.879488Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
</paths>
<msg>Follow-up to r1665894:  Don't falsly report transaction roots noderevs
to be the same as the root noderev of their base revision.

* subversion/libsvn_fs_fs/tree.c
  (fs_node_relation): As it turns out, txn root objects report their base
                      revisions instead of "-1" in REV.

* subversion/libsvn_fs_x/tree.c
  (x_node_relation): Same.</msg>
</logentry>
<logentry
   revision="1667090">
<author>stefan2</author>
<date>2015-03-16T18:00:30.673844Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/tree.c
  (fs_node_relation): Clarify comment. No functional change.

Suggested by: julianfoad</msg>
</logentry>
<logentry
   revision="1666965">
<author>rhuijben</author>
<date>2015-03-16T11:30:04.841769Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/reports/log.c</path>
</paths>
<msg>Reduce the perceived very slow operation of svn log URL via mod_dav on
large result sets that return not that much data, by flushing the
httpd output cache a few times for the 'first few log results'.

Usually httpd tries to produce data 8 KByte at a time, but depending on
the type of log request this may be every few hundred revisions and
in not that uncommon cases on svn.apache.org only after 5-30 seconds.
This patch explicitly flushes the caching after 1,2,4,8,16,...2048
results, so the log handling will appear to be streamy as expected,
while it falls back to the original handling when retrieving very
many/all revisions.

In theory this makes the log report a bit slower, because flushes cost
a bit performance... but in general you (and some operations like
'svn merge') just want the first result (or first few results) as fast
as possible. (And in many cases ^C or SVN_ERR_CEASE_INVOCATION, the
remaining results).

This patch should reduce the initial delay before the first result of:
$ svn log ^/subversion/branches/1.8.x -q
which is currently about 10 seconds for me, to less than a second.

See the '1.9.x JavaHL: long initial delay when performing a log' thread
for an even worse example.

This minor fix migh just fix one of the reasons why many users call
Subversion slow, and prefer a local repository.

* subversion/mod_dav_svn/reports/log.c
  (log_receiver_baton): Add two variables.
  (log_receiver): Add explicit flush code on every 2^x for x 0..11 revisions.
  (dav_svn__log_report): Update baton init.
</msg>
</logentry>
<logentry
   revision="1666954">
<author>rhuijben</author>
<date>2015-03-16T10:40:30.638732Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/diff_memory.c</path>
</paths>
<msg>Following up on r1666432, apply the same change in the diff memory logic to
suppress a similar warning there.

* subversion/libsvn_diff/diff_memory.c
  (context_saver_t): Use signed size variable. Rename to match file logic.
  (context_saver_stream_write,
   output_conflict_with_context): Update usages.
</msg>
</logentry>
<logentry
   revision="1666951">
<author>rhuijben</author>
<date>2015-03-16T10:35:08.261087Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/diff_memory.c</path>
</paths>
<msg>Remove an unused output argument from a diff internal helper function.

* subversion/libsvn_diff/diff_memory.c
  (output_merge_token_range): Remove lines_printed argument.
  (output_common_modified,
   output_latest,
   output_conflict,
   output_conflict_with_context): Update caller.
</msg>
</logentry>
<logentry
   revision="1666940">
<author>danielsh</author>
<date>2015-03-16T09:21:33.679947Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES (1.9.0): Copyedit.
    Remove two entries due to being implementation details.
    Avoid internal terminology.
    Describe effects in preference to causes.
    Move four entries from 'server-related' to 'client-related'.</msg>
</logentry>
<logentry
   revision="1666938">
<author>danielsh</author>
<date>2015-03-16T09:19:45.951367Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES (1.8.1): Capitalize 'RA'.</msg>
</logentry>
<logentry
   revision="1666851">
<author>rhuijben</author>
<date>2015-03-16T02:18:05.172585Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/RemoteSession.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNRemoteTests.java</path>
</paths>
<msg>In JavaHL: Make RemoteSession.getLog() implement its documented behavior
when the list of revision properties is NULL.

* subversion/bindings/javahl/native/RemoteSession.cpp
  (RemoteSession::getLog): Pass NULL revision property list if java provides
    a NULL list. (An empty list is handled as no properties. The Iterator
    handles NULL as no items).

* subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNRemoteTests.java
  (testGetLog): Assert that revision properties are really fetched.
</msg>
</logentry>
<logentry
   revision="1666832">
<author>rhuijben</author>
<date>2015-03-15T19:44:14.077163Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/update_editor.c</path>
</paths>
<msg>In the working copy update-editor: handle finding incomplete nodes where no
BASE node is expected the same as finding status 'normal' nodes: by checking
for driving errors and obstructing working copies.

This avoids an assertion in the tree conflict detection code when a
bad update driver tries to add something that is already there.
It looks like restarting a cancelled checkout from github can trigger this
problem. In this case just partially skipping the checkout allows the checkout
to complete the parent directory; likely fixing the working copy.

* subversion/libsvn_wc/update_editor.c
  (add_directory,
   add_file): Handle incomplete like normal.
</msg>
</logentry>
<logentry
   revision="1666690">
<author>rhuijben</author>
<date>2015-03-14T14:30:17.437135Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/merge_tree_conflict_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/merge.c</path>
</paths>
<msg>In the libsvn_client merge code: When reporting and recording that we skip a
node because it is shadowed on an ancestor, properly record that the
ancestor is skipped instead of the descendant itself.

* subversion/libsvn_client/merge.c
  (record_skip): Only record a skip, if we really skipped this node, and
    not one of its ancestors. To do this handle this add a parent-baton
    argument to this function.
  (merge_file_changed,
   merge_file_added,
   merge_file_deleted): Update caller.

  (merge_dir_opened): Not only skip the directory add, but also record it
    as skipped.

  (merge_dir_changed,
   merge_dir_added,
   merge_dir_deleted,
   merge_node_absent): Update caller.

* subversion/tests/cmdline/merge_tree_conflict_tests.py
  (merge_obstruction_recording): New function.
  (test_list): Add merge_obstruction_recording.

Found by: Pete Harlan &lt;pchpublic88{_AT_}gmail.com&gt;
</msg>
</logentry>
<logentry
   revision="1666449">
<author>julianfoad</author>
<date>2015-03-13T13:51:37.542528Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>* subversion/include/svn_fs.h
  (svn_fs_node_relation_t): Say 'node-revision' instead of 'node' in comments,
    for clarity.</msg>
</logentry>
<logentry
   revision="1666432">
<author>brane</author>
<date>2015-03-13T12:56:03.735255Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/diff_file.c</path>
</paths>
<msg>Revert r1665853 and take a different approach to silencing
the warning it tried to fix.

* subversion/libsvn_diff/diff_file.c
  (struct svn_diff3__file_output_baton_t): Change context_size back to int.
  (context_saver_t): Rename total_written to total_writes and make it signed.
   The former name and type were misleading; it's not counting the amount of
   written data, but how many times the context_saver_stream_write function
   was called.
  (context_saver_stream_write, output_conflict_with_context):
   Adjust for the renamed context_saver_t field.
</msg>
</logentry>
<logentry
   revision="1666429">
<author>brane</author>
<date>2015-03-13T12:47:51.454639Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_subr/auth-test.c</path>
</paths>
<msg>Make the latest auth test work with --disable-plaintext-password-storage.

* subversion/tests/libsvn_subr/auth-test.c
  (test_save_cleartext): When plaintext-password storage is disabled at
   configure time, the test expects no calls at all to the provider.
</msg>
</logentry>
<logentry
   revision="1666379">
<author>rhuijben</author>
<date>2015-03-13T09:11:28.281305Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_error_codes.h</path>
</paths>
<msg>Following up on r1666096, introduce new error code for http status 405.

* subversion/include/svn_error_codes.h
  (SVN_ERR_RA_DAV_METHOD_NOT_ALLOWED): New error code.
  (SVN_ERR_RA_SERF_SSPI_INITIALISATION_FAILED,
   SVN_ERR_RA_SERF_SSL_CERT_UNTRUSTED): Deprecate errors that haven't been
     used since serf 1.0.

* subversion/libsvn_ra_serf/util.c
  (svn_ra_serf__error_on_status,
   svn_ra_serf__unexpected_status): Use new error code.
</msg>
</logentry>
<logentry
   revision="1666375">
<author>rhuijben</author>
<date>2015-03-13T08:55:30.579429Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/win32-SharpSvn/svntest-build-bindings.cmd</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/win32-SharpSvn/svntest-bindings.cmd</path>
</paths>
<msg>On the Windows buildbots: stop testing swig-perl on &lt;= 1.8. Modern
perl versions only have clean compilation support for mingw, and our
fixes for other compilersare only part of the dependency refactoring
in 1.9.

* tools/buildbot/slaves/win32-SharpSvn/svntest-bindings.cmd
* tools/buildbot/slaves/win32-SharpSvn/svntest-build-bindings.cmd
  Remove 1.8 support code, that used to 'work' when we build on the
  VS2008 toolchain on an older VM.
</msg>
</logentry>
<logentry
   revision="1666272">
<author>rhuijben</author>
<date>2015-03-12T18:45:48.890841Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/update_editor.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/prop_tests.py</path>
</paths>
<msg>Following up on r1659365 fix a segfault when the root of an update gets
conflicted.

Found by: philip

* subversion/libsvn_wc/update_editor.c
  (close_directory): Following up on r1659365, don't try to check if the
    update root is registered as replaced in its parent, which caused
    a segfault.

* subversion/tests/cmdline/prop_tests.py
  (prop_conflict_root): Remove XFail marker from test added in r1666270.
</msg>
</logentry>
<logentry
   revision="1666270">
<author>philip</author>
<date>2015-03-12T18:31:42.082931Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/prop_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/prop_tests.py
  (prop_conflict_root): New XFAIL test that demonstrates svn SEGV.
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1666258">
<author>rhuijben</author>
<date>2015-03-12T17:07:54.061174Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_wc/op-depth-test.c</path>
</paths>
<msg>Add another regression test for the commit problem fixed in r1663991.

* subversion/tests/libsvn_wc/op-depth-test.c
  (test_global_commit_switched): New test.
  (test_list): Add test_global_commit_switched.
</msg>
</logentry>
<logentry
   revision="1666222">
<author>philip</author>
<date>2015-03-12T15:31:17.297411Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>Regression tests for patch's symlink traversal behaviour.

* subversion/tests/cmdline/patch_tests.py
  (patch_symlink_traversal, patch_symlink_traversal2): New tests.
  (test_list): Add new tests.
</msg>
</logentry>
<logentry
   revision="1666096">
<author>rhuijben</author>
<date>2015-03-12T08:44:06.931086Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
</paths>
<msg>Following up on r1665195, provide the more accurate SVN_ERR_RA_NOT_IMPLEMENTED
error on http status 405 from server that don't provide server error reports
with more specific error details.

* subversion/libsvn_ra_serf/util.c
  (svn_ra_serf__error_on_status): Tweak return code.
  (svn_ra_serf__unexpected_status): Specialize 405 with a more detailed error
    report.
</msg>
</logentry>
<logentry
   revision="1666095">
<author>rhuijben</author>
<date>2015-03-12T08:40:16.617141Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/getlocations.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/mergeinfo.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/replay.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/getlocationsegments.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/log.c</path>
</paths>
<msg>In ra-serf: make all our custom 'REPORT' requests expect only HTTP status 200
as OK (instead of just &gt;= 200 &amp;&amp; &lt; 299), and switch them to a helper function
that may provide more detailed error messages if they fail, but with less
specific arguments.

Note that unlike in &lt;= 1.8.x real error reports will never reach this code,
as server error reports are already handled in the request callbacks, so
this most likely only affects non-subversion responses.

* subversion/libsvn_ra_serf/getlocations.c
  (svn_ra_serf__get_locations): Expect 200.

* subversion/libsvn_ra_serf/getlocationsegments.c
  (svn_ra_serf__get_locations): Expect 200.

* subversion/libsvn_ra_serf/log.c
  (svn_ra_serf__get_log): Expect 200.

* subversion/libsvn_ra_serf/mergeinfo.c
  (svn_ra_serf__get_mergeinfo): Expect 200.

* subversion/libsvn_ra_serf/replay.c
  (svn_ra_serf__replay): Expect 200.
</msg>
</logentry>
<logentry
   revision="1666075">
<author>brane</author>
<date>2015-03-12T03:55:19.990719Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/auth.c</path>
</paths>
<msg>* subversion/libsvn_subr/auth.c:
  (svn_auth_get_parameter, svn_auth__make_session_auth):
   Whitespace and indentation fixes. No functional change.
</msg>
</logentry>
<logentry
   revision="1666067">
<author>philip</author>
<date>2015-03-12T02:30:19.967197Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/auth.c</path>
</paths>
<msg>* subversion/libsvn_subr/auth.c
  (svn_auth_save_credentials): Remove unused variable.
</msg>
</logentry>
<logentry
   revision="1665919">
<author>stsp</author>
<date>2015-03-11T16:04:14.044127Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/basic_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/basic_tests.py
  (plaintext_password_storage_disabled): Pass --non-interactive to 'svn'.
</msg>
</logentry>
<logentry
   revision="1665907">
<author>stsp</author>
<date>2015-03-11T15:45:54.249336Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/basic_tests.py</path>
</paths>
<msg>Add a regression test for the store-plaintext-passwords=no option.
This feature was briefly broken by accident between r1664078 and r1665886.

* subversion/tests/cmdline/basic_tests.py
  (plaintext_password_storage_disabled, test_list): New test.
</msg>
</logentry>
<logentry
   revision="1665906">
<author>rhuijben</author>
<date>2015-03-11T15:42:28.328466Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_main.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/atomic-ra-revprop-change.c</path>
</paths>
<msg>Following up on r1665902, update callers in our test suite to newer api.

* subversion/tests/cmdline/atomic-ra-revprop-change.c
  (construct_auth_baton): Update caller.

* subversion/tests/libsvn_ra/ra-test.c
  (check_tunnel_callback_test,
   tunnel_callback_test): Update caller.

* subversion/tests/svn_test_main.c
  (svn_test__init_auth_baton): Update caller.
</msg>
</logentry>
<logentry
   revision="1665902">
<author>rhuijben</author>
<date>2015-03-11T15:34:14.673771Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_cmdline.h</path>
</paths>
<msg>* subversion/include/svn_cmdline.h
  (svn_cmdline_create_auth_baton): Add missing SVN_DEPRECATED.
</msg>
</logentry>
<logentry
   revision="1665901">
<author>rhuijben</author>
<date>2015-03-11T15:22:55.748233Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_subr/auth-test.c</path>
</paths>
<msg>Following up on r1665886, add regression test on how the prompt function
is called based on the settings in both the auth and slave auth baton.

* subversion/tests/libsvn_subr/auth-test.c
  (plaintext_baton_t): New struct.
  (plaintext_prompt_cb): New function.
  (test_save_cleartext): New function.
  (test_list): Add test_save_cleartext.
</msg>
</logentry>
<logentry
   revision="1665896">
<author>stefan2</author>
<date>2015-03-11T15:05:27.501631Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>* subversion/include/svn_fs.h
  (svn_fs_compare_ids,
   svn_fs_check_related): Remove the silly "may become deprecated" note
                          and say what we actually want.  Add a @see.</msg>
</logentry>
<logentry
   revision="1665894">
<author>stefan2</author>
<date>2015-03-11T15:03:17.493981Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/fs_id.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/id.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Fix the noderev relatedness check for FSFS and FSX when both noderevs / IDs
belong to different transactions.  Provide a test case for it.

Due to a misread of the 1.8.x logic, the new code in 1.9 reported noderevs
from different txns as "unrelated".  The actual problem that exists in FSFS
is that node-IDs that just got created (as added w/o history) in a txn have
only a txn-local ID.  Hence, they may clash between txns.  OTOH, uncommitted
new nodes from different txns cannot be related.  So, the relation check
can be implemented for all possible cases in FSFS but requires extra logic.

BDB did the right thing from the start.  FSX had code added to mimic FSFS'
restriction and that code can simply be removed.

Found by: julianfoad

* subversion/libsvn_fs_fs/id.c
  (svn_fs_fs__id_check_related): Use a more obvious check for the
                                 "same tmp node-ID but different txn" case.

* subversion/libsvn_fs_fs/tree.c
  (fs_node_relation): Re-implement the logic for nodes from different txns.

* subversion/libsvn_fs_x/fs_id.c
  (id_compare): Remove the "different txns implies unrelated nodes" block.

* subversion/libsvn_fs_x/tree.c
  (x_node_relation): Same.

* subversion/tests/libsvn_fs/fs-test.c
  (check_txn_related): New test, inspired by check_txn_related.
  (test_funcs): Register the new test.</msg>
</logentry>
<logentry
   revision="1665891">
<author>stsp</author>
<date>2015-03-11T15:00:01.362821Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/authz_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/authz_tests.py: This file is for testing
   authorization, not authentication. Fix file header comment.
</msg>
</logentry>
<logentry
   revision="1665886">
<author>rhuijben</author>
<date>2015-03-11T14:38:19.781883Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/auth.c</path>
</paths>
<msg>Following up on r1664187, use the combined set of auth parameters in a few
more places.

Found by: stsp

* subversion/libsvn_subr/auth.c
  (svn_auth_next_credentials,
   svn_auth_save_credentials): Use parameters from iterator state.
</msg>
</logentry>
<logentry
   revision="1665874">
<author>rhuijben</author>
<date>2015-03-11T13:48:48.060582Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/move_tests.py</path>
</paths>
<msg>Add regression test for problem fixed by r1660220.

Found by: stsp

* subversion/tests/cmdline/move_tests.py
  (move_conflict_markers): New function.
  (test_list): Add move_conflict_markers.
</msg>
</logentry>
<logentry
   revision="1665873">
<author>stsp</author>
<date>2015-03-11T13:42:16.690560Z</date>
<paths>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk/tools/dev/wc-ng</path>
</paths>
<msg>* tools/dev/wc-ng: Ignore svn-wc-db-tester.
</msg>
</logentry>
<logentry
   revision="1665871">
<author>stsp</author>
<date>2015-03-11T13:27:23.266079Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/externals_tests.py</path>
</paths>
<msg>Fix a typo in test name.

* subversion/tests/cmdline/externals_tests.py
  (copy_pin_externals_whitepace_dir): Rename to ...
  (copy_pin_externals_whitespace_dir): .. this.
  (test_list): Track rename.
</msg>
</logentry>
<logentry
   revision="1665854">
<author>rhuijben</author>
<date>2015-03-11T12:04:34.126268Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/verify.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/verify.c
  (expect_buffer_nul): Cast variable to resolve compiler warning. We just
   compared this value with STREAM_TRESHOLD in an SVN_ERR_ASSERT().
</msg>
</logentry>
<logentry
   revision="1665853">
<author>rhuijben</author>
<date>2015-03-11T12:02:50.590183Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/diff_file.c</path>
</paths>
<msg>[Reverted in r1666432]

* subversion/libsvn_diff/diff_file.c
  (svn_diff3__file_output_baton_t): Use apr_size_t to avoid some warnings,
    on usages of this variable.
</msg>
</logentry>
<logentry
   revision="1665852">
<author>philip</author>
<date>2015-03-11T12:00:56.080434Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/upgrade_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/upgrade_tests.py
  (auto_analyze): Get SQLite return value where needed.
</msg>
</logentry>
<logentry
   revision="1665851">
<author>rhuijben</author>
<date>2015-03-11T11:54:35.881205Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/compat.c</path>
</paths>
<msg>* subversion/libsvn_delta/compat.c
  (alter_file_cb): Resolve compiler warning by combining two ifs.
    Move a few variable updates to before the file copy to keep comments valid.
    This also allows reducing the variable scope of the variables causing the
    warning.
</msg>
</logentry>
<logentry
   revision="1665850">
<author>philip</author>
<date>2015-03-11T11:53:40.319570Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/upgrade_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/upgrade_tests.py
  (auto_analyze): Verify table is initially not present.
</msg>
</logentry>
<logentry
   revision="1665845">
<author>rhuijben</author>
<date>2015-03-11T11:16:54.268035Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/upgrade_tests_data/wc-without-stat1.tar.bz2</path>
</paths>
<msg>* subversion/tests/cmdline/upgrade_tests_data/wc-without-stat1.tar.bz2
  Drop table sqlite_stat1 in wc.db.

</msg>
</logentry>
<logentry
   revision="1665776">
<author>brane</author>
<date>2015-03-11T07:51:45.981803Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/utf8proc/utf8proc.h</path>
</paths>
<msg>Whitespace fixes; no functional change.

* subversion/libsvn_ra_serf/serf.c
  (svn_ra_serf__open): Fix indentation of continued argument list in the
   call to svn_ra_serf__exchange_capabilities.
* subversion/libsvn_subr/utf8proc/utf8proc.h:
   Fix indentation of file-global typedef and enum declarations.
</msg>
</logentry>
<logentry
   revision="1665652">
<author>astieger</author>
<date>2015-03-10T19:19:04.544011Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/davautocheck.sh</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnserveautocheck.sh</path>
</paths>
<msg>Follow-up to r1421594: Fix (svnserve|dav)autocheck when time is only a
built-in.

Some shells do not treat variable contents as a keyword, which in the
case of time makes the script fail if it is a built-in but not a
command.

* subversion/tests/cmdline/svnserveautocheck.sh,
  subversion/tests/cmdline/davautocheck.sh:
  Turn TIME_CMD into a function.

Approved by: breser, danielsh
</msg>
</logentry>
<logentry
   revision="1665612">
<author>breser</author>
<date>2015-03-10T16:48:52.283959Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
</paths>
<msg>* subversion/tests/cmdline/svntest/main.py
  (_mod_dav_url_quoting_broken_versions): The quoting failures go all the way
    back to 2.4.5 when PR 54611 was "fixed."
</msg>
</logentry>
<logentry
   revision="1665611">
<author>breser</author>
<date>2015-03-10T16:39:02.263206Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
</paths>
<msg>* subversion/tests/cmdline/svntest/main.py
  (_mod_dav_url_quoting_broken_versions): Expand set to include the versions
    impacted by either Apache httpd PR 56480 or PR 55397.
</msg>
</logentry>
<logentry
   revision="1665610">
<author>rhuijben</author>
<date>2015-03-10T16:38:00.657180Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/editorp.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/commit.c</path>
</paths>
<msg>Verify that all directory and file batons are properly closed in the
close_edit() logic of commit for ra_serf, and in the maintainer mode
of ra_svn. The way commit is implemented on ra_serf, not closing batons
might make your commit invalid as properties are collected and
committed all at once.

The bad examples of this problem in our test code were fixed in r1665532.

* subversion/libsvn_ra_serf/commit.c
  (commit_context_t): Add variable.
  (dir_context_t): Remove unused variable.
  (open_root,
   add_directory,
   open_directory,
   close_directory,
   add_file,
   open_file,
   close_file): Track number of open batons.
  (close_edit): Return error if some batons are left open.

* subversion/libsvn_ra_svn/editorp.c
  (ra_svn_handle_close_edit):
     Return error if some batons are left open in maintainer mode.
</msg>
</logentry>
<logentry
   revision="1665609">
<author>rhuijben</author>
<date>2015-03-10T16:35:36.229045Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
</paths>
<msg>In ra-serf: When running a single request and the request is still scheduled
when the handler reports itself as done: make sure the request is cancelled.

This avoids continuing handling the request while the pool containing
the request is not destroyed yet. This code is exercised by the merge code
that cancels a log request after the first results arrived.

* subversion/libsvn_ra_serf/util.c
  (svn_ra_serf__unschedule_handler): New function, +- extracted from
    handler_cleanup.
  (svn_ra_serf__context_run_one): If the handler is still scheduled when
    returing, properly unschedule.
  (handler_cleanup): Call svn_ra_serf__unschedule_handler.
    Remove now unneeded check, that made this problem mostly invisible.
</msg>
</logentry>
<logentry
   revision="1665558">
<author>rhuijben</author>
<date>2015-03-10T14:08:01.891399Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Following up on r1665557, add regression test ensuring that all ra layers
properly support interupting results from the log and location segment
callbacks.

* subversion/tests/libsvn_ra/ra-test.c
  (error_log_receiver,
   error_segment_receiver): New helper functions.
  (errors_from_callbacks): New test.
  (test_funcs): Add errors_from_callbacks.
</msg>
</logentry>
<logentry
   revision="1665557">
<author>rhuijben</author>
<date>2015-03-10T14:06:22.608618Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>Minor improvements to ra-svn stability around interrupting log-like
requests from the callback.

* subversion/libsvn_ra_svn/client.c
  (perform_ra_svn_log): Look further than first svn_error_t.

  (ra_svn_get_location_segments): Rename to...
  (perform_get_location_segments): ... this to improve error handler.
     Specialize a cease invocation error, like from the log callback
  (ra_svn_get_location_segments): New function around
    perform_get_location_segments.
</msg>
</logentry>
<logentry
   revision="1665554">
<author>brane</author>
<date>2015-03-10T14:01:12.041086Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/error.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_atomic.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/atomic.c</path>
</paths>
<msg>Make the atomic initialization implementation more robust
in the presence of wrong initial or intermediate values of
the control variable.

Also create a vairant that does not use a pool or create
an svn_error_t, so that it can be safely used during
initialization of the error system itself.

* subversion/include/private/svn_atomic.h
  (svn_atomic__err_init_func_t, svn_atomic__str_init_func_t): New.
   Typedefs for atomic initialization callback functions.
  (svn_atomic__init_once): Use svn_atomic__err_init_func_t in the
   prototype and update the docstring.
  (svn_atomic__init_once_no_error): New.

* subversion/libsvn_subr/atomic.c: Include assert.h.
  (init_once): New. Common implementation of both atomic-init functions.
  (svn_atomic__init_once, svn_atomic__init_once_no_error):
   Implement these with appropriate calls to init_once.

* subversion/libsvn_subr/error.c
  (locate_init_once): Convert to an svn_atomic__str_init_func_t.
  (svn_error__locate): Use svn_atomic__init_once_no_error.
</msg>
</logentry>
<logentry
   revision="1665546">
<author>rhuijben</author>
<date>2015-03-10T13:43:12.664104Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/compat.c</path>
</paths>
<msg>Use a struct as baton to avoid constness warnings in an
editor v2 helper function.

* subversion/libsvn_delta/compat.c
  (open_delta_target): Use change as baton.
  (ev2_apply_textdelta): Update caller.
</msg>
</logentry>
<logentry
   revision="1665532">
<author>rhuijben</author>
<date>2015-03-10T13:23:47.147435Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_ra/ra-test.c
  (commit_changes,
   commit_tree,
   delete_revision_above_youngest,
   ra_revision_errors): Properly close all directories that were opened.
</msg>
</logentry>
<logentry
   revision="1665530">
<author>rhuijben</author>
<date>2015-03-10T13:21:29.189481Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/log.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>Make the log limit work as documented in ra_svn and ra_serf, by properly
handling a negative limit as no limit (instead of not returning any
items).

Note: this is a client side only fix. The server did the right thing.

* subversion/libsvn_ra_serf/log.c
  (log_closed): Check for &gt;= 0 instead of != 0.

* subversion/libsvn_ra_svn/client.c
  (perform_ra_svn_log): Check for &gt;= 0 instead of != 0.
</msg>
</logentry>
<logentry
   revision="1665529">
<author>philip</author>
<date>2015-03-10T13:17:06.303989Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_ra/ra-test.c
  (ra_revision_errors): Make variables const to resolve compiler warnings.
</msg>
</logentry>
<logentry
   revision="1665485">
<author>rhuijben</author>
<date>2015-03-10T11:38:55.656422Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_ra/ra-test.c
  (ra_revision_errors): Remove SVN_DBG() call.
</msg>
</logentry>
<logentry
   revision="1665484">
<author>rhuijben</author>
<date>2015-03-10T11:37:10.922213Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/replay.c</path>
</paths>
<msg>Following up on r1665456, re-enable svn_repos_replay to handle an
SVN_INVALID_REVNUM low water mark as r0, even though the higher api
layers don't support this flag.

* subversion/libsvn_repos/replay.c
  (svn_repos_replay2): Handle invalid low water mark as r0.
</msg>
</logentry>
<logentry
   revision="1665481">
<author>rhuijben</author>
<date>2015-03-10T11:32:15.942453Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Following up on r1665480, add regression test for the issues
resolved in this patch.

* subversion/tests/libsvn_ra/ra-test.c
  (replay_range_rev_start,
   replay_range_rev_end): New functions.
  (ra_revision_errors): Add test on svn_ra_replay_range().
</msg>
</logentry>
<logentry
   revision="1665480">
<author>rhuijben</author>
<date>2015-03-10T11:30:53.570178Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/replay.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra/ra_loader.c</path>
</paths>
<msg>In ra-serf and ra-svn: Make svn_ra_replay_range properly handle errors to
make the ra layers behave in the same way, and to allow re-using the ra
session after a failure without seeing spurious errors caused by previous
requests.

* subversion/libsvn_ra/ra_loader.c
  (svn_ra_replay_range): Add assertions here that already apply to some
    ra layers.

* subversion/libsvn_ra_serf/replay.c
  (svn_ra_serf__replay_range): Use subpool to allow unregistering requests.

* subversion/libsvn_ra_svn/client.c
  (ra_svn_replay_range): Properly handle errors reported during replay,
    instead of just noting a protocol error.
</msg>
</logentry>
<logentry
   revision="1665456">
<author>rhuijben</author>
<date>2015-03-10T10:38:19.600932Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra/ra_loader.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/replay.c</path>
</paths>
<msg>Make all ra layers behave the same way on passing invalid revisions to
svn_ra_replay().

* subversion/libsvn_ra/ra_loader.c
  (svn_ra_replay): Add assertion on requirements as already checked by DAV
    and SVN.

* subversion/libsvn_repos/replay.c
  (path_driver_cb_func): Let the actual editor decide how it uses its batons.
    The standard delta editor always uses NULL batons, which doesn't make it
    invalid.
  (svn_repos_replay2): Apply sanity check instead of correcting.
  (svn_repos__replay_ev2): Use proper check.

* subversion/tests/libsvn_ra/ra-test.c
  (ra_revision_errors): Extend test.
</msg>
</logentry>
<logentry
   revision="1665452">
<author>rhuijben</author>
<date>2015-03-10T10:33:35.300703Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/replay.c</path>
</paths>
<msg>In ra_serf: Don't report that the xml is malformed during replay if the
callback just decided that it doesn't need the actual data.

* subversion/libsvn_ra_serf/replay.c
  (replay_closed): Fix assumption that there is always a stream, because
    in a specific case we don't create one.
</msg>
</logentry>
<logentry
   revision="1665438">
<author>stefan2</author>
<date>2015-03-10T10:10:46.341687Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_repos.h</path>
</paths>
<msg>Correct and complete docstrings in the Repos layer API after 1.9 review.
No functional change.

* subversion/include/svn_repos.h
  (svn_repos_capabilities): Explicitly document the hash key type.  Remove
                            '()' from function names in the @see line.
                            Document pool usage.
  (svn_repos_fs_type): Add reference to the list of built-in types. 
  (svn_repos_hotcopy3): BDB is the only backend not sending notifications.
                        Document CANCEL_FUNC.
  (svn_repos_get_commit_editor5): NULL is an identifier.
  (svn_repos_get_file_revs2): Use slightly clearer wording.
  (svn_repos_fs_lock_many,
   svn_repos_fs_unlock_many: Add reference to the FS API func that provides
                             more detail. 
  (svn_repos_info_format): Refer to latest FS API function.  Document pool
                           usage.  Remove '()' from function names in @see.</msg>
</logentry>
<logentry
   revision="1665437">
<author>stefan2</author>
<date>2015-03-10T10:10:30.949946Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>Correct and complete docstrings in the FS API after 1.9 review.
No functional change.

* subversion/include/svn_fs.h
  (svn_fs_backend_names): New Doxygen group allowing us to refer to the
                          pre-defined set of backends.  Move to front due
                          to issues with group nesting.
  (SVN_FS_CONFIG_COMPATIBLE_VERSION): Works for the current release as well.
  (svn_fs_open2): Correct cleanup behavior description for RESULT_POOL.
                  Document SCRATCH_POOL.
  (svn_fs_upgrade_notify_t): Grammar fix.
  (svn_fs_upgrade2): Refer to latest repos API.
  (svn_fs_hotcopy3): BDB is the only backend not sending notifications.
                     Document CANCEL_FUNC.
  (svn_fs_compare_ids,
   svn_fs_check_related): "Now" is 1.9.
  (svn_fs_props_changed): Fix confusing wording.
  (svn_fs_info_format,
   svn_fs_lock_target_t): For clarity, remove '()' from function names in
                          @see line.
  (svn_fs_fsfs_info_t): Make comment visible to doxygen.
  (svn_fs_info_placeholder_t): For clarity, remove '()' from function names
                               in @see line.
  (svn_fs_info): Mention FSX alongside FSFS.
  (svn_fs_info_dup): Update pool usage documentation.</msg>
</logentry>
<logentry
   revision="1665346">
<author>rhuijben</author>
<date>2015-03-09T20:26:28.839528Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_ra/ra-test.c
  (ra_revision_errors): Add comment.
</msg>
</logentry>
<logentry
   revision="1665328">
<author>rhuijben</author>
<date>2015-03-09T19:39:46.330861Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnserve/serve.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_base/bdb/rev-table.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_local/ra_plugin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/reports/inherited-props.c</path>
</paths>
<msg>Make al ra layers consistently handle invalid revisions when retrieving
inherited properties: add errors in a few cases that worked before, but
used to provide results that couldn't be trusted.

* subversion/libsvn_fs_base/bdb/rev-table.c
  (svn_fs_bdb__get_rev): Show understandable error on SVN_INVALID_REVNUM instead
    of a raw database error.

* subversion/libsvn_ra_local/ra_plugin.c
  (svn_ra_local__get_inherited_props): Remove invalid-&gt;youngest handling.

* subversion/mod_dav_svn/reports/inherited-props.c
  (dav_svn__get_inherited_props_report): Retrieving iprops on a not existing
    path is an error.

* subversion/svnserve/serve.c
  (get_inherited_props): Remove invalid-&gt;youngest handling. Retrieving iprops
    on a not existing path is an error.

* subversion/tests/libsvn_ra/ra-test.c
  (ra_revision_errors): Extend tests.
</msg>
</logentry>
<logentry
   revision="1665321">
<author>rhuijben</author>
<date>2015-03-09T18:48:35.139886Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_ra/ra-test.c
  (ra_revision_errors): Add a few more lock/unlock behavior tests.
</msg>
</logentry>
<logentry
   revision="1665319">
<author>rhuijben</author>
<date>2015-03-09T18:36:03.132340Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_ra/ra-test.c
  (stub_file_rev_handler): New function.
  (lock_stub_baton_t): New struct.
  (store_lock_result): New function.
  (ra_revision_errors): Extend tests to include the blame and lock apis.
</msg>
</logentry>
<logentry
   revision="1665318">
<author>rhuijben</author>
<date>2015-03-09T18:34:51.159181Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/lock.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/lock.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_ra_serf/lock.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_error.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_base/lock.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
</paths>
<msg>Make all ra layers and fs backends consistently report errors on invalid
and out of date revisions passed to the lock api: in most cases via the
callback.

* subversion/include/svn_error.h
  (SVN_ERR_IS_LOCK_ERROR): Implement the same behavior as implemented
    inside the filesystems.

* subversion/libsvn_fs_base/lock.c
  (includes): Add revs-txns.h.
  (svn_fs_base__lock): Check revisions against youngest like in fsfs.

* subversion/libsvn_fs_fs/lock.c
  (check_lock): Add youngest_rev argument and use it for sanity check.
  (lock_body): Update caller.

* subversion/libsvn_fs_x/lock.c
  (check_lock): Add youngest_rev argument and use it for sanity check.
  (lock_body): Update caller.


* subversion/libsvn_ra_serf/lock.c
  (run_locks): Assume that 404 errors likely have good server errors, to
    avoid duplicate errors in the error chain.

* subversion/mod_dav_svn/util.c
  (dav_svn__convert_err): Report SVN_ERR_FS_NO_SUCH_REVISION as status 404
    (invalid target) instead of 500 (server error).
</msg>
</logentry>
<logentry
   revision="1665308">
<author>rhuijben</author>
<date>2015-03-09T17:21:08.674440Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Add a few more boundary revision checks on the ra_revision_errors test.

* subversion/libsvn_repos/rev_hunt.c
  (svn_repos_node_location_segments): Make sanity checks more explicit,
    instead of relying on later fs calls to produce similar results.

* subversion/tests/libsvn_ra/ra-test.c
  (stub_log_receiver,
   stub_segment_receiver): New function.
  (ra_revision_errors): Extend function.
</msg>
</logentry>
<logentry
   revision="1665300">
<author>rhuijben</author>
<date>2015-03-09T16:48:06.257433Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_ra.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra/ra_loader.c</path>
</paths>
<msg>Document the revision argument of svn_ra_get_locations() more
precisely, as both mod_dav and ra_svn forbid SVN_INVALID_REVNUM
in their existing implementations.

* subversion/include/svn_ra.h
  (svn_ra_get_locations): Update docs.

* subversion/libsvn_ra/ra_loader.c
  (svn_ra_get_locations): Add assertion.
</msg>
</logentry>
<logentry
   revision="1665264">
<author>rhuijben</author>
<date>2015-03-09T15:45:14.461189Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>In ra-tests.c: Minor housekeeping, including removing a SVN_DBG().

* subversion/tests/libsvn_ra/ra-test.c
  (SVN_DEPRECATED): Remove define.
  (commit_changes,
   commit_tree): Use non-deprecated function.
  (ra_revision_errors): Remove SVN_DBG().
  (max_threads): Increase to 4.
</msg>
</logentry>
<logentry
   revision="1665261">
<author>rhuijben</author>
<date>2015-03-09T15:43:05.531247Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Add a regression test exercising various ra apis with bad revisions to see
how they behave.

A few problems found using this tests have already been resolved
in r1665213, r1665259.

* subversion/tests/libsvn_ra/ra-test.c
  (ra_revision_errors): New test.
  (test_funcs): Add ra_revision_errors.
</msg>
</logentry>
<logentry
   revision="1665259">
<author>rhuijben</author>
<date>2015-03-09T15:40:19.645956Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
</paths>
<msg>In ra-serf's error handling: Following up on r1557686, make sure that after we
decide to discard the body, we don't assume that the handler is no longer
scheduled.

A test triggering this issue will be added in a followup patch.

* subversion/libsvn_ra_serf/util.c
  (handle_response_cb): Keep the handler marked as scheduled, to allow processing
    the remaining data (by ignoring) later *or* by resetting the connection if
    the handler's pool is destroyed.
</msg>
</logentry>
<logentry
   revision="1665234">
<author>neels</author>
<date>2015-03-09T13:42:49.932244Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/COMMITTERS</path>
</paths>
<msg>COMMITTERS: Change my email address.
</msg>
</logentry>
<logentry
   revision="1665223">
<author>rhuijben</author>
<date>2015-03-09T13:00:39.805350Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/get_file.c</path>
</paths>
<msg>In serf's svn_ra_get_file() code: introduce a scratch pool.

* subversion/libsvn_ra_serf/get_file.c
  (svn_ra_serf__get_file): Introduce scratch_pool.
</msg>
</logentry>
<logentry
   revision="1665213">
<author>rhuijben</author>
<date>2015-03-09T12:41:48.920652Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/stat.c</path>
</paths>
<msg>In ra-serf: avoid possible segfault when the ra_session is reused after a
failed svn_ra_get_dir2() request without clearing the pool passed to
svn_ra_get_dir2() before the next request.

The segfault is caused by the callback, which uses a stack allocated baton
to collect results.

* subversion/libsvn_ra_serf/stat.c
  (svn_ra_serf__get_dir): Properly clear the scratch pool when exiting
    early.
</msg>
</logentry>
<logentry
   revision="1665195">
<author>rhuijben</author>
<date>2015-03-09T11:39:39.799058Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
</paths>
<msg>In ra-serf: stop handling HTTP status 405 'Method forbidden' as a generic
out of date error. When locking this is the error we get when the resource
does not exist in HEAD, but in general it tells us that there is an
authorization problem.

As the lock code has its own http status handling now, we can change
the error reported from the generic error handling code path.

This should give users that accidentally use anonymous 'http' on a
server that uses 'https' for authorized operations a much better response,
than a simple out of date error (with the recommendation to update added
by their client).

Note that in most cases the detailed error response from the server
is used instead of this generic error code for just the HTTP status.

* subversion/libsvn_ra_serf/util.c
  (svn_ra_serf__error_on_status): Tweak generic error for http status 405.
</msg>
</logentry>
<logentry
   revision="1665164">
<author>philip</author>
<date>2015-03-09T09:31:47.744690Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/python/libsvn_swig_py/swigutil_py.c</path>
</paths>
<msg>* subversion/bindings/swig/python/libsvn_swig_py/swigutil_py.c
  (make_ob_error): Correctly handle Py_None.
 
Found by: danielsh
</msg>
</logentry>
<logentry
   revision="1665160">
<author>philip</author>
<date>2015-03-09T09:17:40.820187Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_ra/ra-test.c
  (delete_revision_above_youngest): Remove unused variable.
</msg>
</logentry>
<logentry
   revision="1665002">
<author>rhuijben</author>
<date>2015-03-08T14:36:25.942972Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnsync_authz_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svntest/sandbox.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnsync_tests.py</path>
</paths>
<msg>Following up on r1664997, rename new function to more closely match
names of related functions and variables.

* subversion/tests/cmdline/svnsync_authz_tests.py
  (copy_delete_unreadable_child): Update caller.

* subversion/tests/cmdline/svnsync_tests.py
  (setup_and_sync): Update caller.

* subversion/tests/cmdline/svntest/sandbox.py
  (file_protocol_url): Rename to...
  (file_protocol_repo_url): ... this.
</msg>
</logentry>
<logentry
   revision="1664997">
<author>rhuijben</author>
<date>2015-03-08T14:29:26.257867Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/sandbox.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnsync_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnsync_authz_tests.py</path>
</paths>
<msg>Fix test failures when running from a directory whose name contains characters
which must be escaped in a URL. This is a regression caused by the new stricter
dump file parsing.

Subversion has its own rules about which characters needs escaping and as
we expect them to exactly match in test results we can't just use urllib
to perform the path escaping for us.

Found by: James McCoy &lt;jamessan{_AT_}debian.org&gt;
(The original patch broke the test framework on Windows and I decided to add a
 helper function instead of duplicating the same code in a few tests).

* subversion/tests/cmdline/svnsync_authz_tests.py
  (imports): Remove unneeded import.
  (copy_delete_unreadable_child): Update usage.

* subversion/tests/cmdline/svnsync_tests.py
  (imports): Remove unneeded import.
  (setup_and_sync): Update usage.

* subversion/tests/cmdline/svntest/main.py
  (file_scheme_prefix): Tweak Windows value.
  (_create_parser, execute_tests): Use svntest.wc.svn_uri_quote

* subversion/tests/cmdline/svntest/sandbox.py
  (imports): Remove unneeded import.
  (_set_name,
   add_repo_path): Use svntest.wc.svn_uri_quote
  (file_protocol_url): New function.
</msg>
</logentry>
<logentry
   revision="1664984">
<author>rhuijben</author>
<date>2015-03-08T12:11:55.251321Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/OperationContext.cpp</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/ExceptionTests.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/jniwrapper/jni_base.cpp</path>
</paths>
<msg>* subversion/bindings/javahl/native/jniwrapper/jni_base.cpp
  (Java::caught_java_exception_error): When a java exception is thrown, wrap it in the
    error and exit exception state to allow further JNI calls.

* subversion/bindings/javahl/native/OperationContext.cpp
  (OperationContext::checkCancel): If the JVM is in exception state (e.g. when an
     exception is thrown from a callback that doesn't support error return), return
     an error from the cancel callback with the wrapped exception (and exit exception
     state)

* subversion/bindings/javahl/tests/org/apache/subversion/javahl/ExceptionTests.java
  (*): Add some comments. Make throws a bit less generic
  (testNotify): New test, verifying that even an exception from the notify callback
    gets through.
</msg>
</logentry>
<logentry
   revision="1664978">
<author>rhuijben</author>
<date>2015-03-08T11:50:38.915557Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/JNIUtil.cpp</path>
</paths>
<msg>Following up on r1664939, remove a bit of code inside a #ifdef.

* subversion/bindings/javahl/native/JNIUtil.cpp
  (WrappedException::WrappedException): Fix !SVN_DEBUG compilation.

Found by: brane
(and a buildbot)
</msg>
</logentry>
<logentry
   revision="1664940">
<author>rhuijben</author>
<date>2015-03-08T01:31:33.462791Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/ProplistCallback.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/PatchCallback.cpp</path>
</paths>
<msg>Following up on r1664938, make a few more callbacks return
JavaHL exceptions wrapped as svn_error_t *.

In case of patch this will make the patch code stop,
instead of continuing the patch without a filter applied.

* subversion/bindings/javahl/native/PatchCallback.cpp
  (PatchCallback::singlePatch): Return an error on error.

* subversion/bindings/javahl/native/ProplistCallback.cpp
  (ProplistCallback::singlePath): Return an error on error.
</msg>
</logentry>
<logentry
   revision="1664939">
<author>rhuijben</author>
<date>2015-03-08T01:22:15.158001Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/JNIUtil.cpp</path>
</paths>
<msg>Following up on r1664938, add some debug code to make 'Java error leaks'
visible in maintainer/test mode.

* subversion/bindings/javahl/native/JNIUtil.cpp
  (WrappedException): Track whether the exception is fetched. Use DBG output
    if it isn't.
</msg>
</logentry>
<logentry
   revision="1664938">
<author>rhuijben</author>
<date>2015-03-08T01:05:14.550378Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/InfoCallback.cpp</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/ListCallback.cpp</path>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/ExceptionTests.java</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/bindings/javahl/native/DiffSummaryReceiver.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/BlameCallback.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/CommitMessage.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/JNIUtil.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/RunTests.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/StatusCallback.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/JNIUtil.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/LogMessageCallback.cpp</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/javahl/native/CommitCallback.cpp</path>
</paths>
<msg>In JavaHL: Properly wrap Java exceptions as svn_error_t * when returning from
many callbacks and add the wrapped exception (when not cleared by Subversion)
as cause to the returned exception.

This avoids keeping the JVM in the semi-broken 'exception' state until we
somehow return and also makes it possible to do things in further callbacks
(which we previously skipped by just returning an SVN_NO_ERROR on the still
 pending exceptions).

Before this patch a status call that returned an exception in the first
callback would continue the entire status walk and only after returning
it would return the exception, potentially breaking the api contract
of the function.

After this patch an error is returned in Subversion... which builds
the usual error chain in subversion.... Then when the call returns
in JavaHL the cause of the ClientException is set to the originally
raised exception in the callback and intermediate errors are added
if necessary.

* subversion/bindings/javahl/native/BlameCallback.cpp
  (BlameCallback::singleLine): Update exit handling.

* subversion/bindings/javahl/native/CommitCallback.cpp
  (CommitCallback::commitInfo): Update exit handling.

* subversion/bindings/javahl/native/CommitMessage.cpp
  (CommitMessage::getCommitMessage): Return svn_error_t * on error instead of
    trying the commit with no log message.

* subversion/bindings/javahl/native/DiffSummaryReceiver.cpp
  (DiffSummaryReceiver::onSummary): Update exit handling.

* subversion/bindings/javahl/native/InfoCallback.cpp
  (InfoCallback::singleInfo): Update exit handling.

* subversion/bindings/javahl/native/JNIUtil.cpp
  (SVN_ERR_JAVAHL_WRAPPED): New constant.
  (assemble_error_message): Don't try to write standard text for
    SVN_ERR_JAVAHL_WRAPPED.
  (JNIUtil::wrappedHandleSVNError): If there is no jcause passed, check if we
    have a Java exception we can use stored in the error.
  (WrapExceptionTag): New variable.
  (WrappedException): New class.
  (JNIUtil::wrapJavaException,
   JNIUtil::unwrapJavaException): New functions.

* subversion/bindings/javahl/native/JNIUtil.h
  (JNIUtil::wrapJavaException,
   JNIUtil::unwrapJavaException): New functions.
  (POP_AND_RETURN_EXCEPTION_AS_SVNERROR): New define.

* subversion/bindings/javahl/native/ListCallback.cpp
  (ListCallback::doList): Update exit handling.

* subversion/bindings/javahl/native/LogMessageCallback.cpp
  (LogMessageCallback::singleMessage): Update exit handling.

* subversion/bindings/javahl/native/StatusCallback.cpp
  (StatusCallback::doStatus): Update exit handling.

* subversion/bindings/javahl/tests/org/apache/subversion/javahl/ExceptionTests.java
  New file.

* subversion/bindings/javahl/tests/org/apache/subversion/javahl/RunTests.java
  (SVNTestSuite.suite): Add ExceptionTests.
</msg>
</logentry>
<logentry
   revision="1664927">
<author>rhuijben</author>
<date>2015-03-07T22:13:26.248165Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
</paths>
<msg>Following up on r1664078, reinstate a subpool requirement for serf to avoid a
segfault in basic tests caused by a bug in serf 1.3.x... by converting the code
to behave like good dual pool code.

This problem is fixed on serf trunk, but the fix is still needed in the
latest serf 1.3.x version.

* subversion/libsvn_ra_serf/serf.c
  (svn_ra_serf__open): Remove private session pool that breaks the cleanup
    rules (making scratch pool a sibling to result pool). Update documentation.
    Add assertion.</msg>
</logentry>
<logentry
   revision="1664706">
<author>rhuijben</author>
<date>2015-03-06T19:16:05.099016Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/error.c</path>
</paths>
<msg>Fix obtaining file and line when apr has no thread support. Initializing
to APR_SUCCESS and then not doing anything made us skip the non thread
code.

* subversion/libsvn_subr/error.c
  (make_error_internal): Define variable only status in maintainer mode,
    and initialize with some error state.
</msg>
</logentry>
<logentry
   revision="1664698">
<author>rhuijben</author>
<date>2015-03-06T18:56:22.125142Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/commit.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Make the commit editor for all ra layers behave in the same way on
encountering base revisions that are higher than the revision that the
commit is against (read: &gt; HEAD). If callers don't have a real BASE
revision they should provide SVN_INVALID_REVNUM or fetch HEAD, instead
of just passing something above head.

* subversion/libsvn_repos/commit.c
  (dir_baton,
   file_baton): Add boolean to note that we already did a write check.
  (check_out_of_date): New function.
  (add_file_or_directory): Remember that we did a write check.
  (delete_entry): Perform base_revision check if needed.
  (apply_textdelta): Only check authz if we didn't just do that.
  (open_file): Use standard out of date check.
  (change_file_prop): Only check authz if we didn't just do that.
  (change_dir_prop): Only check authz if we didn't just do that.
    Improve out of date check.

* subversion/mod_dav_svn/repos.c
  (remove_resource): Verify that base revision makes sense.

* subversion/tests/libsvn_ra/ra-test.c
  (delete_revision_above_youngest): New test.
  (test_funcs): Add delete_revision_above_youngest.
</msg>
</logentry>
<logentry
   revision="1664684">
<author>rhuijben</author>
<date>2015-03-06T17:47:26.612701Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/load_editor.c</path>
</paths>
<msg>* subversion/svnrdump/load_editor.c
  (new_node_record): Pass HEAD instead of HEAD+1, as base revision.
</msg>
</logentry>
<logentry
   revision="1664674">
<author>rhuijben</author>
<date>2015-03-06T16:17:04.955012Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_ra/ra-test.c
  (base_revision_above_youngest): Following up on r1664672, add some comments.
</msg>
</logentry>
<logentry
   revision="1664673">
<author>philip</author>
<date>2015-03-06T16:14:40.306412Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/commit.c</path>
</paths>
<msg>* subversion/libsvn_repos/commit.c (open_root): Tweak comment.
</msg>
</logentry>
<logentry
   revision="1664672">
<author>rhuijben</author>
<date>2015-03-06T16:00:15.737150Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
</paths>
<msg>Following up on r1664664, make mod_dav return a proper error when a commit
specifies a higher revision than the one committing against. This fixes
out of date detection for too-new revisions via httpv2.
(For httpv1 this happens on the checkout requests)

* subversion/mod_dav_svn/repos.c
  (do_out_of_date_check): Verify that a passed revision makes sense, instead
    of that it is ok when it is higher than anything we know.
</msg>
</logentry>
<logentry
   revision="1664664">
<author>rhuijben</author>
<date>2015-03-06T15:48:06.160880Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/commit.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>In the commit processing in the repository layer verify that the revision
passed to open_root() makes sense, like we already did in the http-v1 dav
code.

This patch adds the check for ra-svn and ra-local, but leaves http-v2 broken.
(I'm working on a fix for that problem in mod_dav)

Found by: philip

* subversion/libsvn_repos/commit.c
  (open_root): Return an error when opening the root for revisions above HEAD.

* subversion/tests/libsvn_ra/ra-test.c
  (commit_callback_failure): Open the root for the right revision.
  (base_revision_above_youngest): New test, mostly copied from
    commit_callback_failure, verifying the behavior on this new issue.
  (test_list): Add base_revision_above_youngest.
</msg>
</logentry>
<logentry
   revision="1664653">
<author>rhuijben</author>
<date>2015-03-06T15:17:34.393615Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/copy.c</path>
</paths>
<msg>Following up on r1659395, properly initialize incoming_prop_changes member of
new commit items created for pin-externals to allow committing with our non
http-v2 support via ra_dav.

* subversion/libsvn_client/copy.c
  (queue_prop_change_commit_items): Initialize outgoing prop changes to
    avoid segfault.

Found by: philip</msg>
</logentry>
<logentry
   revision="1664616">
<author>rhuijben</author>
<date>2015-03-06T13:31:51.295844Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/JNIUtil.cpp</path>
</paths>
<msg>* subversion/bindings/javahl/native/JNIUtil.cpp
  (checkJavaException): Add TODO.
</msg>
</logentry>
<logentry
   revision="1664613">
<author>rhuijben</author>
<date>2015-03-06T13:19:16.048786Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNRemoteTests.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/native/JNIUtil.cpp</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/UtilTests.java</path>
</paths>
<msg>For now revert r1664609.

* subversion/bindings/javahl/tests/org/apache/subversion/javahl/UtilTests.java
* subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNRemoteTests.java
* subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java
* subversion/bindings/javahl/native/JNIUtil.cpp
  Revert to pre r1664609 change.
</msg>
</logentry>
<logentry
   revision="1664612">
<author>stsp</author>
<date>2015-03-06T13:19:07.705454Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: List changes merged for 1.7.20. Not much as of yet.
</msg>
</logentry>
<logentry
   revision="1664609">
<author>rhuijben</author>
<date>2015-03-06T13:07:00.052493Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/javahl/native/JNIUtil.cpp</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/UtilTests.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNRemoteTests.java</path>
</paths>
<msg>Tweak JavaHL error text generation to create errors that only contains
generic error messages when the creator of the error chain intended
to add these to the chain.

This makes the creation more similar to what our standard error printing
in 'svn' would do and avoids bad messages in cases such as 'bad filename'
when the code just used that error code to tell that a registry key does
not exist, but added their own detailed message.

Note that all these messages are localized, etc. so end user applications
can never rely on the exact messages anyway.

* subversion/bindings/javahl/tests/org/apache/subversion/javahl/UtilTests.java
  (testValidateProp): Update expected result.

* subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNRemoteTests.java
  (testGetLogMissing): Update expected result.

* subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java
  (testCommitPartialMove): Update expected result.

* subversion/bindings/javahl/native/JNIUtil.cpp
  (assemble_error_message): Only show generic messages if there is no not
    generic message, and the generic message wasn't the last shown generic
    message.
</msg>
</logentry>
<logentry
   revision="1664596">
<author>rhuijben</author>
<date>2015-03-06T12:02:30.635462Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/config_win.c</path>
</paths>
<msg>* subversion/libsvn_subr/config_win.c
  (svn_config__parse_registry): Hide the ENOENT errors from the chain,
    but keep others.
</msg>
</logentry>
<logentry
   revision="1664595">
<author>stsp</author>
<date>2015-03-06T11:55:32.618411Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: List changes merged for 1.8.12.
</msg>
</logentry>
<logentry
   revision="1664594">
<author>rhuijben</author>
<date>2015-03-06T11:45:37.571546Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/config_win.c</path>
</paths>
<msg>* subversion/libsvn_subr/config_win.c
  (svn_config__parse_registry): Following up on r1664593, revert boolean
    condition to reinstate old behavior. (There is no case where this
    error actually has this ENOENT value.. Trying to improve diagnostics
    to determine what value there actually is)
</msg>
</logentry>
<logentry
   revision="1664593">
<author>rhuijben</author>
<date>2015-03-06T11:43:44.677058Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/config_win.c</path>
</paths>
<msg>* subversion/libsvn_subr/config_win.c
  (svn_config__parse_registry): Don't hide the actual error when opening the
    registry fails.
</msg>
</logentry>
<logentry
   revision="1664588">
<author>rhuijben</author>
<date>2015-03-06T11:18:29.385398Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/auth.c</path>
</paths>
<msg>Avoid two loops over one hashtable and an assertion/abort() in apr when
pool debugging is enabled (because the iterpool is not a subpool of
both original pools)

* subversion/libsvn_subr/auth.c
  (svn_auth_first_credentials): Just make a copy of the original hash and
    overwrite with slave parameters.
</msg>
</logentry>
<logentry
   revision="1664586">
<author>stsp</author>
<date>2015-03-06T11:16:52.343167Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Fix 1.8.11 tag URL.
</msg>
</logentry>
<logentry
   revision="1664536">
<author>rhuijben</author>
<date>2015-03-06T01:07:13.716560Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/entries-dump.c</path>
</paths>
<msg>* subversion/tests/cmdline/entries-dump.c
  (entries_dump): Move a bit of duplicated code outside if block.
</msg>
</logentry>
<logentry
   revision="1664533">
<author>rhuijben</author>
<date>2015-03-06T00:40:43.375374Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/stat_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/status.c</path>
</paths>
<msg>Stop showing 'uninteresting deletes' in 'svn status' without -v. This
filters non-op_root deletes from the output. These deletes are implied
by their ancestor, as a delete automatically affects everything below
it.

So after this patch status just shows the root of a delete as deleted
and perhaps some children that are interesting for a different reason,
such as being conflicted or being moved away..

* subversion/libsvn_wc/status.c
  (svn_wc__internal_status_t): Add op_root boolean.
  (assemble_status): Tweak interesting filter.
  (hash_stash): Copy op_root.
  (is_sendable_status): Tweak interesting status.

* subversion/tests/cmdline/stat_tests.py
  (status_dash_u_deleted_directories): Update expected results. Extend
    test with '-v' behavior to also obtain existing results.
</msg>
</logentry>
<logentry
   revision="1664532">
<author>philip</author>
<date>2015-03-06T00:24:02.358847Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/entries-dump.c</path>
</paths>
<msg>* subversion/tests/cmdline/entries-dump.c
  (entries_dump): Remove shadowing variable.
</msg>
</logentry>
<logentry
   revision="1664531">
<author>rhuijben</author>
<date>2015-03-06T00:18:33.712966Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/entries-dump.c</path>
</paths>
<msg>Make the entries dump tool used by our test tool use a newer wc api to
see if a directory has a working copy lock to avoid opening and closing
wc.db an extra time per directory, while we have an existing connection
(and transaction) open.

On Windows this resolves a 14 second delay in the testsuite on the new
upgrade_tests.py test with a read only wc.db.

It appears that Sqlite tries to open sqlite databases writable for some
time before giving up on Windows.

* subversion/tests/cmdline/entries-dump.c
  (entries_dump): Create wc context to allow using the svn_wc_locked2
    api, which can access the db directly.
</msg>
</logentry>
<logentry
   revision="1664527">
<author>rhuijben</author>
<date>2015-03-05T23:39:29.021106Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/upgrade_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/wc.py</path>
</paths>
<msg>Fix the direct db relocate in upgrade_tests.py 36.

* subversion/tests/cmdline/svntest/wc.py
  (sqlite_exec): New function.

* subversion/tests/cmdline/upgrade_tests.py
  (auto_analyze): Use function that commits.
</msg>
</logentry>
<logentry
   revision="1664526">
<author>philip</author>
<date>2015-03-05T23:32:53.763611Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/upgrade_tests_data/wc-without-stat1.tar.bz2</path>
</paths>
<msg>* subversion/tests/cmdline/upgrade_tests_data/wc-without-stat1.tar.bz2: Make
   working copy read-write.
</msg>
</logentry>
<logentry
   revision="1664523">
<author>philip</author>
<date>2015-03-05T23:17:26.044436Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/upgrade_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/upgrade_tests.py
  (auto_analyze): Relocate without using the client.
</msg>
</logentry>
<logentry
   revision="1664521">
<author>philip</author>
<date>2015-03-05T23:10:38.986224Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/upgrade_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/upgrade_tests.py
  (auto_analyze): Set UUID and relocate.
</msg>
</logentry>
<logentry
   revision="1664520">
<author>philip</author>
<date>2015-03-05T23:04:44.434153Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="A"
   prop-mods="true">/subversion/trunk/subversion/tests/cmdline/upgrade_tests_data/wc-without-stat1.tar.bz2</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/upgrade_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/upgrade_tests.py
  (auto_analyze): Use prepared working copy to allow for old Python
   with old SQLite that does not support dropping sqlite_stat1.

* subversion/tests/cmdline/upgrade_tests_data/wc-without-stat1.tar.bz2: New.
</msg>
</logentry>
<logentry
   revision="1664507">
<author>philip</author>
<date>2015-03-05T22:21:45.392448Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/upgrade_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/upgrade_tests.py
  (auto_analyze): New test for automatically adding stats table.
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1664500">
<author>rhuijben</author>
<date>2015-03-05T22:12:27.852465Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/copy_tests.py</path>
</paths>
<msg>Following up on r1664494, update expected results.

* subversion/tests/cmdline/copy_tests.py
  (no_copy_overwrites): Expect exact error code and allow url.
</msg>
</logentry>
<logentry
   revision="1664494">
<author>rhuijben</author>
<date>2015-03-05T21:57:35.733857Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/copy.c</path>
</paths>
<msg>* subversion/libsvn_client/copy.c
  (repos_to_repos_copy): Just use the whole url in the error message,
    like in other places in the same function.
</msg>
</logentry>
<logentry
   revision="1664490">
<author>astieger</author>
<date>2015-03-05T21:46:15.742446Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/po/de.po</path>
</paths>
<msg>German translations for 1.9.0

* subversion/po/de.po: Add 91 strings
</msg>
</logentry>
<logentry
   revision="1664489">
<author>astieger</author>
<date>2015-03-05T21:44:27.635472Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/po/de.po</path>
</paths>
<msg>* subversion/po/de.po scan strings
</msg>
</logentry>
<logentry
   revision="1664483">
<author>rhuijben</author>
<date>2015-03-05T21:05:03.676621Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_wc/wc-queries.sql</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_wc/wc-queries-test.c</path>
</paths>
<msg>Following up on r1664476, r1664480, r1664481 fix statement definition to not
fail the wc-queries tests.

* subversion/libsvn_wc/wc-queries.sql
  (STMT_HAVE_STAT1_TABLE): Remove unneeded ';' that made sqlite ignore the
    LIMIT. Use lower case for column names.

* subversion/tests/libsvn_wc/wc-queries-test.c
  (slow_statements): Add STMT_HAVE_STAT1_TABLE.
</msg>
</logentry>
<logentry
   revision="1664481">
<author>philip</author>
<date>2015-03-05T20:54:24.908449Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc-queries.sql</path>
</paths>
<msg>* subversion/libsvn_wc/wc-queries.sql
  (STMT_HAVE_STAT1_TABLE): Use uppercase to match other statements.
</msg>
</logentry>
<logentry
   revision="1664480">
<author>rhuijben</author>
<date>2015-03-05T20:49:30.748885Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_wc/wc-queries.sql</path>
</paths>
<msg>* subversion/libsvn_wc/wc-queries.sql
  (STMT_HAVE_STAT1_TABLE): Following up on r1664476, fix stupid thinko.
</msg>
</logentry>
<logentry
   revision="1664476">
<author>rhuijben</author>
<date>2015-03-05T20:34:35.817569Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db_wcroot.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc-queries.sql</path>
</paths>
<msg>Remove a db transaction on opening wc.db, and at the same time
also verify if the sqlite_stat1 table exists on opening a db
from svn_wc__db_wcroot_parse_local_abspath().

If the table exists we try to add the table, but ignore
errors to avoid problems when the database is read only
(This last part will need verification on other platforms)

* subversion/libsvn_wc/wc-queries.sql
  (STMT_HAVE_STAT1_TABLE): New statement.

* subversion/libsvn_wc/wc.h
  (SVN_WC__ENSURE_STAT1_TABLE): New define.

* subversion/libsvn_wc/wc_db_wcroot.c
  (svn_wc__db_pdh_create_wcroot): Only read format from db when requested
    by caller, instead of always when we open the db.
  (verify_stats_table,
   fetch_db_info): New function.
  (svn_wc__db_wcroot_parse_local_abspath): Update caller.
</msg>
</logentry>
<logentry
   revision="1664344">
<author>philip</author>
<date>2015-03-05T13:36:16.891937Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra/ra_loader.c</path>
</paths>
<msg>* subversion/libsvn_ra/ra_loader.c
  (svn_ra_open4): Destroy temporary pools.
</msg>
</logentry>
<logentry
   revision="1664234">
<author>breser</author>
<date>2015-03-05T06:13:23.157552Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Use a consistent style, reorder major changes based on what I expect
   most users would care about, remove r1562417 change that was implicitly
   reverted by r1653032.
</msg>
</logentry>
<logentry
   revision="1664200">
<author>rhuijben</author>
<date>2015-03-05T02:00:28.141383Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/auth.c</path>
</paths>
<msg>* subversion/libsvn_subr/auth.c
  (svn_auth_first_credentials): Fix usage of auth_NULL: use location
    instead of value.
</msg>
</logentry>
<logentry
   revision="1664193">
<author>rhuijben</author>
<date>2015-03-05T01:10:33.925467Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build.conf</path>
</paths>
<msg>* build.conf
  (svnbench): Add description, to produce proper version information for Win32
    binary.
</msg>
</logentry>
<logentry
   revision="1664191">
<author>rhuijben</author>
<date>2015-03-05T00:53:51.439742Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/auth.c</path>
</paths>
<msg>* subversion/libsvn_subr/auth.c
  (svn_auth_first_credentials): Initialize parameters variable a bit
    earlier to avoid using it uninitialized in certain unlikely cases.
</msg>
</logentry>
<logentry
   revision="1664187">
<author>rhuijben</author>
<date>2015-03-05T00:22:58.591755Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/auth.c</path>
</paths>
<msg>Following up on r1664078, r1664080 provide a combined set of parameters
to the auth iterator callbacks.

* subversion/libsvn_subr/auth.c
  (svn_auth_iterstate_t): Add parameters.
  (svn_auth_first_credentials): If there is a set of slave parameters,
    combine values. Store in iterator.
  (svn_auth_next_credentials): Pass parameters from iterator.
</msg>
</logentry>
<logentry
   revision="1664166">
<author>danielsh</author>
<date>2015-03-04T22:13:11.243944Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/dist/backport.pl</path>
</paths>
<msg>* tools/dist/nominate.pl
  (nominate_main): Don't print debug information in non-debug mode.</msg>
</logentry>
<logentry
   revision="1664162">
<author>danielsh</author>
<date>2015-03-04T21:55:24.963282Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/dist/backport.pl</path>
</paths>
<msg>backport.pl interactive mode: Add an interactive usage summary feature.

* tools/dist/backport.pl
  (backport_usage): Split part of the usage message into..
  ($BACKPORT_OPTIONS_HELP, $BACKPORT_OPTIONS_MERGE_OPTIONS_HELP):
     .. these new globals.  Edit the help strings of the 'e', 'N',
     'space', and 'q' options.  Add the '?' option.
  (handle_entry): New "?" option to the interactive prompts.</msg>
</logentry>
<logentry
   revision="1664156">
<author>danielsh</author>
<date>2015-03-04T21:33:51.686620Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES (1.9.0): Add missing "@" to peg revisions item.</msg>
</logentry>
<logentry
   revision="1664155">
<author>danielsh</author>
<date>2015-03-04T21:30:30.347576Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dist/backport.pl</path>
</paths>
<msg>* tools/dist/backport.pl: Fix compilation.</msg>
</logentry>
<logentry
   revision="1664153">
<author>danielsh</author>
<date>2015-03-04T21:26:03.907958Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES (1.9.0): Capitalize "API".</msg>
</logentry>
<logentry
   revision="1664151">
<author>danielsh</author>
<date>2015-03-04T21:10:43.780824Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_hash.h</path>
</paths>
<msg>* subversion/include/svn_hash.h
  (svn_hash_gets, svn_hash_sets): Move docstrings to the non-SVN_DEBUG block
    so doxygen sees them.  No code change occurred.</msg>
</logentry>
<logentry
   revision="1664148">
<author>danielsh</author>
<date>2015-03-04T21:06:30.201903Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dist/backport.pl</path>
</paths>
<msg>Follow-up to r1663842:

* tools/dist/backport.pl: Unbreak compilation on Perl v5.16 and older.</msg>
</logentry>
<logentry
   revision="1664141">
<author>ivan</author>
<date>2015-03-04T20:57:45.221388Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
</paths>
<msg>Simplify code a bit.

* subversion/libsvn_repos/rev_hunt.c
  (svn_repos_trace_node_locations): Use svn_sort__array() helper to sort
   APR array.
</msg>
</logentry>
<logentry
   revision="1664088">
<author>breser</author>
<date>2015-03-04T18:05:07.717072Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Remove two javahl entries that are internal implementation details.

Suggested by: brane
</msg>
</logentry>
<logentry
   revision="1664087">
<author>breser</author>
<date>2015-03-04T18:03:49.242910Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Fix a typo.

Found by: brane
</msg>
</logentry>
<logentry
   revision="1664085">
<author>ivan</author>
<date>2015-03-04T17:45:30.667052Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
</paths>
<msg>Rename local variable. No functional changes intended.

* subversion/libsvn_repos/rev_hunt.c
  (svn_repos_deleted_rev): Rename SUBPOOL to ITERPOOL. 
</msg>
</logentry>
<logentry
   revision="1664084">
<author>ivan</author>
<date>2015-03-04T17:43:20.504190Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
</paths>
<msg>Follow-up to r1554807: Fix unbounded memory usage.

* subversion/libsvn_repos/rev_hunt.c
  (svn_repos_deleted_rev): Reduce scope of COPY_ROOT and COPY_PATH local
   variables to make code more clear about their lifetime. Use SUBPOOL
   for temporary allocations in the loop: it restores pre r1554807 
   memory usage characteristics.
</msg>
</logentry>
<logentry
   revision="1664083">
<author>rhuijben</author>
<date>2015-03-04T17:34:22.259617Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/CHANGES</path>
</paths>
<msg>*CHANGES: Tweak some 1.9 items</msg>
</logentry>
<logentry
   revision="1664080">
<author>rhuijben</author>
<date>2015-03-04T17:30:44.022153Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/auth.c</path>
</paths>
<msg>* subversion/libsvn_subr/auth.c
  (svn_auth__make_session_auth): Add missing const to argument.
</msg>
</logentry>
<logentry
   revision="1664078">
<author>rhuijben</author>
<date>2015-03-04T17:23:46.715981Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_local/ra_plugin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/auth.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_ra_local/ra_local.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/cyrus_auth.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra/ra_loader.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra/wrapper_template.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/internal_auth.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_ra_svn/ra_svn.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_auth_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/ra_serf.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra/ra_loader.c</path>
</paths>
<msg>Following up on r1609499, which made all ra layers change the auth baton in a
way that affects all ra session using it, make it possible to create a slave
auth baton that shares everything with the parent baton except for the
parameters.

Each ra session gets its own slave parameters, and thereby allows
applying their own settings from the server group (and other origins),
without affecting other ra sessions.

* subversion/include/private/svn_auth_private.h
  (svn_auth__apply_config_for_server): Rename to...
  (svn_auth__make_session_auth): ... this and provide a new slave auth
    baton as output argument.

* subversion/libsvn_ra/ra_loader.c
  (svn_ra_open4): Create scratch pool. Create slave auth instance.
    Update caller.

* subversion/libsvn_ra/ra_loader.h
  (svn_ra__vtable_t.open_session): Add auth_baton argument and split pools.

* subversion/libsvn_ra/wrapper_template.h
  (compat_open): Update caller.

* subversion/libsvn_ra_local/ra_local.h
  (svn_ra_local__session_baton_t): Store auth baton directly.

* subversion/libsvn_ra_local/ra_plugin.c
  (get_username): Update auth usage.
  (svn_ra_local__open): Update arguments. Store auth baton.

* subversion/libsvn_ra_serf/ra_serf.h
  (svn_ra_serf__session_t): Store auth baton reference.

* subversion/libsvn_ra_serf/serf.c
  (load_config): Use slave auth baton.
  (svn_ra_serf__open): Update arguments. Store auth baton.
    Remove local subpool usage with scratch pool.

* subversion/libsvn_ra_serf/util.c
  (ssl_server_cert,
   handle_client_cert,
   handle_client_cert_pw,
   svn_ra_serf__credentials_callback): Use auth from session instead
     of from callbacks.

* subversion/libsvn_ra_svn/client.c
  (open_session): Update arguments. Store auth baton.
  (ra_svn_open): Add argument.
  (ra_svn_open_pool): Remove function that just doubled the pool.
  (ra_svn_vtable): Update reference.

* subversion/libsvn_ra_svn/cyrus_auth.c
  (svn_ra_svn__do_cyrus_auth): Use auth from session instead of from callbacks.

* subversion/libsvn_ra_svn/internal_auth.c
  (svn_ra_svn__do_internal_auth): Use auth from session instead of from callbacks.

* subversion/libsvn_ra_svn/ra_svn.h
  (svn_ra_svn__session_baton_t): Add auth baton.

* subversion/libsvn_subr/auth.c
  (svn_auth_baton_t): Add variable.
  (svn_auth_open): Document initial value.
  (auth_NULL): New constant.
  (svn_auth_set_parameter): Store value in slave parameters if that
    exists.
  (svn_auth_get_parameter): Check slave parameters before primary
    parameters.

  (svn_auth__apply_config_for_server): Rename to...
  (svn_auth__make_session_auth): ... this and create a slave auth baton
    with the new values instead of changing the passed baton.
</msg>
</logentry>
</log>
