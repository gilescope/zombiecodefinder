<?xml version="1.0" encoding="UTF-8"?>
<log>
<logentry
   revision="1731300">
<author>kotkov</author>
<date>2016-02-19T22:11:11.398612Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/utf-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/log_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/cl-log.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/log-cmd.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_utf_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/utf8proc.c</path>
</paths>
<msg>Make svn log --search case-insensitive.

Use utf8proc to do the normalization and locale-independent case folding
(UTF8PROC_CASEFOLD) for both the search pattern and the input strings.

Related discussion is in http://svn.haxx.se/dev/archive-2013-04/0374.shtml
(Subject: "log --search test failures on trunk and 1.8.x").

* subversion/include/private/svn_utf_private.h
  (svn_utf__normalize): Add new boolean argument to perform case folding.

* subversion/libsvn_subr/utf8proc.c
  (normalize_cstring): Add new boolean argument to perform case folding.
   In case it is non-zero, set the flags to UTF8PROC_CASEFOLD when
   doing the Unicode decomposition.
  (svn_utf__normalize): Pass new argument to normalize_cstring().
  (svn_utf__is_normalized): Adjust call to normalize_cstring().

* subversion/libsvn_repos/dump.c
  (extract_mergeinfo_paths, verify_mergeinfo_normalization,
   check_name_collision): Update callers of svn_utf__normalize().

* subversion/svn/cl-log.h
  (): Include svn_string_private for svn_membuf_t.
  (svn_cl__log_receiver_baton): Add an svn_membuf_t for the case folding
   and normalization purposes.

* subversion/svn/log-cmd.c
  (): Include svn_utf_private.h.
  (match): New helper that normalizes, folds case of the input, and matches
   it against the specified pattern.
  (match_search_pattern): Now accepts an svn_membuf_t.  Call the new helper
   function to perform the pattern matching.
  (svn_cl__log_entry_receiver, svn_cl__log_entry_receiver_xml): Pass the
   svn_membuf_t from the baton when calling match_search_pattern().
  (svn_cl__log): Initialize the svn_membuf_t in the log receiver baton.

* subversion/svn/svn.c
  (): Include svn_utf_private.h.
  (sub_main): Normalize and fold case of --search and --search-and arguments.

* subversion/tests/cmdline/log_tests.py
  (log_search): Adjust expectations, since --search is now case-insensitive.

* subversion/tests/libsvn_subr/utf-test.c
  (test_utf_normalize): New test for svn_utf__normalize().
  (test_funcs): Add new test.
</msg>
</logentry>
<logentry
   revision="1731274">
<author>stsp</author>
<date>2016-02-19T17:09:33.305386Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Add a unique conflict option ID for accepting the current state of the
working copy when resolving a tree conflict. Previously, this resolution
was mapped to 'merged text'.

* subversion/include/svn_client.h
  (svn_client_conflict_option_accept_current_wc_state): New option ID.

* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict, svn_client_conflict_tree_get_resolution_options): Use
   the new option ID.
  (svn_client_conflict_tree_resolve_by_id): Provide a backwards compat hack
   just in case an API user needs it.
</msg>
</logentry>
<logentry
   revision="1731270">
<author>stsp</author>
<date>2016-02-19T16:19:36.548857Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_raise_moved_away): Remove unused variable.
</msg>
</logentry>
<logentry
   revision="1731267">
<author>stsp</author>
<date>2016-02-19T16:12:30.847717Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Stop calling svn_wc__resolve_conflicts() to resolve
   otherwise unhandled tree conflicts. Use svn_wc__del_tree_conflict() instead.
   With this change, all tree conflicts are resolved independently of the legacy
   conflict resolver implementation. Text and property conflicts still use it
   but for now there is no reason to change that.
</msg>
</logentry>
<logentry
   revision="1731255">
<author>stsp</author>
<date>2016-02-19T15:23:22.190543Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Error out if no resolution strategy matched and
   the chosen resolution is something other than accepting the current
   working copy state.
</msg>
</logentry>
<logentry
   revision="1731250">
<author>stsp</author>
<date>2016-02-19T14:36:42.171993Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Really perform updates of moved-away nodes with the new conflict resolver.

* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Check for the right option_id. The resolver already
   uses svn_client_conflict_option_update_move_destination internally, instead
   of svn_client_conflict_option_working_text_where_conflicted.
   With this change, updates of moved-away nodes take the new code path.

* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_moved_away_node): We must mark the conflict
   resolved manually because svn_wc__db_update_moved_away_conflict_victim()
   does not mark the conflict resolved for us.
</msg>
</logentry>
<logentry
   revision="1731237">
<author>stsp</author>
<date>2016-02-19T12:42:54.210788Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Revert r1731226. The extra check added in that revision is not necessary
because the called function already performs the same check.
</msg>
</logentry>
<logentry
   revision="1731236">
<author>stsp</author>
<date>2016-02-19T12:40:42.055285Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_wc_private.h</path>
</paths>
<msg>Fix test fallout caused by recent conflict resolver changes.

* subversion/include/private/svn_wc_private.h
  (svn_wc__conflict_tree_update_break_moved_away): Add 'moved-away' to the
   list of valid local changes for this function.

* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_break_moved_away): Allow 'moved-away'.
</msg>
</logentry>
<logentry
   revision="1731232">
<author>stsp</author>
<date>2016-02-19T12:00:25.005359Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Follow-up to r1731231:

* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Fix condition which checks if a local move vs
   incoming edit conflict is resolved to the current working copy state.
</msg>
</logentry>
<logentry
   revision="1731231">
<author>stsp</author>
<date>2016-02-19T11:56:28.968041Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): If a local move vs incoming edit conflict is
   resolved to the current working copy state, then break the move.
   Matches old conflict resolver behaviour.
</msg>
</logentry>
<logentry
   revision="1731226">
<author>stsp</author>
<date>2016-02-19T11:47:20.378941Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>[ Reverted in r1731237. ]

* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Only break moves if incoming change is 'replace'
   rather than 'delete'. Matches the behaviour of old resolver more closely.
</msg>
</logentry>
<logentry
   revision="1731220">
<author>stsp</author>
<date>2016-02-19T10:53:32.822230Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_wc_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Provide another private libsvn_wc API function for resolving a tree conflict.

This function resolves a 'local moved-away vs. incoming edit' conflict
upon update/switch. Use this new API from libsvn_client's new conflict
resolver instead of calling the generic svn_wc__resolve_conflicts()
function for this conflict.

* subversion/include/private/svn_wc_private.h
  (svn_wc__conflict_tree_update_moved_away_node): Declare and document.

* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Call svn_wc__conflict_tree_update_moved_away_node()
   if appropriate for the tree conflict and its resolution option.
   Break single if-statement into several if-else-if for readability.

* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_moved_away_node): Implement, based on existing
   code from resolve_tree_conflict_on_node().
</msg>
</logentry>
<logentry
   revision="1731163">
<author>stefan2</author>
<date>2016-02-18T22:33:19.314900Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_repos.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Complete the work on the svn_repos_get_logs4 to svn_repos_get_logs5
migration by publishing the new API.

We don't deprecate the old one until the callers have been updated
and the FS implementations have been finalized so we have the full
picture.

* subversion/include/svn_repos.h
  (svn_repos_path_change_t,
   svn_repos_path_change_receiver_t,
   svn_repos_log_entry_t,
   svn_repos_log_entry_receiver_t,
   svn_repos_get_logs5): Publish and document the new API.  Names and
                         signatures are taken from the former "__"
                         definitions in log.c.

* subversion/libsvn_repos/log.c
  (svn_repos__path_change_t,
   svn_repos__path_change_receiver_t,
   svn_repos__log_entry_t,
   svn_repos__log_entry_receiver_t): Remove here.
  (log_callbacks_t,
   fill_log_entry,
   interesting_merge_baton_t,
   send_log,
   handle_merged_revisions): Update type references.
  (svn_repos__get_logs5): Renamed to ...
  (svn_repos_get_logs5): ... this and updated signature.
  (log4_path_change_receiver,
   log4_entry_receiver): Update type references.
  (svn_repos_get_logs4): Update caller.</msg>
</logentry>
<logentry
   revision="1731162">
<author>stefan2</author>
<date>2016-02-18T22:14:03.390451Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>* subversion/libsvn_repos/log.c
  (detect_changed): Replace obsolete comment. No functional change.</msg>
</logentry>
<logentry
   revision="1731160">
<author>stefan2</author>
<date>2016-02-18T22:11:36.995447Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Change some confusing pool usage.

Found by: rhuijben

* subversion/libsvn_repos/log.c
  (fs_mergeinfo_changed): Tighten the memory pool usage. The SCRATCH_POOL
                          would actually live longer than we need it to.</msg>
</logentry>
<logentry
   revision="1731159">
<author>stefan2</author>
<date>2016-02-18T22:07:57.114498Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Repos-layer APIs never return incomplete log info.

* subversion/libsvn_repos/log.c
  (detect_changed): The copy-from information is always known after
                    we looked it up.
</msg>
</logentry>
<logentry
   revision="1730945">
<author>stsp</author>
<date>2016-02-17T21:06:37.866876Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_break_moved_away,
   svn_wc__conflict_tree_update_raise_moved_away): Fix indentation.
</msg>
</logentry>
<logentry
   revision="1730944">
<author>stsp</author>
<date>2016-02-17T21:05:14.935667Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_raise_moved_away): Ensure that conflict action
   has the expected value.
</msg>
</logentry>
<logentry
   revision="1730943">
<author>stsp</author>
<date>2016-02-17T21:03:44.982242Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Initialize 'incoming_change' variable.
</msg>
</logentry>
<logentry
   revision="1730856">
<author>kotkov</author>
<date>2016-02-17T15:19:47.691966Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/repos.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_authz_svn/INSTALL</path>
</paths>
<msg>Provide a (hopefully) better documentation for the AuthzSVNGroupsFile
directive and for the groups-db option in svnserve.conf.

* subversion/libsvn_repos/repos.c
  (create_conf): Explain the purpose of the groups-db option.

* subversion/mod_authz_svn/INSTALL
  (II.1, Example 8): Add necessary details to this example with the
   AuthzSVNGroupsFile directive.
  (II.2): Split into two subsections with the format details and examples
   for both access files and files with the group definitions.
</msg>
</logentry>
<logentry
   revision="1730716">
<author>stsp</author>
<date>2016-02-16T17:05:25.078506Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_wc_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/resolve-cmd.c</path>
</paths>
<msg>Introduce svn_wc__conflict_tree_update_raise_moved_away(), a private
libsvn_wc API function for use by libsvn_client's conflict resolver.

This API may raise an error if other tree conflicts need to be resolved before
the tree conflict specified by the caller. Make the new conflict resolver
handle this case. (This behaviour is now exposed to the public API rather than
hidden in libsvn_wc as was the case with the legacy conflict resolver.)

* subversion/include/private/svn_wc_private.h
  (svn_wc__conflict_tree_update_raise_moved_away): Declare.

* subversion/include/svn_client.h
  (svn_client_conflict_tree_resolve): Document new error behavior in case a
   conflict cannot be resolved yet.

* subversion/libsvn_client/resolved.c
  (conflict_option_resolve_func_t): Document new error behavior in case a
   conflict cannot be resolved yet.
  (resolve_tree_conflict): Use svn_wc__conflict_tree_update_raise_moved_away()
   if applicable.

* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_raise_moved_away): Implement.

* subversion/svn/resolve-cmd.c
  (handle_tree_conflict_resolution_failure): New helper function. Copied from
   legacy libsvn_wc conflict resolver code.
  (conflict_status_walker): Handle tree conflicts which cannot be resolved
   right away by retrying them later after resolving other conflicts first.
</msg>
</logentry>
<logentry
   revision="1730708">
<author>stsp</author>
<date>2016-02-16T16:06:09.067417Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Return SVN_ERR_CLIENT_CONFLICT_OPTION_NOT_APPLICABLE where applicable, instead
of returning the very generic SVN_ERR_WC_CONFLICT_RESOLVER_FAILURE error code.

* subversion/include/svn_client.h
  (svn_client_conflict_tree_resolve_by_id,
   svn_client_conflict_prop_resolve_by_id,
   svn_client_conflict_text_resolve_by_id): Document error case.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_tree_resolve_by_id,
   svn_client_conflict_prop_resolve_by_id,
   svn_client_conflict_text_resolve_by_id): Return better error code.
</msg>
</logentry>
<logentry
   revision="1730695">
<author>stsp</author>
<date>2016-02-16T14:46:18.107752Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/svn_error_codes.h</path>
</paths>
<msg>Declare a new error code for use by the conflict resolver in libsvn_client.

* subversion/include/svn_error_codes.h
  (SVN_ERR_CLIENT_CONFLICT_OPTION_NOT_APPLICABLE): Declare.
</msg>
</logentry>
<logentry
   revision="1730689">
<author>stsp</author>
<date>2016-02-16T13:43:10.997059Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/wc_db.h</path>
</paths>
<msg>* subversion/libsvn_wc/wc_db.h
  (svn_wc__db_op_raise_moved_away: Fix typo in comment.
</msg>
</logentry>
<logentry
   revision="1730688">
<author>stsp</author>
<date>2016-02-16T13:42:06.540367Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (resolve_tree_conflict_on_node): Fix comment for clarity.
</msg>
</logentry>
<logentry
   revision="1730677">
<author>stsp</author>
<date>2016-02-16T12:42:53.819170Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (resolve_tree_conflict_on_node): Update comment which referred to a function
   that doesn't exist.
</msg>
</logentry>
<logentry
   revision="1730670">
<author>philip</author>
<date>2016-02-16T12:11:16.706163Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h
  (enum svn_client_conflict_option_id_t): Remove comma after last element.
</msg>
</logentry>
<logentry
   revision="1730617">
<author>stefan2</author>
<date>2016-02-15T21:47:00.318732Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
Switch the last svn_fs_paths_changed2 call to svn_fs_paths_changed3.

* subversion/libsvn_repos/log.c
  (fs_mergeinfo_changed): No longer fetch the whole changes list.  However,
                          we need to iterate twice for best total performance
                          and we need to minimize FS iterator lifetimes.
</msg>
</logentry>
<logentry
   revision="1730615">
<author>stefan2</author>
<date>2016-02-15T21:20:44.890221Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
Finally switch the main log processing to the new FS iterator API.

This finalizes the API work by introducing a repos-layer-specific
path_change_t.

* subversion/libsvn_repos/log.c
  (svn_repos__path_change_t): New repos-layer-specific path_change_t.
                              Keep it identical to the FS one, if feasible.
  (svn_repos__path_change_receiver_t): Update signature to use the new type.
  (detect_changed): Switch to the iterator-based changes API.  No longer
                    need to convert data here.
  (interesting_merge): Update callback.
  (path_change_kind_to_char): New utility function.
  (log4_path_change_receiver): Update callback. Convert to old data type.
</msg>
</logentry>
<logentry
   revision="1730609">
<author>stefan2</author>
<date>2016-02-15T20:39:01.799292Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
Introduce a repos-layer-specific log_entry type because we won't fill all
fields in svn_log_entry_t anymore.

* subversion/libsvn_repos/log.c
  (svn_repos__log_entry_t): Define the new struct type.
  (svn_repos__log_entry_receiver_t): The per-revision callback using the new
                                     struct is also repos-layer-specific.
  (log_callbacks_t): Update callback type.
  (fill_log_entry,
   send_log,
   handle_merged_revisions): Use the new repos-layer specific struct now.
                             It no longer needs to be allocated dynamically.
  (svn_repos__get_logs5): Update signature to use the new callback type.
  (log4_entry_receiver): Translate between new and old log_entry type.</msg>
</logentry>
<logentry
   revision="1730603">
<author>stefan2</author>
<date>2016-02-15T20:05:20.366136Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
No longer fill the changed paths hash in the log5 code but only in the
log4 compatibility wrapper.

* subversion/libsvn_repos/log.c
  (detect_changed): We no longer collect the CHANGED paths here.  That makes
                    the pool a mere SCRATCH_POOL.
  (fill_log_entry): No longer set the CHANGED_PATHS lists in the LOG_ENTRY.
  (log_entry_receiver_baton_t,
   log4_path_change_receiver,
   log4_entry_receiver): Provide full log5-compatible callbacks that gather
                         the info and forward it to log4-type callbacks.
  (svn_repos_get_logs4): Use the new compatibility shim callbacks.</msg>
</logentry>
<logentry
   revision="1730587">
<author>stsp</author>
<date>2016-02-15T18:12:46.145770Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_wc_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Provide a new private libsvn_wc API function for resolving a tree conflict.

This function resolves a 'local delete/replace vs. incoming &lt;any&gt;' conflict
upon update/switch to the current (i.e. post-update) working copy state.
Use this new API from libsvn_client's new conflict resolver instead of
calling the generic svn_wc__resolve_conflicts() function for this conflict.

This is the first special-case tree conflict resolver function in libsvn_wc.
Hopefully, many more will follow.

* subversion/include/private/svn_wc_private.h
  (svn_wc__conflict_tree_update_break_moved_away): Declare and document.

* subversion/libsvn_client/resolved.c
  (resolve_tree_conflict): Call svn_wc__conflict_tree_update_break_moved_away()
   if appropriate for the tree conflict and its resolution option.

* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_tree_update_break_moved_away): Implement, based on existing
   code from resolve_tree_conflict_on_node().
</msg>
</logentry>
<logentry
   revision="1730546">
<author>stsp</author>
<date>2016-02-15T15:04:10.836400Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/private/svn_wc_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Provide new private libsvn_wc APIs for resolving text and property conflicts.
Use these new APIs from libsvn_client's new conflict resolver instead of
calling the generic svn_wc__resolve_conflicts() function.

This avoids going on a status walk for just one path at depth empty.
The new functions added here provide sufficient functionality for the new
conflict resolver: Marking a text/prop conflict resolved based on a choice
made by the user, and sending a notification to the client.

For now, tree conflicts are still resolved with svn_wc__resolve_conflicts().
The plan is to add several new libsvn_wc APIs for resolving tree conflicts.
These APIs will not be driven by a simple conflict choice argument. Rather,
each API will implement a very specific resolution strategy for a particular
kind of tree conflict.
Eventually, libsvn_client will stop using svn_wc__resolve_conflicts() for
anything but backwards compatibility.

* subversion/include/private/svn_wc_private.h
  (svn_wc__conflict_text_mark_resolved,
   svn_wc__conflict_prop_mark_resolved): Declare.

* subversion/libsvn_client/resolved.c
  (resolve_text_conflict): Call svn_wc__conflict_text_mark_resolved().
  (resolve_prop_conflict): Call svn_wc__conflict_prop_mark_resolved().
  (resolve_tree_conflict): Inline the body of resolve_conflict() here.
  (resolve_conflict): Remove.

* subversion/libsvn_wc/conflicts.c
  (svn_wc__conflict_text_mark_resolved,
   svn_wc__conflict_prop_mark_resolved): Implement.
</msg>
</logentry>
<logentry
   revision="1730496">
<author>stsp</author>
<date>2016-02-15T11:04:04.571002Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_wc.h</path>
</paths>
<msg>* subversion/include/svn_wc.h
  (svn_wc_resolved_conflict5): Deprecate this function.
</msg>
</logentry>
<logentry
   revision="1730495">
<author>stsp</author>
<date>2016-02-15T11:00:09.919555Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h
  (svn_client_resolve): Deprecate this function.
</msg>
</logentry>
<logentry
   revision="1730491">
<author>stsp</author>
<date>2016-02-15T10:40:25.104610Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/hotcopy.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/hotcopy.c
  (hotcopy_body_baton): Fix typo in comment.
</msg>
</logentry>
<logentry
   revision="1730421">
<author>stefan2</author>
<date>2016-02-14T22:32:21.421147Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Follow-up to r1730388:
Empty revisions shall report "full revprop access" instead of "no access".

* subversion/libsvn_repos/log.c
  (svn_repos_check_revision_access): Re-instantiate special casing for
                                     empty revisions.</msg>
</logentry>
<logentry
   revision="1730416">
<author>stefan2</author>
<date>2016-02-14T22:01:07.495921Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
Remove the last instance of the discover_changed_paths flag.

* subversion/libsvn_repos/log.c
  (fill_log_entry): We can now drop the parameter here because ...
  (send_log): ... this one will always set a callback when it needs the data.
</msg>
</logentry>
<logentry
   revision="1730415">
<author>stefan2</author>
<date>2016-02-14T21:56:10.448745Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
Use the new callback to eliminate a changed paths hash scan.

* subversion/libsvn_repos/log.c
  (svn_repos__path_change_receiver_t): We need the path info as well.
  (detect_changed): Update and fix caller.
  (interesting_merge_baton_t,
   interesting_merge): New callback implementation. Factored out from ...
  (send_log): ... here. 
  (log4_path_change_receiver): Update signature.</msg>
</logentry>
<logentry
   revision="1730405">
<author>stefan2</author>
<date>2016-02-14T21:02:33.062238Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
The discover_changed_paths is now redundant with path_change_receiver being
not NULL.

Remove that flag along the callstack.  However, we can't do it completely
and will have two follow-up commits that fix this as well.

* subversion/libsvn_repos/log.c
  (send_log,
   do_logs, 
   handle_merged_revisions,
   svn_repos__get_logs5): Remove the DISCOVER_CHANGED_PATHS parameter.
  (svn_repos_get_logs4): Update caller.</msg>
</logentry>
<logentry
   revision="1730398">
<author>stefan2</author>
<date>2016-02-14T20:44:50.467495Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration:
Add a per-changed-path callback.

At the moment, it is entirely redundant and does not use the final data
types, yet.

* subversion/libsvn_repos/log.c
  (svn_repos__path_change_receiver_t): Declare the new callback type.
  (log_callbacks_t): Add elements for the new callback.
  (detect_changed): Invoke the new callback.
  (svn_repos__get_logs5): Add new callback to signature and pass it along.
  (log4_path_change_receiver): Dummy implementation of the new callback.
  (svn_repos_get_logs4): Update caller.</msg>
</logentry>
<logentry
   revision="1730397">
<author>stefan2</author>
<date>2016-02-14T20:32:16.014324Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Push the log_callback_t usage further down the call stack.  We will soon
need to pass another callback down to detect_changed.

* subversion/libsvn_repos/log.c
  (detect_changed,
   fill_log_entry): Replace the authz callback parameters with a single
                    callback structure.
  (send_log): Update caller.</msg>
</logentry>
<logentry
   revision="1730394">
<author>stefan2</author>
<date>2016-02-14T20:19:52.237636Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration.

Remove the support for "prefetched" change lists as it was only ever
effective when running 'log -g' where it prevented fetching the hash
a second time.  With the new log API, this is much less of a performance
issue, plus we have the option of an early out by not even reading all
entries once we found an "interesting" one.

* subversion/libsvn_repos/log.c
  (detect_changed,
   fs_mergeinfo_changed): Drop the PREFETCHED_CHANGES parameter and simply
                          always fetch the changes.
  (get_combined_mergeinfo_changes,
   fill_log_entry,
   send_log): Remove the PREFETCHED_CHANGES pass-through parameter.
  (do_logs): Remove CHANGES re-use logic.
  (svn_repos__get_logs5): Update caller.</msg>
</logentry>
<logentry
   revision="1730391">
<author>stefan2</author>
<date>2016-02-14T19:45:20.617167Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Continue preparations for updating the repos layer log API.

We introduce a utility struct that combines all callbacks we use.
This will reduce the code churn when we add Yet Another Callback.

* subversion/libsvn_repos/log.c
  (log_callbacks_t): Declare the new internal struct.
  (send_log,
   do_logs,
   handle_merged_revisions,
   do_logs): Replace individual callback funtions &amp; batons in the
             signatures with a single callback struct instance. 
  (svn_repos__get_logs5): Intialize the callback struct.</msg>
</logentry>
<logentry
   revision="1730389">
<author>stefan2</author>
<date>2016-02-14T19:25:12.421202Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>Begin work on the svn_repos_get_logs4 to svn_repos_get_logs5 migration.

As a first step, we introduce what will become svn_repos_get_logs5 as
a static function and implement svn_repos_get_logs4 as a wrapper.

* subversion/libsvn_repos/log.c
  (svn_repos__get_logs5): New function with the same basic code as
                          svn_repos_get_logs4 had but the POOL is now
                          a SCRATCH_POOL.
  (svn_repos_get_logs4): This is now a mere wrapper around the prior.</msg>
</logentry>
<logentry
   revision="1730388">
<author>stefan2</author>
<date>2016-02-14T19:12:30.368354Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>* subversion/libsvn_repos/log.c
  (svn_repos_check_revision_access): Switch to using the new
                                     svn_fs_paths_changed3 API.</msg>
</logentry>
<logentry
   revision="1730387">
<author>stefan2</author>
<date>2016-02-14T19:10:29.456481Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/log.c</path>
</paths>
<msg>* subversion/libsvn_repos/log.c
  (svn_repos_check_revision_access): This SUBPOOL is actually a ITERPOOL.</msg>
</logentry>
<logentry
   revision="1730381">
<author>stefan2</author>
<date>2016-02-14T19:03:39.083695Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
</paths>
<msg>* subversion/libsvn_repos/rev_hunt.c
  (get_merged_mergeinfo): Switch to using the new svn_fs_paths_changed3 API.
                          Note that there is no early out anymore; we scan
                          all changes directly instead of fetching them first.</msg>
</logentry>
<logentry
   revision="1730373">
<author>stefan2</author>
<date>2016-02-14T18:56:30.421100Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/replay.c</path>
</paths>
<msg>Switch the repos layer's replay functions to new svn_fs_paths_changed3 API.

To do this, we also need a dup function for svn_fs_path_change3_t.

* subversion/include/svn_fs.h
  (svn_fs_path_change3_dup): Declare the new API function.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_path_change3_dup): Implement it.

* subversion/libsvn_repos/replay.c
  (add_subdir,
   fill_copyfrom,
   path_driver_cb_func): All changes now use the new struct type.
  (get_relevant_changes): Switch to the new API. Be sure to copy the temp
                          data before placing it into the output containers.
  (add_subdir_ev2,
   replay_node): All changes now use the new struct type.</msg>
</logentry>
<logentry
   revision="1730372">
<author>stefan2</author>
<date>2016-02-14T18:48:03.023071Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/replay.c</path>
</paths>
<msg>Some refactoring in the repos layer to eliminate duplicate code.

* subversion/libsvn_repos/replay.c
  (get_relevant_changes): New function, factored out from ...
  (svn_repos_replay2,
   svn_repos__replay_ev2): ... these two.</msg>
</logentry>
<logentry
   revision="1730370">
<author>stefan2</author>
<date>2016-02-14T18:33:31.075784Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/merge.c</path>
</paths>
<msg>* subversion/mod_dav_svn/merge.c
  (do_resources): Switch the the new svn_fs_paths_changed3 API.</msg>
</logentry>
<logentry
   revision="1730368">
<author>stefan2</author>
<date>2016-02-14T18:29:05.504612Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/merge.c</path>
</paths>
<msg>Tighten the pool usage in mod_dav_svn's commit response.

* subversion/mod_dav_svn/merge.c
  (do_resources): Rename the SUBPOOL to ITERPOOL.
                  Introduce SUBPOOL for everything else allocated here
                  and release it immediately at the end.</msg>
</logentry>
<logentry
   revision="1730365">
<author>stefan2</author>
<date>2016-02-14T18:17:39.748604Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
</paths>
<msg>In FSX, natively implement the new svn_fs_paths_changed3 API.

This still uses unbound memory but already eliminates the need for
additional copies and conversions.

* subversion/libsvn_fs_x/tree.c
  (x_txn_changes_iterator_get,
   txn_changes_iterator_vtable): Implement the iterator for in-txn changes.
  (fs_revision_changes_iterator_data_t,
   x_revision_changes_iterator_get,
   rev_changes_iterator_vtable): Implement the iterator for in-rev changes.
  (x_report_changes): Implement the vtable entry for svn_fs_paths_changed3.
  (root_vtable): Enable the new API implementation and temporarily disable
                 the old one.  This enforces FSX tests to use the new API
                 entirely.</msg>
</logentry>
<logentry
   revision="1730364">
<author>stefan2</author>
<date>2016-02-14T18:11:11.387676Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/COMMITTERS</path>
</paths>
<msg>* COMMITTERS: Use the right TLD with my email address.</msg>
</logentry>
<logentry
   revision="1730363">
<author>stefan2</author>
<date>2016-02-14T17:51:49.290360Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
</paths>
<msg>* subversion/libsvn_fs_x/fs.h
  (svn_fs_x__dirent_t):  Our internal data type matches the API type.
</msg>
</logentry>
<logentry
   revision="1730362">
<author>stefan2</author>
<date>2016-02-14T17:47:55.105800Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
</paths>
<msg>Switch the new svn_fs_paths_changed3 from a using callback to returning
an iterator object.

Suggested by: ivan

* subversion/include/svn_fs.h
  (svn_fs_path_change_iterator_t): Declare the new iterator object.
  (svn_fs_path_change_get): The only method our new iterator has.  To keep
                            it copy-free, we provide very limited lifetime
                            guarantees.  That's o.k. for such a low-level
                            API.
  (svn_fs_path_change_receiver_t): Drop callback type.
  (svn_fs_path_change3_create): Switch from callback to iterator.

* subversion/libsvn_fs/fs-loader.h
  (root_vtable_t): Update to match the changed API.
  (changes_iterator_vtable_t): V-table type for the new iterator object.
  (svn_fs_path_change_iterator_t): Define the generic iterator object.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_path_change_get): Implement new iterator API.
  (add_changed_path_baton_t,
   add_changed_path): Drop old emulation utilities.
  (svn_fs_paths_changed2): Update the emulation to the iterator-based API.
  (fsap_iterator_data_t,
   changes_iterator_get,
   iterator_vtable): Implement the new iterator for old API data.
  (svn_fs_paths_changed3): Update implementation.</msg>
</logentry>
<logentry
   revision="1730360">
<author>stefan2</author>
<date>2016-02-14T17:20:20.293622Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/COMMITTERS</path>
</paths>
<msg>* COMMITTERS: Update my email address.</msg>
</logentry>
<logentry
   revision="1729937">
<author>jamessan</author>
<date>2016-02-12T03:43:27.333394Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport.pl</path>
</paths>
<msg>* tools/dist/backport.pl
  (): Followup to r1729935, remove comment about isprint use
</msg>
</logentry>
<logentry
   revision="1729935">
<author>jamessan</author>
<date>2016-02-12T03:27:18.301916Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dist/backport.pl</path>
</paths>
<msg>* tools/dist/backport.pl:
  (): Remove isspace and isprint from POSIX import
  (prompt): Replace use of isspace and isprint with pattern matches.  These
    functions have been deprecated since Perl 5.20 and may be removed in 5.24.
</msg>
</logentry>
<logentry
   revision="1729679">
<author>philip</author>
<date>2016-02-10T18:03:29.310084Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
</paths>
<msg>* subversion/svn/svn.c
* subversion/svnadmin/svnadmin.c
* subversion/svnbench/svnbench.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (): Remove another unsed header file.
</msg>
</logentry>
<logentry
   revision="1729678">
<author>philip</author>
<date>2016-02-10T17:58:24.841325Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
</paths>
<msg>* subversion/svn/svn.c
* subversion/svnadmin/svnadmin.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (): Remove now unsed header files.
</msg>
</logentry>
<logentry
   revision="1729677">
<author>philip</author>
<date>2016-02-10T17:57:53.914463Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
</paths>
<msg>* subversion/svnbench/svnbench.c
  (): Remove now unsed header files.
  (sub_main): Remove some signal code that is now in the library.
</msg>
</logentry>
<logentry
   revision="1729673">
<author>philip</author>
<date>2016-02-10T17:25:55.081251Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cmdline.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_cmdline_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
</paths>
<msg>Move a bit more of the signal handling code from the programs to the library.

* subversion/include/private/svn_cmdline_private.h
  (svn_cmdline__get_cancellation_signal): Remove.
  (svn_cmdline__cancellation_exit): New.

* subversion/libsvn_subr/cmdline.c
  (svn_cmdline__get_cancellation_signal): Remove.
  (svn_cmdline__cancellation_exit): New.

* subversion/svn/svn.c
* subversion/svnadmin/svnadmin.c
* subversion/svnbench/svnbench.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (main): Call new function.
</msg>
</logentry>
<logentry
   revision="1729519">
<author>jamessan</author>
<date>2016-02-10T03:22:36.400539Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/client-side/svn-graph.pl</path>
</paths>
<msg>* tools/client-side/svn-graph.pl
  (): Remove use of SVN::Ra + SVN::Client's auth baton in favor of just
      SVN::Client.  Move temporary SVN::Client instance ...
  (write_graph_descriptor): ... here in an explicit variable.
</msg>
</logentry>
<logentry
   revision="1729484">
<author>philip</author>
<date>2016-02-09T22:14:43.907361Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/tools/buildbot/slaves/svn-sparc-solaris/mount-tmpfs.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/tools/buildbot/slaves/svn-sparc-solaris/serf.patch</path>
<path
   text-mods="true"
   kind="file"
   action="A"
   prop-mods="false">/subversion/trunk/tools/buildbot/slaves/svn-sparc-solaris/twisted.patch</path>
<path
   text-mods="true"
   kind="file"
   action="A"
   prop-mods="false">/subversion/trunk/tools/buildbot/slaves/svn-sparc-solaris/rebuild-svn-bits.sh</path>
</paths>
<msg>I don't know how long the Solaris buildbot will survive.  These
files record how I built things.

* tools/buildbot/slaves/svn-sparc-solaris/rebuild-svn-bits.sh: New.
* tools/buildbot/slaves/svn-sparc-solaris/mount-tmpfs.c: New.
* tools/buildbot/slaves/svn-sparc-solaris/serf.patch: New.
* tools/buildbot/slaves/svn-sparc-solaris/twisted.patch: New.
</msg>
</logentry>
<logentry
   revision="1729463">
<author>philip</author>
<date>2016-02-09T21:43:03.617899Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cmdline.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/cl.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnbench/cl.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_cmdline_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
</paths>
<msg>Move signal handling and cancellation code to libsvn_subr to avoid
duplication in multiple programs.

* subversion/include/private/svn_cmdline_private.h
  (svn_cmdline__setup_cancellation_handler,
   svn_cmdline__disable_cancellation_handler,
   svn_cmdline__get_cancellation_signal): New.

* subversion/libsvn_subr/cmdline.c
  (signal_handler, check_cancel,
   svn_cmdline__setup_cancellation_handler,
   svn_cmdline__disable_cancellation_handler,
   svn_cmdline__get_cancellation_signal): New, code from svn.c and svnadmin.c.

* subversion/svn/cl.h
  (svn_cl__check_cancel): Change type to pointer.

* subversion/svn/svn.c
  (svn_cl__check_cancel): Change type to pointer.
  (signal_handler): Remove.
  (sub_main, main): Call new functions.

* subversion/svnadmin/svnadmin.c
  (check_cancel): Change type to pointer.
  (signal_handler, setup_cancellation_signalsl): Remove.
  (repos_notify_handler, subcommand_recover, subcommand_upgrade,
   sub_main, main): Call new functions.

* subversion/svnbench/cl.h
  (svn_cl__check_cancel): Change type to pointer.

* subversion/svnbench/svnbench.c
  (svn_cl__check_cancel): Change type to pointer.
  (signal_handler): Remove.
  (sub_main, main): Call new functions.

* subversion/svnfsfs/svnfsfs.h
  (check_cancel): Change type to pointer.

* subversion/svnfsfs/svnfsfs.c
  (check_cancel): Change type to pointer.
  (signal_handler, setup_cancellation_signals): Remove.
  (sub_main, main): Call new functions.

* subversion/svnlook/svnlook.c
  (check_cancel): Change type to pointer.
  (signal_handler): Remove.
  (sub_main, main): Call new functions.

* subversion/svnrdump/svnrdump.c
  (check_cancel): Change type to pointer.
  (signal_handler): Remove.
  (sub_main, main): Call new functions.

* subversion/svnsync/svnsync.c
  (check_cancel): Change type to pointer.
  (signal_handler): Remove.
  (sub_main, main): Call new functions.
</msg>
</logentry>
<logentry
   revision="1729441">
<author>philip</author>
<date>2016-02-09T19:34:55.198893Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnsync/svnsync.c</path>
</paths>
<msg>* subversion/svn/svn.c
* subversion/svnadmin/svnadmin.c
* subversion/svnbench/svnbench.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (signal_map): Fix typo in WIN32 code.
</msg>
</logentry>
<logentry
   revision="1729422">
<author>philip</author>
<date>2016-02-09T17:36:49.191858Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
</paths>
<msg>* subversion/svn/svn.c
* subversion/svnbench/svnbench.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (signal_handler, setup_cancellation,
   sub_main, main): Followup to r1727916, handle race if second signal
   arrives, don't assume int fits in sig_atomic_t.

Found by: danielsh
</msg>
</logentry>
<logentry
   revision="1729307">
<author>danielsh</author>
<date>2016-02-09T03:19:43.394069Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/COMMITTERS</path>
</paths>
<msg>* COMMITTERS: Remove 'bouncing' annotation from nebiac's entry, since
    I received no bounce of my email to him.</msg>
</logentry>
<logentry
   revision="1729060">
<author>jamessan</author>
<date>2016-02-08T00:39:43.327535Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/svn-graph.pl</path>
</paths>
<msg>* tools/client-side/svn-graph.pl
  (): Use direct method invocation to construct SVN::Client
  (parse_commandline): Canonicalize the given repo URI
  (write_graph_descriptor): Use the canonical form of the relpath for the root
    of the repo.
</msg>
</logentry>
<logentry
   revision="1728585">
<author>jamessan</author>
<date>2016-02-05T01:46:18.271309Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
</paths>
<msg>* subversion/libsvn_fs/fs-loader.c:
  (SVN_FS_ENUMLATE_PATHS_CHANGED,
   SVN_FS_ENUMLATE_REPORT_CHANGES): Fix spelling of EMULATE.  No functional change.
</msg>
</logentry>
<logentry
   revision="1728464">
<author>philip</author>
<date>2016-02-04T13:04:47.834433Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_main.c</path>
</paths>
<msg>* subversion/tests/svn_test_main.c
  (do_test_num): Introduce a local variable and set another variable later
   to avoid potential setjmp/longjmp clobbers.
</msg>
</logentry>
<logentry
   revision="1728463">
<author>philip</author>
<date>2016-02-04T13:02:39.556196Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_main.c</path>
</paths>
<msg>Revert r1728324 in preparation for fix that works.

* subversion/tests/svn_test_main.c
  (call_setjmp, do_test_num): Revert.
</msg>
</logentry>
<logentry
   revision="1728387">
<author>philip</author>
<date>2016-02-03T22:45:52.898074Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/gpg_agent.c</path>
</paths>
<msg>Fix issue 4611, gpg-agent and passwords with a percent character.

* subversion/libsvn_subr/gpg_agent.c
  (is_hex, hex_to_int, unescape_assuan): New.
  (password_get_gpg_agent): Unescape the password.
</msg>
</logentry>
<logentry
   revision="1728348">
<author>philip</author>
<date>2016-02-03T18:25:18.434234Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>* subversion/libsvn_ra_svn/marshal.c
  (changed_path_flags): Move the storage-class specifier 'const' to the
   beginning of the declaration. Other locations are obsolescent [6.11.5]
</msg>
</logentry>
<logentry
   revision="1728343">
<author>philip</author>
<date>2016-02-03T16:59:54.404635Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/x509info.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_x509.h</path>
</paths>
<msg>* subversion/include/svn_x509.h
* subversion/libsvn_subr/x509info.c
  (svn_x509_certinfo_get_valid_to): Remove spurious const from
   integer return type.
</msg>
</logentry>
<logentry
   revision="1728324">
<author>philip</author>
<date>2016-02-03T14:27:01.122739Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_main.c</path>
</paths>
<msg>* subversion/tests/svn_test_main.c
  (call_setjmp): New, to fix some potential setjmp/longjmp clobbers.
  (do_test_num): Call new function, tweak comment to explain why
   a parameter is modified.
</msg>
</logentry>
<logentry
   revision="1728308">
<author>philip</author>
<date>2016-02-03T13:39:48.755331Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/deprecated.c</path>
</paths>
<msg>* subversion/libsvn_wc/deprecated.c
  (svn_wc_get_diff_editor6): Pass on ignore_ancestry rather than
   use_git_diff_format.
</msg>
</logentry>
<logentry
   revision="1728244">
<author>gstein</author>
<date>2016-02-03T01:34:44.433897Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/contrib/server-side/svncutter/README</path>
<path
   action="D"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/contrib/server-side/svncutter/svncutter</path>
</paths>
<msg>Deprecate svn cutter, per ESR's email to dev@subversion. Point to his
new "reposurgeon" project site.

See: Message-Id: &lt;20160202234208.B098313A0E4A@snark.thyrsus.com&gt;
</msg>
</logentry>
<logentry
   revision="1727993">
<author>stefan2</author>
<date>2016-02-01T19:57:35.853678Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_fs_util.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_util/fs-util.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_fs_private.h</path>
</paths>
<msg>Follow-up to r1727838: (Hopefully) fix the cyclic library dependecy between
lib_fs and lib_fs_util that broke the Windows build.

Reported by: rhuijben

* subversion/include/private/svn_fs_util.h
  (svn_fs__get_deleted_node): Move declaration from here ...

* subversion/include/private/svn_fs_private.h
  (svn_fs__get_deleted_node): ... to here. Use Doxygen comments like in the
                              rest of that file.

* subversion/libsvn_fs_util/fs-util.c
  (svn_fs__get_deleted_node): Move implementation from here ...

* subversion/libsvn_fs/fs-loader.c
  (svn_fs__get_deleted_node): ... to here.</msg>
</logentry>
<logentry
   revision="1727916">
<author>philip</author>
<date>2016-02-01T11:06:16.862374Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
</paths>
<msg>Followup to r1727621, properly resend the signal for all caught signals.

* subversion/svn/svn.c
* subversion/svnadmin/svnadmin.c
* subversion/svnbench/svnbench.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (signal_handler): Store signal number.
  (main): Resend signal when signal is caught.
</msg>
</logentry>
<logentry
   revision="1727838">
<author>stefan2</author>
<date>2016-01-31T16:18:26.344967Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_util/fs-util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_fs_util.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Add the ability to emulate the old svn_fs_paths_changed2 through
svn_fs_paths_changed3.  So, we've got a two-way emulation now and
we enable both for now such that all callers of the old API will
be redirected: old API -&gt; new API -&gt; old API vtable entry.

As a bonus, the emulated svn_fs_paths_changed2 now correctly reports
the IDs for in-revision nodes in FSFS.  It also fails earlier on
corrupted change lists.  Both is only true for "emulated" mode.

* subversion/include/private/svn_fs_util.h
  (svn_fs__get_deleted_node): Declare a new private utility API needed
                              to handle ID creation edge cases.

* subversion/libsvn_fs_util/fs-util.c
  (svn_fs__prop_lists_equal): Implement.

* subversion/libsvn_fs/fs-loader.c
  (SVN_FS_EMULATE_PATHS_CHANGED): Declare new control macro as we did
                                  already for the new API.
  (add_changed_path_baton_t,
   add_changed_path): Callback implementation to emulate the old API
                      based on the new one.
  (svn_fs_paths_changed2): Emulate when necessary or forced to do so.

* subversion/tests/cmdline/svnadmin_tests.py
  (verify_invalid_path_changes): The correct ID construction in emulated
                                 mode creates fewer repetitions of the
                                 same error during verification.  Update
                                 test expectations accordingly.
</msg>
</logentry>
<logentry
   revision="1727824">
<author>stefan2</author>
<date>2016-01-31T14:41:46.196920Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
</paths>
<msg>Provide a fallback implementation for svn_fs_paths_changed3.

* subversion/libsvn_fs/fs-loader.c
  (SVN_FS_EMULATE_REPORT_CHANGES): Add this macro to optionally enforce
                                   API emulation.
  (svn_fs_paths_changed3): Emulate the new API using old one either when
                           enforced by macro or as a fallback for FS that
                           don't provide the new API.
</msg>
</logentry>
<logentry
   revision="1727822">
<author>stefan2</author>
<date>2016-01-31T14:29:19.861822Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_fs_util.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_base/tree.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_util/fs-util.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
</paths>
<msg>Define a callback-based FS API to report changed paths.

The old API is not going to be deprecated until the majority of users have
been migrated.  Also, there is no backend that implements the new API, so
this will simply segfault when being called.  The next patch will fix this
by adding a fallback implementation for it.

* subversion/include/svn_fs.h
  (svn_fs_path_change3_t): Declare the new path change data type.  Lose
                           the unusable noderev ID and add the path, so
                           this struct is now self-sufficient.
  (svn_fs_path_change3_create): Declare a suitable constructor to help
                                future binary compatibility.
  (svn_fs_path_change_receiver_t,
   svn_fs_paths_changed3): The actual new API &amp; callback function type. 

* subversion/include/private/svn_fs_util.h
  (svn_fs__path_change_create_internal2): Declare a suitable private API
                                          to instantiate the new data
                                          struct - similar to the old one.

* subversion/libsvn_fs_util/fs-util.c
  (svn_fs__path_change_create_internal2): Implement the new internal API
                                          similar to the old one.

* subversion/libsvn_fs/fs-loader.h
  (root_vtable_t): Add entry for the new API.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_paths_changed3): Implement as simple vtable call.  This will
                           actually segfault for now b/c nobody provides
                           the function.
  (svn_fs_path_change3_create): Implement like svn_fs_path_change2_create.

* subversion/libsvn_fs_base/tree.c
* subversion/libsvn_fs_fs/tree.c
* subversion/libsvn_fs_x/tree.c
  (root_vtable): None of these backends actually implement the new API.</msg>
</logentry>
<logentry
   revision="1727791">
<author>stsp</author>
<date>2016-01-31T10:47:44.258165Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_text_get_resolution_options,
  (svn_client_conflict_prop_get_resolution_options): Forgot to localize
   descriptions while copying conflict options from static arrays.

Found by: rhuijben
</msg>
</logentry>
<logentry
   revision="1727790">
<author>stefan2</author>
<date>2016-01-31T10:28:30.464254Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/merge.c</path>
</paths>
<msg>Reduce memory consumption of DAV merge responses (commits).

* subversion/mod_dav_svn/merge.c
  (do_resources): Since the paths in the changes list provided by the FS
                  are already unique, we only need to track thoes that
                  might clash with ones we add ourselves.</msg>
</logentry>
<logentry
   revision="1727789">
<author>stefan2</author>
<date>2016-01-31T10:27:17.959400Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>Revert r1727785 (committed the wrong file).</msg>
</logentry>
<logentry
   revision="1727785">
<author>stefan2</author>
<date>2016-01-31T09:29:39.293427Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>[Reverted in r1727789]

Reduce memory consumption of DAV merge responses (commits).

* subversion/mod_dav_svn/merge.c
  (do_resources): Since the paths in the changes list provided by the FS
                  are already unique, we only need to track thoes that
                  might clash with ones we add ourselves. </msg>
</logentry>
<logentry
   revision="1727737">
<author>stsp</author>
<date>2016-01-30T17:35:33.063565Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c: Stop including svn_wc_private.h.
</msg>
</logentry>
<logentry
   revision="1727733">
<author>stsp</author>
<date>2016-01-30T17:11:30.054194Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_prop_get_resolution_options): Ensure that options
   returned from here live in writable memory so that option-&gt;type_data 
   can be written to. Should fix access violation on Windows.

Found by: svn-windows-local buildbot
</msg>
</logentry>
<logentry
   revision="1727728">
<author>stsp</author>
<date>2016-01-30T16:47:17.371174Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (prop_conflict_option): Fix the callback for 'base' property conflict option.
</msg>
</logentry>
<logentry
   revision="1727725">
<author>stsp</author>
<date>2016-01-30T16:42:48.071664Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (mark_conflict_resolved): Use the new client conflict API to mark
   conflicts as resolved, instead of calling into libsvn_wc.
</msg>
</logentry>
<logentry
   revision="1727724">
<author>stsp</author>
<date>2016-01-30T16:41:37.547413Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (prop_conflicts): Allow 'base', 'mine-conflict', and 'theirs-conflict'
   for property conflicts because libsvn_wc supports this.
   At present, libsvn_wc treats 'mine-conflict' and 'theirs-conflict'
   just like 'mine-full' and 'theirs-full'. For backwards compat we should
   keep accepting them, and perhaps we'll decide to make 'mine-conflict'
   and 'theirs-conflict' do something different in the future.
</msg>
</logentry>
<logentry
   revision="1727722">
<author>stsp</author>
<date>2016-01-30T16:28:56.948989Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_tree_resolve_by_id): Add a hack that makes the
   '--accept mine-conflict' option work for 2 specific tree conflicts.
   In Subversion 1.9 these conflicts could be resolved to 'mine-conflict'
   and we should keep allowing this for backwards compatibility, even if
   the conflict prompt doesn't offer this option anymore.
</msg>
</logentry>
<logentry
   revision="1727721">
<author>stsp</author>
<date>2016-01-30T16:26:48.757204Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_tree_get_resolution_options): Always add an option
   which allows the user to accept the current working copy state. This option
   was not added if automated resolution is possible, but it needs to be
   always available so that '--accept working' can function.
</msg>
</logentry>
<logentry
   revision="1727720">
<author>stsp</author>
<date>2016-01-30T16:23:04.917199Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (text_conflict_options): Add svn_client_conflict_option_base_text to the
   list of valid text conflict options. Missed by accident.
</msg>
</logentry>
<logentry
   revision="1727719">
<author>stsp</author>
<date>2016-01-30T16:20:46.370399Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (resolve_conflict): Plug an error leak.
</msg>
</logentry>
<logentry
   revision="1727718">
<author>stefan2</author>
<date>2016-01-30T15:44:52.348606Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/changes.c</path>
</paths>
<msg>Remove unused path change types from FSX containers.

* subversion/libsvn_fs_x/changes.c
  (CHANGE_KIND_MASK): Update as we use one bit less now.
  (CHANGE_KIND_RESET,
   CHANGE_KIND_MOVE,
   CHANGE_KIND_MOVEREPLACE): Remove these unused change kinds.
</msg>
</logentry>
<logentry
   revision="1727717">
<author>stefan2</author>
<date>2016-01-30T15:41:57.405312Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/changes.c</path>
</paths>
<msg>Add support for the mergeinfo_mod flag to FSX changed paths list containers.
This had been omitted by accident.

* subversion/libsvn_fs_x/changes.c
  (CHANGE_MERGEINFO_MOD): Define bit we use to represent the flag.
  (append_change): Store the new flag.
  (svn_fs_x__changes_get_list): Return the new flag.
</msg>
</logentry>
<logentry
   revision="1727716">
<author>stefan2</author>
<date>2016-01-30T15:33:35.979748Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>Cleanse FSX changed paths lists code from the renmants of noderev_id.

* subversion/libsvn_fs_x/fs.h
  (svn_fs_x__change_t): Remove noderev ID element entirely.

* subversion/libsvn_fs_x/transaction.h
  (svn_fs_x__add_change): ID parameter is no longer used.

* subversion/libsvn_fs_x/transaction.c
  (svn_fs_x__add_change): Update.

* subversion/libsvn_fs_x/tree.c
  (add_change): Update caller.
  (x_change_node_prop,
   x_make_dir,
   x_delete_node,
   copy_helper, 
   x_make_file,
   apply_textdelta,
   apply_text): Update respective next caller level.</msg>
</logentry>
<logentry
   revision="1727711">
<author>stefan2</author>
<date>2016-01-30T15:23:09.544169Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/changes.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/low_level.c</path>
</paths>
<msg>In FSX, remove all code that reads and writes noderev IDs in changed
path lists.

* subversion/libsvn_fs_x/changes.c
  (CHANGE_TXN_NODE): No longer needed.
  (binary_change_t): Remove noderev ID element.
  (append_change,
   svn_fs_x__changes_get_list,
   svn_fs_x__write_changes_container,
   svn_fs_x__read_changes_container,
   svn_fs_x__changes_get_list_func): Remove all noderev ID access for
                                     containered changed paths lists.

* subversion/libsvn_fs_x/low_level.c
  (read_change,
   write_change_entry): No longer read and write noderev IDs when
                        reading / writing non-packed changes lists.

* subversion/libsvn_fs_x/transaction.c
  (fold_change): The noderev ID is now meaningless here.
  (svn_fs_x__add_change): Don't store the noderev ID anymore.
  (write_final_rev): No longer update the noderev in changed paths lists.
  (sanitize_changed_path_info): No longer neccessary.
  (commit_body): Update caller.</msg>
</logentry>
<logentry
   revision="1727709">
<author>stefan2</author>
<date>2016-01-30T15:05:18.005027Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
</paths>
<msg>In FSX, begin getting rid of the redundant noderev IDs within changed
paths lists.

This change dynamically determines the ID for the changed_paths API
implementation, effectively rendering the stored IDs unnecessary.

* subversion/libsvn_fs_x/tree.c
  (construct_fs_id): New function to construct the ID object dynamically.
  (construct_fs_path_change): Update to call the new utility instead of
                              using the info provided in CHANGE.  Add a
                              few pass-through parameters.
  (x_paths_changed): Update the next level caller.
</msg>
</logentry>
<logentry
   revision="1727707">
<author>stefan2</author>
<date>2016-01-30T14:50:44.992679Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/id.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/id.c
  (locale_independent_strtol): Clarify comment. No functional change.
</msg>
</logentry>
<logentry
   revision="1727704">
<author>stsp</author>
<date>2016-01-30T14:38:16.697517Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (mark_conflict_resolved): Move this function further up in the file to avoid
   a forward declaration.
</msg>
</logentry>
<logentry
   revision="1727703">
<author>stsp</author>
<date>2016-01-30T14:36:46.661895Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (conflict_get_internal): Initialize text and tree conflict resolution options
   to 'unspecified' rather than 'undefined'.

* subversion/include/svn_client.h
  (svn_client_conflict_text_get_resolution,
  (svn_client_conflict_tree_get_resolution): Update docstring accordingly.
</msg>
</logentry>
<logentry
   revision="1727702">
<author>stsp</author>
<date>2016-01-30T14:32:28.903400Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>*subversion/libsvn_client/resolved.c
 (svn_client_conflict_prop_get_resolution): Return 'unspecified' rather than
  'undefined' for property conflicts which haven't been resolved yet.

*subversion/include/svn_client.h
 (svn_client_conflict_prop_get_resolution): Update docstring accordingly.
</msg>
</logentry>
<logentry
   revision="1727699">
<author>stsp</author>
<date>2016-01-30T14:20:36.674169Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Create distinct conflict option IDs for our current tree conflict resolution
options (there are only 2 options which actually resolve a tree conflict).

The new options are only used in libsvn_client and 'svn' for now. The
current libsvn_wc interfaces still force us to map conflict option IDs to
svn_wc_conflict_choice_t. As a side effect, --accept mine-conflict still
works with these tree conflicts, but that may change later (we'll need a
different system than a single --accept option to resolve arbitrary tree
conflicts in a non-interactive way).

* subversion/include/svn_client.h
  (svn_client_conflict_option_update_move_destination,
   svn_client_conflict_option_update_any_moved_away_children): Declare.
  (svn_client_conflict_option_id_to_wc_conflict_choice): Declare. This is a
   temorary interface which maps option ID to legacy conflict choice.

* subversion/libsvn_client/resolved.c
  (conflict_option_id_to_wc_conflict_choice): Rename to ...
  (svn_client_conflict_option_id_to_wc_conflict_choice): ... this and expose as
   a temporary public API function. Map the new option IDs to the legacy
   conflict choice 'mine-conflict' so libsvn_wc will still resolve these
   conflicts correctly.
  (resolve_conflict): Update caller.
  (svn_client_conflict_tree_get_resolution_options): Assign the new option IDs
   to their respective tree conflict options.

* subversion/svn/conflict-callbacks.c
  (builtin_resolver_options): Add new options IDs. Use code "u" for them,
   a mnemonic for "update", instead of "mc" ("mine-conflict").
  (conflict_option_id_to_wc_conflict_choice): Remove. This was a copy of
   the same function in libsvn_client.
  (mark_conflict_resolved): Use the new
   svn_client_conflict_option_id_to_wc_conflict_choice() interface.
</msg>
</logentry>
<logentry
   revision="1727621">
<author>philip</author>
<date>2016-01-29T18:55:22.163265Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/svn.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnbench/svnbench.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnrdump/svnrdump.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnfsfs/svnfsfs.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnlook/svnlook.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnsync/svnsync.c</path>
</paths>
<msg>* subversion/svn/svn.c
* subversion/svnadmin/svnadmin.c
* subversion/svnbench/svnbench.c
* subversion/svnfsfs/svnfsfs.c
* subversion/svnlook/svnlook.c
* subversion/svnrdump/svnrdump.c
* subversion/svnsync/svnsync.c
  (main): Exit via SIGINT when SIGINT is caught.
</msg>
</logentry>
<logentry
   revision="1727618">
<author>stsp</author>
<date>2016-01-29T17:18:05.678371Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>In the interactive conflict resolver, use the option id 'unspecified' to
indicate the user hasn't made a choice yet, rather than 'undefined' which
is otherwise used to mark 'svn' client-specific conflict options as such.

Also, ensure the variable containing the user's answer is always initialized
before prompting.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict, handle_prop_conflicts): Use the
   svn_client_conflict_option_unspecified option instead of
   svn_client_conflict_option_undefined to mark the state where
   the user hasn't made a choice yet.
  (handle_one_prop_conflict, handle_tree_conflict): Same, and make sure to
   initialize option_id.
</msg>
</logentry>
<logentry
   revision="1727617">
<author>stsp</author>
<date>2016-01-29T17:05:53.107828Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Split handling of --accept option and interactive prompting into 2 functions.

No functional change.

* subversion/svn/conflict-callbacks.c
  (resolve_conflict_by_accept_option): New, based on the code from
    resolve_conflict_interactively() but returns an a conflict option ID
    via an output parameter. This allows the caller to tell whether the
    --accept option is resolved the conflict.
  (resolve_conflict_interactively): Stop handling the --accept option in here
   and remove related parameters.
  (svn_cl__resolve_conflict): Update caller.
</msg>
</logentry>
<logentry
   revision="1727616">
<author>stsp</author>
<date>2016-01-29T16:53:04.319202Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Stop passing a pointer to the --accept option value to interactive conflict
handlers, now that the 'quit' command at the conflict prompt command works
without this hack.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict, handle_one_prop_conflict, handle_prop_conflicts,
   handle_tree_conflict): Remove accept_which output parameter. 
  (resolve_conflict_interactively): Update caller.
</msg>
</logentry>
<logentry
   revision="1727615">
<author>stsp</author>
<date>2016-01-29T16:47:52.660408Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/resolve-cmd.c</path>
</paths>
<msg>Make the 'quit' command at the conflict prompt actually quit right away.

This command worked by side-effect of postponing all remaining conflicts
but didn't actually stop the conflict walk.
The QUIT flag passed around in the code was never actually read, just written.

* subversion/svn/resolve-cmd.c
  (conflict_status_walker): Check the conflict resolver QUIT flag and cancel
   the status walk if it is set.
  (walk_conflicts): Check for SVN_ERR_CANCELLED in combination with QUIT and
   don't treat this as an error. Don't write messages about being unable
   to resolve conflicts if the user canceled by hitting Ctrl-C, just exit.
</msg>
</logentry>
<logentry
   revision="1727609">
<author>stsp</author>
<date>2016-01-29T16:14:52.900062Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (svn_cl__interactive_conflict_baton_t): Remove. Has been unused for a while.
</msg>
</logentry>
<logentry
   revision="1727596">
<author>stsp</author>
<date>2016-01-29T14:56:32.666646Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Follow-up to r1727593, which broke some tests:

Fix errors in handling the --accept option and postponed conflicts.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict, handle_prop_conflicts, handle_tree_conflict): Do not
   call mark_conflict_resolved() if the conflict should be postponed.
  (resolve_conflict_interactively): Same, and also do not start interactive
   resolution if the --accept option postponed the conflict.
</msg>
</logentry>
<logentry
   revision="1727593">
<author>stsp</author>
<date>2016-01-29T14:33:38.075125Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Refactor code in 'svn resolve' such that a call to the function
svn_client_conflict_prop_get_propname() can be removed.

This function should not exist because an svn_client_conflict_t object
represents all conflicts on a given node, including multiple property
conflicts. So a function returning just one property name makes no sense.
The function was added while transitioning away from the legacy conflict API.
We cannot remove it yet becuase a call in 'svn info' remains.

This change requires the property conflict handler to loop over multiple
properties and resolve them one by one. The previous logic assumed the
text/prop/tree conflict handlers will return one answer from the user
which indicates how the conflict should be resolved. Change them all to
mark the conflict resolved internally, and make other related tweaks.

* subversion/include/svn_client.h
  (svn_client_conflict_prop_get_propvals): Add 'propname' parameter.
   This function must know which property it is being asked about.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_prop_get_propvals): Return conflicted property values 
   for the specific property named by the caller.

* subversion/svn/conflict-callbacks.c
  (handle_text_conflict): Remove option_id output parameter and the ineffective
   save_merged parameter. The functionalty of save_merged is not supported by
   the new conflict API and there are no plans to add it.
   Resolve the text conflict here rather than relying on the caller to do so.
   Add new arguments necessary for calling mark_conflict_resolved().
  (handle_prop_conflict): Rename to ...
  (handle_one_prop_conflict): ... this. Add a 'propname' argument which
  identifies the property to be handled.
  (handle_prop_conflicts): New helper function. Tries to resolve multiple
   property conflicts on a node.
  (handle_text_conflict): Remove option_id output parameter.
   Resolve the tree conflict here rather than relying on the caller to do so.
   Add new arguments necessary for calling mark_conflict_resolved().
  (conflict_func_interactive): Rename to ...
  (resolve_conflict_interactively): ... this. Handle property conflicts using
   the new libsvn_client conflict API rather than its backwards compat shims.
   Remove the option_id, save_merged, and merged_propval output parameters.
   The latter two were ineffective and option_id is being replaced by a
   boolean output parameter which indicates whether the conflict was resolved.
   Resolve conflicts according to the --accept option if applicable.
   Update calls to handle_text_conflict() and friends with new parameter lists.
  (svn_cl__resolve_conflict): Rely on resolve_conflict_interactively() to
   mark conflicts as resolved.
   Don't check prop_conflicts against NULL. Check for an empty array instead.
   The conflict API returns an empty array if there are no property conflicts.
</msg>
</logentry>
<logentry
   revision="1727583">
<author>stsp</author>
<date>2016-01-29T13:40:23.244207Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Fix support for multiple property conflicts on a node in the new resolver.

An implementation bug in the new libsvn_client conflict code prevented
the client from resolving more than one property conflict per call to
svn_client_conflict_get_conflicted(). But this API is supposed to return
a list of all outstanding property conflicts, not just one of them.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_t): Replace legacy_prop_conflict with
  'legacy_prop_conflict_propname. The new field serves as in index
  into the prop_conflicts hash which stores several property conflicts.
  (add_legacy_desc_to_conflict): Add legacy property conflict to the
   prop_conflicts hash.
  (conflict_get_internal): Don't special-case property conflicts and let
   add_legacy_desc_to_conflict() deal with property conflicts internally.
  (resolve_prop_conflict): Update legacy_prop_conflict_propname after resolving
   a property conflict.
  (get_conflict_desc2_t): Return the legacy conflict corresponding to
   legacy_prop_conflict_propname.
  (svn_client_conflict_get_conflicted): Always return the entire list of
   names of conflicted properties, instead of returning just one name.
</msg>
</logentry>
<logentry
   revision="1727547">
<author>stsp</author>
<date>2016-01-29T11:43:57.752756Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Put the code 'svn' uses to mark a conflict resolved into a subroutine.

No functional change. This just prepares 'svn' for making more use of the
new svn_client_conflict APIs.

* subversion/svn/conflict-callbacks.c
  (mark_conflict_resolved): New helper, factored out verbatim from...
  (svn_cl__resolve_conflict): ... here.
</msg>
</logentry>
<logentry
   revision="1727525">
<author>philip</author>
<date>2016-01-29T10:51:34.159188Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/which-error.py</path>
</paths>
<msg>* tools/dev/which-error.py
  (print_error): Followup to r1727512, include the code.
</msg>
</logentry>
<logentry
   revision="1727512">
<author>danielsh</author>
<date>2016-01-29T10:15:23.151699Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/which-error.py</path>
</paths>
<msg>* tools/dev/which-error.py
  (print_error): Handle serf-generated error codes.  (Currently, the only way
     to distinguish serf-generated error codes from svn-generated ones is to
     inspect the numeric value of the svn_error_t::apr_err member.)</msg>
</logentry>
<logentry
   revision="1727408">
<author>stsp</author>
<date>2016-01-28T17:12:21.369945Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (svn_cl__resolve_conflict): Fix type of props_conflicted pointer variable.

Found by: svn-windows-local buildbot
</msg>
</logentry>
<logentry
   revision="1727406">
<author>stsp</author>
<date>2016-01-28T16:58:32.636280Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Start using svn_client_conflict_get_conflicted() in 'svn'.

This covers the easy cases. Property conflicts still need some work.

* subversion/svn/conflict-callbacks.c
  (conflict_func_interactive): Use svn_client_conflict_get_conflicted()
   instead of svn_client_conflict_get_kind().
  (svn_cl__resolve_conflict): Likewise.
</msg>
</logentry>
<logentry
   revision="1727405">
<author>stsp</author>
<date>2016-01-28T16:54:38.667853Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_get_conflicted): Satisfy docstring's requirement and
   return an empty array if there are no conflicted properties.
</msg>
</logentry>
<logentry
   revision="1727378">
<author>stsp</author>
<date>2016-01-28T15:06:05.174839Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (text_conflict_options): Shorten option descriptions a bit.
</msg>
</logentry>
<logentry
   revision="1727370">
<author>stsp</author>
<date>2016-01-28T14:53:39.915112Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_tree_get_resolution_options): Fix the default
   resolution option for tree conflicts so we don't run into the infamous
   "tree conflicts may only be resolved to working" error when the default
   option ("resolve") is used.
</msg>
</logentry>
<logentry
   revision="1727369">
<author>stsp</author>
<date>2016-01-28T14:37:50.567293Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Make the conflict prompt use conflict resolution options from libsvn_client.

The conflict prompt is now composed of options offered by libsvn_client
and options which are specific to 'svn'. The svn client retains knowledge
about the set of options libsvn_client may offer, so that these options can
be mapped to conflict prompt codes ("p", "mf", etc.) and --accept arguments.
The 'svn' client code now refers to libsvn_client options as 'built-in'
options, and refers to its own options which allow users to edit files,
display diffs, and so on, as 'extra' options.

The internal conflict prompt logic is retained. Its input is now dynamically
generated rather than taken straight from a set of static tables. This allows
for future expansion as libsvn_client grows more resolution options.

Conflict prompt help screen formatting will look slightly different now
since I dropped empty lines shown in the help screen to group options
visually. This can be fine-tuned later.

* subversion/svn/conflict-callbacks.c
  (MAX_ARRAY_LEN): Remove, not needed anymore.
  (resolver_option_t): Enhance docstring.
  (text_conflict_options, binary_conflict_options, prop_conflict_options,
   tree_conflict_options, tree_conflict_options_update_moved_away,
   tree_conflict_options_update_edit_deleted_dir): These conflict option
   tables are entirely replaced by...
  (builtin_resolver_options, extra_resolver_options,
   extra_resolver_options_text, extra_resolver_options_prop,
   extra_resolver_options_tree): ... these new tables.
  (find_option_by_id): New helper.
  (help_string): Remove the 'default_options' argument again. We don't need
   this temporary hack anymore since the OPTIONS argument to this function
   is now dynamically generated and contains the correct descriptions.
  (prompt_string): Likewise, drop 'default_options'.
  (build_text_conflict_options, build_prop_conflict_options,
   build_tree_conflict_options): New helper functions which build an array
   of resolver_option_t objects from built-in and extra conflict options.
  (handle_tree_conflict, handle_prop_conflict,
   handle_tree_conflict): Use above new helpers and feed the resolver option
   array to prompt_user() and help_string(). Rename some variables for clarity.
</msg>
</logentry>
<logentry
   revision="1727329">
<author>stsp</author>
<date>2016-01-28T12:53:40.007011Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (svn_client_conflict_tree_get_resolution_options): Localize strings which
   aren't part of static arrays with _().

Found by: rhuijben
</msg>
</logentry>
<logentry
   revision="1727276">
<author>stsp</author>
<date>2016-01-28T08:41:14.677272Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>Make libsvn_client describe all currently available tree conflict options.

* subversion/libsvn_client/resolved.c
  (tree_conflict_options): Remove this static table of options, now unused.
  (svn_client_conflict_tree_get_resolution_options): Build an array of options
   and include the special options for update-move-away and edit-deleted-dir
   cases if appropriate. The result corresponds to what 'svn' already offers.

* subversion/svn/conflict-callbacks.c
  (tree_conflict_options_update_moved_away,
   tree_conflict_options_update_edit_deleted_dir): Set long option descriptions
   to NULL so descriptions provided by libsvn_client are used instead.
</msg>
</logentry>
<logentry
   revision="1727260">
<author>stsp</author>
<date>2016-01-28T08:09:37.301273Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>* subversion/svn/conflict-callbacks.c
  (binary_conflict_options): Fix indentation.
  (tree_conflict_options_update_moved_away,
   tree_conflict_options_update_edit_deleted_dir): Split inline --accept
   option values off conflict descriptions, as done elsewhere in r1725982.
</msg>
</logentry>
<logentry
   revision="1727140">
<author>philip</author>
<date>2016-01-27T17:39:49.422754Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnsync/svnsync.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnsync_tests.py</path>
</paths>
<msg>* subversion/svnsync/svnsync.c
  (do_synchronize): Tweak up-to-date test.

* subversion/tests/cmdline/svnsync_tests.py
  (up_to_date_sync): Remove XFAIL.
</msg>
</logentry>
<logentry
   revision="1727115">
<author>philip</author>
<date>2016-01-27T16:24:35.767715Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnsync_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnsync_tests.py (up_to_date_sync): Tweak test.
</msg>
</logentry>
<logentry
   revision="1727113">
<author>stsp</author>
<date>2016-01-27T16:18:37.574943Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>Add new APIs which provide descriptions of conflicts, and use them in 'svn'.

No functional change.

* subversion/include/svn_client.h
  (svn_client_conflict_prop_get_description,
   svn_client_conflict_tree_get_description): Declare.

* subversion/libsvn_client/resolved.c
  (svn_client_conflict_prop_get_description,
   svn_client_conflict_tree_get_description): Implement. For now, return the
   same results as svn_cl__get_human_readable_prop_conflict_description() and
   svn_cl__get_human_readable_tree_conflict_description(). In the future these
   functions may return enhanced descriptions based on additional information
   which is not yet available.
  (map_conflict_action, map_conflict_reason, local_reason_str,
   incoming_action_str, operation_str): New helpers, from svn/cl-conflicts.c.

* subversion/svn/conflict-callbacks.c
  (handle_prop_conflict, handle_tree_conflict): Use new APIs.
</msg>
</logentry>
<logentry
   revision="1727103">
<author>philip</author>
<date>2016-01-27T15:58:27.008881Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnsync_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnsync_tests.py
  (up_to_date_sync): New XFAIL test, sync of up-to-date repository asserts.
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1727040">
<author>philip</author>
<date>2016-01-27T13:23:08.057038Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs.h</path>
</paths>
<msg>* subversion/libsvn_fs_fs/fs.h
  (struct node_revision_t): Followup to r1727028, update comment.
</msg>
</logentry>
<logentry
   revision="1727028">
<author>stefan2</author>
<date>2016-01-27T13:02:24.736014Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/dag.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>In FSFS, remove unnecessary and misleading checks for NODE.PREDECESSOR_COUNT
of -1.  These seem to have been carried over from BDB.

History digging found that even SVN 1.1 FSFS would not check for -1 when
bumping the counter in a transactions.  So, it never has been something to
worry about in FSFS.

Suggested by: philip

* subversion/libsvn_fs_fs/dag.c
  (svn_fs_fs__dag_clone_child,
   svn_fs_fs__dag_copy,
   svn_fs_fs__dag_update_ancestry): Predecessor_count can never be -1
                                    for non-corrupted data.

* subversion/libsvn_fs_fs/transaction.c
  (validate_root_noderev): Same.
</msg>
</logentry>
<logentry
   revision="1727007">
<author>stefan2</author>
<date>2016-01-27T11:49:34.340970Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/pack.c
  (sort_reps_range): Fix typos in commentary. No functional change.</msg>
</logentry>
<logentry
   revision="1727006">
<author>stefan2</author>
<date>2016-01-27T11:45:39.015203Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/pack.c
  (sort_reps_range): Make the logic more robust against interger
                     overflows and extend the commentary.</msg>
</logentry>
<logentry
   revision="1727000">
<author>stsp</author>
<date>2016-01-27T11:26:28.153459Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/tools/dev/svnmover</path>
</paths>
<msg>*  tools/dev/svnmover: Add 'svnmover' to svn:ignore.
</msg>
</logentry>
<logentry
   revision="1726996">
<author>stefan2</author>
<date>2016-01-27T11:15:19.529015Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Fix an inefficiency in membuffer cache key handling on /trunk.
The prefix pool has been effectively unused.

* subversion/libsvn_subr/cache-membuffer.c
  (prefix_pool_get_internal):  Fix the overflow detection.  We want to
                               _accept_ entries until overflow.</msg>
</logentry>
<logentry
   revision="1726995">
<author>stefan2</author>
<date>2016-01-27T11:12:36.493741Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>Fix an interger overflow in the FSFS packing code on /trunk.
Older releases are not affected.

Found by: philip

* subversion/libsvn_fs_fs/pack.c
  (roundness): The return value for 0 could be anything but 0 is
               apparently the more consistent and robust choice.
               There is effectively no change in the caller logic
               because having no predecessors still makes those
               nodes a "likely head".  No longer being a "likely
               target" due to a high roundness value is then
               inconsequential.
</msg>
</logentry>
<logentry
   revision="1726897">
<author>philip</author>
<date>2016-01-26T20:47:10.201188Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/pack.c
  (sort_reps_range): Typo in comment, no functional change.
</msg>
</logentry>
<logentry
   revision="1726454">
<author>philip</author>
<date>2016-01-23T22:42:12.188300Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/request_body.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/request_body.c
  (struct svn_ra_serf__request_body_t): Avoid redefining typedef to fix
   a clang compiler warning.
</msg>
</logentry>
<logentry
   revision="1726376">
<author>stefan2</author>
<date>2016-01-23T11:03:27.835963Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
</paths>
<msg>Follow-up on r1726004:
Make sure to always set the OOD info in FSX.

* subversion/libsvn_fs_x/temp_serializer.c
  (svn_fs_x__extract_dir_entry): This function has an early-out code path,
                                 so we must set the OOD field earlier.</msg>
</logentry>
<logentry
   revision="1726375">
<author>stefan2</author>
<date>2016-01-23T10:58:28.873693Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
</paths>
<msg>Fix a random segfault in log-related code on FSX.

* subversion/libsvn_fs_x/temp_serializer.c
  (svn_fs_x__serialize_changes): Wrong level of indirection.</msg>
</logentry>
<logentry
   revision="1726116">
<author>stefan2</author>
<date>2016-01-21T22:02:01.695230Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/cached_data.c
  (read_dir_entries): Give some context if FSFS directory hashes could
                      not be parsed.</msg>
</logentry>
<logentry
   revision="1726115">
<author>stefan2</author>
<date>2016-01-21T22:00:25.074282Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/verify.c</path>
</paths>
<msg>Fix breakage introduced during the FSFS-&gt;FSX port in r1726036.

* subversion/libsvn_fs_x/verify.c
  (expect_buffer_nul): Revert to old code.</msg>
</logentry>
<logentry
   revision="1726099">
<author>stefan2</author>
<date>2016-01-21T21:09:50.569209Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
</paths>
<msg>Follow-up to r1726004:
Never toggle the meaning of a flag last minute ...

* subversion/libsvn_fs_fs/temp_serializer.c
  (svn_fs_fs__extract_dir_entry): Fix OOD condition.

* subversion/libsvn_fs_x/temp_serializer.c
  (svn_fs_x__extract_dir_entry): Same.</msg>
</logentry>
<logentry
   revision="1726053">
<author>stefan2</author>
<date>2016-01-21T18:34:16.485742Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
</paths>
<msg>* subversion/libsvn_fs_x/temp_serializer.c
  (serialize_dir): Give a better estimate for the size of serialized dir in
                   FSX.  Don't forget that this is still only the initial
                   buffer size and will be auto-resized if necessary.</msg>
</logentry>
<logentry
   revision="1726037">
<author>stefan2</author>
<date>2016-01-21T17:36:34.883990Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>Sync FSX with FSFS:  Block revisions 1709388, 1710368, 1710370, 1711507,
1717864, 1719413, 1720015 and 1723834 from being merged from FSFS to FSX.
These changes do not apply to FSX.
</msg>
</logentry>
<logentry
   revision="1726036">
<author>stefan2</author>
<date>2016-01-21T17:34:33.567910Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/rev_file.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/util.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/verify.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/index.c</path>
</paths>
<msg>Sync FSX with FSFS: Merge all recent I/O-API-related changes (revisions
1719269 and 1719336) from FSFS to FSX.  Resolve the usual text conflicts.</msg>
</logentry>
<logentry
   revision="1726025">
<author>stefan2</author>
<date>2016-01-21T17:14:24.762488Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
</paths>
<msg>Sync FSX with FSFS: Merge all recent style and warnings fixes (revisions
1719730 and 1723839) from FSFS to FSX.  Resolve the usual text conflicts.
</msg>
</logentry>
<logentry
   revision="1726024">
<author>stefan2</author>
<date>2016-01-21T17:05:51.970586Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/caching.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.h</path>
</paths>
<msg>Sync FSX with FSFS: Merge all recent caching-related changes (revisions
1721285, 1723715, 1723720, 1725179, 1725180 and 1726004) from FSFS to FSX.
Resolve the usual text conflicts.
</msg>
</logentry>
<logentry
   revision="1726004">
<author>stefan2</author>
<date>2016-01-21T16:27:04.398562Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Fix the OOD check for cached FSFS in-txn directories when looking for a
specific entry.

The problem is that even outdated directory data is reported as "found"
by the lookup code.  The callback that will check for out-of-dateness
needs to report back that the data found could not be used.

This was found during testing the parallel-put freature and is part of
the new multi-connection editing support we added in trunk for 1.10. 

* subversion/libsvn_fs_fs/temp_serializer.h
  (extract_dir_entry_baton_t): Add an OOD indicator field to be filled
                               by the callback.

* subversion/libsvn_fs_fs/temp_serializer.c
  (svn_fs_fs__extract_dir_entry): Set that new field.

* subversion/libsvn_fs_fs/cached_data.c
  (svn_fs_fs__rep_contents_dir_entry): Treat OOD data the same as uncached.</msg>
</logentry>
<logentry
   revision="1725996">
<author>stsp</author>
<date>2016-01-21T15:52:56.446420Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Start using conflict descriptions provided by libsvn_client in 'svn'.

This changes the long descriptions displayed by the '(h) help' command
at the conflict prompt. I'm very open to suggestions about what these
strings should say.

* subversion/svn/conflict-callbacks.c
  (text_conflict_options, binary_conflict_options, prop_conflict_options,
   tree_conflict_options): Replace custom descriptions with NULL where
  libsvn_client already provides a description.
 (help_string): Add a 'default_options' argument which contains the
  options provided by libsvn_client. Search these options for a description
  if no custom description is known.
  This function must now return an svn_error_t * to allow it to call the
  svn_client_conflict_option_describe() function.
 (prompt_user): Add a 'default_options' argument as well, for help_string().
 (handle_text_conflict, handle_prop_conflict, handle_tree_conflict): Obtain
  default conflict options from libsvn_client and pass them to prompt_user().
  Drop 'const' from conflict argument for now. Perhaps we can fix the
  libsvn_client API not to require a mutable conflict object but I've
  left this for later.
 (conflict_func_interactive): Drop 'const' from conflict argument for now.
</msg>
</logentry>
<logentry
   revision="1725989">
<author>stsp</author>
<date>2016-01-21T15:44:23.877774Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (binary_conflict_options, prop_conflict_options): Add the
   svn_client_conflict_option_merged_text option here, too
   The 'svn' client currently maps this option to 'mark resolved'.
</msg>
</logentry>
<logentry
   revision="1725982">
<author>stsp</author>
<date>2016-01-21T15:20:28.063281Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
</paths>
<msg>Split --accept arguments out of the resolver's long option help strings.

This change doesn't affect what is displayed by the "(h) help" option
at the conflict prompt. I'm moving the previously hard-coded square-bracket
parts of help strings (such as "  [theirs-conflict]") into a struct field
of their own.

This makes accept options independent of the actual long help string used
to describe an option, and hence prepares the 'svn' client for using long
help strings provided by libsvn_client instead of custom ones.

As a bonus, this makes life slightly easier for translators, and allows
us to reuse existing macros for the ---accept strings.

* subversion/svn/conflict-callbacks.c
  (resolver_option_t): Add accept_arg field.
  (text_conflict_options, prop_conflict_options, binary_conflict_options,
   tree_conflict_options): Set the accept_arg field where necessary.
  (help_string): Use an alternative format string if an accept_arg is available.
</msg>
</logentry>
<logentry
   revision="1725957">
<author>kotkov</author>
<date>2016-01-21T14:18:43.321942Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/merge-cmd.c</path>
</paths>
<msg>Allocate the baton for 'svn merge --accept' conflict callback in the pool,
instead of using a pointer to stack.

* subversion/svn/merge-cmd.c
  (svn_cl__merge): Allocate struct conflict_func_merge_cmd_baton in the
   pool.  Otherwise, the ctx-&gt;conflict_baton2 pointer becomes dangling
   when the stack variable falls out of scope.
</msg>
</logentry>
<logentry
   revision="1725953">
<author>stsp</author>
<date>2016-01-21T14:07:48.041383Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (text_conflict_options): Tweak conflict option descriptions to better
   describe what they imply. I'm open to suggestions for better wording.
   Also, add svn_client_conflict_option_merged_text since the 'svn' client
   will need this option.
</msg>
</logentry>
<logentry
   revision="1725948">
<author>stsp</author>
<date>2016-01-21T13:51:26.121714Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
</paths>
<msg>Improve the behaviour of 'svn patch' when a reject file cannot be created.

* subversion/libsvn_client/patch.c
  (write_out_rejected_hunks): Add 'root_abspath' argument. If the reject
   file cannot be created because an intermediate directory is missing,
   try to create the reject file in the working copy root instead.
   Previously, this was a fatal error condition and aborted patching.
   This problem can happen when trying to apply a patch to the wrong directory.
  (apply_patches): Pass root_abspath to write_out_rejected_hunks().
</msg>
</logentry>
<logentry
   revision="1725944">
<author>stsp</author>
<date>2016-01-21T13:31:48.012352Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/resolved.c</path>
</paths>
<msg>* subversion/libsvn_client/resolved.c
  (text_conflict_options, binary_conflict_options, prop_conflict_options,
   tree_conflict_options): Tweak the default description of the 'postpone'
   conflict option to better describe what this option implies.
</msg>
</logentry>
<logentry
   revision="1725943">
<author>stsp</author>
<date>2016-01-21T13:28:27.842683Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_client.h</path>
</paths>
<msg>* subversion/include/svn_client.h
  (svn_client_conflict_option_id_t): Mark the options which correspond to
   the old "theirs-full" and "mine-full" options with comments. This will
   hopefully avoid ambiguity: The old 'mine-full' is called 'working_text'
   which is somewhat ambiguous. Perhaps I should look for a better name.
</msg>
</logentry>
<logentry
   revision="1725182">
<author>stefan2</author>
<date>2016-01-18T08:11:21.791756Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/temp_serializer.c</path>
</paths>
<msg>FSX is able to cache larger directories because it uses a tighter
data structure.

* subversion/libsvn_fs_x/temp_serializer.c
  (serialize_dir): No longer greatly over-estimate the data size.</msg>
</logentry>
<logentry
   revision="1725180">
<author>stefan2</author>
<date>2016-01-18T08:07:30.000373Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Reduce peak memory footprint for very large directories in FSFS.

* subversion/libsvn_fs_fs/cached_data.c
  (svn_fs_fs__rep_contents_dir,
   svn_fs_fs__rep_contents_dir_entry): Don't serialize directories that
                                       won't fit into the cache.</msg>
</logentry>
<logentry
   revision="1725179">
<author>stefan2</author>
<date>2016-01-18T08:03:36.567187Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/caching.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/temp_serializer.h</path>
</paths>
<msg>Reduce memory footprint of cached directories in FSFS revisions.

For efficient modification within a transaction, we over-provide cache
memory.  So, we can add entries in constant time instead of running a
complete de-serialization / modification / serialization cycle.  This
space overhead is not useful for immutable, committed data.  Therefore,
make it txn-only.  The serialization format etc. does not change.

* subversion/libsvn_fs_fs/temp_serializer.h
  (svn_fs_fs__serialize_txndir_entries): Declare specific serializer
                                         for in-txn directories.

* subversion/libsvn_fs_fs/temp_serializer.c
  (return_serialized_dir_context): Make over-provisioning optional.
  (svn_fs_fs__serialize_dir_entries): Don't over-provide anymore.
  (svn_fs_fs__serialize_txndir_entries): Implement using over-provision.
  (svn_fs_fs__replace_dir_entry): Always over-provide b/c this is in-txn
                                  data.

* subversion/libsvn_fs_fs/caching.c
  (svn_fs_fs__initialize_txn_caches): Use the specific dir serializers.</msg>
</logentry>
<logentry
   revision="1724864">
<author>stsp</author>
<date>2016-01-15T17:50:52.958194Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/svn.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/notify.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svn/conflict-callbacks.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/merge-cmd.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/svn/resolve-cmd.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/switch-cmd.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/cl.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svn/update-cmd.c</path>
</paths>
<msg>Remove the svn_cl__conflict_func_interactive() callback.

The command line client will now start the conflict resolver by itself if
an update, merge, or switch operation flags conflicts in the working copy.
Before this commit it was relying on the libraries to do so. This finally
gives full control over conflict resolution to the client and paves the
way for future enhancements of the conflict resolver.

Only one use case of the libsvn_wc conflict callback remains. This is
required for supporting 'svn merge --accept' during merges which perform
multiple editor drives. A better solution would be changing the
svn_client_merge API to allow the client to get away without the conflict
callback. I've left this for future work.

* subversion/svn/cl.h
  (svn_cl__conflict_stats_get_paths): Declare this new function which is
   involved in keeping existing conflict resolution behaviour intact.
   The client already records newly conflicted paths as part of conflict
   accounting. We use this list of paths to run the conflict resolver on
   the newly conflicted paths only, rather than running it over the entire
   working copy as 'svn resolve' would do.
  (svn_cl__get_conflict_func_interactive_baton,
   svn_cl__conflict_func_interactive): Remove declaration. Now unused.
  (svn_cl__walk_conflicts): Declare this new function which makes the
   working copy walker logic of 'svn resolve' available to subcommands
   which now need it as well.
   
* subversion/svn/conflict-callbacks.c
  (svn_cl__get_conflict_func_interactive_baton,
   svn_cl__conflict_func_interactive): Remove.

* subversion/svn/merge-cmd.c
  (conflict_func_merge_cmd_baton, conflict_func_merge_cmd): Add this
   temporary implementation of svn_wc_conflict_resolver_func2_t to
   avoid breaking 'svn merge --accept'. Note that we cannot support the
   'edit' and 'launch' accept options anymore, so these now map to 'postpone'.
   This is a small CLI interface change relative to 1.9.
  (svn_cl__merge): Install the above conflict callback if necessary.
   Invoke the interactive conflict resolver if necessary.

* subversion/svn/notify.c
  (svn_cl__conflict_stats_get_paths): Implement.

* subversion/svn/resolve-cmd.c
  (svn_cl__walk_conflicts): Implement. Partly split out of svn_cl__resolve().

* subversion/svn/svn.c
  (sub_main): Do not install a libsvn_wc conflict callback by default.

* subversion/svn/switch-cmd.c
  (svn_cl__switch): Invoke the interactive conflict resolver if necessary.

* subversion/svn/update-cmd.c
  (svn_cl__update): Invoke the interactive conflict resolver if necessary.
</msg>
</logentry>
<logentry
   revision="1724855">
<author>stsp</author>
<date>2016-01-15T16:48:27.791174Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/conflicts.c</path>
</paths>
<msg>* subversion/libsvn_wc/conflicts.c
  (svn_wc_create_conflict_result): Initialise 'merged_value' (new in 1.9).
</msg>
</logentry>
<logentry
   revision="1724809">
<author>kotkov</author>
<date>2016-01-15T14:05:24.635331Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/pool.c</path>
</paths>
<msg>Following up on r1724784, mark the STATUS_NO_MEMORY exception as
non-continuable [1].

We treat out-of-memory conditions as unrecoverable, and using a continuable
exception could lead to third-party API users accidentally swallowing these
exceptions and resuming execution in their structured exception handlers.

[1] https://msdn.microsoft.com/en-us/library/windows/desktop/ms680552

* subversion/libsvn_subr/pool.c
  (abort_on_pool_failure): Set flags to EXCEPTION_NONCONTINUABLE.
</msg>
</logentry>
<logentry
   revision="1724790">
<author>ivan</author>
<date>2016-01-15T12:57:20.225168Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
</paths>
<msg>mod_dav_svn: Do not set Last-Modified response header for GET responses.

This saves a bit of unnecessary work on the server-side, since:
- This header is not used by Subversion clients
- We allow caching GET responses for up-to 1 week without re-validation
- Browsers and proxies support ETag and use it for re-validation instead of
  the Last-Modified header

See the discussion in thread "Last-Modified HTTP header in GET responses" [1]

[1] https://www.mail-archive.com/dev@subversion.apache.org/msg34354.html

* subversion/mod_dav_svn/repos.c
  (get_last_modified): Remove.
  (set_headers): Do set Last-Modifed response header.
</msg>
</logentry>
<logentry
   revision="1724784">
<author>kotkov</author>
<date>2016-01-15T12:11:43.487707Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/win32_crashrpt.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/pool.c</path>
</paths>
<msg>Provide a way to distinguish the out-of-memory error from abort() on Windows.

There are multiple reasons why an abort() could be called in our code.  Make
crashing due to out-of-memory conditions use a specific exception code, so
that we would be able to distinguish it from, e.g., crashing due to a failed
SVN_ERR_ASSERT().

* subversion/libsvn_subr/pool.c
  (abort_on_pool_failure): Raise STATUS_NO_MEMORY on Windows.

* subversion/libsvn_subr/win32_crashrpt.c
  (exception_string): Unroll the part of the stringifying macro.  Handle
   STATUS_NO_MEMORY in this helper for our unhandled exception filter.
</msg>
</logentry>
<logentry
   revision="1724455">
<author>kotkov</author>
<date>2016-01-13T16:27:10.456863Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_ra_serf/commit.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/request_body.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/ra_serf.h</path>
</paths>
<msg>In ra_serf, keep small svndiffs in memory during commit, instead of always
spilling them to temporary files.

This avoids a certain part of the disk I/O — for instance, importing around
2000 files on a A-Tier Azure VM becomes slightly faster:

  47.945 s → 41.547 s

What's probably more important, we don't create/open/close/delete files
per every change in the commit.  On Windows this can be heavy with a virus
scanner working in background.  If that's the case, the performance penalty
of this work for the same 2000 files is much more visible:

  107.644 s → 53.901 s

* subversion/libsvn_ra_serf/ra_serf.h
  (svn_ra_serf__request_body_cleanup): Declare.

* subversion/libsvn_ra_serf/request_body.c
  (svn_ra_serf__request_body_cleanup): New function.  Explicitly closes
   the handle to a temporary file in case it's being used.

* subversion/libsvn_ra_serf/commit.c
  (struct file_context_t.stream): Adjust the comment.
  (struct file_context_t.svndiff): Now is a svn_ra_serf__request_body_t.
  (create_put_body): Remove, since we'll ask svn_ra_serf__request_body_t
   for the delegate.
  (delayed_commit_stream_open): Remove, since svn_ra_serf__request_body_t
   knows how to avoid creating temporary files unless they're needed.
   Therefore, we no longer need a lazyopen stream.
  (apply_textdelta): Create a svn_ra_serf__request_body_t, ask it for the
   writable stream.  Disown the stream when calling svn_txdelta_to_svndiff3()
   so that we could close it explicitly in close_file(), instead of relying
   on the stream to be closed due to encountering the final (null) delta
   window.
  (close_file): If we had a stream of changes, close the stream and ask
   svn_ra_serf__request_body_t for a request body delegate.  Explicitly
   cleanup the request body after the PUT request.
</msg>
</logentry>
<logentry
   revision="1724449">
<author>kotkov</author>
<date>2016-01-13T16:22:02.812559Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/update.c</path>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/request_body.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/ra_serf.h</path>
</paths>
<msg>In ra_serf, factor out the request body collecting code used by update
reporter (that keeps request bodies below certain size in memory) for
reuse.

This lays the groundwork required to keep small svndiffs in memory during
commit, instead of always spilling them to temporary files.  Can't use a
spillbuf for that, since a svn_ra_serf__request_body_delegate_t can be
called more than once in case a request needs to be resent (authentication
challenge or hitting a KeepAlive limit), and spillbuf is designed the way
that reading from it drains the contents.

* subversion/libsvn_ra_serf/ra_serf.h
  (SVN_RA_SERF__REQUEST_BODY_IN_MEM_SIZE): New constant, equal
   to the removed MAX_BODY_IN_RAM in update.c.
  (typedef struct svn_ra_serf__request_body_t): New typedef.
  (svn_ra_serf__request_body_create,
   svn_ra_serf__request_body_get_stream,
   svn_ra_serf__request_body_get_delegate): Declare these new functions.

* subversion/libsvn_ra_serf/request_body.c
  New file with svn_ra_serf__request_body_t implementation factored out
  from ...

* subversion/libsvn_ra_serf/update.c
  (struct body_create_baton_t, body_allocate_all, serf_free_no_error,
   body_write_fn, body_done_fn, create_update_report_body): ...this struct
   and corresponding functions.
  (MAX_BODY_IN_RAM): Remove this constant.
  (struct report_context_t.body_template): Adjust the comment.
  (struct report_context_t.body): Now is a svn_ra_serf__request_body_t.
  (finish_report): Ask svn_ra_serf__request_body_t for a request body
   delegate.
  (make_update_reporter): Create a svn_ra_serf__request_body_t, ask it for
   the writable stream.
</msg>
</logentry>
<logentry
   revision="1724448">
<author>rhuijben</author>
<date>2016-01-13T16:19:50.366401Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/update_editor.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/authz_tests.py</path>
</paths>
<msg>Resolve a regression in our auth handling on update, which it appears I
introduced somewhere during the WC-NG work for Subversion 1.7.

Before this patch directories that are hidden by a change in authz settings
cause a skip caused by unversioned working copy message. After this patch
the nodes are properly removed from the working copy, introducing tree
conflicts if there are local changes.

* subversion/libsvn_wc/update_editor.c
  (absent_node): Properly hide newly server excluded nodes.

* subversion/tests/cmdline/authz_tests.py
  (remove_access_after_commit): New test
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1724103">
<author>kotkov</author>
<date>2016-01-11T18:08:53.366256Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/mod_dav_svn_tests.py</path>
</paths>
<msg>Add regression tests for mod_dav_svn's PROPFIND responses.

* subversion/tests/cmdline/mod_dav_svn_tests.py
  (imports): Import os.
  (compare_xml_elem, verify_xml_response): New helper routines used to
   compare XML responses.
  (simple_propfind, propfind_multiple_props, propfind_404,
   propfind_allprop, propfind_propname): New tests.
  (test_list): Execute new tests.
</msg>
</logentry>
<logentry
   revision="1723946">
<author>philip</author>
<date>2016-01-10T18:35:21.052642Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/path.c</path>
</paths>
<msg>* subversion/libsvn_subr/path.c
  (get_path_ancestor_length): Fix anomolous indentation detected by
   GCC -Wmisleading-indentation.
</msg>
</logentry>
<logentry
   revision="1723886">
<author>ivan</author>
<date>2016-01-09T22:23:56.003758Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/delta.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/repos.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
</paths>
<msg>Inline private function used in one place and just calls existing FS API
function.

* subversion/libsvn_repos/delta.c
* subversion/libsvn_repos/repos.h
  (svn_repos__compare_files): Remove.

* subversion/libsvn_repos/reporter.c
  (delta_files): Just use svn_fs_contents_different().
</msg>
</logentry>
<logentry
   revision="1723883">
<author>ivan</author>
<date>2016-01-09T21:55:22.891166Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
</paths>
<msg>* subversion/libsvn_repos/reporter.c
  (delta_files): Tighten scope of local variable. No functional changes.
</msg>
</logentry>
<logentry
   revision="1723882">
<author>ivan</author>
<date>2016-01-09T21:50:33.900690Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Follow-up to r1723865: Relax check in newly added test to copy with known
problem in ra_serf.

* subversion/tests/libsvn_ra/ra-test.c
  (get_dir_test): Do not check DIRENT-&gt;SIZE due known problem in ra_serf. This
   test for different bug.
</msg>
</logentry>
<logentry
   revision="1723865">
<author>ivan</author>
<date>2016-01-09T17:42:38.556885Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnserve/serve.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_local/ra_plugin.c</path>
</paths>
<msg>Fix bug when svn_ra_get_dir2() will fail if invoked with SVN_DIRENT_SIZE, but
without SVN_DIRENT_KIND. There is no user visible bug, since Subversion
command line client always ask for SVN_DIRENT_KIND.

* subversion/libsvn_ra_local/ra_plugin.c
  (svn_ra_local__get_dir): Do not access possibly uninitialized local variable.

* subversion/svnserve/serve.c
  (get_dir): Do not access possibly uninitialized local variable.

* subversion/tests/libsvn_ra/ra-test.c
  (get_dir_test): Extend test to test svn_ra_get_dir2(SVN_DIRENT_SIZE).
</msg>
</logentry>
<logentry
   revision="1723839">
<author>ivan</author>
<date>2016-01-09T09:22:48.403850Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
</paths>
<msg>Follow-up to r1723834: Inline one line static function.

* subversion/libsvn_fs_fs/tree.c
  (node_kind): Inline to ...
  (svn_fs_fs__check_path): ... here. Use standard error handling.
</msg>
</logentry>
<logentry
   revision="1723834">
<author>ivan</author>
<date>2016-01-09T08:39:05.776677Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
</paths>
<msg>Simplify svn_fs_check_path() implementation for FSFS.

* tree.c
  (node_kind): Obtain dag_node_t instance directly via get_dag_node() instead
   of svn_fs_fs__node_id() + svn_fs_fs__dag_get_node(). 
</msg>
</logentry>
<logentry
   revision="1723720">
<author>kotkov</author>
<date>2016-01-08T12:38:42.904459Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/caching.c</path>
</paths>
<msg>Make mod_dav_svn actually use the FSFS transaction directory cache during
series of PUT requests.

Prior to this changeset, we were adding a uuid to the cache prefix,
and that prevented mod_dav_svn from reusing the cache between two PUT
requests, i.e., after reopening the filesystem / getting the transaction
root.  We only need to insert the uuid for older filesystem formats that
don't track the global transaction ID via db/txn-current file.

* subversion/libsvn_fs_fs/caching.c
  (svn_fs_fs__initialize_txn_caches): Don't use a uuid in the cache prefix
   for newer filesystem formats.
</msg>
</logentry>
<logentry
   revision="1723715">
<author>ivan</author>
<date>2016-01-08T12:28:35.243550Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/caching.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/mod_dav_svn/mod_dav_svn.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnadmin/svnadmin.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-fuzzy-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/dav_svn.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnserve/svnserve.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
</paths>
<msg>Add runtime configuration option to enable FSFS node properties caching
without enabling full-texts caching.

* subversion/include/svn_fs.h
  (SVN_FS_CONFIG_FSFS_CACHE_NODEPROPS): New.

* subversion/libsvn_fs_fs/caching.c
  (read_config): Parse SVN_FS_CONFIG_FSFS_CACHE_NODEPROPS FS config flag.
  (svn_fs_fs__initialize_caches): Enable node properties caching if needed.

* subversion/mod_dav_svn/dav_svn.h
  (dav_svn__get_nodeprop_cache_flag): New.

* subversion/mod_dav_svn/mod_dav_svn.c
  (dir_conf_t): Add NODEPROP_CACHE member.
  (merge_dir_config): Merge NODEPROP_CACHE setting.
  (SVNCacheNodeProps_cmd): New.
  (dav_svn__get_nodeprop_cache_flag): New.
  (cmds): Add SVNCacheNodeProps directive.

* subversion/mod_dav_svn/repos.c
  (get_resource): Pass node properties caching setting to svn_repos_open3().

* subversion/svnadmin/svnadmin.c
  (open_repos): Enable node properties caching to match Subversion 1.9.0
   behavior.

* subversion/svnserve/svnserve.c
  (SVNSERVE_OPT_CACHE_NODEPROPS): New.
  (svnserve__options): Add '--cache-nodeprops' command line parameter.
  (sub_main): Handle '--cache-nodeprops' command line parameter.

* subversion/tests/libsvn_fs_fs/fs-fs-fuzzy-test.c
  (fuzzing_1_byte_1_rev): Enable node properties caching to match
   Subversion 1.9.0 behavior.
</msg>
</logentry>
<logentry
   revision="1723588">
<author>ivan</author>
<date>2016-01-07T16:54:02.913439Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
</paths>
<msg>* subversion/libsvn_repos/reporter.c
  (delta_proplists): Reduce scope of several local variables.</msg>
</logentry>
<logentry
   revision="1723587">
<author>ivan</author>
<date>2016-01-07T16:49:51.897919Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
</paths>
<msg>* subversion/libsvn_repos/reporter.c
  (delta_proplists): Reduce scope of local variable. No functional changes.
</msg>
</logentry>
<logentry
   revision="1723415">
<author>philip</author>
<date>2016-01-06T21:54:05.144167Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/relocate_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/relocate_tests.py
  (prefix_partial_component): Don't use read_only=True as we want to delete
   the repository.  This should fix a test failure with GLOBAL_SCHEDULER=1.
</msg>
</logentry>
<logentry
   revision="1723399">
<author>philip</author>
<date>2016-01-06T18:45:03.331129Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/relocate_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/relocate_tests.py
  (prefix_partial_component): New test, prefix has a partial component.
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1723390">
<author>philip</author>
<date>2016-01-06T17:36:39.653613Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/relocate_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/relocate_tests.py
  (relocate_with_relative_externals): Followup to r1723387, match the code
   style used earlier in the test.
</msg>
</logentry>
<logentry
   revision="1723387">
<author>philip</author>
<date>2016-01-06T17:32:10.450795Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/relocate_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/relocate_tests.py
  (relocate_with_relative_externals): Followup to r1723385, verify the
   relocate has occurred.
</msg>
</logentry>
<logentry
   revision="1723385">
<author>philip</author>
<date>2016-01-06T17:20:28.099714Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/relocate.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/relocate_tests.py</path>
</paths>
<msg>Fix a problem relocating some externals.

Reported by: Larry Baird &lt;lab{_AT_}gta.com&gt;

* subversion/libsvn_client/relocate.c
  (svn_client_relocate2): Handle case where prefix is too long
   to be valid for externals.

* subversion/tests/cmdline/relocate_tests.py
  (relocate_with_relative_externals): Extend.
</msg>
</logentry>
<logentry
   revision="1723328">
<author>stefan2</author>
<date>2016-01-06T13:59:39.710310Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/logic.c</path>
</paths>
<msg>* tools/client-side/svn-mergeinfo-normalizer/logic.c
  (show_elision_result,
   show_obsoletes_summary): I can ze english good.</msg>
</logentry>
<logentry
   revision="1723325">
<author>stefan2</author>
<date>2016-01-06T13:56:44.163590Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/eol.c</path>
</paths>
<msg>* subversion/libsvn_subr/eol.c
  (svn_eol__find_eol_start): Fix indentation. No functional change.</msg>
</logentry>
<logentry
   revision="1723324">
<author>stefan2</author>
<date>2016-01-06T13:56:30.279575Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/client-side/svn-mergeinfo-normalizer/logic.c</path>
</paths>
<msg>Minor UI and docstring tweaks in svn-mergeinfo-normalizer.
No functional change intended.

* tools/client-side/svn-mergeinfo-normalizer/logic.c
  (show_removing_obsoletes): Don't claim that we will actually remove
                             all these entries because we often won't.
  (remove_obsolete_line): Clarify docstring w.r.t. LOCAL_ONLY. 
  (show_elision_result,
   show_obsoletes_summary): Make wording in our output account for the
                            case that there is only one such branch.</msg>
</logentry>
<logentry
   revision="1723285">
<author>ivan</author>
<date>2016-01-06T11:36:28.291575Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/deprecated.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
</paths>
<msg>Move deprecated FS API functions to deprecated.c. No functional changes.

* subversion/libsvn_fs/fs-loader.c
  (): Do not include &lt;apr_md5.h&gt;
  (svn_fs_paths_changed, svn_fs_file_md5_checksum): Move to ... 
* subversion/libsvn_fs/deprecated.c
  (svn_fs_paths_changed, svn_fs_file_md5_checksum): ... here.
  (): Include &lt;apr_md5.h&gt;
</msg>
</logentry>
<logentry
   revision="1722913">
<author>julianfoad</author>
<date>2016-01-04T16:25:37.965252Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/diff.c</path>
</paths>
<msg>* subversion/libsvn_client/diff.c
  (diff_repos_wc): Deduplicate one (long) line of duplicated code.</msg>
</logentry>
<logentry
   revision="1722887">
<author>stefan2</author>
<date>2016-01-04T15:11:08.225726Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Stop trying to align pointers in the cache-membuffer code, too, because
that is not portable.

* subversion/libsvn_subr/cache-membuffer.c
  (ITEM_ALIGNMENT): Document that this is no longer an "absolute" alignment.
  (ALIGN_POINTER,
   secure_aligned_alloc): Drop. We can't do this.
  (svn_cache__membuffer_cache_create): Don't align pointers but still
                                       ensure that the data buffer sizes
                                       and relative positions are multiples
                                       of ITEM_ALIGNMENT.
  (membuffer_cache_get_internal): No longer try to be better than standard
                                  APR pointer alignment.</msg>
</logentry>
<logentry
   revision="1722881">
<author>stefan2</author>
<date>2016-01-04T14:21:34.343142Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>Fix a minor inefficiency when generating a "random" file name.

* subversion/libsvn_subr/io.c
  (get_default_file_perms): Use more of the entropy that we are given.
</msg>
</logentry>
<logentry
   revision="1722879">
<author>stefan2</author>
<date>2016-01-04T14:17:04.774885Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/utf_validate.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/eol.c</path>
</paths>
<msg>Stop using pointer arithmetics to check for proper alignment because
that is not portable.

As a result, platforms that don't allow unaligned data access will
suffer a small additional performance hit.

* subversion/libsvn_subr/eol.c
  (svn_eol__find_eol_start): No longer attempt aligned chunky processing
                             when unaligned access is not supported.

* subversion/libsvn_subr/utf_validate.c
  (first_non_fsm_start_char): Same.
</msg>
</logentry>
<logentry
   revision="1722865">
<author>stefan2</author>
<date>2016-01-04T13:31:54.618224Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/notes/knobs</path>
</paths>
<msg>Follow-up to r1722860: Update dev documentation.

* notes/knobs
  (SVN_UTF_NO_UNINITIALISED_ACCESS): Remove section about this knob and
                                     update the index. Our code no longer
                                     uses it.</msg>
</logentry>
<logentry
   revision="1722861">
<author>stefan2</author>
<date>2016-01-04T12:42:16.601043Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/eol.c</path>
</paths>
<msg>* subversion/libsvn_subr/eol.c
  (svn_eol__find_eol_start): Fix wording in comment. No functional change.</msg>
</logentry>
<logentry
   revision="1722860">
<author>stefan2</author>
<date>2016-01-04T12:41:58.257568Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/utf_validate.c</path>
</paths>
<msg>Fix access to uninitialized memory in our UTF8 validity checker.
For static strings like "", this violated C99, 6.2.4.5 and 3.17.2.

The code path for C strings only fully worked for APR allocated memory
and could fail otherwise on systems with fine-grained boundary checks.

This patch simply eliminates the C string specific implementation and
reuses the equally efficient svn_utf__last_valid function.  Calling
strlen is not an added overhead here:  If the string is ASCII-7 only,
strlen is about as efficient as first_non_fsm_start_char_cstring's
implicit EOS check.  If the string contains chars &gt;= 0x80, the much
more expensive state machine code will dominate the runtime.

Reported by: Hanno Böck &lt;hanno{_AT_}hboeck.de&gt;

* subversion/libsvn_subr/utf_validate.c
  (first_non_fsm_start_char_cstring): Remove because it is no longer used. 
  (svn_utf__cstring_is_valid): Implement in terms of svn_utf__last_valid.</msg>
</logentry>
<logentry
   revision="1722441">
<author>julianfoad</author>
<date>2015-12-31T12:48:16.546041Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/notes/move-tracking/path_pairs_to_eid_map.py</path>
</paths>
<msg>* notes/move-tracking/path_pairs_to_eid_map.py
  Rewrite with EID mapping classes for easier translation to C.</msg>
</logentry>
<logentry
   revision="1722266">
<author>jamessan</author>
<date>2015-12-30T03:27:45.341810Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/backport.pl</path>
</paths>
<msg>* tools/dist/backport.pl
  Change upper-bound of tested smartmatch behavior to Perl 5.22.1
</msg>
</logentry>
<logentry
   revision="1722164">
<author>jamessan</author>
<date>2015-12-29T15:53:22.125216Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/configure.ac</path>
</paths>
<msg>Filter out -Wdate-time from SWIG_CPPFLAGS

As part of the reproducible builds effort[0], it's becoming more common to see
-Wdate-time in CPPFLAGS, which is used to seed SWIG_CPPFLAGS.  Swig doesn't
understand this switch, so continue the current whack-a-mole approach of
filtering out unsupported switches in SWIG_CPPFLAGS.

[0]: https://reproducible-builds.org/

* configure.ac
  (SWIG_CPPFLAGS): Filter out -Wdate-time
</msg>
</logentry>
<logentry
   revision="1721747">
<author>ivan</author>
<date>2015-12-26T19:13:26.823900Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/deadprops.c</path>
</paths>
<msg>* subversion/mod_dav_svn/deadprops.c
  (db_first_name): Use RESOURCE-&gt;COLLECTION instead of svn_fs_check_path() to
   find whether we're iterating properties for directory or file.
</msg>
</logentry>
<logentry
   revision="1721746">
<author>ivan</author>
<date>2015-12-26T18:33:48.675370Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/commit.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/mod_dav_svn/merge.c</path>
</paths>
<msg>Obtain svn:author and svn:date using one FS call after commit.

* subversion/libsvn_repos/commit.c
* subversion/mod_dav_svn/merge.c
  (invoke_commit_cb, dav_svn__merge_response): Use svn_fs_revision_proplist2()
   to get svn:author and svn:date instead of two calls separate calls to
   svn_fs_revision_prop2().
</msg>
</logentry>
<logentry
   revision="1721732">
<author>ivan</author>
<date>2015-12-26T14:03:42.850096Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/mod_dav_svn/deadprops.c</path>
</paths>
<msg>mod_dav_svn: Improve performance and memory usage of PROPFIND with &lt;allprop /&gt;
request processing.

* subversion/mod_dav_svn/deadprops.c
  (get_value): Obtain property value from DB-&gt;PROPS hash if exists.
</msg>
</logentry>
<logentry
   revision="1721716">
<author>ivan</author>
<date>2015-12-26T09:14:25.045887Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/reports/update.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/liveprops.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/dav_svn.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/mod_dav_svn/version.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/reports/get-location-segments.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/lock.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/activity.c</path>
</paths>
<msg>Cache youngest revision during processing one request on mod_dav_svn.

* subversion/mod_dav_svn/dav_svn.h
  (dav_svn_repos): Add YOUNGEST_REV member.
  (dav_svn__create_txn): Drop const qualifier from REPOS argument.
  (dav_svn__get_youngest_rev): New function declaration.

* subversion/mod_dav_svn/util.c
  (dav_svn__get_youngest_rev): New function.

* subversion/mod_dav_svn/activity.c
* subversion/mod_dav_svn/liveprops.c
* subversion/mod_dav_svn/lock.c
* subversion/mod_dav_svn/reports/get-location-segments.c
* subversion/mod_dav_svn/reports/update.c
* subversion/mod_dav_svn/repos.c
* subversion/mod_dav_svn/version.c
  (dav_svn__create_txn, insert_prop_internal, append_locks,
   dav_svn__get_location_segments_report, dav_svn__update_report,
   prep_regular, prep_version, parse_querystring,
   dav_svn__working_to_regular_resource, get_option, dav_svn__checkout):
   Use dav_svn__get_youngest_rev() instead of direct call to
   svn_fs_youngest_rev().
  (get_parentpath_resource, get_resource): Initialize RESPO-&gt;YOUNGEST_REV to
   SVN_INVALID_REVNUM. 
</msg>
</logentry>
<logentry
   revision="1721669">
<author>ivan</author>
<date>2015-12-25T11:23:11.978516Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/liveprops.c</path>
</paths>
<msg>Remove unneeded call to svn_fs_check_path() in mod_dav_svn.

* subversion/mod_dav_svn/liveprops.c
  (insert_prop_internal): Do not call to svn_fs_check_path() to check whether
   resource is a file: we already checked this information using
   RESOURCE-&gt;COLLECTION flag.
</msg>
</logentry>
<logentry
   revision="1721668">
<author>ivan</author>
<date>2015-12-25T10:47:55.467809Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_client/revisions.c</path>
</paths>
<msg>Refactor code a bit to make easier for reading.

* subversion/libsvn_client/revisions.c
  (svn_client__get_revision_number): Duplicate svn_error_create() call instead
   of using goto statement.
</msg>
</logentry>
<logentry
   revision="1721660">
<author>ivan</author>
<date>2015-12-25T07:05:37.440537Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
</paths>
<msg>* subversion/mod_dav_svn/repos.c
  (get_last_modified): Use SVN_PROP_REVISION_DATE constant instead of
   hard-coded "svn:date".
</msg>
</logentry>
<logentry
   revision="1721648">
<author>jamessan</author>
<date>2015-12-24T18:33:13.332049Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build/ac-macros/swig.m4</path>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/subversion/bindings/swig/include/proxy.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/include/proxy.swg</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/INSTALL</path>
</paths>
<msg>Fix Python bindings with SWIG &lt; 3.0.6, followup on 1721488.

“%pythoncode { ... }” had to be changed to “%pythoncode %{ ... %}” to avoid
macro expansion (done in r1721488).  This was a latent bug in the bindings
exposed by stricter parsing in SWIG 3.x.

However, there was a bug in SWIG through 3.0.6 which would remove part of the
commented lines inside the “%pythoncode %{ ... %}” block.  This caused the
"right" fix to break everywhere except 3.0.6+.

As discussed in the SWIG bug tracker[0], an alternative form of the pythoncode
directive can be used to inline the contents of a specified file.  Use of this
form works in all supported SWIG versions.

[0]: https://github.com/swig/swig/issues/379#issuecomment-107664345

* subversion/bindings/swig/include/proxy.swg:
  (proxy_pythoncode): Copy %pythoncode contents to ...

* subversion/bindings/swig/include/proxy.py:
  ... new file which is included in proxy.swg via “%pythoncode "..."”
  directive.

* build/ac-macros/swig.m4
  subversion/bindings/swig/INSTALL:
  Remove 3.x related SWIG restrictions.  All SWIG versions are supported again.
</msg>
</logentry>
<logentry
   revision="1721538">
<author>julianfoad</author>
<date>2015-12-23T12:53:40.405922Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/notes/move-tracking/path_pairs_to_eid_map.py</path>
</paths>
<msg>* notes/move-tracking/path_pairs_to_eid_map.py
  Fix, following r1721537.</msg>
</logentry>
<logentry
   revision="1721537">
<author>julianfoad</author>
<date>2015-12-23T12:48:32.155225Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/notes/move-tracking/path_pairs_to_eid_map.py</path>
</paths>
<msg>* notes/move-tracking/path_pairs_to_eid_map.py
  Avoid duplicates in the output.</msg>
</logentry>
<logentry
   revision="1721534">
<author>julianfoad</author>
<date>2015-12-23T12:26:55.791371Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/notes/move-tracking/path_pairs_to_eid_map.py</path>
</paths>
<msg>* notes/move-tracking/path_pairs_to_eid_map.py
  Take input from command-line arguments.</msg>
</logentry>
<logentry
   revision="1721527">
<author>julianfoad</author>
<date>2015-12-23T11:52:59.042048Z</date>
<paths>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/notes/move-tracking/path_pairs_to_eid_map.py</path>
</paths>
<msg>Add a script that converts (initial_path, final_path) pairs to a pair of
element mappings, for move tracking.

* notes/move-tracking/path_pairs_to_eid_map.py
  New file.</msg>
</logentry>
<logentry
   revision="1721488">
<author>jamessan</author>
<date>2015-12-23T04:46:42.036028Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/bindings/swig/include/proxy.swg</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/INSTALL</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/build/ac-macros/swig.m4</path>
</paths>
<msg>Enable building bindings with SWIG &gt;= 3.0.6

This reinstates r1690591 and adds the minimum version checks for SWIG
proposed by Joe Orton in http://svn.haxx.se/dev/archive-2015-07/0028.shtml.

* build/ac-macros/swig.m4,
  subversion/bindings/swig/INSTALL:
  Change version check and documentation to allow SWIG &gt;= 3.0.6

* subversion/bindings/swig/include/proxy.swg:
  Use %{ %} with %pythoncode so comments avoid the SWIG processor,
  fixing the bindings with SWIG &gt;= 3.0.6.
</msg>
</logentry>
<logentry
   revision="1721291">
<author>jamessan</author>
<date>2015-12-22T01:46:36.181502Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/perl/native/Base.pm</path>
</paths>
<msg>* subversion/bindings/swig/perl/native/Base.pm: Fix link to API docs
</msg>
</logentry>
<logentry
   revision="1721290">
<author>stefan2</author>
<date>2015-12-22T01:10:09.255196Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Fix an inefficiency in the membuffer cache introduced by r1717338:
Very large high-prio items would falsly get rejected.

High-priority items may be larger than the L1 max_entry_size but
still get written directly to L2, skipping L1.

* subversion/libsvn_subr/cache-membuffer.c
  (membuffer_cache_set_internal): Check for arithmetic overflow only and
                                  leave the size to check to select_level.</msg>
</logentry>
<logentry
   revision="1721289">
<author>stefan2</author>
<date>2015-12-22T00:47:58.790712Z</date>
<paths>
<path
   action="A"
   prop-mods="true"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/find-control-statements.py</path>
</paths>
<msg>Add a simple script I used to grep all SVN sources for control statements.

* tools/dev/find-control-statements.py:
  New file.</msg>
</logentry>
<logentry
   revision="1721285">
<author>stefan2</author>
<date>2015-12-22T00:27:50.262846Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/caching.c</path>
</paths>
<msg>Make the directory cache in FSFS accept 4x larger objects than before.

Directory data, especially when it is large, needs to be cached at almost
any cost because of its big-O impact on various request execution times.
The membuffer cache will accept larger objects (~65% instead of ~15% of
the cache size) only when they are given above-average priority.

* subversion/libsvn_fs_fs/caching.c
  (svn_fs_fs__initialize_caches,
   svn_fs_fs__initialize_txn_caches): Directory data is high-prio.</msg>
</logentry>
<logentry
   revision="1721179">
<author>danielsh</author>
<date>2015-12-21T15:02:31.290143Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/backup/hot-backup.py.in</path>
</paths>
<msg>hot-backup.py: Modernize Python syntax.

* tools/backup/hot-backup.py.in: Drop syntaxes unsupported by ≥py3.0, while
    retaining compatibility with ≥py2.6.  (Both trunk and 1.9.x require ≥py2.7.)
</msg>
</logentry>
<logentry
   revision="1721175">
<author>danielsh</author>
<date>2015-12-21T15:01:22.574406Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/backup/hot-backup.py.in</path>
</paths>
<msg>hot-backup.py: Input validation.

* tools/backup/hot-backup.py.in: Error out on unknown values.</msg>
</logentry>
<logentry
   revision="1721174">
<author>danielsh</author>
<date>2015-12-21T15:00:41.413029Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/backup/hot-backup.py.in</path>
</paths>
<msg>hot-backup.py: Housekeeping.

* tools/backup/hot-backup.py.in: Escape positional arguments and regexp injects.</msg>
</logentry>
<logentry
   revision="1720643">
<author>rhuijben</author>
<date>2015-12-17T20:22:49.252560Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/javahl/src/org/apache/subversion/javahl/remote/StatusEditor.java</path>
</paths>
<msg>* subversion/bindings/javahl/src/org/apache/subversion/javahl/remote/StatusEditor.java
  (addAbsent): Ignore callback instead of throwing error.

Patch by: Marc Strapetz &lt;marc.strapetz{_AT_}syntevo.com&gt;
</msg>
</logentry>
<logentry
   revision="1720560">
<author>julianfoad</author>
<date>2015-12-17T14:50:51.855560Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/merge.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/client.h</path>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/subversion/libsvn_client/merge_elements.c</path>
</paths>
<msg>Add skeleton code for a merge-by-elements feature.

See dev@ email thread "[RFC] An element-based 'svn merge'" started by me on
2015-12-17, archived at e.g. http://svn.haxx.se/dev/archive-2015-12/0061.shtml
or http://mail-archives.apache.org/mod_mbox/subversion-dev/201512.mbox/%3CCAEcU=1aurg2SY96ff5B0HbCCoLXKb1f67CDcmS6nFz2D9CG2qg@mail.gmail.com%3E

This is conditional on an environment variable 'SVN_ELEMENT_MERGE' being
set.

* subversion/libsvn_client/client.h
  (merge_source_t,
   merge_target_t): Move these definitions to here from merge.c.
  (svn_client__merge_elements): New.

* subversion/libsvn_client/merge.c
  (merge_peg_locked): Call the merge-by-elements code under certain
    conditions.

* subversion/libsvn_client/merge_elements.c
  New file.
</msg>
</logentry>
<logentry
   revision="1720363">
<author>rhuijben</author>
<date>2015-12-16T14:27:30.073863Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/patch_tests.py
  (missing_trailing_context): Following up on r1720359 and r1720114, write
    patchfiles as binary files to avoid platform specific behavior
    differences. Update expected results.
</msg>
</logentry>
<logentry
   revision="1720359">
<author>rhuijben</author>
<date>2015-12-16T13:57:15.912279Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Following up on r1720351, fix handling patch files that have more context
than the diff headers tell us in the same way as a shortage of context.

This change makes a bad patch in our testsuite visible, where we expected
bad behavior. This patch fixes that test and adds more testing.

* subversion/libsvn_client/patch.c
  (hunk_info_t): Separate reported fuzz from matching fuzz as mixing them
    causes errors.
  (get_hunk_info): Store both fuzz values.
  (apply_hunk): Use match fuzz for apply-magic.
  (send_hunk_notification): Report fuzz with penalty.

* subversion/libsvn_diff/parse-diff.c
  (parse_next_hunk): Parse extra context when that exists. Report this case
    as fuzz penalty, like a fuzz shortage.

* subversion/tests/cmdline/patch_tests.py
  (patch_empty_file): Fix patch to work as document. Expect the proper result.
    Extract the original version as new test.
  (missing_trailing_context): Extend test with reverse patching and too much
    trailing context.
  (patch_missed_trail): New test, with the original case of patch_empty_file.
    Expect that it no longer ignores the 'replacement' line.
  (test_list): Add patch_missed_trail.
</msg>
</logentry>
<logentry
   revision="1720351">
<author>rhuijben</author>
<date>2015-12-16T12:42:06.739372Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_diff_private.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Resolve issue #4609, by extending the diff parser with some additional
verifications and a match penalty.

Temporarily keep this as private api to allow backporting this patch.

[Note: This introduces some new issues applying certain bad patches. These
       issues are fixed in r1720359]

* subversion/include/private/svn_diff_private.h
  (svn_diff_hunk__get_fuzz_penalty): New function.

* subversion/libsvn_client/patch.c
  (match_hunk): Check for fuzz penalties.

* subversion/libsvn_diff/parse-diff.c
  (svn_diff_hunk_t): Add two fields.
  (add_or_delete_single_line): Safely initialize everything to 0.
  (parse_next_hunk): Handle missing context lines by updating the number
    of lines in the hunk and applying a fuzz penalty.
  (svn_diff_hunk__get_fuzz_penalty): New function.

* subversion/tests/cmdline/patch_tests.py
  (missing_trailing_context): Remove XFail. Expect fuzz.
</msg>
</logentry>
<logentry
   revision="1720333">
<author>rhuijben</author>
<date>2015-12-16T11:09:36.864270Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Following up on r1720220, make testcase expect new behavior.

* subversion/tests/libsvn_ra/ra-test.c
  (commit_empty_last_change): Update expected result.
</msg>
</logentry>
<logentry
   revision="1720220">
<author>philip</author>
<date>2015-12-15T18:39:56.024325Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_base/tree.c</path>
</paths>
<msg>* subversion/libsvn_fs_base/tree.c
  (txn_body_commit): Ensure root node is mutable so that revisions have
   distinct root node-revision-ids.  This fixes fs-test 2 FAIL for BDB.
</msg>
</logentry>
<logentry
   revision="1720118">
<author>julianfoad</author>
<date>2015-12-15T11:31:30.018608Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_nested.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch_impl.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
</paths>
<msg>In 'svnmover', consolidate some branching methods: merge the 'branch' and
'open_branch' methods into one.

* subversion/include/private/svn_branch.h
  (svn_branch__txn_open_branch): Add a 'tree_ref' parameter.
  (svn_branch__txn_branch): Delete.

* subversion/include/private/svn_branch_impl.h
  (svn_branch__txn_v_open_branch_t): Add a 'tree_ref' parameter.
  (svn_branch__txn_v_branch_t): Delete.
  (svn_branch__txn_vtable_t): Remove that method from the vtable.

* subversion/libsvn_delta/branch.c
  (branch_txn_open_branch): Add a 'tree_ref' parameter, and apply it like
    the 'branch' method used to do.
  (branch_txn_branch): Delete.
  (svn_branch__txn_open_branch): Add a 'tree_ref' parameter.
  (svn_branch__txn_branch): Delete.
  (branch_txn_create): Remove that method from the vtable.

* subversion/libsvn_delta/branch_compat.c
  (compat_branch_txn_open_branch): Add a 'tree_ref' parameter.
  (compat_branch_txn_branch): Delete.
  (svn_branch__compat_txn_from_delta_for_commit): Remove that method from
    the vtable.

* subversion/libsvn_delta/branch_nested.c
  (svn_branch__instantiate_elements_r): Update caller: pass null.
  (nested_branch_txn_open_branch): Add a 'tree_ref' parameter, and apply
    recursion to it like nested_branch_txn_branch() used to do.
  (nested_branch_txn_branch): Delete.
  (svn_branch__nested_txn_create): Remove that method from the vtable.

* tools/dev/svnmover/merge3.c
  (merge_subbranch): Use 'open_branch' instead of 'branch' method.

* tools/dev/svnmover/svnmover.c
  (svn_branch__replay,
   update_wc_base_r,
   do_mkbranch): Update caller: pass null.
  (do_branch,
   do_topbranch): Use 'open_branch' instead of 'branch' method.
</msg>
</logentry>
<logentry
   revision="1720114">
<author>philip</author>
<date>2015-12-15T10:55:12.637667Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/patch_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/patch_tests.py
  (missing_trailing_context): New XFail test for issue 4609.
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1720047">
<author>stefan2</author>
<date>2015-12-14T23:31:48.125752Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Another follow-up to r1719649: Fix FS test.

* subversion/tests/libsvn_fs/fs-test.c
  (test_fsfs_config_opts): Use consistent directory names / paths.</msg>
</logentry>
<logentry
   revision="1720020">
<author>kotkov</author>
<date>2015-12-14T21:40:10.556163Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_io.h</path>
</paths>
<msg>Following up on r1710201, match the docstring for svn_stringbuf_from_stream()
with current implementation.

* subversion/include/svn_io.h
  (svn_stringbuf_from_stream): This function doesn't close the stream upon
   completion.
</msg>
</logentry>
<logentry
   revision="1720015">
<author>kotkov</author>
<date>2015-12-14T21:11:35.490196Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
</paths>
<msg>Don't leave the *use_log_addressing variable uninitialized when opening
FSFS repositories without db/format files (legacy 1.1-era repositories
didn't have these files).

Uninitialized output variable leads to undefined behavior when accessing it.
In practice, this can result in failing commits, wrong output in svnadmin
info and other feasible problems, since a non-zero value enables the logical
addressing code in a situation where it's not supposed to work:

  &gt; svn mkdir URL
  svn: E200004: Invalid L2P offset in r0 footer

  &gt; svnadmin info
  Path: C:\Repositories\repos
  UUID: fc2931cb-22a3-424d-a79e-62392adb82f0
  Revisions: 0
  Repository Format: 3
  Compatible With Version: 1.1.0
  Filesystem Type: fsfs
  Filesystem Format: 1
  FSFS Sharded: no
  FSFS Logical Addressing: yes   &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
  Configuration File: C:\Repositories\repos\db\fsfs.conf

* subversion/libsvn_fs_fs/fs_fs.c
  (read_format): Initialize *use_log_addressing when handling a filesystem
   without the format file.
</msg>
</logentry>
<logentry
   revision="1719961">
<author>julianfoad</author>
<date>2015-12-14T17:15:42.161717Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_nested.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_branch_impl.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
</paths>
<msg>In 'svnmover', consolidate some branching methods. Basically, delete the
two 'add branch' methods because 'open branch' can do the same job.

* subversion/include/private/svn_branch.h
  (svn_branch__txn_get_branches): Add comments.
  (svn_branch__txn_open_branch): Add comments. Rename a parameter.
  (svn_branch__state_t): Add comments.
  (svn_branch__txn_add_branch,
   svn_branch__txn_add_new_branch): Delete.

* subversion/include/private/svn_branch_impl.h
  (svn_branch__txn_v_add_branch_t,
   svn_branch__txn_v_add_new_branch_t): Delete.
  (svn_branch__txn_vtable_t): Delete those entries from the vtable.

* subversion/libsvn_delta/branch.c
  (branch_txn_add_branch,
   branch_txn_add_new_branch): Delete.
  (branch_txn_open_branch,
   branch_txn_branch): Don't use svn_branch__txn_add_new_branch().
  (svn_branch__txn_add_branch,
   svn_branch__txn_add_new_branch): Delete.
  (svn_branch__txn_open_branch): Rename a parameter.
  (branch_txn_create): Update the vtable.
  (svn_branch__txn_parse): Don't use svn_branch__txn_add_branch().

* subversion/libsvn_delta/branch_compat.c
  (compat_branch_txn_add_branch,
   compat_branch_txn_add_new_branch): Delete.
  (svn_branch__compat_txn_from_delta_for_commit): Update the vtable.

* subversion/libsvn_delta/branch_nested.c
  (svn_branch__instantiate_elements_r): Use svn_branch__txn_open_branch()
    instead of ...add_new_branch.
  (nested_branch_txn_add_branch,
   nested_branch_txn_add_new_branch): Delete.
  (svn_branch__nested_txn_create): Update the vtable.

* tools/dev/svnmover/svnmover.c
  (do_mkbranch): Add a comment.
</msg>
</logentry>
<logentry
   revision="1719730">
<author>ivan</author>
<date>2015-12-12T20:05:42.997666Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>Resolve one compilation warning on 32-bit platforms in FSFS.

* subversion/libsvn_fs_fs/pack.c
  (get_block_left): Return apr_off_t instead of apr_size_t. Caller will store
   result to variable of type apr_off_t anyway.
</msg>
</logentry>
<logentry
   revision="1719727">
<author>stefan2</author>
<date>2015-12-12T19:46:15.751200Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>Since we don't pre-alloc the next txn-current during commit in FSX anymore,
we don't need to take out the txn-current lock.

* subversion/libsvn_fs_x/transaction.c
  (bump_ids_baton_t): Remove.
  (bump_ids): Rename to ...
  (bump_current): ... this and replace the BATON with "proper" parameters. 
  (commit_body): Update caller to invoke the bump function directly w/o
                 wrapping it into a locking section.
</msg>
</logentry>
<logentry
   revision="1719726">
<author>stefan2</author>
<date>2015-12-12T19:36:09.720953Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>Finally, add checksums to non-packed revprop files as well.
All revprop data is checksummed now.

* subversion/libsvn_fs_x/revprops.h
  (svn_fs_x__write_non_packed_revprops): Declare new internal API to
                                         avoid code duplication.

* subversion/libsvn_fs_x/fs_x.c
  (write_revision_zero): Use the new API to create the revprops.

* subversion/libsvn_fs_x/transaction.c
  (write_final_revprop): Same.

* subversion/libsvn_fs_x/revprops.c
  (verify_checksum): Factored out from read_packed_data_checksummed.
  (read_non_packed_revprop): Call the new function to verify the
                             revprop file contents.
  (read_packed_data_checksummed): Call factored out function now.
  (svn_fs_x__write_non_packed_revprops): Implement the new API.
  (write_non_packed_revprop): Use the new API to write revprops.
  (copy_revprops): Verify revprops before packing them.</msg>
</logentry>
<logentry
   revision="1719717">
<author>stefan2</author>
<date>2015-12-12T18:40:27.683220Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>In FSX, add checksums to the packed revprop files.

Most of this is done by reusing code already written for the checksummed
manifest file.

* subversion/libsvn_fs_x/revprops.c
  (write_packed_data_checksummed): Factored out from ...
  (write_manifest): ... this.
  (read_packed_data_checksummed): Factored out from ...
  (read_manifest): ... this.
  (parse_packed_revprops,
   repack_revprops,
   copy_revprops): Call the new checksumming I/O functions for svn_packed_*.</msg>
</logentry>
<logentry
   revision="1719716">
<author>stefan2</author>
<date>2015-12-12T18:12:31.001043Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Instead of defining an on-disc structure locally for packed revprops in FSX,
simply take the svn_packed__* API to store these blobs.

* subversion/libsvn_fs_x/revprops.c
  (packed_revprops_t): Instead of the whole buffer plus a set of offsets
                       into it, simply store the serialized revprop lists
                       as individual items.
  (parse_packed_revprops): Simplify by extracting the revprop lists from a
                           svn_packed__* object.
  (read_pack_revprop): Update check for "load succeeded".
  (write_encoded_uint,
   serialize_revprops_header): Drop.
  (repack_revprops): Simplify using a svn_packed__* object and expecting the
                     REVPROPS struct to be up-to-date.
  (props_len): Update.
  (write_packed_revprop): Update the REVPROPS struct before serializing the
                          data instead of passing the modified item around.
  (copy_revprops): Also use the svn_packed__* API to write the initial pack
                   contents.</msg>
</logentry>
<logentry
   revision="1719681">
<author>stefan2</author>
<date>2015-12-12T12:52:23.869407Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>More code cleanup in FSX revprops code.

* subversion/libsvn_fs_x/revprops.c
  (parse_revprop): A 'const' parameter will do just fine.
  (parse_packed_revprops): Take the file contents as explicit parameter
                           rather than reappropriating the REVPROPS struct.
  (read_pack_revprop): Allocate the temp data in the temp pool and general
                       reduce scopes.</msg>
</logentry>
<logentry
   revision="1719678">
<author>stefan2</author>
<date>2015-12-12T12:40:35.623575Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Minor code cleanup in FSX revprops code.

* subversion/libsvn_fs_x/revprops.c
  (props_len): New utility function.
  (write_packed_revprop): Use the new function and a local variable
                          to shorten the code a bit.
</msg>
</logentry>
<logentry
   revision="1719655">
<author>stefan2</author>
<date>2015-12-12T11:25:03.216860Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_subr/packed-data-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_packed_data.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/packed_data.c</path>
</paths>
<msg>Introduce a previously missing "size" function to the svn_packed API.

We'll need it shortly and this fixes an asymmetry between integer data
and blob data streams.

* subversion/include/private/svn_packed_data.h
  (svn_packed__byte_block_count): Declare new internal API.

* subversion/libsvn_subr/packed_data.c
  (svn_packed__byte_block_count): Implement.

* subversion/tests/libsvn_subr/packed-data-test.c
  (test_byte_stream): Cover the new API as well.</msg>
</logentry>
<logentry
   revision="1719654">
<author>stefan2</author>
<date>2015-12-12T11:24:35.742974Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Follow-up to r1719649: Fix FS tests after cleanup.

* subversion/tests/libsvn_fs/fs-test.c
  (freeze_and_commit): Make sure to use the same repo name throughout
                       this test.
</msg>
</logentry>
<logentry
   revision="1719650">
<author>stefan2</author>
<date>2015-12-12T10:58:37.176416Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/low_level.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/low_level.c</path>
</paths>
<msg>Minor internal API adjustment.

* subversion/libsvn_fs_x/low_level.h
  (svn_fs_x__parse_properties): A 'const' string will do just fine.

* subversion/libsvn_fs_x/low_level.c
  (svn_fs_x__parse_properties): Sync signature with declaration.
</msg>
</logentry>
<logentry
   revision="1719649">
<author>stefan2</author>
<date>2015-12-12T10:56:13.813159Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/Makefile.in</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Have 'make clean' cover more of the temporary test data.

* Makefile.in
  (check-clean): Clean up repos in the fsx tests folder as well.

* subversion/tests/libsvn_fs/fs-test.c
  (test_fs_info_format,
   commit_timestamp,
   dir_prop_merge,
   upgrade_while_committing,
   test_paths_changed,
   test_delete_replaced_paths_changed,
   test_fsfs_config_opts,
   test_modify_txn_being_written,
   freeze_and_commit): Make sure all test repo names are prefixed by
                       "test-repo-".</msg>
</logentry>
<logentry
   revision="1719413">
<author>ivan</author>
<date>2015-12-11T13:41:26.796908Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>Simplify FSFS physical addressing packing code a bit.

* subversion/libsvn_fs_fs/pack.c
  (pack_phys_addressed): Obtain actual revision data offset in pack file
   before writing revision data, instead of calculating in parallel using
   revision file size.
</msg>
</logentry>
<logentry
   revision="1719336">
<author>ivan</author>
<date>2015-12-11T10:39:43.952248Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/pack.c
  (append_revision): Obtain file size from handle after opening revision file
   instead of calling stat() to obtain file size by name.
</msg>
</logentry>
<logentry
   revision="1719281">
<author>ivan</author>
<date>2015-12-11T08:50:19.994979Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_io.h</path>
</paths>
<msg>Follow-up to r1719269: Fix documentation markup for svn_io_file_get_offset().

Found by: rhuijben

* subversion/include/svn_io.h
  (svn_io_file_get_offset): Use /** to open comment block.
</msg>
</logentry>
<logentry
   revision="1719271">
<author>ivan</author>
<date>2015-12-11T07:11:06.729996Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_client/patch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/dump.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_diff/parse-diff.c</path>
</paths>
<msg>Use svn_io_file_get_offset() instead of svn_io_file_seek(APR_CUR) where it
makes sense.

* subversion/libsvn_client/patch.c
* subversion/libsvn_diff/parse-diff.c
* subversion/libsvn_repos/dump.c
* subversion/libsvn_subr/io.c
* subversion/libsvn_subr/stream.c
* subversion/tests/libsvn_subr/io-test.c
  (tell_file, read_handler_base85, hunk_readline_original_or_modified,
   svn_diff_hunk_readline_diff_text, parse_next_hunk, parse_binary_patch,
   svn_diff_parse_next_patch, store_delta, svn_io_file_readline,
   mark_handler_apr, test_file_readline, aligned_seek): Use
   svn_io_file_get_offset() instead of svn_io_file_seek(0, APR_CUR).
</msg>
</logentry>
<logentry
   revision="1719269">
<author>ivan</author>
<date>2015-12-11T06:57:56.020005Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/util.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/verify.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/index.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/util.c</path>
</paths>
<msg>Promote libsvn_fs_fs private helper svn_fs_fs__get_file_offset() to public
libsvn_subr function svn_io_file_get_offset().

* subversion/libsvn_fs_fs/util.c
* subversion/libsvn_fs_fs/util.h
  (svn_fs_fs__get_file_offset): Move/rename to ...

* subversion/include/svn_io.h
* subversion/libsvn_subr/io.c
  (svn_io_file_get_offset): ... here.

* subversion/libsvn_fs_fs/cached_data.c
* subversion/libsvn_fs_fs/index.c
* subversion/libsvn_fs_fs/pack.c
* subversion/libsvn_fs_fs/transaction.c
* subversion/libsvn_fs_fs/verify.c
  (get_file_offset, stream_error_create, copy_item_to_temp, copy_rep_to_temp,
   copy_node_to_temp, rep_write_get_baton, rep_write_contents_close,
   write_container_rep, write_container_delta_rep, write_final_rev,
   write_final_changed_path_info, commit_body, expect_buffer_nul): Replace
   calls to svn_fs_fs__get_file_offset() within svn_io_file_get_offset().
</msg>
</logentry>
<logentry
   revision="1719203">
<author>ivan</author>
<date>2015-12-10T20:41:12.767689Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
</paths>
<msg>Add test for svn_io_file_readline().

* subversion/tests/libsvn_subr/io-test.c
  (test_file_readline): New test for svn_io_file_readline().
  (test_funcs): Add test_file_readline to the list.
</msg>
</logentry>
<logentry
   revision="1719196">
<author>ivan</author>
<date>2015-12-10T20:18:48.688721Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/svn_io.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>Revert r1719188: It seems APR doesn't report proper position for apr_file_t
with ungotten character while our patch parser relies on that.

* subversion/include/svn_io.h
  (svn_io_file_ungetc): Revert r1719188.

* subversion/libsvn_subr/io.c
  (svn_io_file_ungetc, svn_io_file_readline): Revert r1719188.

* subversion/tests/libsvn_subr/io-test.c
  (test_file_readline, test_file_ungetc,
   svn_test_descriptor_t): Revert r1719188.
</msg>
</logentry>
<logentry
   revision="1719188">
<author>ivan</author>
<date>2015-12-10T20:02:33.363808Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/io.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_io.h</path>
</paths>
<msg>[Reverted in 1719196]

Use existing APR function in implementation of svn_io_file_readline() for
peeking char after we found '\r' instead of save position and seek back.

* subversion/include/svn_io.h
  (svn_io_file_ungetc): New.

* subversion/libsvn_subr/io.c
  (svn_io_file_ungetc): New. Wrapper around apr_file_ungetc().
  (svn_io_file_readline): Use svn_io_file_ungetc() for peeking char after we
   found '\r' instead of save position and seek back.

* subversion/tests/libsvn_subr/io-test.c
  (test_file_readline): New test for svn_io_file_readline().
  (test_file_ungetc): New test for svn_io_file_ungetc().
  (svn_test_descriptor_t): Add test_file_readline and test_file_ungetc.
</msg>
</logentry>
<logentry
   revision="1719120">
<author>julianfoad</author>
<date>2015-12-10T17:31:08.756970Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Remove the debug code inserted in r1719056, r1719067, r1719072, r1719074.

* subversion/libsvn_delta/branch_compat.c
  (pathrev_str,
   hash_keys_str,
   change_node_str): Comment out, as now unused but might be useful again.
  (insert_change,
   drive_changes_r): Remove recent (and some older) debugging code.</msg>
</logentry>
<logentry
   revision="1719113">
<author>julianfoad</author>
<date>2015-12-10T17:03:33.458358Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/branch_nested.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_branch_impl.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/ra.c</path>
</paths>
<msg>In 'svnmover', track history better.

For each version of each branch, store pointers to previous branch-versions,
called "parents" like in Git. Usually, a branch version has one parent that
points to the previous version of the same branch. Upon branching, the new
branch gets one parent that points to the chosen version of the source
branch. Upon merging, in the usual case of a complete merge from a source
branch into a target branch, the target branch gets two parents: its own
previous version, and the merge source.

* subversion/include/private/svn_branch.h
  (svn_branch__txn_open_branch,
   svn_branch__txn_add_new_branch): Don't take a 'predecessor' parameter.
  (svn_branch__state_t): Don't track a 'predecessor' as a public field here.
  (svn_branch__history_t,
   svn_branch__history_create_empty,
   svn_branch__history_create,
   svn_branch__history_dup): New.
  (svn_branch__state_get_history): Rename from
    'svn_branch__state_get_merge_ancestor'.
  (svn_branch__state_set_history): Rename from
    'svn_branch__state_add_merge_ancestor'.

* subversion/include/private/svn_branch_impl.h
  Track the changes in svn_branch.h.

* subversion/libsvn_delta/branch.c
  Implement the changes in svn_branch.h.

* subversion/libsvn_delta/branch_compat.c
  Track the changes in svn_branch.h.

* subversion/libsvn_delta/branch_nested.c
  Track the changes in svn_branch.h.

* subversion/tests/cmdline/svnmover_tests.py
  (reported_mg_diff): No longer expect any diff output describing a merge
    history difference, as we don't print that in a diff any more.

* tools/dev/svnmover/ra.c
  (branch_get_mutable_state): Initialize each branch's parent to point to
    the same branch in the base revision.

* tools/dev/svnmover/svnmover.c
  (list_parents,
   history_str,
   svn_branch__history_add_parent): New.
  (history_diff): Rename from 'merge_history_diff'.
  (txn_is_changed): Don't compare history, but leave some place-holder code
    in case we want to do so later.
  (get_union_of_subbranches): Make robust against either or both inputs
    being null.
  (svn_branch__replay): Update the replaying of a change of history.
  (update_wc_base_r): Update the copying of history for a new branch.
  (do_merge): Update the recording of history.
  (do_auto_merge): Dummy implementation: does nothing.
  (show_history_r): New.
  (branch_diff_r): Don't show history differences.
  (find_branch_main_parent): New.
  (svn_branch__find_predecessor_el_rev): Update the finding of the main
    parent.
  (do_log): Also show the history before the diff of each revision.
  (do_mkbranch): Track the API changes.
  (do_branch): Initialize the history (parent) of the new branch.
  (show_branch_history): New.
  (execute): In the 'info-wc' subcommand, show the history of the working
    branch (and not of the base branch).
</msg>
</logentry>
<logentry
   revision="1719107">
<author>brane</author>
<date>2015-12-10T16:35:22.746085Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/security/_gnupg.py</path>
</paths>
<msg>Update the gnupg module to the author's most recent version to support
new features in gpg 2.1.3 [1].

* tools/dist/security/_gnupg.py: Update to latest version. [2]

[1] https://bitbucket.org/vinay.sajip/python-gnupg/issues/35/status-newsig-missing-in-verify
[2] https://bitbucket.org/vinay.sajip/python-gnupg/src/1337e6ce364fc0381bbec7f366f524ea87f3f482/gnupg.py?at=default&amp;fileviewer=file-view-default
</msg>
</logentry>
<logentry
   revision="1719089">
<author>julianfoad</author>
<date>2015-12-10T14:47:46.219854Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Continue debugging: try avoiding apr_hash_overlay() as it appears to be
returning a hash with duplicate keys in it (which should be impossible),
on the Mac buildbots. A follow-up to r1719056.

* subversion/libsvn_delta/branch_compat.c
  (hash_overlay): New.
  (drive_changes_r): Use hash_overlay() instead of apr_hash_overlay().</msg>
</logentry>
<logentry
   revision="1719075">
<author>ivan</author>
<date>2015-12-10T12:25:44.499833Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/svn_test_main.c</path>
</paths>
<msg>Unify creating sandbox directory in io-test.

* subversion/tests/svn_test.h
* subversion/tests/svn_test_main.c
  (svn_test_make_sandbox_dir): New helper to create sandbox directory and
   schedule for automatic cleanup.

* subversion/tests/libsvn_subr/io-test.c
  (create_test_file): Accept TEST_DIR instead of TESTNAME.
  (create_comparison_candidates): Use svn_test_make_sandbox_dir() helper.
   Pass TEST_DIR to create_test_file().
  (read_length_line_shouldnt_loop, test_read_length_line, aligned_seek_test,
   ignore_enoent, test_install_stream_to_longpath,
   test_install_stream_over_readonly_file, test_file_size_get,
   test_file_rename2): Use svn_test_make_sandbox_dir() helper to create
   temporary sandbox for test.
</msg>
</logentry>
<logentry
   revision="1719074">
<author>julianfoad</author>
<date>2015-12-10T12:18:39.987149Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Change the debug code to return the info as an error message text, as that
may be logged by the buildbots whereas stdout/stderr are not. A follow-up
to r1719056.

* subversion/libsvn_delta/branch_compat.c
  (insert_change,
   drive_changes_r): Report debugging info through an error object.</msg>
</logentry>
<logentry
   revision="1719072">
<author>julianfoad</author>
<date>2015-12-10T12:02:41.401340Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Enable the debug code also in release builds, as the buildbots are doing
release builds. A follow-up to r1719067.

* subversion/libsvn_delta/branch_compat.c
  (change_node_str): Don't make debugging info conditional on SVN_DEBUG.</msg>
</logentry>
<logentry
   revision="1719067">
<author>julianfoad</author>
<date>2015-12-10T11:43:58.400583Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Enable the debug code also in release builds, as the buildbots are doing
release builds. A follow-up to r1719056.

[Note from the future: Corrected in r1719072.]

* subversion/libsvn_delta/branch_compat.c
  (pathrev_str,
   hash_keys_str,
   insert_change,
   drive_changes_r): Don't make debugging info conditional on SVN_DEBUG.
</msg>
</logentry>
<logentry
   revision="1719066">
<author>ivan</author>
<date>2015-12-10T11:38:31.051417Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_subr/io-test.c</path>
</paths>
<msg>Add unit test for svn_io_read_length_line() function.

* subversion/tests/libsvn_subr/io-test.c
  (test_read_length_line): New.
  (test_funcs): Add test_read_length_line() to list.
</msg>
</logentry>
<logentry
   revision="1719056">
<author>julianfoad</author>
<date>2015-12-10T10:47:53.841558Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Add some debugging in 'svnmover' compatibility code to try to diagnose
failures that show up on some buildbots but not on my system.

* subversion/libsvn_delta/branch_compat.c
  (pathrev_str,
   hash_keys_str,
   change_node_str): New.
  (insert_change,
   drive_changes_r): Print debugging info if there's an assertion failure.</msg>
</logentry>
<logentry
   revision="1718923">
<author>ivan</author>
<date>2015-12-09T17:41:52.323634Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/commit.c</path>
</paths>
<msg>Use existing helper to simplify code a bit.

* subversion/libsvn_repos/commit.c
  (add_file_or_directory): Use svn_cstring_skip_prefix() instead of strncmp().
</msg>
</logentry>
<logentry
   revision="1718913">
<author>julianfoad</author>
<date>2015-12-09T17:03:53.595925Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
</paths>
<msg>* tools/dev/svnmover/svnmover.c
  (branch_diff_r): Following r1718900, restore the ability to diff a subtree.</msg>
</logentry>
<logentry
   revision="1718912">
<author>rhuijben</author>
<date>2015-12-09T17:03:15.472990Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_props.h</path>
</paths>
<msg>* subversion/include/svn_props.h
  Add some missing @since info.
</msg>
</logentry>
<logentry
   revision="1718907">
<author>julianfoad</author>
<date>2015-12-09T16:58:13.953057Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/element.c</path>
</paths>
<msg>* subversion/libsvn_delta/element.c
  (svn_eid__hash_sorted_first,
   svn_eid__hash_sorted_next): Tweak a cast to avoid a 'discarding const'
    warning that GCC can produce (even though the warning was poor
    because the code only used the pointer for reading).
</msg>
</logentry>
<logentry
   revision="1718900">
<author>julianfoad</author>
<date>2015-12-09T16:44:39.234404Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
</paths>
<msg>In 'svnmover', rework the 'diff' code a little.

* tools/dev/svnmover/svnmover.c
  (subtree_diff_r): Take branch state objects instead of 'subtree' objects.
  (branch_diff_r): Track the change.</msg>
</logentry>
<logentry
   revision="1718820">
<author>philip</author>
<date>2015-12-09T11:36:51.902470Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/configure.ac</path>
</paths>
<msg>* configure.ac: Add -Wno-unused-const-variable as we use const variables
   in several internal header files and recent gcc will issue warnings.
</msg>
</logentry>
<logentry
   revision="1718809">
<author>philip</author>
<date>2015-12-09T10:47:43.137914Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_delta/element.c</path>
</paths>
<msg>* subversion/libsvn_delta/element.c
  (svn_element__payload_invariants): Tweak conditionals to avoid
   compiler warning.
</msg>
</logentry>
<logentry
   revision="1718639">
<author>rhuijben</author>
<date>2015-12-08T15:53:37.640726Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/commit.c</path>
</paths>
<msg>Revert r1718566 until I investigated the ruby/Windows problem.</msg>
</logentry>
<logentry
   revision="1718572">
<author>philip</author>
<date>2015-12-08T11:36:18.311421Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnfsfs_tests.py</path>
</paths>
<msg>Fix svnfsfs_tests.py --fsfs-sharding=N --fsfs-packing FAIL.

* subversion/tests/cmdline/svnfsfs_tests.py
  (load_index_sharded): Always pack because --fsfs-packing does not
   trigger packing in this particular test since r1 is created before
   the shard size is modified.
</msg>
</logentry>
<logentry
   revision="1718567">
<author>rhuijben</author>
<date>2015-12-08T11:18:46.114563Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/status.c</path>
</paths>
<msg>* subversion/mod_dav_svn/status.c
  (includes): Include &lt;process.h&gt; if available.
  (dav_svn__status): Produce process-id on Windows.
</msg>
</logentry>
<logentry
   revision="1718566">
<author>rhuijben</author>
<date>2015-12-08T11:14:23.871567Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/commit.c</path>
</paths>
<msg>In the libsvn_repos commit handling: Use modern uri functions instead
of a completely nonstandard form for relpath calculations.

* subversion/libsvn_repos/commit.c
  (edit_baton): Store url in canonical form.
  (add_file_or_directory): Ensure copyfrom_path is in canonical form.
    Use standard functions.
  (svn_repos_get_commit_editor5): Canonicalize incoming url.
</msg>
</logentry>
<logentry
   revision="1718484">
<author>philip</author>
<date>2015-12-07T22:25:20.101904Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/status.c</path>
</paths>
<msg>* subversion/mod_dav_svn/status.c: Include unistd.h in the manner
   used in other files.

Patch by: kotkov
</msg>
</logentry>
<logentry
   revision="1718358">
<author>kotkov</author>
<date>2015-12-07T13:58:10.076092Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/CHANGES</path>
</paths>
<msg>* CHANGES: Populate the 1.8.15 and 1.9.3 sections.
</msg>
</logentry>
<logentry
   revision="1718269">
<author>kotkov</author>
<date>2015-12-07T09:51:16.356013Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
</paths>
<msg>* subversion/mod_dav_svn/util.c
  (request_body_to_string): Defer the actual memory allocation to the
   moment when are ready to read the request body from the buckets.
</msg>
</logentry>
<logentry
   revision="1718267">
<author>kotkov</author>
<date>2015-12-07T09:48:45.660279Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>Make the string unmarshalling code in libsvn_ra_svn resilient against
theoretically possible data corruptions.

* subversion/libsvn_ra_svn/marshal.c
  (read_string): Adjust the conditions under which we use a shortcut.
</msg>
</logentry>
<logentry
   revision="1718167">
<author>kotkov</author>
<date>2015-12-06T12:02:00.711575Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_ra_local/ra_plugin.c</path>
</paths>
<msg>Disable zero-copy code path for ra_local update reporters.

The known and documented limitation of svn_repos_begin_report3() is that
with zero-copy enabled, the delta editor callbacks cannot access FSFS
or use Subversion caches directly.  This limitation comes from the fact
that sending delta using the zero-copy code path happens from within a cache
access wrapper — that is, while holding the lock.  If a particular delta
consumer happens to access or invalidate the cache, bad things could happen,
spanning from UB due to accessing a dangling pointer to a deadlock caused by
an attempt to take a non-recursive (blocking) lock, that has already been
taken by the same thread.

Within ra_local, we cannot be sure that arbitrary callers of our public
API, namely, svn_ra_do_update3(), svn_ra_do_switch3() or svn_ra_do_status2(),
are aware of this limitation and pass-in the delta editor that doesn't access
FSFS or caches — because everything happens locally and all operations that
use the FS layer have a chance of using the cache.

* subversion/libsvn_ra_local/ra_plugin.c
  (make_reporter): Pass 0 as zero_copy_limit when creating the update
   reporter.
</msg>
</logentry>
<logentry
   revision="1718135">
<author>brane</author>
<date>2015-12-05T23:28:02.406991Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dist/README.advisory</path>
</paths>
<msg>* tools/dist/README.advisory: Duh; can't make a single commit without typos.
</msg>
</logentry>
<logentry
   revision="1718134">
<author>brane</author>
<date>2015-12-05T23:22:20.138044Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/tools/dist/README.advisory</path>
<path
   text-mods="true"
   kind="file"
   action="A"
   prop-mods="true">/subversion/trunk/tools/dist/advisory.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dist/security/mailinglist.py</path>
</paths>
<msg>Finally wrote the script for sending advisory mails.

* tools/dist/advisory.py: New; the all-in-one script.
* tools/dist/README.advisory: Instructions for using said script.

* tools/dist/security/mailinglist.py:
   Tweak interface to match the other scripts in this module.
</msg>
</logentry>
<logentry
   revision="1717962">
<author>julianfoad</author>
<date>2015-12-04T13:35:09.521201Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
</paths>
<msg>Revert a tweak commited accidentally in r1717957.

* subversion/libsvn_delta/branch.c
  (svn_branch__txn_get_branch_by_id): Remove the extra 'return'.</msg>
</logentry>
<logentry
   revision="1717957">
<author>julianfoad</author>
<date>2015-12-04T12:56:31.313490Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.h</path>
</paths>
<msg>A small step towards making 'svnmover merge' operate into a new temporary
txn first.

* subversion/trunk/subversion/libsvn_delta/branch.c
  (svn_branch__txn_get_branch_by_id): Tweak to allow setting a breakpoint on
    a null return. (Committed accidentally.)

* tools/dev/svnmover/svnmover.h
  (svnmover_branch_merge): Take the branch to be edited as a parameter,
    instead of making edits in the 'target' branch.

* tools/dev/svnmover/merge3.c
  (merge_subbranch,
   branch_merge_subtree_r,
   svnmover_branch_merge): Same.

* tools/dev/svnmover/svnmover.c
  (do_switch,
   do_merge): Update callers: for now, just pass the target branch as the
    branch to be edited.
  (execute): Enforce that the specified target of a merge must be the
    working copy, not a revision.
</msg>
</logentry>
<logentry
   revision="1717951">
<author>julianfoad</author>
<date>2015-12-04T12:28:07.952503Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>* subversion/libsvn_delta/branch_compat.c
  (convert_branch_to_paths): To ease debugging and understanding, don't
    insert entries for subbranch-root elements and then hope they get
    overwritten by the corresponding inner branch root element.
</msg>
</logentry>
<logentry
   revision="1717949">
<author>julianfoad</author>
<date>2015-12-04T12:23:33.512300Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_nested.c</path>
</paths>
<msg>In 'svnmover', allow a couple of nested-branching functions to operate on a
non-flat branch hierarchy without raising an assertion failure.

The specific case this enables is where a branch-root element points to a
nested branch that doesn't currently exist. No test currently requires this,
but it makes the functions more widely applicable for future use.

* subversion/libsvn_delta/branch_nested.c
  (svn_branch__get_immediate_subbranch_eids): New, extracted...
  (svn_branch__get_immediate_subbranches): ... from here.
  (svn_branch__get_subtree,
   svn_branch__find_nested_branch_element_by_relpath): Use it, and ignore
    any subbranch-root element that points to a nonexistent nested branch
    instead of raising an assertion failure.
</msg>
</logentry>
<logentry
   revision="1717919">
<author>brane</author>
<date>2015-12-04T10:00:12.413119Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="A"
   prop-mods="true">/subversion/trunk/tools/dist/security/mailinglist.py</path>
</paths>
<msg>Add parser for the advisory mail recipients.

* tools/dist/security/mailinglist.py: New.
</msg>
</logentry>
<logentry
   revision="1717889">
<author>jamessan</author>
<date>2015-12-04T03:03:44.502812Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/COMMITTERS</path>
</paths>
<msg>* COMMITTERS: Add myself (jamessan) as a full committer
</msg>
</logentry>
<logentry
   revision="1717887">
<author>rhuijben</author>
<date>2015-12-04T00:58:20.188363Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db.c</path>
</paths>
<msg>* subversion/libsvn_wc/wc_db.c
  (relocate_txn): Add missing newline. Note a few more limitations.
</msg>
</logentry>
<logentry
   revision="1717885">
<author>rhuijben</author>
<date>2015-12-04T00:40:50.671639Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_wc/wc_db.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_wc/wc-queries.sql</path>
</paths>
<msg>Remove some dead code from libsvn_wc. We always use the function that
also looks in parent directories instead of this function that gives
just a result when the node itself has the data.

* subversion/libsvn_wc/wc-queries.sql
  (STMT_SELECT_IPROPS): Remove unused query.

* subversion/libsvn_wc/wc_db.c
  (db_read_cached_iprops,
   svn_wc__db_read_cached_iprops): Remove functions.
</msg>
</logentry>
<logentry
   revision="1717878">
<author>rhuijben</author>
<date>2015-12-03T23:40:10.405778Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>* subversion/libsvn_ra_svn/client.c
  (parse_iproplist): Following up on r1717875, remove some unneeded coded and
    reinstate copying path to the result_pool.
</msg>
</logentry>
<logentry
   revision="1717875">
<author>rhuijben</author>
<date>2015-12-03T23:34:57.809126Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/inherited_props.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>Following up on r1717874, make all ra layers consistently report inherited
properties in the documented way.

This makes ra_svn and ra_serf against new servers report the properties in
the documented way and the way ra_local already reported these.

Which form ra_serf reported before this patch depended on the server
capabilities... If it could use the optimized request it reported like
ra_svn, if not like ra_local.

* subversion/libsvn_ra_serf/inherited_props.c
  (iprops_closed): Stop adding the repository url in output arguments in
    unexpected ways.

* subversion/libsvn_ra_svn/client.c
  (parse_iproplist): Stop adding the repository url in output arguments
    when it is documented that we shouldn't do this.
</msg>
</logentry>
<logentry
   revision="1717874">
<author>rhuijben</author>
<date>2015-12-03T23:25:25.639292Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_client/mtcc-test.c</path>
</paths>
<msg>Write regression test for inherited property issue I just discovered.
Currently this test passes for ra_local... and fails for ra_serf and ra_svn.

And our code doesn't notice any of this because
svn_path_url_add_component2() doesn't care which of the two forms is used.

* subversion/tests/libsvn_client/mtcc-test.c
  (test_iprops_path_format): New test.
  (test_list): Add test_iprops_path_format.
</msg>
</logentry>
<logentry
   revision="1717873">
<author>stefan2</author>
<date>2015-12-03T23:15:39.377852Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c</path>
</paths>
<msg>Follow-up to 1717869: Second attempt to fix the compile error with VC .

* subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c
  (compare_0_length_rep): When in doubt, use macros.</msg>
</logentry>
<logentry
   revision="1717871">
<author>stefan2</author>
<date>2015-12-03T23:05:05.834923Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c</path>
</paths>
<msg>Follow-up to 1717869: Try to fix the compile error with VC .

* subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c
  (compare_0_length_rep): Add few more 'const's into the mix.</msg>
</logentry>
<logentry
   revision="1717867">
<author>stefan2</author>
<date>2015-12-03T22:56:01.309339Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c</path>
</paths>
<msg>Add a test for why r1712927 was wrong.

* subversion/tests/libsvn_fs_fs/fs-fs-pack-test.c
  (compare_0_length_rep): New test case.
  (test_funcs): Register new test.</msg>
</logentry>
<logentry
   revision="1717864">
<author>stefan2</author>
<date>2015-12-03T22:54:07.758170Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
</paths>
<msg>Revert r1712927 because that check is actually required.</msg>
</logentry>
<logentry
   revision="1717847">
<author>rhuijben</author>
<date>2015-12-03T21:03:33.240620Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/configure.ac</path>
</paths>
<msg>* trunk/configure.ac
  Fix message to reflect reality (since before 1.0).
</msg>
</logentry>
<logentry
   revision="1717793">
<author>julianfoad</author>
<date>2015-12-03T16:09:01.518424Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
</paths>
<msg>A minor tweak in 'svnmover'.

* tools/dev/svnmover/merge3.c
  (branch_merge_subtree_r): Simplify, and lose an obsolete comment.</msg>
</logentry>
<logentry
   revision="1717785">
<author>julianfoad</author>
<date>2015-12-03T15:55:55.023354Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_delta/element.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_element.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/branch_nested.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_branch_impl.h</path>
</paths>
<msg>In 'svnmover', tweak the 'branch state' API to slightly simplify both the
implementation and some callers.

* subversion/include/private/svn_branch.h
  (svn_branch__state_set_element): New.

* subversion/include/private/svn_branch_impl.h
  (svn_branch__state_v_set_element_t): New.
  (svn_branch__state_v_alter_one_t,
   svn_branch__state_v_delete_one_t): Delete.
  (svn_branch__state_vtable_t): Replace 'alter_one' and 'delete_one' with
    'set_element'.

* subversion/include/private/svn_element.h,
  subversion/libsvn_delta/element.c
  (svn_element__tree_set): Constify the input.

* subversion/libsvn_delta/branch.c
  (branch_map_set): Constify the input.
  (branch_state_delete_one,
   branch_state_alter): Delete.
  (branch_state_set_element,
   svn_branch__state_set_element): New.
  (svn_branch__state_alter_one,
   svn_branch__state_delete_one): Change implementations to forward to
    svn_branch__state_set_element.
  (branch_state_create): Update the vtable.
  (svn_branch__map_add_subtree,
   svn_branch__state_parse): Update callers.

* subversion/libsvn_delta/branch_nested.c
  (branch_instantiate_elements): Use the new method. Add a missing SVN_ERR().

* tools/dev/svnmover/merge3.c
  (branch_merge_subtree_r): Use the new method.

* tools/dev/svnmover/svnmover.c
  (branch_elements_replay,
   update_wc_base_r): Use the new method.
</msg>
</logentry>
<logentry
   revision="1717778">
<author>julianfoad</author>
<date>2015-12-03T14:59:31.855113Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/svnmover.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
</paths>
<msg>In 'svnmover', improve how we diff and merge subtrees.

When merging a subtree, notice all changes to each element that is in any of
the three subtrees. In other words, for an element that is present in only
the source or only the target subtree, don't ignore any changes that may
have happened to that element on the other side of the merge, even though it
is outside the given subtrees on that side. Add a regression test for this.

When merging an element that is the branch root in one or two of the three
(YCA, source, target) inputs, but is a non-root element in others, ignore
that element's parentage. Otherwise, if we try to merge that difference in
parentage, we would mess up the tree structure of the target branch.
svnmover_tests.py 16 "merge from subbranch to subtree" covers this case, and
would fail if only the "notice all changes" change above were committed.

* tools/dev/svnmover/merge3.c
  (is_branch_root_element): New, copied from svnmover.c.
  (branch_merge_subtree_r): Diff the elements in the union of all three
    subtrees, not just those in each pair of subtrees.

* tools/dev/svnmover/svnmover.h
  (svnmover_element_differences): Take the set of elements to diff as an
    input. Allow other inputs to be null.

* tools/dev/svnmover/svnmover.c
  (svnmover_element_differences): Take the set of elements to diff as an
    input. Allow other inputs to be null.
  (txn_is_changed): Update caller, passing null.
  (branch_elements_replay): Rename from 'subtree_replay'. Take the set of
    elements to diff as an input. Simplify.
  (svn_branch__replay,
   update_wc_base_r,
   subtree_diff): Update callers, passing null.
  (show_subtree_diff): Update the doc string.

* subversion/tests/cmdline/svnmover_tests.py
  (merge_move_into_subtree): New test.
  (test_list): Run it.
</msg>
</logentry>
<logentry
   revision="1717607">
<author>philip</author>
<date>2015-12-02T11:17:12.339179Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnmover_tests.py
  (simple_branch): Tweak expectation, still XFAIL.
</msg>
</logentry>
<logentry
   revision="1717592">
<author>rhuijben</author>
<date>2015-12-02T09:25:46.786704Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
</paths>
<msg>Make two more fs vtable pointers constant.

* subversion/libsvn_fs/fs-loader.h
  (svn_fs_t,
   svn_fs_txn_t): Do that here.
</msg>
</logentry>
<logentry
   revision="1717577">
<author>rhuijben</author>
<date>2015-12-02T07:48:14.851800Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/configure.ac</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra/ra_loader.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build/generator/gen_win_dependencies.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_local/ra_plugin.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svn_private_config.hw</path>
</paths>
<msg>Rename the ill-defined SVN_LIBSVN_CLIENT_LINKS_* defines to an
easier to maintain SVN_LIBSVN_RA_LINKS_*. LIBSVN_CLIENT didn't
link any of this since well before 1.0.

* trunk/build/generator/gen_win_dependencies.py
* trunk/configure.ac
* trunk/subversion/libsvn_ra/ra_loader.c
* trunk/subversion/libsvn_ra_local/ra_plugin.c
* trunk/subversion/svn_private_config.hw
  Update references.
</msg>
</logentry>
<logentry
   revision="1717575">
<author>rhuijben</author>
<date>2015-12-02T07:37:53.869276Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.h</path>
</paths>
<msg>Constify a few vtable pointers in the internal fs api.

* subversion/libsvn_fs/fs-loader.h
  (svn_fs_root_t,
   svn_fs_history_t,
   svn_fs_id_t): Mark vtable const.
</msg>
</logentry>
<logentry
   revision="1717574">
<author>rhuijben</author>
<date>2015-12-02T07:35:18.224924Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra/ra_loader.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_ra/ra_loader.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_local/ra_plugin.c</path>
</paths>
<msg>Extend and cleanup the ra api a bit to allow ra session implementations to
open other ra sessions. (This is similar to how the fs layer receives a
pointer to svn_fs_openX())

The ra-git branch will use this to implement ra_git by passing most of the
ra functions to an ra_local session to the local git repository.

* subversion/libsvn_ra/ra_loader.c
  (svn_ra_open4,
   svn_ra__dup_session): Call set_svn_ra_open.

* subversion/libsvn_ra/ra_loader.h
  (svn_ra__open_func_t): New prototype.
  (svn_ra__vtable_t): Introduce set_svn_ra_open. Move experimental functions
    to the end of the list.

* subversion/libsvn_ra_local/ra_plugin.c
  (ra_local_vtable): Update table. Document missing items.

* subversion/libsvn_ra_serf/serf.c
  (serf_vtable): Update table. Document missing items.

* subversion/libsvn_ra_svn/client.c
  (ra_svn_vtable): Update table. Document missing items.
</msg>
</logentry>
<logentry
   revision="1717485">
<author>stefan2</author>
<date>2015-12-01T18:15:51.578080Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Switch the header of packed FSX revprops from decimal numbers to the 7/8b
integer encoding.

* subversion/libsvn_fs_x/revprops.c
  (parse_packed_revprops): We can parse directly from the uncompressed
                           buffer but we must always parse the whole header
                           now because there is no way to skip to its end.
  (write_encoded_uint): New utility.
  (serialize_revprops_header): Write the simpler header format now.</msg>
</logentry>
<logentry
   revision="1717453">
<author>stefan2</author>
<date>2015-12-01T16:19:35.676211Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Follow-up to r1717438: Make sure the revprop contents always remains valid
as long as the props hash itself.

Reported by: philip

* subversion/libsvn_fs_x/revprops.c
  (read_non_packed_revprop): Copy the contents string into the result pool
                             before building the props hash upon it.
</msg>
</logentry>
<logentry
   revision="1717438">
<author>stefan2</author>
<date>2015-12-01T13:33:19.214349Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>In FSX, use the new proplist serialization for revprops as well.

* subversion/libsvn_fs_x/fs_x.c
  (write_revision_zero): Create revprop for r0 using the new API.

* subversion/libsvn_fs_x/revprops.c
  (parse_revprop,
   write_non_packed_revprop,
   write_packed_revprop): Call the new internal API instead of
                          the old hash serializer.

* subversion/libsvn_fs_x/transaction.c
  (get_txn_proplist): Call the new proplist parser and make the
                      function signature more suitable for that.
  (set_txn_proplist): Call the new serializer.
  (svn_fs_x__change_txn_props): Update caller.
  (write_final_revprop): Call the new serializer.
  (svn_fs_x__txn_proplist): Update caller.</msg>
</logentry>
<logentry
   revision="1717430">
<author>stefan2</author>
<date>2015-12-01T13:20:56.638392Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
</paths>
<msg>* subversion/libsvn_fs_x/cached_data.c
  (svn_fs_x__get_proplist): Minor simplification based on the fact that
                            the in-txn case has already been covered.</msg>
</logentry>
<logentry
   revision="1717429">
<author>philip</author>
<date>2015-12-01T13:19:50.458176Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnmover_tests.py
  (simple_branch): New XFAIL test to show bug in compatibility layer.
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1717427">
<author>stefan2</author>
<date>2015-12-01T13:15:06.037429Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/low_level.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_error_codes.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/low_level.c</path>
</paths>
<msg>In FSX, introduce a denser and easier to parse on-disk representation
for property lists.  In a first step, use it for node properties.

* subversion/include/svn_error_codes.h
  (SVN_ERR_FS_CORRUPT_PROPLIST): Define a new parser error code.

* subversion/libsvn_fs_x/low_level.h
  (svn_fs_x__parse_properties,
   svn_fs_x__write_properties): Declare new internal (de-)serialization APIs.

* subversion/libsvn_fs_x/low_level.c
  (svn_fs_x__parse_properties,
   svn_fs_x__write_properties): Implement them.

* subversion/libsvn_fs_x/cached_data.c
  (svn_fs_x__get_proplist): Call the new APIs to parse the prop lists.
                            Use the SVN_ERR_W macro instead of local code
                            for decorating error objects.

* subversion/libsvn_fs_x/transaction.c
  (svn_fs_x__set_proplist,
   write_hash_to_stream): Write node properties in the new format.</msg>
</logentry>
<logentry
   revision="1717420">
<author>julianfoad</author>
<date>2015-12-01T13:04:46.396035Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnmover_tests.py
  (see_the_revision_just_committed): New test, XFail.
  (test_list): Run it.</msg>
</logentry>
<logentry
   revision="1717409">
<author>philip</author>
<date>2015-12-01T12:33:10.404397Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnmover_tests.py
  (test_svnmover): Split log verification into the new function ...
  (test_svnmover_verify_log): ... here.
  (replace_via_rm_cp): New XFAIL test to show bug in compatibility
   layer.
</msg>
</logentry>
<logentry
   revision="1717356">
<author>stefan2</author>
<date>2015-12-01T00:03:55.232852Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>Fix the console test output in GLOBAL_SCHEDULER mode.

* build/run_tests.py
  (TestHarness._run_global_sheduler): Make sure the "Tests to execute"
                                      line is shown before the first
                                      results come in.
</msg>
</logentry>
<logentry
   revision="1717355">
<author>stefan2</author>
<date>2015-11-30T23:56:55.163885Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>Minor tuning of the GLOBAL_SCHEDULER test script option.  This saves
about 5% wallclock time on my workstation.

* build/run_tests.py
  (TestHarness._run_global_sheduler): Cause very long C test suites
                                      to be schedules early on.</msg>
</logentry>
<logentry
   revision="1717350">
<author>stefan2</author>
<date>2015-11-30T23:33:56.443394Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
</paths>
<msg>Sync'ing FSX with FSFS: Port minor optimizations.

This merges r1711582, r1715793, r1716047 and r1716974 from FSFS to FSX.
The usual text conflicts due to renaming and refactoring had to be resolved.
</msg>
</logentry>
<logentry
   revision="1717349">
<author>stefan2</author>
<date>2015-11-30T23:25:16.463201Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/tree.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/index.c</path>
</paths>
<msg>Sync'ing FSX with FSFS: Merge error and overflow checking related changes.

This merges revisions r1711672, r1715947, r1716784, r1716973, r1717332 and
r1717334 from FSFS to FSX.  The usual text conflicts due to renaming and
refactoring had to be resolved.</msg>
</logentry>
<logentry
   revision="1717343">
<author>stefan2</author>
<date>2015-11-30T22:58:52.677140Z</date>
<paths>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk/subversion/libsvn_fs_x</path>
</paths>
<msg>Sync'ing FSX with FSFS: Block changes not relevant for FSX.

* subversion/libsvn_fs_x
  (svn:mergeinfo): Block r1709799, 1710017, 1710359, 1712927 and 1716067.</msg>
</logentry>
<logentry
   revision="1717339">
<author>stefan2</author>
<date>2015-11-30T22:34:04.198030Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>Make ra_svn handle the theoretical case of running on a system with
segmented memory and sending strings (paths and property values)
whose size approaches APR_SIZE_MAX.

The main benefit here is that the code becomes more resilient against
faulty string data being passed in.  As a result, the application will
(probably) segfault upon read instead or overwriting data before either
there is a read or a write segfault.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn__write_ncstring,
   write_tuple_string_opt_list,
   svn_ra_svn__write_data_log_changed_path): Reformulate the send buffer
                                             overflow checks to prevent
                                             arithmetic overflow as well.</msg>
</logentry>
<logentry
   revision="1717338">
<author>stefan2</author>
<date>2015-11-30T22:15:00.406972Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Fix insertion of very large items into the membuffer cache on machines
with segmented memory. 

* subversion/libsvn_subr/cache-membuffer.c
  (membuffer_cache_set_internal): With segmented memory, item size + key
                                  length might actually overflow size_t.</msg>
</logentry>
<logentry
   revision="1717337">
<author>stefan2</author>
<date>2015-11-30T22:11:44.731457Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Fix an inefficiency in the membuffer cache when the item to insert gets
close to APR_SIZE_MAX / 4, e.g. about 1GB on 32 bit systems.

Prior to this fix, very large items would often be rejected early on and
slightly smaller ones caused to large amounts of higher priority data to
be evicted from the cache.

* subversion/libsvn_subr/cache-membuffer.c
  (ensure_data_insertable_l2): Prevent large items from being rejected
                               too early due to overflow.  Also, allow
                               for MOVED_SIZE to exceed 4GB on 32 bit
                               so we properly limit work &amp; eviction.</msg>
</logentry>
<logentry
   revision="1717334">
<author>stefan2</author>
<date>2015-11-30T21:52:29.630570Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/index.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
</paths>
<msg>Complete overflow checking working in FSFS.

While the principle is the same as in r1714372 and r1717332, the changes
here were less straight-forward.

* subversion/libsvn_fs_fs/cached_data.c
  (get_contents_from_windows): Rewrite the limiter code such that no
                               arithmetic overflow may occur.

* subversion/libsvn_fs_fs/index.c
  (read_entry): Add another overflow check to ensure that the frequently
                used "offset + size" expression never causes an overflow.

* subversion/libsvn_fs_fs/revprops.c
  (svn_fs_fs__pack_revprops_shard): Extend the overflow check to cover all
                                    theoretical edge cases.</msg>
</logentry>
<logentry
   revision="1717332">
<author>stefan2</author>
<date>2015-11-30T21:36:20.622871Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/base64.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/string.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/stream.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/index.c</path>
</paths>
<msg>Continue work started in r1714372: 
Fix a number of potential overflow conditions on platforms where pointers
may be allocated very close to the end of address space, such as WoW64.
Same for systems with 32 bit file offsets.

There is no direct way to trigger the respective overflow conditions but
this patch makes the code more resilient against repository corruption and
failures higher up in the call stack.

* subversion/libsvn_fs_fs/cached_data.c
  (block_read): Instead of "base + x &lt; max", we must check "max - base &gt; x"
                to prevent overflows under all circumstances.

* subversion/libsvn_fs_fs/index.c
  (svn_fs_fs__l2p_get_max_ids): Same.

* subversion/libsvn_fs_fs/pack.c
  (pack_log_addressed): Same.

* subversion/libsvn_fs_fs/revprops.c
  (parse_packed_revprops): Same.

* subversion/libsvn_subr/base64.c
  (encode_bytes,
   decode_bytes): Same.

* subversion/libsvn_subr/stream.c
  (svn_stringbuf_from_stream): Same.

* subversion/libsvn_subr/string.c
  (svn_cstring__match_length): Same. </msg>
</logentry>
<logentry
   revision="1717154">
<author>danielsh</author>
<date>2015-11-30T03:16:03.961946Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>* subversion/include/svn_fs.h
  (svn_fs_node_created_rev): Clarify documentation.</msg>
</logentry>
<logentry
   revision="1717153">
<author>danielsh</author>
<date>2015-11-30T03:13:25.658899Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/COMMITTERS</path>
</paths>
<msg>* COMMITTERS: Reflect that Andreas Stieger is now a full committer.</msg>
</logentry>
<logentry
   revision="1716974">
<author>ivan</author>
<date>2015-11-28T13:49:42.121772Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/transaction.c
  (allocate_item_index): Open itemidx file without APR buffering since we're
   going to perform just one read and one write I/O operation.
</msg>
</logentry>
<logentry
   revision="1716973">
<author>ivan</author>
<date>2015-11-28T13:47:14.113011Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Add detection of some very unlikely itemidx corruption in FSFS transaction.

* subversion/libsvn_fs_fs/transaction.c
  (allocate_item_index): Check that we hit EOF when reading itemidx file.
</msg>
</logentry>
<logentry
   revision="1716895">
<author>julianfoad</author>
<date>2015-11-27T16:36:45.135191Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/notes/move-tracking/element-model/CommitBranch1.pdf</path>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/notes/move-tracking/element-model/MergeBranch1.pdf</path>
</paths>
<msg>Add a couple of move-tracking diagrams.

* notes/move-tracking/element-model/CommitBranch1.pdf,
  notes/move-tracking/element-model/MergeBranch1.pdf
    New.</msg>
</logentry>
<logentry
   revision="1716874">
<author>philip</author>
<date>2015-11-27T13:33:01.180660Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/ra.c</path>
</paths>
<msg>* tools/dev/svnmover/ra.c (read_rev_prop): Use non-deprecated API.
</msg>
</logentry>
<logentry
   revision="1716831">
<author>philip</author>
<date>2015-11-27T11:17:38.004512Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/svn-sparc-solaris/svncheck.sh</path>
</paths>
<msg>* tools/buildbot/slaves/svn-sparc-solaris/svncheck.sh: Fix syntax error.
</msg>
</logentry>
<logentry
   revision="1716828">
<author>rhuijben</author>
<date>2015-11-27T11:01:49.296815Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_ra/ra-test.c
  (commit_empty_last_change): Fix minor const issue, not detected by my
    compiler in plain C mode.
</msg>
</logentry>
<logentry
   revision="1716827">
<author>philip</author>
<date>2015-11-27T10:53:07.981204Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/svn-sparc-solaris/svncheck.sh</path>
</paths>
<msg>* tools/buildbot/slaves/svn-sparc-solaris/svncheck.sh:
   Enable GLOBAL_SCHEDULER for trunk builds.
</msg>
</logentry>
<logentry
   revision="1716820">
<author>rhuijben</author>
<date>2015-11-27T10:06:13.749067Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/.editorconfig</path>
<path
   prop-mods="true"
   text-mods="false"
   kind="dir"
   action="M">/subversion/trunk</path>
</paths>
<msg>Store an editor configuration for another set of editors and update
svn:ignore for another Visual Studio update.

* .
  (svn:ignore): Just ignore each and every file named after the VS solution.
  
* .editorconfig
  New file
</msg>
</logentry>
<logentry
   revision="1716812">
<author>rhuijben</author>
<date>2015-11-27T09:47:27.211907Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/svn_test.h</path>
</paths>
<msg>* subversion/tests/svn_test.h
  (SVN_TEST_INT_ASSERT): Following up on r1716808, remove unneeded '\n'.
</msg>
</logentry>
<logentry
   revision="1716809">
<author>rhuijben</author>
<date>2015-11-27T09:25:33.940556Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Following up on r1716579, add a test to verify that we can copy from
a no-op revisions in later revisions, and that the history is kept
up to date.

On the FS layer in BDB this will currently be represented as a copy
from something later than what the transaction is based on.
(But everything works as expected)

* subversion/tests/libsvn_ra/ra-test.c
  (AA_receiver): New function.
  (commit_empty_last_change): Extend test.
</msg>
</logentry>
<logentry
   revision="1716808">
<author>rhuijben</author>
<date>2015-11-27T09:24:41.076250Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/svn_test.h</path>
</paths>
<msg>* subversion/tests/svn_test.h
  (SVN_TEST_INT_ASSERT): New define. Similar to the existing
    SVN_TEST_STRING_ASSERT.
</msg>
</logentry>
<logentry
   revision="1716784">
<author>stefan2</author>
<date>2015-11-26T23:51:27.017526Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/pack.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/revprops.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/revprops.h</path>
</paths>
<msg>Use the appropriate type for revprop and revprop pack sizes in FSFS.

This eliminates type conversions, improving the resiliance against
corrupted data.  In practical terms, we use apr_size_t for all sizes
because we are reading those buffers &amp; proplists into memory whole.

* subversion/libsvn_fs_fs/revprops.h
  (svn_fs_fs__pack_revprops_shard): The fsfs.conf value is i64, so accept
                                    that in our internal API and let the
                                    implementation limit it in one place.

* subversion/libsvn_fs_fs/pack.c
  (synced_pack_shard): Update caller. Don't truncate the configurated
                       limit just yet.

* subversion/libsvn_fs_fs/revprops.c
  (parse_packed_revprops,
   serialize_revprops_header,
   repack_revprops,
   write_packed_revprop): All sizes are apr_size_t instead of apr_off_t.
  (svn_fs_fs__pack_revprops_shard): Same.  Also sanitize the pack file
                                    size limit.</msg>
</logentry>
<logentry
   revision="1716779">
<author>stefan2</author>
<date>2015-11-26T22:43:49.656844Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnrdump_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>Minor test dump / rdump test code improvement.

Suggested by: rhuijben

* subversion/tests/cmdline/svnadmin_tests.py
  (dont_drop_valid_mergeinfo_during_incremental_loads): Use the sandbox API
     to create &amp; manage the temporary dump files. Give them specific name
     prefixes to make debugging easier in case the dump files are dodgy.

* subversion/tests/cmdline/svnrdump_tests.py
  (dont_drop_valid_mergeinfo_during_incremental_svnrdump_loads): Same.</msg>
</logentry>
<logentry
   revision="1716749">
<author>julianfoad</author>
<date>2015-11-26T17:54:57.119264Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/svnmover/svnmover.h</path>
</paths>
<msg>Extend 'svnmover's mixed-revision support to nested branches, and add an
'svnmover info' command to show info about one element, following r1716710.

* tools/dev/svnmover/svnmover.h
  (svnmover_wc_t): Update the comment.

* tools/dev/svnmover/svnmover.c
  (svnmover_wc_set_base_rev,
   svnmover_wc_get_base_rev,
   svnmover_wc_set_base_revs,
   svnmover_wc_get_base_revs,
   update_wc_base): Work with nested branches.
  (wc_checkout,
   find_el_rev_by_rrpath_rev): Update calls to track those changes.
  (action_code_t,
   action_defn_t): Add an 'info' subcommand.
  (do_info): New.
  (execute): Implement the 'info' subcommand.
</msg>
</logentry>
<logentry
   revision="1716742">
<author>rhuijben</author>
<date>2015-11-26T16:45:32.272654Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/commit.c</path>
</paths>
<msg>Mostly revert r1716575, keeping just the comment in apply_textdelta.

* subversion/libsvn_ra_serf/commit.c
  (close_file): Revert r1716575 request scheduling change.
</msg>
</logentry>
<logentry
   revision="1716731">
<author>rhuijben</author>
<date>2015-11-26T16:08:31.271751Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/buildbot/slaves/win32-SharpSvn/svntest-test.cmd</path>
</paths>
<msg>* svntest-test.cmd
  Try to show remaining files in TMP on exit.
</msg>
</logentry>
<logentry
   revision="1716720">
<author>julianfoad</author>
<date>2015-11-26T15:21:07.702472Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
</paths>
<msg>Add a missing copy-constructor: svn_branch__el_rev_id_dup().

* subversion/include/private/svn_branch.h,
  subversion/libsvn_delta/branch.c
  (svn_branch__el_rev_id_dup): New.
</msg>
</logentry>
<logentry
   revision="1716710">
<author>julianfoad</author>
<date>2015-11-26T14:48:49.735052Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
</paths>
<msg>Teach 'svnmover' to support a mixed-revision WC.

The WC storage structure now supports a different base revision for each
element. The 'info-wc' command now shows minimum and maximum base revisions
(if they differ). There is not yet a way to see the base revision of a
specific element.

Commit will now produce a mixed-rev WC: it no longer updates the whole WC.

In order to fully identify a base element with an older revision number, we
will need a way to trace the branch back through history, following any
changes in the branch id.

Bug: The committed revision doesn't get attached to the WC's 'repos' object
(only to the server's 'repos' object) so we then can't access it: e.g.
'update .@HEAD' fails with 'No such revision'.

* tools/dev/svnmover/svnmover.c
  (svnmover_wc_set_base_rev,
   svnmover_wc_get_base_rev,
   svnmover_wc_set_base_revs,
   svnmover_wc_get_base_revs): New.
  (wc_checkout): Initialize the base revision numbers.
  (update_wc_eids,
   update_wc_base): New.
  (wc_commit): Update the WC base to reflect the commit.
  (find_el_rev_by_rrpath_rev): Allow looking up an element in revision
    'BASE'.
  (subtree_diff_r,
   branch_diff_r): Stop reporting a (single) revision number for each side
    of the diff.
  (commit): Tweak a comment.
  (do_commit): Don't update the whole WC after commit.
  (arg_t): Remove the 'revnum' field.
  (execute): Expand the 'info-wc' display to report the minimum and maximum
    base revision numbers. Track the other changes. Add a comment.

* tools/dev/svnmover/svnmover.h
  (svnmover_wc_t): Add storage for the base revision numbers.
</msg>
</logentry>
<logentry
   revision="1716593">
<author>kotkov</author>
<date>2015-11-26T10:18:01.337443Z</date>
<paths>
<path
   prop-mods="true"
   text-mods="true"
   kind="file"
   action="A">/subversion/trunk/subversion/tests/cmdline/mod_dav_svn_tests.py</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/lock_tests.py</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
</paths>
<msg>Fixup the recent solution for issue SVN-4514 by discouraging caching for
requests that include ?r=WORKINGREV, but don't contain ?p=PEGREV in the
url, e.g.:

  https://svn.apache.org/repos/asf/subversion/trunk/README?r=1716593

Results for these requests aren't guaranteed to be stable, since mod_dav_svn
can either immediately return the resource at the revision or trace back the
history to the canonical ?p=PEGREV location.  The result depends on current
state of the repository, and cannot be cached, so make sure we set the
"Cache-Control: max-age=0" header when responding to such requests.

Other possible ?p= and ?r= requests were producing appropriate Cache-Control
headers even before this changeset, and that behavior is left intact:

  https://svn.apache.org/repos/asf/subversion/trunk/README
  https://svn.apache.org/repos/asf/subversion/trunk/README?p=1716593
  https://svn.apache.org/repos/asf/subversion/trunk/README?p=1716593&amp;r=1716593

Add a new test that specifies current behavior of how and when we set the
Cache-Control header, and as well covers the aforementioned ?r= case.

* subversion/mod_dav_svn/repos.c
  (prep_regular): Do not mark the resource with a URL query string as
   'idempotent', unless it specifies a peg revision.

* subversion/tests/cmdline/svntest/main.py
  (create_http_connection): New utility function, factored out from ...

* subversion/tests/cmdline/lock_tests.py
  (http_connection, create_dav_lock_timeout, dav_lock_refresh): ...here.

* subversion/tests/cmdline/mod_dav_svn_tests.py: New file.
</msg>
</logentry>
<logentry
   revision="1716582">
<author>rhuijben</author>
<date>2015-11-26T08:44:02.736716Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/commit.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/commit.c
  (open_root,
   delete_entry): Remove two accidentally added SVN_DBG() calls.
</msg>
</logentry>
<logentry
   revision="1716579">
<author>rhuijben</author>
<date>2015-11-26T08:27:41.034985Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_ra/ra-test.c</path>
</paths>
<msg>Following up on r1716548, add another regression test. Asserting current
behavior.

* subversion/tests/libsvn_ra/ra-test.c
  (commit_empty_last_change): New test.
  (test_funcs): Add commit_empty_last_change.
</msg>
</logentry>
<logentry
   revision="1716575">
<author>rhuijben</author>
<date>2015-11-26T08:05:36.279277Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/ra_serf.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/commit.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
</paths>
<msg>In ra_serf: when a to-be committed file has text and property changes to be
applied, pipeline both requests.

* subversion/libsvn_ra_serf/commit.c
  (apply_textdelta): Add comment noting why the suggested EAGAIN approach
     doesn't work as simple as this.
  (close_file): Pipeline both requests if there are multiple requests. For
     simplicity just wait for the propfind to be done before waiting for
     the put. We have to wait for both anyway.

* subversion/libsvn_ra_serf/ra_serf.h
  (svn_ra_serf__unschedule_handler): Add prototype.

* subversion/libsvn_ra_serf/util.c
  (svn_ra_serf__unschedule_handler): Make library private.
</msg>
</logentry>
<logentry
   revision="1716554">
<author>rhuijben</author>
<date>2015-11-25T22:58:55.282887Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/win-tests.py</path>
</paths>
<msg>Enable global scheduler support in the Windows testrunner.

Apply some tweaks used for http/2 testing.

* win-tests.py
  Add argument, parse argument, pass argument.
  Tweak generated httpd config.
</msg>
</logentry>
<logentry
   revision="1716548">
<author>rhuijben</author>
<date>2015-11-25T21:31:20.094340Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Create simpler reproduction recipe for BDB issue julian found using
svnmover+BDB+ra_serf.

* subversion/tests/libsvn_fs/fs-test.c
  (reopen_trivial_transaction): Extend test.
</msg>
</logentry>
<logentry
   revision="1716464">
<author>philip</author>
<date>2015-11-25T16:22:39.674088Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>Make builddir != srcdir work with global scheduler.

* build/run_tests.py
  (CollectingThread.__init__): Add builddir parameter.
  (CollectingThread.run): Find compiled executables in builddir.
  (TestHarness._run_global_sheduler): Pass builddir.
</msg>
</logentry>
<logentry
   revision="1716450">
<author>rhuijben</author>
<date>2015-11-25T16:01:12.487028Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/mod_dav_svn/lock.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/lock_tests.py</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/tests/cmdline/authz_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/lock.c</path>
</paths>
<msg>Improve error message handling on two lock operations via ra_serf. These
errors still relied on the http reason string for the user visible text.

This fixes a serf/mod_dav TODO and two http/2 test failures.

* subversion/libsvn_ra_serf/lock.c
  (run_locks): Tweak text on 304. This was not unlock specific.
               Prefer 423 text from server if it looks valid.

* subversion/mod_dav_svn/lock.c
  (get_locks): Add another lie to this function, that already has a few.

* subversion/tests/cmdline/authz_tests.py
  (authz_locking): Allow other text. Expecting an unlock error when
    performing an 'svn lock' doesn't make much sense.

* subversion/tests/cmdline/lock_tests.py
  (unlocked_lock_of_other_user): Expect same error on all ra layers.
</msg>
</logentry>
<logentry
   revision="1716405">
<author>stefan2</author>
<date>2015-11-25T13:42:30.470140Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>Follow-up to r1716399:

* build/run_tests.py
  (TestHarness._run_local_schedulers): Fix docstring indentation.</msg>
</logentry>
<logentry
   revision="1716400">
<author>rhuijben</author>
<date>2015-11-25T13:34:52.806472Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/replay.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/serf.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/ra_serf.h</path>
</paths>
<msg>Apply some minor tweaks to libsvn_ra_serf to handle some http/2 cases.

This reduces the number of testfailures to 3 or 5 for me when running
the tests over http/2 with a slightly patched serf trunk.
(2 tests that rely on the http reason text.
 2 tests that somehow hit an httpd limit
 And one segfault/abort in serf triggered by a svnmover test)

* subversion/libsvn_ra_serf/ra_serf.h
  (svn_ra_serf__session_t): Add boolean.

* subversion/libsvn_ra_serf/replay.c
  (svn_ra_serf__replay_range): Implement api for http/2.0 by not implementing
    it. See comment.

* subversion/libsvn_ra_serf/serf.c
  (svn_ra_serf__open): Initialize new var.
  (ra_serf_dup_session): Document that we dup a variable.

* subversion/libsvn_ra_serf/util.c
  (conn_negotiate_protocol): Tweak a few more vars.
  (handle_response): Also detect 2.0
</msg>
</logentry>
<logentry
   revision="1716399">
<author>stefan2</author>
<date>2015-11-25T13:34:41.083746Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build/run_tests.py</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/Makefile.in</path>
</paths>
<msg>Add a --global-scheduler option to the Unix run_tests harness.

The idea is to run not parallelize within the individual Python test
scripts alone but instead to have one global scheduler for all tests.
That significantly improves scalability with large numbers of HW threads:

  MacBook (4C/8T):       140s -&gt; 110s
  Workstation (12C/24T): 100s -&gt;  40s

Note that the consolue output is different in global scheduler mode
and the log files then no longer contain start time stamps.

Because the C tests use their own scheduler, partially to enforce
specific restrictions on parallel execution, schedule whole C test
apps instead of individual C tests.

* build/run_tests.py
  (): Update usage docstring and add missing imports.
  (TestHarness._init_py_tests): Remember the command line for Python tests
                                as well because the global scheduler doesn't
                                load those tests but runs them externally.
  (TestHarness.Job,
   TestHarness.CollectingThread,
   TestHarness.TestSpawningThread): New classes for the global scheduler
                                    functionality.
  (TestHarness._run_global_sheduler): Main routine for the new scheduler.
  (TestHarness._run_local_schedulers): Encapsulates the traditional behavior.
  (TestHarness.run): Run the tests with the selected scheduler.
  (create_parser): Add '-g' / '--global-scheduler' option.

* Makefile.in
  (check): Add GLOBAL_SCHEDULER option.</msg>
</logentry>
<logentry
   revision="1716397">
<author>stefan2</author>
<date>2015-11-25T13:33:48.455955Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build/run_tests.py</path>
</paths>
<msg>Minor refactoring of the Unix run_tests harness.

This is to reduce the code churn for the upcoming feature commit.

* build/run_tests.py
  (TestHarness._process_test_output_line): Factored out from ...
  (TestHarness._run_c_test): ... this one.
  (TestHarness._check_for_unknown_failure): Factored out from ...
  (TestHarness._run_test): ... this one.
</msg>
</logentry>
<logentry
   revision="1716395">
<author>stefan2</author>
<date>2015-11-25T13:32:45.104743Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/authz_tests.py</path>
</paths>
<msg>Make authz Python tests fully work in parallel execution.

* subversion/tests/cmdline/authz_tests.py
  (authz_checkout_test,
   authz_checkout_and_update_test,
   authz_partial_export_test,
   authz_validate,
   authz_switch_to_directory): All these tests tweek their repository
                               configuration and must therefore use
                               private repository copies.
</msg>
</logentry>
<logentry
   revision="1716394">
<author>stefan2</author>
<date>2015-11-25T13:32:19.921219Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnrdump_tests.py</path>
</paths>
<msg>Don't have different tests produce the same files.

* subversion/tests/cmdline/svnrdump_tests.py
  (dont_drop_valid_mergeinfo_during_incremental_svnrdump_loads):
                               Use test-specific dump file names, so they
                               won't overlap with the svnadmin dump tests.</msg>
</logentry>
<logentry
   revision="1716240">
<author>philip</author>
<date>2015-11-24T20:13:02.843447Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_subr/io.c</path>
</paths>
<msg>When getting the default file permissions for a file created outside
the system directory create the necessary temporary files in the
given directory.  This removes the disk IO to TMPDIR during the first
commit made by mod_dav_svn and svnserve processes, all disk IO now
happens in the repositories.

* subversion/libsvn_subr/io.c
  (get_default_file_perms): Create temporary files in given directory.
  (merge_default_file_perms): Add directory parameter.
  (svn_io_open_unique_file3): Pass directory.
</msg>
</logentry>
<logentry
   revision="1716219">
<author>kotkov</author>
<date>2015-11-24T17:23:36.584252Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_repos/repos-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/fs-wrap.c</path>
</paths>
<msg>Don't leave *conflict_p uninitialized if svn_repos_fs_commit_txn() fails
before calling the FS layer.

This function gives the same promises as svn_fs_commit_txn(), which always
sets the conflict variable to either NULL, or to a valid conflict string.
Make sure that we fulfil this contract even if the commit preparation fails
— e.g., when calling pre-commit hook or removing ephemeral txnprops.

* subversion/libsvn_repos/fs-wrap.c
  (svn_repos_fs_commit_txn): Start from setting *conflict_p to NULL.

* subversion/tests/libsvn_repos/repos-test.c
  (commit_aborted_txn, test_funcs): Add a test for this behavior.
</msg>
</logentry>
<logentry
   revision="1716095">
<author>julianfoad</author>
<date>2015-11-24T09:52:44.349161Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/include/private/svn_branch_impl.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/wc.py</path>
</paths>
<msg>In 'svnmover', start tracking complete merges.

Track the source-branch end point of each merge. Add an 'automerge' command
that uses this as the ancestor for the next merge from the same source.

This is a very primitive initial implementation. It only enables each branch
to track complete merges from a single source branch. Complete merges here
refers to completeness in revisions (all revisions up to N, no cherry
picking) and also to the complete tree (no subtree tracking). It overwrites
the previous merge history regardless whether the new merge is from the same
source branch, and regardless whether it is in fact a complete merge.

* subversion/include/private/svn_branch.h
  (svn_branch__rev_bid_equal): New.
  (svn_branch__state_get_merge_ancestor,
   svn_branch__state_set_merge_ancestor): New.

* subversion/include/private/svn_branch_impl.h
  (svn_branch__state_v_get_merge_ancestor_t,
   svn_branch__state_v_set_merge_ancestor_t): New.
  (svn_branch__state_vtable_t): Add the new methods to the vtable.

* subversion/libsvn_delta/branch.c
  (svn_branch__state_priv_t): Add storage for a merge ancestor (just one, so
    far).
  (svn_branch__rev_bid_equal): New.
  (branch_state_get_merge_ancestor,
   branch_state_set_merge_ancestor): New.
  (svn_branch__state_get_merge_ancestor,
   svn_branch__state_set_merge_ancestor): New.
  (branch_state_create): Add the new methods to the vtable.
  (svn_branch__get_default_r0_metadata): Update.
  (merge_history_parse): New.
  (parse_element_line): Take and use a result pool for the results, in order
    to avoid surprises in future.
  (svn_branch__state_parse): Parse the merge history.
  (merge_history_serialize): New.
  (svn_branch__state_serialize): Serialize the merge history.

* subversion/tests/cmdline/svnmover_tests.py
  (reported_mg_diff): New.
  (...everywhere...): Expect a merge-history diff whenever there is a merge.

* subversion/tests/cmdline/svntest/wc.py
  (_re_parse_eid_merge_history): New.
  (State.from_eids): Parse and ignore merge history lines.

* tools/dev/svnmover/merge3.c
  (merge_subbranch): Correct a comment.

* tools/dev/svnmover/svnmover.c
  (rev_bid_str,
   merge_history_diff): New.
  (txn_is_changed): Also check for any change in merge history.
  (svn_branch__replay): Also replay any change in merge history.
  (action_code_t,
   action_defn): Define a new 'automerge' command. Rename a constant.
  (do_merge): Also record the merge history.
  (do_auto_merge): New.
  (branch_diff_r): Also diff the merge history.
  (execute): Expand the 'info-wc' command to show merge history status.
    Implement the 'automerge' command. Track the rename.
</msg>
</logentry>
<logentry
   revision="1716067">
<author>ivan</author>
<date>2015-11-24T08:29:30.663282Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>FSFS: Optimize reading directories in incremental mode a bit: pre-allocate
APR array since we know final directories entry count.

* subversion/libsvn_fs_fs/cached_data.c
  (read_dir_entries): Create ENTRIES here instead of filling caller provided
   array.   
  (get_dir_contents): Adapt calls to read_dir_entries().
</msg>
</logentry>
<logentry
   revision="1716047">
<author>ivan</author>
<date>2015-11-24T07:40:34.116478Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/caching.c</path>
</paths>
<msg>* subversion/libsvn_fs_fs/caching.c
  (svn_fs_fs__initialize_txn_caches): Build txn directory cache prefix using
   one apr_strcat() call. 
</msg>
</logentry>
<logentry
   revision="1715947">
<author>ivan</author>
<date>2015-11-23T20:35:55.763469Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/cached_data.c</path>
</paths>
<msg>Refactor code to use standard error handling pattern. No function changes
intended.

* subversion/libsvn_fs_fs/cached_data.c
  (get_node_revision_body): Use 'if/else if' instead of nested 'if' to handle
   specific error code.
</msg>
</logentry>
<logentry
   revision="1715832">
<author>rhuijben</author>
<date>2015-11-23T14:29:59.134650Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/win-tests.py</path>
</paths>
<msg>* win-tests.py
  (Svnserve.start): Pass the SVN_DBG_STACKTRACES_TO_STDERR environment
    variable to svnserve.exe to get more information on crashes on testruns.
</msg>
</logentry>
<logentry
   revision="1715793">
<author>ivan</author>
<date>2015-11-23T12:41:04.669142Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/transaction.c</path>
</paths>
<msg>Do not read TXN props on every svn_fs_txn_open() in libsvn_fs_fs: FSFS doesn't
use transaction_t.proplist (and never used). This code seems to inherited
from BDB.

FWIW this is responsible for about 5% I/O operations when running testsuite
over http:// protocol on Windows, because mod_dav_svn opens TXN for every
request against transaction.

* subversion/libsvn_fs_fs/fs.h
  (transaction_t): Remove PROPLIST member.

* subversion/libsvn_fs_fs/transaction.c
  (svn_fs_fs__get_txn): Remove call to get_txn_proplist().
</msg>
</logentry>
<logentry
   revision="1715781">
<author>julianfoad</author>
<date>2015-11-23T12:23:57.911259Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
</paths>
<msg>A bug fix and minor tweaks in 'svnmover'.

* tools/dev/svnmover/svnmover.c
  (do_switch): Fix a wrong-pool bug that affected any update or switch
    that raised conflicts.
  (do_merge): New, extracted from execute().
  (do_mkbranch): Rename from 'mk_branch', for consistency.
  (execute): Add an error message when the user asks to resolve a conflict
    but there are no conflicts. Track the above changes.</msg>
</logentry>
<logentry
   revision="1715777">
<author>ivan</author>
<date>2015-11-23T12:10:23.211857Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/config_file.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_subr/config-test.c</path>
</paths>
<msg>Convert assertion failure to error if configuration file contains just one
0xEE character.

* subversion/libsvn_subr/config_file.c
  (parse_context_t): Add HIT_STREAM_EOF member.
  (parser_getc): Set CTX-&gt;HIT_STREAM_EOF to TRUE once we hit end-of-file and
   do not attempt to read from stream after that.
  (skip_bom): Extend SVN_ERR_ASSERT() condition. Check for subsequent BOM
   characters only if we have more than two bytes in buffer remaining.

* subversion/tests/libsvn_subr/config-test.c
  (test_invalid_bom): New test.
  (test_funcs): Add test_invalid_bom test to list.
</msg>
</logentry>
<logentry
   revision="1715740">
<author>ivan</author>
<date>2015-11-23T09:24:14.615658Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/hashdump-test.c</path>
</paths>
<msg>Add test for reading hash from buffered APR file.

* subversion/tests/libsvn_subr/hashdump-test.c
  (hash_gets_stringt, read_hash_buffered_test): New.
  (test_funcs): Add read_hash_buffered_test() to test list.
</msg>
</logentry>
<logentry
   revision="1715551">
<author>ivan</author>
<date>2015-11-21T18:53:14.498006Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/dav_svn.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/repos.c</path>
</paths>
<msg>Resolve issue SVN-4514. Add 'Cache-Control: max-age=604800' for all requests
to resource that are 'idempotent', i.e. target is fully specified in URI and
cannot change. For other requests add 'Cache-Control: max-age=0' to disable
browser's heuristic caching.

* subversion/mod_dav_svn/dav_svn.h
  (dav_resource_private): Add new member IDEMPOTENT.

* subversion/mod_dav_svn/repos.c
  (parse_version_uri): Mark resource as 'idempotent'.
  (prep_regular): Mark resource as 'idempotent' only if revision is specified
   in request URI.
  (is_cacheable): New.
  (set_headers): Use is_cacheable() to determine Cache-Control header value.
   Set Cache-Control for non-existing resources too.
</msg>
</logentry>
<logentry
   revision="1715358">
<author>julianfoad</author>
<date>2015-11-20T13:32:31.209777Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
</paths>
<msg>A follow-up to r1715354.

* tools/dev/svnmover/merge3.c
  (brief_eid_and_name_or_nil): Delete, as this is now unused.
  (partial_relpath): Update the doc string.
</msg>
</logentry>
<logentry
   revision="1715354">
<author>julianfoad</author>
<date>2015-11-20T13:27:07.471852Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.h</path>
</paths>
<msg>Improve 'svnmover' conflict displays a little bit.

Report the relevant inputs (yca, src, tgt) for each element in conflict and
identify elements by their paths (as far as possible) when the UI mode is
'paths'.

Detect cycles better: only report the elements involved in a cycle, not all
elements whose parentage leads to a cycle.

* tools/dev/svnmover/merge3.c
  (partial_relpath,
   display_relpath,
   merged_element_id_str): New.
  (element_merge3_conflict_str,
   name_clash_conflict_str,
   cycle_conflict_str,
   orphan_conflict_str,
   svnmover_display_conflicts): Display nicer descriptions.
  (record_cycle): New.
  (detect_cycles): Improve.
  (branch_merge_subtree_r): Store references to the branch states.

* tools/dev/svnmover/svnmover.c
  (the_ui_mode): Move this and its enumeration constants...

* tools/dev/svnmover/svnmover.h
  (the_ui_mode): ... to here.
  (conflict_storage_t): Store references to the four (yca, src, tgt, merge)
    branch states here.
</msg>
</logentry>
<logentry
   revision="1715262">
<author>rhuijben</author>
<date>2015-11-19T20:16:52.802042Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_serf/replay.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/replay.c
  (svn_ra_serf__replay_range): Set Content-Type on report request, just like
    in svn_ra_serf__replay().
</msg>
</logentry>
<logentry
   revision="1715256">
<author>rhuijben</author>
<date>2015-11-19T19:57:14.973228Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/mod_dav_svn/version.c</path>
</paths>
<msg>* subversion/mod_dav_svn/version.c
  (get_option): Store generated header values in the request pool instead
    of the resource pool. Not that there is really a difference, but this
    is the pool that contains the headers table itself.
</msg>
</logentry>
<logentry
   revision="1715232">
<author>rhuijben</author>
<date>2015-11-19T18:19:02.617294Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/commit.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/commit.c
  (proppatch_resource): Properly set Content-Type header.
</msg>
</logentry>
<logentry
   revision="1715228">
<author>rhuijben</author>
<date>2015-11-19T18:03:11.940739Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/util.c</path>
</paths>
<msg>Add a tiny bit of code to allow testing with Apache Serf's http/2 support.

I committed this patch to celebrate that I got through basic_tests.py
using the current http/2 support.

* subversion/libsvn_ra_serf/util.c
  (conn_negotiate_protocol): New function.
  (conn_setup): Register usage of conn_negotiate_protocol when
    a very recent (read: trunk) serf + SVN__SERF_TEST_HTTP2 are used.
</msg>
</logentry>
<logentry
   revision="1715224">
<author>rhuijben</author>
<date>2015-11-19T17:50:31.154730Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/merge.c</path>
</paths>
<msg>* subversion/libsvn_ra_serf/merge.c
  (svn_ra_serf__run_merge): Properly send content type on MERGE request.
</msg>
</logentry>
<logentry
   revision="1714996">
<author>julianfoad</author>
<date>2015-11-18T14:05:18.373845Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/merge3.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.h</path>
</paths>
<msg>In 'svnmover', tweak the display of conflicts towards being slightly more
user-friendly.

* tools/dev/svnmover/svnmover.h
  (conflict_storage_t): Rename 'single-element' conflict to 'element-merge'
    conflict, which it already was called in some places. Update all users.

* tools/dev/svnmover/merge3.c
  (element_merge3_conflict_str,
   name_clash_conflict_str,
   cycle_conflict_str,
   orphan_conflict_str,
   svnmover_display_conflicts): Tweak the display of conflicts.
  (conflict_kind_t): Rename 'single-element' conflict to 'element-merge'
    conflict, which it already was called in some places. Update all users.</msg>
</logentry>
<logentry
   revision="1714993">
<author>julianfoad</author>
<date>2015-11-18T13:24:45.239969Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
</paths>
<msg>In 'svnmover', change the default to non-coloured output, as coloured
output can be annoying when not wanted whereas plain text is a 'safe'
and familiar default setting.

Suggested by: philip

* tools/dev/svnmover/svnmover.c
  (usage): Change the help text.
  (sub_main): Change the default to 'never'.
</msg>
</logentry>
<logentry
   revision="1714840">
<author>julianfoad</author>
<date>2015-11-17T18:07:11.097505Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_ra.h</path>
</paths>
<msg>* subversion/include/svn_ra.h
  (svn_ra_get_dir2): Correct a typo in the doc string.</msg>
</logentry>
<logentry
   revision="1714830">
<author>julianfoad</author>
<date>2015-11-17T16:36:52.812635Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnmover_tests.py
  (basic_svnmover): Avoid paths containing a URI-encoded space, because that
    isn't relevant to the purpose of this test, doesn't work the way it was
    originally intended, and causes confusion when it fails on a system like
    mine that has a buggy Apache version (at least I suppose that's the
    cause).</msg>
</logentry>
<logentry
   revision="1714814">
<author>julianfoad</author>
<date>2015-11-17T15:51:59.098900Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
</paths>
<msg>In 'svnmover', don't do so much work towards preparing a commit when
there are no changes to commit.

* tools/dev/svnmover/svnmover.c
  (wc_commit): Return early when there are no changes to commit.</msg>
</logentry>
<logentry
   revision="1714806">
<author>julianfoad</author>
<date>2015-11-17T15:11:24.388135Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/property.c</path>
</paths>
<msg>Work around a bug in Serf bucket handling, which could crash in some cases
within svn_ra_serf__get_dir(dirent_fields=0). Found by 'svnmover' tests.

The bug is fixed in Serf trunk r1712790, but not yet released.

Suggested by: rhuijben

* subversion/libsvn_ra_serf/property.c
  (create_propfind_body): Avoid the possibility of the first operation on the
    bucket being serf_bucket_aggregate_prepend(), by only using _append().</msg>
</logentry>
<logentry
   revision="1714790">
<author>philip</author>
<date>2015-11-17T14:20:09.663474Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/bindings/swig/ruby/test/test_wc.rb</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/Makefile.in</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/bindings/swig/ruby/test/my-assertions.rb</path>
</paths>
<msg>Adapt Ruby tests to work with test-unit gem.

Ruby 2.2 bundles the test-unit gem instead of using the older "test-unit
API provided by minitest".  This also fixes testing when the test-unit
gem happens to be installed along with older Ruby versions.

* Makefile.in:
  (check-swig-rb): Detect whether test-unit supports the --collector
   argument and, if so, use the dir collector.

* subversion/bindings/swig/ruby/test/my-assertions.rb:
  (_my_assert_block): Remove unnecessary assert_block.

* subversion/bindings/swig/ruby/test/test_wc.rb:
  (test_context_create): Remove useless assertion on result of
   Svn::Wc::Create, especially since it varies based on Ruby version.

Patch by: James McCoy &lt;jamessan{_AT_}debian.org&gt;
</msg>
</logentry>
<logentry
   revision="1714776">
<author>julianfoad</author>
<date>2015-11-17T13:20:28.910415Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/tools/dev/svnmover/ra.c</path>
</paths>
<msg>Make 'svnmover' return a friendly error message instead of failing an assertion
when no move-tracking metadata is found in the repository.

* tools/dev/svnmover/ra.c
  (branch_revision_fetch_info): Return a friendly error message when
    no move-tracking metadata is found.</msg>
</logentry>
<logentry
   revision="1714772">
<author>julianfoad</author>
<date>2015-11-17T12:31:16.953308Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
</paths>
<msg>Un-break the build. A follow-up to r1714769.

* subversion/libsvn_delta/branch_compat.c
  Remove the obsolete #include.</msg>
</logentry>
<logentry
   revision="1714769">
<author>julianfoad</author>
<date>2015-11-17T12:27:36.434846Z</date>
<paths>
<path
   action="D"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/libsvn_delta/debug_editor.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_delta_private.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/tools/dev/svnmover/svnmover.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/debug_editor.c</path>
</paths>
<msg>Move a debugging declaration to a more suitable place.

* subversion/include/private/svn_delta_private.h
  (svn_delta__get_debug_editor): Move to here from debug_editor.h.

* subversion/libsvn_delta/debug_editor.h
  Delete this file.

* subversion/libsvn_delta/debug_editor.c,
  tools/dev/svnmover/svnmover.c
  Update the #include.
</msg>
</logentry>
<logentry
   revision="1714768">
<author>julianfoad</author>
<date>2015-11-17T12:15:25.424857Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/build.conf</path>
</paths>
<msg>* build.conf
  (__ALL__): Move 'svnmover' to here...
  (__MORE__): ... from here, because then we think the Windows build will
    build it.</msg>
</logentry>
<logentry
   revision="1714741">
<author>julianfoad</author>
<date>2015-11-17T09:37:49.265798Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/build.conf</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_branch_nested.h</path>
</paths>
<msg>Fix some more build problems found by buildbots, following r1714640 and
r1714644.

* build.conf
  (svnmover): Remove the 'manpages' line, as there is no manual page.

* subversion/include/private/svn_branch_nested.h
  (svn_branch__get_eid_by_rrpath): Add more comment markers so that
    the simple regex in build/generator/extractor.py doesn't see this
    already commented-out declaration.
</msg>
</logentry>
<logentry
   revision="1714644">
<author>julianfoad</author>
<date>2015-11-16T17:59:04.701356Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_branch_nested.h</path>
</paths>
<msg>Un-break the Windows build, following r1714640.

* subversion/libsvn_wc/wc.h
  (svn_branch__get_eid_by_rrpath): Comment out this declaration, as it has no
    definition and that breaks the Windows build.</msg>
</logentry>
<logentry
   revision="1714640">
<author>julianfoad</author>
<date>2015-11-16T17:46:37.621550Z</date>
<paths>
<path
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/libsvn_delta/branch_migrate.c"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/branch_migrate.c</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="file">/subversion/trunk/notes/move-tracking/README</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/libsvn_delta/branch_repos.c"
   copyfrom-rev="1714632">/subversion/trunk/subversion/libsvn_delta/branch_repos.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svntest/main.py</path>
<path
   text-mods="false"
   kind="dir"
   copyfrom-path="/subversion/branches/move-tracking-2/tools/dev/svnmover"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false">/subversion/trunk/tools/dev/svnmover</path>
<path
   copyfrom-path="/subversion/branches/move-tracking-2/notes/move-tracking"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="dir">/subversion/trunk/notes/move-tracking</path>
<path
   action="M"
   prop-mods="true"
   text-mods="false"
   kind="dir">/subversion/trunk</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/include/private/svn_element.h"
   copyfrom-rev="1714632">/subversion/trunk/subversion/include/private/svn_element.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/configure.ac</path>
<path
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/tests/cmdline/svnmover_tests.py"
   copyfrom-rev="1714632"
   action="A">/subversion/trunk/subversion/tests/cmdline/svnmover_tests.py</path>
<path
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/include/private/svn_branch.h"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch.h</path>
<path
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/include/private/svn_branch_nested.h"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch_nested.h</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/include/private/svn_branch_compat.h"
   copyfrom-rev="1714632">/subversion/trunk/subversion/include/private/svn_branch_compat.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svntest/actions.py</path>
<path
   text-mods="false"
   kind="dir"
   action="M"
   prop-mods="true">/subversion/trunk/subversion/libsvn_fs_x</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_cmdline_private.h</path>
<path
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/include/private/svn_branch_repos.h"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file">/subversion/trunk/subversion/include/private/svn_branch_repos.h</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/libsvn_delta/element.c"
   copyfrom-rev="1714632">/subversion/trunk/subversion/libsvn_delta/element.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/LICENSE</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/cmdline/svntest/wc.py</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/libsvn_delta/branch.c"
   copyfrom-rev="1714632">/subversion/trunk/subversion/libsvn_delta/branch.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/build.conf</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cmdline.c</path>
<path
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/libsvn_delta/branch_nested.c"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false">/subversion/trunk/subversion/libsvn_delta/branch_nested.c</path>
<path
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/libsvn_delta/branch_compat.c"
   copyfrom-rev="1714632"
   action="A"
   prop-mods="false"
   text-mods="false">/subversion/trunk/subversion/libsvn_delta/branch_compat.c</path>
<path
   action="A"
   prop-mods="false"
   text-mods="false"
   kind="file"
   copyfrom-path="/subversion/branches/move-tracking-2/subversion/include/private/svn_branch_impl.h"
   copyfrom-rev="1714632">/subversion/trunk/subversion/include/private/svn_branch_impl.h</path>
</paths>
<msg>Merge the 'svnmover' prototype from the 'move-tracking-2' branch to trunk.

See the dev@ email thread "Merge 'svnmover' demo tool to trunk" started on
2015-11-10, archived at e.g. &lt;http://mail-archives.apache.org/mod_mbox/subversion-dev/201511.mbox/%3CCAEcU=1YE5Ci02j_4aAeB_roS1X0H2QWPP3juu0exjVJ-FGCLyg@mail.gmail.com%3E&gt;.

This is a reintegration (performed as an automatic merge) followed by
reverting the unwanted parts. As such, those unwanted parts (such as shim
insertions in several libraries) will be treated as 'record-only merged' and
will not be picked up by any subsequent automatic merge to trunk.

A brief description of the changes follows.

* build.conf
  Adjust to build the new files.

* configure.ac
  Adjust compiler warning flags to not warn about passing or returning a
  structure, because some of the code does so.

* LICENSE
  Add the licence text for the embedded 'linenoise' library.

* notes/move-tracking/README
  New file, describing this work.

* subversion/include/private/svn_branch.h,
  subversion/include/private/svn_branch_compat.h,
  subversion/include/private/svn_branch_impl.h,
  subversion/include/private/svn_branch_nested.h,
  subversion/include/private/svn_branch_repos.h,
  subversion/include/private/svn_element.h
  New files.

* subversion/libsvn_delta/branch.c,
  subversion/libsvn_delta/branch_compat.c,
  subversion/libsvn_delta/branch_migrate.c,
  subversion/libsvn_delta/branch_nested.c,
  subversion/libsvn_delta/branch_repos.c,
  subversion/libsvn_delta/element.c
  New files.

* subversion/include/private/svn_cmdline_private.h
  subversion/libsvn_subr/cmdline.c
  (svn_cmdline__stdin_is_a_terminal,
   svn_cmdline__stdout_is_a_terminal,
   svn_cmdline__stderr_is_a_terminal): New.

* subversion/tests/cmdline/svnmover_tests.py
  New file.

* subversion/tests/cmdline/svntest/actions.py
  (run_and_verify_svnmover,
   run_and_verify_svnmover2): New.

* subversion/tests/cmdline/svntest/main.py
  (svnmover_binary,
   run_svnmover): New.
  (execute_tests): Initialize 'svnmover_binary'.

* subversion/tests/cmdline/svntest/wc.py
  (State): Add 'rename' and 'from_eids' methods.
  (StateItem): Add an 'eid' attribute.

* tools/dev/svnmover
  New tool.
</msg>
</logentry>
<logentry
   revision="1714382">
<author>stefan2</author>
<date>2015-11-14T21:19:06.132089Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>* subversion/libsvn_subr/cache-membuffer.c
  (ensure_data_insertable_l2): Fix wording in comment. No functional change.</msg>
</logentry>
<logentry
   revision="1714380">
<author>stefan2</author>
<date>2015-11-14T21:17:40.369598Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/sorts.c</path>
</paths>
<msg>Fix svn_sort__array_delete for very large arrays.

The only way to trigger this in our current code is to have
mergeinfo with more than 1G ranges per path.

* subversion/libsvn_subr/sorts.c
  (svn_sort__array_delete): Use the right overflow check.</msg>
</logentry>
<logentry
   revision="1714372">
<author>stefan2</author>
<date>2015-11-14T21:02:37.494147Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/prefix_string.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/compress.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/skel.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/spillbuf.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/subst.c</path>
</paths>
<msg>Fix a number of potential overflow conditions on platforms where pointers
may be allocated very close to the end of address space, such as WoW64.

Instead of "if (base + x &lt; max)", we must use "if (max - base &gt; x)" to
prevent overflows under all circumstances.

There is no direct way to use these to trigger a segfault on purpose,
rather a user might experience random crashes.  Due to the block sizes
we allocate and the fact that OS and RTL reserve the very top of the
address space, it is very unlikely to ever actually encounter an overflow
with valid lengths and offsets in SVN.

* subversion/libsvn_subr/cache-membuffer.c
  (ensure_data_insertable_l2,
   ensure_data_insertable_l1, 
   membuffer_cache_set_partial_internal): Fix the overflow check as
                                          indicated above.

* subversion/libsvn_subr/compress.c
  (svn__decode_uint): Same.

* subversion/libsvn_subr/prefix_string.c
  (svn_prefix_string__create): Same.

* subversion/libsvn_subr/skel.c
  (explicit_atom): Same.

* subversion/libsvn_subr/spillbuf.c
  (svn_spillbuf__write): Same.

* subversion/libsvn_subr/subst.c
  (translate_chunk): Same.</msg>
</logentry>
<logentry
   revision="1714359">
<author>stefan2</author>
<date>2015-11-14T20:20:36.246023Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_delta/svndiff.c</path>
</paths>
<msg>* subversion/libsvn_delta/svndiff.c
  (write_handler): Code formatting fixes. No functional change.</msg>
</logentry>
<logentry
   revision="1714358">
<author>stefan2</author>
<date>2015-11-14T20:16:29.829398Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/string-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/string.c</path>
</paths>
<msg>Fix the overflow / truncating handling handling of svn_stringbuf_remove
and svn_stringbuf_replace.  The API allows for deleted region to extend
beyond the current string; APR_SIZE_MAX in particular is a valid length
for the region to remove.

Note that all calls within our code use properly limited calls to these
functions, so they never may cause overflows.  3rd party callers might
be affected, though.

* subversion/libsvn_subr/string.c
  (svn_stringbuf_remove,
   svn_stringbuf_replace): Correct the removal length limiting code.

* subversion/tests/libsvn_subr/string-test.c
  (test_stringbuf_remove,
   test_stringbuf_replace): Add test cases for the fixed conditions.</msg>
</logentry>
<logentry
   revision="1714357">
<author>stefan2</author>
<date>2015-11-14T19:55:56.577179Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>* subversion/libsvn_subr/cache-membuffer.c
  (svn_cache__create_membuffer_cache): Add a paranoia parameter check.</msg>
</logentry>
<logentry
   revision="1714356">
<author>stefan2</author>
<date>2015-11-14T19:52:23.559007Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/cache-membuffer.c</path>
</paths>
<msg>Fix capacity check in the membuffer cache's prefix pool.
The current implementation used only about 1% of its capacity.

* subversion/libsvn_subr/cache-membuffer.c
  (prefix_pool_get_internal): Actually check byte usage against bytes
                              limit - not entry count limit.</msg>
</logentry>
<logentry
   revision="1714339">
<author>stefan2</author>
<date>2015-11-14T14:42:17.806729Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>For ra-svn client requests that exceed the newly introduced limit,
usually there is only one huge string component, e.g. some large
property value, that causes the problem.  Detect them early such
that we might not even need to transfer the whole data up to the
limit before giving up. 

* subversion/libsvn_ra_svn/marshal.c
  (read_string): Exit as soon as we know we will exceed the configured
                 size limit.</msg>
</logentry>
<logentry
   revision="1714335">
<author>stefan2</author>
<date>2015-11-14T14:29:22.042521Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>* subversion/libsvn_ra_svn/marshal.c
  (read_string): Clarify a comment. No functional change.</msg>
</logentry>
<logentry
   revision="1714334">
<author>stefan2</author>
<date>2015-11-14T14:28:33.919122Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>Following up on r1714330 and r1714333, fix deprecation warnings.

* subversion/libsvn_ra_svn/client.c
  (handle_child_process_error,
   make_tunnel,
   open_session): Call the latest API version but don't set any limits
                  because the client already has cancellation support
                  if needed.</msg>
</logentry>
<logentry
   revision="1714333">
<author>stefan2</author>
<date>2015-11-14T14:24:50.255881Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/svnserve/serve.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/ra_svn.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_error_codes.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/deprecated.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_ra_svn.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnserve/server.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/svnserve.c</path>
</paths>
<msg>Following up on r1714330, implement a similar limit to svnserve responses.

If --max-response-size is specified and a response exceeds that limit,
it gets truncated and the connetion will be reset.  This allows us to limit
the server load caused by "don't do that" type of requests like exporting
the root of the repository instead of some project branch.

By default, this limit is 0, i.e. inactive.

* subversion/include/svn_error_codes.h
  (SVN_ERR_RA_SVN_RESPONSE_SIZE): New error code.

* subversion/include/svn_ra_svn.h
  (svn_ra_svn_create_conn5): Add another limit parameter.

* subversion/libsvn_ra_svn/ra_svn.h
  (svn_ra_svn_conn_st): Add fields for the new data counter and its limit.

* subversion/libsvn_ra_svn/deprecated.c
  (svn_ra_svn_create_conn4): Update.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn_create_conn5): Initialize the new struct elements.
  (svn_ra_svn__reset_command_io_counters): One more counter to reset.
  (check_io_limits): One more limit to check.
  (writebuf_output): Count outgoing data and enforce limits.

* subversion/svnserve/server.h
  (serve_params_t): Add field for the new --max-response-size option.

* subversion/svnserve/serve.c
  (serve_interruptable): Pass the new option to the bumped API.

* subversion/svnserve/svnserve.c
  (SVNSERVE_OPT_MAX_RESPONSE): Declare the new option.
  (svnserve__options): Define and document the new option.
  (sub_main): Handle the new option and pass it to the bumped API.</msg>
</logentry>
<logentry
   revision="1714330">
<author>stefan2</author>
<date>2015-11-14T14:09:18.868117Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/ra_svn.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/include/svn_error_codes.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/deprecated.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_ra_svn.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnserve/server.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnserve/svnserve.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/editorp.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/serve.c</path>
</paths>
<msg>Add the equivalent of LimitXMLRequestBody to svnserve.

The idea is simple, whenever we fill our receive buffer, we update the sum
total and compare it to some limit.  Reset the counter sum at each new
command / request coming in.

If a client request exceeds the --max-request-size parameter given to
svnserve (16MB by default, twice the httpd default), the processing gets
terminated and the connection will be closed.  The latter is necessary
because the protocol is stateful and we just skipped / ignored a potential
state transition.

As a result, the memory usage of a threaded server is now bound to approx.
(max-request-size + 4M) x max-threads even in high-load scenarios.  On the
flip side, propsets are limited to around 15M per property by default.

* subversion/include/svn_error_codes.h
  (SVN_ERR_RA_SVN_REQUEST_SIZE): New error code.

* subversion/include/svn_ra_svn.h
  (svn_ra_svn_create_conn5): Bumped API, adding the new limit parameter.
  (svn_ra_svn_create_conn4): Deprecate.

* subversion/libsvn_ra_svn/ra_svn.h
  (svn_ra_svn_conn_st): Add fields for the data counter and its limit.
  (svn_ra_svn__reset_command_io_counters): Declare a function to reset the
                                           counter - to be called before
                                           each new command.

* subversion/libsvn_ra_svn/deprecated.c
  (svn_ra_svn_create_conn4): Implement in terms of the new API.

* subversion/libsvn_ra_svn/marshal.c
  (svn_ra_svn_create_conn5): Implement like the predecessor but init the
                             new struct elements as well.
  (svn_ra_svn__reset_command_io_counters): Implement new private API.
  (check_io_limits): New function performing the actual error detection.
  (readbuf_input): Count incoming data and enforce limits.
  (svn_ra_svn__has_command): Be sure to count I/O per command.
  (svn_ra_svn__handle_command): Same. Also handle the case that we truncated
                                I/O and are now in a potentially inconsistent
                                state.

* subversion/libsvn_ra_svn/editorp.c
  (svn_ra_svn_drive_editor2): Limit the request size separately for each
                              editor command - not the whole editor drive.

* subversion/svnserve/server.h
  (serve_params_t): Add field for the new --max-request-size option.

* subversion/svnserve/serve.c
  (serve_interruptable): Pass the new option to the bumped API.

* subversion/svnserve/svnserve.c
  (MAX_REQUEST_SIZE): Define the default value for the new option.
  (SVNSERVE_OPT_MAX_REQUEST): Declare the new option.
  (svnserve__options): Define and document the new option.
  (sub_main): Handle the new option and pass it to the bumped API.</msg>
</logentry>
<logentry
   revision="1714317">
<author>stefan2</author>
<date>2015-11-14T13:23:36.075931Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnserve/serve.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_svn/client.c</path>
</paths>
<msg>Improve pool usage in svnserve and ra_svn.

All callers to the protocol parser now (indirectly) use a short-lived
scratch pool to hold the request data.

* subversion/libsvn_ra_svn/client.c
  (ra_svn_get_locations): Use an ITERPOOL as scratch within the loop.

* subversion/svnserve/serve.c
  (internal_auth_request): Same.</msg>
</logentry>
<logentry
   revision="1714316">
<author>stefan2</author>
<date>2015-11-14T13:18:12.005512Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnserve/serve.c</path>
</paths>
<msg>Some code cleanup in svnserve.

* subversion/svnserve/serve.c
  (auth): Put the return parameter in front of all others.
          Expliciyly mark the pool as a SCRATCH_POOL.
  (internal_auth_request): Update caller.</msg>
</logentry>
<logentry
   revision="1714315">
<author>stefan2</author>
<date>2015-11-14T13:10:18.671104Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_ra_svn/marshal.c</path>
</paths>
<msg>* subversion/libsvn_ra_svn/marshal.c
  (readbuf_fill): Adding some commentary. No functional change.</msg>
</logentry>
<logentry
   revision="1714314">
<author>stefan2</author>
<date>2015-11-14T13:10:05.991598Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_svn/deprecated.c</path>
</paths>
<msg>Fix a regression in svn_ra_svn_create_conn3.  1.9.x would simply
ignore the parameters added in *3 over *2.

* subversion/libsvn_ra_svn/deprecated.c
  (svn_ra_svn_create_conn3): We need to pass all parameters along.</msg>
</logentry>
<logentry
   revision="1713910">
<author>rhuijben</author>
<date>2015-11-11T18:37:20.429659Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/eagain_bucket.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_ra_serf/sb_bucket.c</path>
</paths>
<msg>When using a new enough serf, stop using our own stubs that just raise a
malfunction error.

* subversion/libsvn_ra_serf/eagain_bucket.c
  (eagain_bucket_readline,
   delay_bucket_vtable): Don't define+use with new serf.

* subversion/libsvn_ra_serf/sb_bucket.c
  (sb_bucket_readline,
   sb_bucket_vtable): Don't define+use with new serf.
</msg>
</logentry>
<logentry
   revision="1713812">
<author>julianfoad</author>
<date>2015-11-11T11:27:54.942831Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/private/svn_sorts_private.h</path>
</paths>
<msg>* subversion/include/private/svn_sorts_private.h
  (svn_sort__hash): Tweak the doc string to avoid some confusing notation.</msg>
</logentry>
<logentry
   revision="1713700">
<author>julianfoad</author>
<date>2015-11-10T17:07:55.464977Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>* subversion/tests/libsvn_fs/fs-test.c
  (compare_contents): Add a doc string with a note about incompleteness.</msg>
</logentry>
<logentry
   revision="1713132">
<author>stefan2</author>
<date>2015-11-07T14:35:30.246158Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Add a checkum to the revprop manifests in FSX and verify it upon read.
So, this check is also implict when 'svnadmin verify' accesses the revprops.

* subversion/libsvn_fs_x/revprops.c
  (write_manifest): Append a 4-byte checksum to the actual manifest.
  (read_manifest): Read and verify the checksum before processing the
                   actual manifest.
  (get_revprop_packname,
   write_packed_revprop,
   svn_fs_x__pack_revprops_shard): Update callers.  The manifest de-/
                                   serialization functions create their
                                   stream objects on demand now.</msg>
</logentry>
<logentry
   revision="1713111">
<author>stefan2</author>
<date>2015-11-07T11:47:04.263016Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_error_codes.h</path>
</paths>
<msg>Add some consistency checks to FSX' packed revprop manifest parser.

* subversion/include/svn_error_codes.h
  (SVN_ERR_FS_CORRUPT_REVPROP_MANIFEST): Define new error code.

* subversion/libsvn_fs_x/revprops.c
  (get_revprop_packname): Verify that the entries are in proper order
                          and within the shard's revision range.</msg>
</logentry>
<logentry
   revision="1713109">
<author>stefan2</author>
<date>2015-11-07T11:39:48.563144Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Significantly reduce the size of the packed revprop manifest data in FSX
by only storing a record for the first revision in each pack file.

Now, there are only as many entries in the manifest as there are pack files
and the access uses a binary search to find the one containing a specific
revision.

* subversion/libsvn_fs_x/revprops.c
  (manifest_entry_t,
   packed_revprops_t): Reflect the new usage in the docstrings.
  (compare_entry_revision,
   get_entry): Implement the binary search.
  (get_revprop_packname): Update the lookup.
  (repack_file_open): For each pack file, we only need to update or insert
                      a single manifest record.
  (write_packed_revprop): Update caller to provide the pack file start rev
                          instead of an offset range within the manifest.
  (svn_fs_x__pack_revprops_shard): Produce only one entry per pack file.</msg>
</logentry>
<logentry
   revision="1713104">
<author>stefan2</author>
<date>2015-11-07T11:13:35.391176Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Remove another redundant element from FSX' packed revprops description struct.

* subversion/libsvn_fs_x/revprops.c
  (packed_revprops_t): MANIFEST_START is the same as MANIFEST[0].START_REV.
  (get_revprop_packname, 
   repack_file_open): Determine the MANIFEST_START locally where needed.</msg>
</logentry>
<logentry
   revision="1713102">
<author>stefan2</author>
<date>2015-11-07T11:04:54.759179Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Remove a redundant variable from FSX' packed revprops description struct.

* subversion/libsvn_fs_x/revprops.c
  (packed_revprops_t): START_REVISION is the same as ENTRY.START_REV .
  (parse_packed_revprops): Check that they are actually the same.
  (repack_revprops,
   repack_file_open,
   write_packed_revprop): Use ENTRY instead of START_REVISION.</msg>
</logentry>
<logentry
   revision="1713100">
<author>stefan2</author>
<date>2015-11-07T10:50:27.972887Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Begin switching packed revprop manifests in FSX to an easier verifiable,
faster and much denser format.

In this patch, we only replace the string-based representation with one
using a proper proper record type.  The packed file name mapping does not
change.  Use our packed data stream class for efficient (de-)serialization.

* subversion/libsvn_fs_x/revprops.c
  (manifest_entry_t): Declare the new entry type, making explicit what has
                      only be implicit in the strings used previously.
  (packed_revprops_t): Replace the string members with our new entry type.
  (get_min_filename_len): No longer needed.
  (write_manifest,
   read_manifest): New de-/serialization logic for our new manifest type.
  (get_revprop_pack_filepath): New utility to make up for the removed
                               file name strings.
  (get_revprop_packname): This is now a thin wrapper around read_manifest.
  (read_pack_revprop): Update the revprop pack file path construction.
  (repack_file_open): Same. Also adapt to the new manifest entry type.
  (write_packed_revprop): Update the revprop pack file path construction
                          and use write_manifest to write the manifest.
  (svn_fs_x__packed_revprop_available): Straight-forward reimplementation
                                        using the new parser function.
  (svn_fs_x__pack_revprops_shard): Replace the local logic for writing
                                   the manifest with write_manifest.</msg>
</logentry>
<logentry
   revision="1712967">
<author>stefan2</author>
<date>2015-11-06T14:12:46.991077Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/cached_data.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/private/svn_subr_private.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/compress.c</path>
</paths>
<msg>Replace the hash-based in-repository representation of directories with one
that is tighter and easier to write as well as parse.  Moreover, it allows
for entry names to be any utf8 string.

The new format is:

  directory  := u(entry-count) entry*
  entry      := name-as-utf8 NUL u(node-type) noderev-id
  noderev-id := i(change-set) u(item-index)

  u(x) ... unsigned int x in 7b/8b encoding
  i(x) ... signed int x in 7b/8b encoding

Incremental directory representations work by appending new records and
applying them to a temporary hash when reading them.  No special separator
is needed - only the entry-count information will be ignored in that case.
Deleted entries are signified by an SVN_FS_X__INVALID_CHANGE_SET.

* subversion/include/private/svn_subr_private.h
  (svn__encode_int,
   svn__decode_int): Declare signed int wrappers for svn__encode_uint
                     and svn__decode_uint, respectively.

* subversion/libsvn_subr/compress.c
  (svn__encode_int,
   svn__decode_int): Implement them.

* subversion/libsvn_fs_x/cached_data.c
  (read_dir_entries): Remove old parser.
  (parse_dir_entries): The new parser with a slightly modified signature.
                       We now expect and consume a DATA buffer instead of
                       a STREAM and we create the result instead of just
                       populating it.
  (get_dir_contents): Update caller to provide the serialized contents,
                      allocated in the RESULT_POOL.

* subversion/libsvn_fs_x/transaction.c
  (unparse_dir_entry,
   unparse_dir_entries): Write the new, simpler format.
  (svn_fs_x__set_entry): Update the representation of deleted entries.</msg>
</logentry>
<logentry
   revision="1712962">
<author>stefan2</author>
<date>2015-11-06T13:26:20.674299Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_subr/packed_data.c</path>
</paths>
<msg>Fix a minor naming standard violation.

* subversion/libsvn_subr/packed_data.c
  (svn_packed__data_flush_buffer): Is static and gets renamed to ...
  (data_flush_buffer): ... this.
  (svn_packed__add_uint,
   write_int_stream_structure): Update callers.
</msg>
</logentry>
<logentry
   revision="1712947">
<author>stefan2</author>
<date>2015-11-06T11:44:57.479546Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>* subversion/libsvn_fs_x/transaction.c
  (get_and_increment_txn_key_body): Update commentary. No functional change.</msg>
</logentry>
<logentry
   revision="1712946">
<author>stefan2</author>
<date>2015-11-06T11:43:33.642502Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/util.h</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
</paths>
<msg>Following up on r1712944, remove some now used code.

* subversion/libsvn_fs_x/fs.h
  (PATH_TXN_NEXT): Remove.

* subversion/libsvn_fs_x/util.h
  (svn_fs_x__path_txn_next): Remove.

* subversion/libsvn_fs_x/util.c
  (svn_fs_x__path_txn_next): Remove.</msg>
</logentry>
<logentry
   revision="1712944">
<author>stefan2</author>
<date>2015-11-06T11:41:19.857381Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/caching.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/recovery.c</path>
</paths>
<msg>No longer guarantee eternally unique transaction IDs in FSX.

After the latest changes, we only need them to be unique among the running
transactions.  We still increment them as before but allow for resetting
the counter upon system failure etc.  This eliminates the need to fsync
txn-current and the txn-ID pre-allocation optimization.

Caveat:  We must make sure that a reused transaction ID does not result
in cache key collisions.  The are tree scenarios in which an txn ID might
be reused.  First, after a system crash leaving txn-current empty or
with random contents.  This is not a problem as the caching server process
will have died, too.

Second, the storage system (NAS) might have failed.  In that case, the
server process must be restarted as well because any transient data may
have been lost leading to inconsistent state between the storage and the
server process.  This implictly resolves the txn ID caching situation.

Third, a user might run 'svnadmin recover' or directly call the respective
FS API function while the server processes remain up.  For that case, we
make the instance ID - which gets bumped upon recover - part of the cache
key.

* subversion/libsvn_fs_x/transaction.c
  (get_and_txn_key,
   bump_txn_key): Simplify and merge into ...
  (get_and_increment_txn_key_body): ... this one.  Add ability to detect
                                    and recover from txn ID collisions.
  (create_txn_dir): Simplify as there is no pre-allocation anymore and the
                    txn dir is already being created as part of txn ID
                    collision handling code.
  (bump_ids): Remove the txn-current handling here as it is now self-
              contained in create_txn_dir - without fsync calls.

* subversion/libsvn_fs_x/recovery.c
  (reset_txn_number): New utility.
  (recover_body): Always reset txn-current.

* subversion/libsvn_fs_x/caching.c
  (svn_fs_x__initialize_caches): Guarantee disjoint cache keys after e.g.
                                 'svnadmin recover' reset the txn-current.

* subversion/libsvn_fs_x/fs.h
  (svn_fs_x__data_t): Txn ID pre-allocation is no longer needed.</msg>
</logentry>
<logentry
   revision="1712937">
<author>stefan2</author>
<date>2015-11-06T11:01:00.688005Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/recovery.c</path>
</paths>
<msg>In FSX, make 'svnadmin recover' discard all transactions - or any remnants
thereof.

Transactions are fragile wrt. to any scenario that would require a recovery
and dead txns tend to accumulate over time.  So, let's get rid of them
before somebody uses the FS API to reopen them and ends up with incomplete
or otherwise corrupted data.

This can be backported to FSFS.

* subversion/libsvn_fs_x/recovery.c
  (clear_directory,
   discard_transactions): New utilities implementing the txn cleanup.
  (recover_body): Invoke the new cleanup step.</msg>
</logentry>
<logentry
   revision="1712935">
<author>stefan2</author>
<date>2015-11-06T10:51:36.032301Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>In FSX, make sure that the noderev-ids stored in a revision's change paths
list aren't the in-txn ids but the actual ones from the final revision.
Reset the noderev-ids for deleted nodes.

This fixes a long-standing FS API issue where the svn_fs_id_t reported in
svn_fs_path_change_t was invalid outside a transaction.  It also eliminates
the last transaction reference from committed data, i.e. transaction IDs
no longer need to be globally unique but only between the tranactions
currently in existence.

A backport to FSFS should be straightforward.

* subversion/libsvn_fs_x/transaction.c
  (write_final_rev): Update the CHANGED_PATHS as we go.
  (sanitize_changed_path_info): New utility function for all paths that are
                                no longer available in the new revision.
  (commit_body): Update caller.</msg>
</logentry>
<logentry
   revision="1712933">
<author>stefan2</author>
<date>2015-11-06T10:39:44.545501Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>* subversion/libsvn_fs_x/transaction.c
  (write_final_rev): Minor simplification; just comparing change sets
                     covers all the txn / rev / invalid cases.</msg>
</logentry>
<logentry
   revision="1712927">
<author>stefan2</author>
<date>2015-11-06T09:41:59.029905Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_fs/fs_fs.c</path>
</paths>
<msg>[Reverted in 1717864]

The svn_fs_contents_different implementation is broken in 1.9.x under the
circumstances described in issue #4554.  Trunk works because there we
correct expanded-size values when reading them from disk.

This patch removes the special case code that triggers the problem in 1.9.x
so we can backport it directly as a fix.  On trunk, it results in a minor
simplification with virtually zero impact on performance.

The problem is FSFS-specific, meaning BDB and FSX don't need to be fixed.

Found by: kotkov

* subversion/libsvn_fs_fs/fs_fs.c
  (svn_fs_fs__file_text_rep_equal): Remove the rather pointless length==0
                                    special case. They are rare and will
                                    compare just fine like any other contents.</msg>
</logentry>
<logentry
   revision="1712828">
<author>julianfoad</author>
<date>2015-11-05T17:31:05.205941Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>Tweak a comment about reuse of transaction names, following r1712600.

Suggested by: rhuijben

* subversion/include/svn_fs.h
  Tweak top-of-file comment: s/reuse/may reuse/.</msg>
</logentry>
<logentry
   revision="1712600">
<author>julianfoad</author>
<date>2015-11-04T17:57:50.768634Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>* subversion/include/svn_fs.h
  (svn_fs_txns group): Remove an obsolete comment about transaction names.
    It described a naming scheme introduced in r865504 and removed in r865943.

(Committed previously as ^/subversion/branches/move-tracking-2@1607290, but
unrelated to that branch.)
</msg>
</logentry>
<logentry
   revision="1712223">
<author>ivan</author>
<date>2015-11-03T08:12:36.021056Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
</paths>
<msg>Do not insert newlines in base64 encoded responses in mod_dav_svn. This is
slightly reduce CPU usage on the client since it could decode responses with
bigger chunks instead line-by-line.

* subversion/mod_dav_svn/util.c
  (dav_svn__make_base64_output_stream): Call svn_base64_encode2() with
   BREAK_LINES=FALSE.
</msg>
</logentry>
<logentry
   revision="1711956">
<author>philip</author>
<date>2015-11-02T13:11:40.933921Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnadmin_tests.py
  (dump_no_op_changes, dump_no_op_prop_change): Guard against no-op
   change being elided on commit to avoid false positive PASS.
</msg>
</logentry>
<logentry
   revision="1711948">
<author>philip</author>
<date>2015-11-02T12:44:42.005989Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnadmin_tests.py
  (dump_no_op_prop_change): Change propdel to propset, still XFAIL.
</msg>
</logentry>
<logentry
   revision="1711947">
<author>philip</author>
<date>2015-11-02T12:41:07.448138Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/cmdline/svnadmin_tests.py</path>
</paths>
<msg>* subversion/tests/cmdline/svnadmin_tests.py
  (dump_no_op_prop_change): New, marked XFAIL.
  (test_list): Add new test.
</msg>
</logentry>
<logentry
   revision="1711672">
<author>ivan</author>
<date>2015-10-31T19:08:59.416596Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
</paths>
<msg>Use more specific error code in FSFS implementation of svn_fs_contents_changed()
and svn_fs_contents_different().

Suggested by: rhuijben

* subversion/libsvn_fs_fs/tree.c
  (fs_contents_changed): Use SVN_ERR_FS_NOT_FILE instead of SVN_ERR_FS_GENERAL
   error code if one of provided path is not a file.
</msg>
</logentry>
<logentry
   revision="1711666">
<author>ivan</author>
<date>2015-10-31T18:53:45.502646Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
</paths>
<msg>Optimize 'svn blame' a bit. 

* subversion/libsvn_repos/rev_hunt.c
  (send_path_revision): Use svn_fs_props_changed() to find whether properties
   may have changed and retrieving new properties worth the effort. Otherwise
   just use LAST_PROPS.
</msg>
</logentry>
<logentry
   revision="1711582">
<author>ivan</author>
<date>2015-10-31T09:31:46.032353Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_fs/fs-test.c</path>
</paths>
<msg>Avoid double DAG lookup in FSFS implementation of svn_fs_contents_changed()
and svn_fs_contents_different().

It also slightly changes error message when these invoked functions invoked
for non-existent path: before this change error message was "'/non-existent'
is not a file" now it will be "File not found: revision 1, path
'/non-existent'"

* subversion/libsvn_fs_fs/tree.c
  (fs_contents_changed): Use svn_fs_fs__dag_node_kind() to get node kind of
   already obtained dag_node_t instead of calling to svn_fs_fs__check_path(). 

* subversion/tests/libsvn_fs/fs-test.c
  (compare_contents): Extend test to test behavior of
   svn_fs_contents_changed() and svn_fs_contents_different() with directories
   and non-existent paths.
</msg>
</logentry>
<logentry
   revision="1711517">
<author>ivan</author>
<date>2015-10-30T17:21:14.861424Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/base64.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/mod_dav_svn/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_base64.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/tests/libsvn_subr/stream-test.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/libsvn_delta/svndiff-test.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_subr/deprecated.c</path>
</paths>
<msg>Implement svn_base64_encode2() with BREAK_LINES flag to control whether
insert newlines periodically or not. The old svn_base64_encode() was
inserting newlines unconditionally.

* subversion/include/svn_base64.h
  (svn_base64_encode2): New function declaration.
  (svn_base64_encode): Deprecate.  

* subversion/libsvn_subr/base64.c
  (encode_baton): Add BREAK_LINES field.
  (encode_data, finish_encoding_data): Use EB-&gt;BREAK_LINES flag.
  (svn_base64_encode2): Revv from svn_base64_encode(). Add BREAK_LINES.
   argument and save it in ENCODE_BATON.

* subversion/libsvn_subr/deprecated.c
  (svn_base64_encode): Call svn_base64_encode2() with BREAK_LINES=TRUE.

* subversion/mod_dav_svn/util.c
  (dav_svn__make_base64_output_stream): Use svn_base64_encode2() with
   BREAK_LINES=TRUE.

* subversion/tests/libsvn_delta/svndiff-test.c
  (main): Use svn_base64_encode2() with BREAK_LINES=TRUE.

* subversion/tests/libsvn_subr/stream-test.c
  (test_stream_base64, test_stream_base64_2): Test svn_base64_encode2() with
   BREAK_LINES=TRUE and BREAK_LINES=FALSE.
</msg>
</logentry>
<logentry
   revision="1711510">
<author>kotkov</author>
<date>2015-10-30T17:13:34.600078Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>* subversion/include/svn_fs.h
  (svn_fs_props_different, svn_fs_props_changed,
   svn_fs_contents_different, svn_fs_contents_changed): Describe why do we
   require all of these functions in @note statements and cross-link them.
   No functional changes.
</msg>
</logentry>
<logentry
   revision="1711507">
<author>kotkov</author>
<date>2015-10-30T16:58:45.186127Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_repos.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/reporter.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_fs/dag.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_fs/tree.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/delta.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_repos/rev_hunt.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_ra.h</path>
</paths>
<msg>Following up on r1709388, undo the behavior change of the calling sites of
svn_fs_contents_different() and svn_fs_props_different() that is not required
nor justified in the context of fixing issue #4598, "No-op changes no longer
dumped by 'svnadmin dump' in 1.9".

This commit also restores the hack required for blame -g for old clients
(see r1686478, r1686888) in rev_hunt.c:send_path_revision().  Perhaps there
is a better replacement for it, since we now have the original behavior of
svn_fs_contents_changed() available, but this can be handled separately.

* subversion/libsvn_fs_fs/dag.c
  (svn_fs_fs__dag_things_different): Tweak the related comment within this
   function.

* subversion/libsvn_fs_fs/tree.c
  (merge): Compare the property lists based on their contents.

* subversion/libsvn_repos/delta.c
  (delta_proplists): Use svn_fs_props_different() when comparing property
   lists.
  (svn_repos__compare_files): Call svn_fs_contents_different() instead of
   reimplementing the content comparison in this function.
  (delta_files): Call svn_fs_contents_different(), as we were doing prior
   to r1709388.

* subversion/libsvn_repos/reporter.c
  (delta_proplists): Use svn_fs_props_different() when comparing property
   lists.

* subversion/libsvn_repos/rev_hunt.c
  (send_path_revision): Call svn_fs_contents_different().  Restore the
   blame -g compatibility hack.

* subversion/include/svn_ra.h
  (svn_ra_get_file_revs2): Restore the original @note in the docstring.

* subversion/include/svn_repos.h
  (svn_repos_get_file_revs2): Restore the original @note in the docstring.
</msg>
</logentry>
<logentry
   revision="1711443">
<author>stefan2</author>
<date>2015-10-30T10:39:54.514107Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
</paths>
<msg>Re-enable proper fsync'ing in FSX for renames on non-POSIX platforms.

* subversion/libsvn_fs_x/util.c
  (svn_fs_x__move_into_place): Use the batching infrastructure on POSIX only.</msg>
</logentry>
<logentry
   revision="1711438">
<author>stefan2</author>
<date>2015-10-30T09:45:57.047128Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
</paths>
<msg>Pool usage cleanup in FSX' write_revision_zero.

* subversion/libsvn_fs_x/fs_x.c
  (write_revision_zero): Get rid of the SUBPOOL and never use the
                         FS-&gt;POOL for temporaries.</msg>
</logentry>
<logentry
   revision="1711437">
<author>stefan2</author>
<date>2015-10-30T09:34:31.857102Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
</paths>
<msg>Eliminate the last fsync call from FSX' repository creation sequence.

* subversion/libsvn_fs_x/fs_x.c
  (write_revision_zero): Write the revprops directly without the whole
                         'changing revprops' overhead.
</msg>
</logentry>
<logentry
   revision="1711393">
<author>stefan2</author>
<date>2015-10-30T00:28:49.247480Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/util.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
</paths>
<msg>Code cleanup in FSX.

* subversion/libsvn_fs_x/util.h
  (svn_fs_x__move_into_place2): Rename to ...
  (svn_fs_x__move_into_place): ... this.

* subversion/libsvn_fs_x/util.c
  (svn_fs_x__move_into_place2): Rename to ...
  (svn_fs_x__move_into_place): ... this.

* subversion/libsvn_fs_x/revprops.c
  (switch_to_new_revprop): Update caller.

* subversion/libsvn_fs_x/transaction.c
  (bump_txn_key,
   bump_ids): Same.</msg>
</logentry>
<logentry
   revision="1711391">
<author>stefan2</author>
<date>2015-10-30T00:20:55.357437Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.h</path>
</paths>
<msg>Get rid of svn_fs_x__move_into_place.

* subversion/libsvn_fs_x/util.h
  (svn_fs_x__move_into_place): Remove.
  (svn_fs_x__move_into_place2): Update commentary since we can't refer to
                                the previous function anymore.

* subversion/libsvn_fs_x/util.c
  (svn_fs_x__write_current): Because NAME and TMP_NAME are within the same
                             folder, we can trivially inline the necessary
                             code from svn_fs_x__move_into_place.</msg>
</logentry>
<logentry
   revision="1711390">
<author>stefan2</author>
<date>2015-10-30T00:20:41.087949Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
</paths>
<msg>Eliminate yet another fsync call from the FSX repository creation sequence.

* subversion/libsvn_fs_x/fs_x.c
  (svn_fs_x__create_file_tree): Create the rather trivial 'current' file
                                just like we create the 'min-unpacked-rev'
                                file. </msg>
</logentry>
<logentry
   revision="1711389">
<author>stefan2</author>
<date>2015-10-29T23:59:10.685143Z</date>
<paths>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Eliminate a large portion of the fsyncs when modifying revprops in FSX.

* subversion/libsvn_fs_x/revprops.c
  (write_revprop_generation_file): A revprop generation file change does
                                   not need to survive a system crash
                                   because it only coordinates between
                                   running processes.</msg>
</logentry>
<logentry
   revision="1711388">
<author>stefan2</author>
<date>2015-10-29T23:58:55.419769Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/recovery.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs_x.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs_x/fs_x.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/hotcopy.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/fs.c</path>
</paths>
<msg>Reduce the cost of creating a new repository in FSX.

Similar to svn_fs_x__write_format, don't fsync when writing the initial
uuid file.

* subversion/libsvn_fs_x/fs_x.h
  (svn_fs_x__set_uuid): Add OVERWRITE parameter.

* subversion/libsvn_fs_x/fs_x.c
  (svn_fs_x__create_file_tree): Update caller - request a fresh uuid file.
  (svn_fs_x__set_uuid): Perform the expensive atomic replacement dance
                        only if the file already exists and may be read
                        by others.

* subversion/libsvn_fs_x/fs.c
  (x_set_uuid): Update caller - modifying the existing file.

* subversion/libsvn_fs_x/hotcopy.c
  (svn_fs_x__hotcopy): Same.

* subversion/libsvn_fs_x/recovery.c
  (recover_body): Same.</msg>
</logentry>
<logentry
   revision="1711384">
<author>stefan2</author>
<date>2015-10-29T23:34:13.187151Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.h</path>
</paths>
<msg>Speed up FSX pack by using a common fsync batch for rev props and rev data.

* subversion/libsvn_fs_x/revprops.h
  (svn_fs_x__pack_revprops_shard): Make the BATCH an argument.

* subversion/libsvn_fs_x/revprops.c
  (svn_fs_x__pack_revprops_shard): No longer create &amp; run the BATCH locally.

* subversion/libsvn_fs_x/pack.c
  (pack_log_addressed): Ditto.
  (pack_rev_shard): Take a BATCH and pass it through.  Also, ensure the
                    directory addition gets sync'ed properly.
  (pack_shard): Create the fsync batch locally, let the pack steps fill it
                and run it here. </msg>
</logentry>
<logentry
   revision="1711379">
<author>stefan2</author>
<date>2015-10-29T23:14:19.680566Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
</paths>
<msg>In FSX, make revision data packing code use the batch fsync infrastructure.

* subversion/libsvn_fs_x/pack.c
  (initialize_pack_context): Implicitly schedule an fsync through the BATCH.
  (close_pack_context): No need for the explicit fsync here anymore.
  (pack_log_addressed): Create the fsync batch locally and run it here.</msg>
</logentry>
<logentry
   revision="1711377">
<author>stefan2</author>
<date>2015-10-29T23:04:10.950553Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/batch_fsync.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/tests/libsvn_fs_x/fs-x-pack-test.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Make the batch fsync object in FSX easier to use:
When we create a new file through svn_fs_x__batch_fsync_open_file,
implicitly call svn_fs_x__batch_fsync_new_path if necessary.

* subversion/libsvn_fs_x/batch_fsync.c
  (internal_open_file): Test whether a new file will be created and
                        schedule any necessary additional fsyncs.

* subversion/libsvn_fs_x/revprops.c
  (svn_fs_x__pack_revprops_shard): Remove redundant call.

* subversion/libsvn_fs_x/transaction.c
  (write_final_revprop,
   write_next_file): Same.

* subversion/tests/libsvn_fs_x/fs-x-pack-test.c
  (test_batch_fsync): Same.</msg>
</logentry>
<logentry
   revision="1711374">
<author>stefan2</author>
<date>2015-10-29T22:30:08.166343Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/batch_fsync.c</path>
</paths>
<msg>Eliminate most of the overhead introduced by batch fsync'ing in FSX when
we actually only fsync a single file. 

* subversion/libsvn_fs_x/batch_fsync.c
  (svn_fs_x__batch_fsync_run): Fall back to ordinary foreground processing
                               when there is nothing to parallelize.</msg>
</logentry>
<logentry
   revision="1711373">
<author>stefan2</author>
<date>2015-10-29T22:11:16.449074Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/pack.c</path>
</paths>
<msg>Minor code cleanup eliminating redundant code in FSX.

* subversion/libsvn_fs_x/pack.c
  (pack_shard): Rev data and rev props use the same folders.</msg>
</logentry>
<logentry
   revision="1711372">
<author>stefan2</author>
<date>2015-10-29T22:11:04.380745Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>Use the batch fsync mechanism in FSX during revprop packing.

* subversion/libsvn_fs_x/revprops.c
  (copy_revprops): Implicitly schedule the fsync through the BATCH.
  (svn_fs_x__pack_revprops_shard): Create the fsync batch locally and fsync
                                   the manifest + pack files in one go.</msg>
</logentry>
<logentry
   revision="1711369">
<author>stefan2</author>
<date>2015-10-29T21:46:59.272755Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs_x/revprops.c</path>
</paths>
<msg>In FSX, make revprop modifications use the batch fsync infrastructure.

This does not make a difference in most cases but is part of the fsync
handling unification effort.  We also use well-defined file names for
the temp files involved as they guarantee volume-local renames and are
easier to use with svn_fs_x__batch_fsync_open_file.  They are safe
because we know that we have exclusive write access to the repo.

* subversion/libsvn_fs_x/revprops.c
  (write_non_packed_revprop): Implicitly schedule an fsync through the
                              provided BATCH and append ".tmp" to form
                              temp file names.
  (switch_to_new_revprop): Implement the fsync-rename-fsync cycle based
                           on an fsync BATCH now.
  (repack_revprops): All revprop files are fsync'ed implicitly through
                     some batch now.
  (repack_file_open): Implicitly schedule an fsync through the BATCH.
  (write_packed_revprop): Same. Pass BATCH into sub-routines.
  (svn_fs_x__set_revision_proplist): Create the fsync batch locally.</msg>
</logentry>
<logentry
   revision="1711354">
<author>stefan2</author>
<date>2015-10-29T20:09:52.571929Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs_x/util.h</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/transaction.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_fs_x/util.c</path>
</paths>
<msg>In FSX, provide a move-into-place function that supports fsync batching.

Note that svn_fs_x__move_into_place2 does not do The Right Thing on Win32
atm but that is no different from the previous state.  This will be
addressed soon.

* subversion/libsvn_fs_x/util.h
  (svn_fs_x__move_into_place2): Declare new internal API.

* subversion/libsvn_fs_x/util.c
  (svn_fs_x__move_into_place2): Implement it.

* subversion/libsvn_fs_x/transaction.c
  (bump_txn_key,
   bump_ids): Call the new batch-enabled move-into-place function.
</msg>
</logentry>
<logentry
   revision="1711346">
<author>rhuijben</author>
<date>2015-10-29T19:40:01.597027Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/svnlook/svnlook.c</path>
</paths>
<msg>Simplify temporary file handling in svnlook a bit by using 'modern' standard
functions instead of the +- 2003 style manual removing of tempfiles.

This fixes some problems with files that are left behind when the diff somehow
stops midway (E.g. broken pipe)

* subversion/svnlook/svnlook.c
  (prepare_tmpfiles): Switch to result_pool, scratch_pool pattern. Remove
    unneeded tmpdir argument. Pass svn_io_file_del_on_pool_cleanup to the
    tempfile creation functions.
  (print_diff_tree): Remove tmpfile argument. Switch to proper iterpool.
  (do_diff): Update caller.

Found by: markphip
</msg>
</logentry>
<logentry
   revision="1711250">
<author>kotkov</author>
<date>2015-10-29T13:39:56.379780Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/include/svn_fs.h</path>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/notes/api-errata/1.9/fs001.txt</path>
</paths>
<msg>Following up on r1709388, update the necessary documentation and the
API errata.

* notes/api-errata/1.9/fs001.txt
  (): Add a note about the scope of this erratum.  Provide references to the
   issue tracker and to relevant discussions in the mailing list.

* subversion/include/svn_fs.h
  (svn_fs_props_changed, svn_fs_contents_different, svn_fs_contents_changed):
   Update the docstrings for these functions.  Link the documentation for
   svn_fs_props_changed() to svn_fs_contents_changed() and state the design
   rationale for the latter.  Mention issue 4598 in the docstrings.
</msg>
</logentry>
<logentry
   revision="1710837">
<author>rhuijben</author>
<date>2015-10-27T15:19:38.964793Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/win-tests.py</path>
</paths>
<msg>Following up on r1710707 and r1709585 extend the httpd configuration file
a tiny bit.

* win-tests.py
  (Httpd): Disable ssl2 and ssl3. Explicitly enable h2direct for http/2.
</msg>
</logentry>
<logentry
   revision="1710749">
<author>ivan</author>
<date>2015-10-27T08:59:50.799039Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/deprecated.c</path>
<path
   kind="file"
   action="M"
   prop-mods="false"
   text-mods="true">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
</paths>
<msg>Move deprecated libsvn_fs functions to deprecated.c.

Suggested by: rhuijben

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_create, svn_fs_open, svn_fs_node_history, svn_fs_get_mergeinfo,
   svn_fs_history_prev): Move from here...
* subversion/libsvn_fs/deprecated.c:
  (svn_fs_create, svn_fs_open, svn_fs_node_history, svn_fs_get_mergeinfo,
   svn_fs_history_prev): ...to here.
</msg>
</logentry>
<logentry
   revision="1710747">
<author>ivan</author>
<date>2015-10-27T08:51:09.916522Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
</paths>
<msg>Use standard pattern for implementing deprecated functions.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_node_history): Implement via svn_fs_node_history2() instead of
   calling vtable member directly.
  (svn_fs_get_mergeinfo): Implement via svn_fs_get_mergeinfo2() instead of
   calling vtable member directly.
  (svn_fs_history_prev): Implement via svn_fs_history_prev2() instead of
   calling vtable member directly.
</msg>
</logentry>
<logentry
   revision="1710707">
<author>rhuijben</author>
<date>2015-10-26T21:54:48.512419Z</date>
<paths>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/win-tests.py</path>
</paths>
<msg>Allow setting up Apache Httpd with http/2 enabled when running our testsuite
on Windows.

* win-tests.py
  (): Document --https and --http2. Parse --http2.
  (Httpd):Write values in config file when requested.
  (): Update caller.
</msg>
</logentry>
<logentry
   revision="1710638">
<author>ivan</author>
<date>2015-10-26T15:59:53.554177Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/null-list-cmd.c</path>
</paths>
<msg>Port r1673153 to svnbench from svn: request only required directory fields in 
'svnbench null-list' to have the same performance as 'svn ls'.

* subversion/svnbench/null-list-cmd.c
  (print_dirent_fields, print_dirent_fields_verbose): New constant variables.
  (svn_cl__null_list): Only request the required fields.
</msg>
</logentry>
<logentry
   revision="1710634">
<author>ivan</author>
<date>2015-10-26T15:48:50.958406Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/update.c</path>
</paths>
<msg>ra_serf: Remove unneeded 'q=0.9' from Accept-Encoding request header value if
there is only one accept encoding.

Suggested by: rhuijben

* subversion/libsvn_ra_serf/update.c
  (headers_fetch, setup_update_report_headers): Just use 'svndiff' as
   Accept-Encoding request header value if compression is disabled.
</msg>
</logentry>
<logentry
   revision="1710631">
<author>ivan</author>
<date>2015-10-26T15:37:49.592346Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_repos/repos.c</path>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/tests/svn_test_fs.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/libsvn_fs/fs-loader.c</path>
<path
   text-mods="true"
   kind="file"
   action="M"
   prop-mods="false">/subversion/trunk/subversion/include/svn_fs.h</path>
</paths>
<msg>Switch svn_fs_create() to result/scratch pool paradigm.

* subversion/include/svn_fs.h
  (svn_fs_create2): Revv svn_fs_create() with SCRATCH_POOL argument.
  (svn_fs_create): Deprecate.

* subversion/libsvn_fs/fs-loader.c
  (svn_fs_create2): Revv. Use SCRATCH_POOL for temporary allocations instead
   of creating new subpool.
  (svn_fs_create): Implement deprecated function.

* subversion/libsvn_repos/repos.c
  (svn_repos_create): Use svn_fs_create2().

* subversion/tests/svn_test_fs.c
  (create_fs): Use svn_fs_create2().
</msg>
</logentry>
<logentry
   revision="1710613">
<author>ivan</author>
<date>2015-10-26T15:08:05.540711Z</date>
<paths>
<path
   prop-mods="false"
   text-mods="true"
   kind="file"
   action="M">/subversion/trunk/subversion/libsvn_ra_serf/update.c</path>
</paths>
<msg>ra_serf: Do not advertise svndiff1 support if user explicitly disabled HTTP
compression via 'http-compression=off' configuration option. The only
difference between svndiff1 and svndiff0 that svndiff1 supports compression.

* subversion/libsvn_ra_serf/update.c
  (headers_fetch, setup_update_report_headers): Do not add 'svndiff1' to
   Accept-Encoding request header if we're not using compression.
</msg>
</logentry>
<logentry
   revision="1710586">
<author>ivan</author>
<date>2015-10-26T12:43:12.661325Z</date>
<paths>
<path
   action="M"
   prop-mods="false"
   text-mods="true"
   kind="file">/subversion/trunk/subversion/svnbench/svnbench.c</path>
</paths>
<msg>Show how many bytes transferred over network in svnbench's non-quiet output.

* subversion/svnbench/svnbench.c
  (): Include private/svn_string_private.h.
  (ra_progress_baton_t, ra_progress_func): New.
  (sub_main): Setup RA progress callback if not in quiet mode. Print
   information how many bytes transferred over network if RA layer provided
   this information.
</msg>
</logentry></log>
